(self.webpackChunkthingsboard = self.webpackChunkthingsboard || []).push([
  [179],
  {
    98255: (ee) => {
      function R(t) {
        return Promise.resolve().then(() => {
          var e = new Error("Cannot find module '" + t + "'");
          throw ((e.code = "MODULE_NOT_FOUND"), e);
        });
      }
      (R.keys = () => []), (R.resolve = R), (R.id = 98255), (ee.exports = R);
    },
    54283: (ee, R, t) => {
      "use strict";
      var e, i;
      t.d(R, {
        sS: () => e,
        fR: () => n,
        a2: () => a,
        Mv: () => C,
        bW: () => s,
        r2: () => d,
        mQ: () => o,
      }),
        ((i = e || (e = {})).AUTHENTICATED = "[Auth] Authenticated"),
        (i.UNAUTHENTICATED = "[Auth] Unauthenticated"),
        (i.LOAD_USER = "[Auth] Load User"),
        (i.UPDATE_USER_DETAILS = "[Auth] Update User Details"),
        (i.UPDATE_LAST_PUBLIC_DASHBOARD_ID =
          "[Auth] Update Last Public Dashboard Id"),
        (i.UPDATE_HAS_REPOSITORY = "[Auth] Change Has Repository");
      class n {
        constructor(g) {
          (this.payload = g), (this.type = e.AUTHENTICATED);
        }
      }
      class a {
        constructor() {
          this.type = e.UNAUTHENTICATED;
        }
      }
      class C {
        constructor(g) {
          (this.payload = g), (this.type = e.LOAD_USER);
        }
      }
      class s {
        constructor(g) {
          (this.payload = g), (this.type = e.UPDATE_USER_DETAILS);
        }
      }
      class d {
        constructor(g) {
          (this.payload = g), (this.type = e.UPDATE_LAST_PUBLIC_DASHBOARD_ID);
        }
      }
      class o {
        constructor(g) {
          (this.payload = g), (this.type = e.UPDATE_HAS_REPOSITORY);
        }
      }
    },
    13131: (ee, R, t) => {
      "use strict";
      t.d(R, { E: () => a, d: () => C });
      var e = t(54283);
      const n = {
          authUser: null,
          userDetails: null,
          userTokenAccessEnabled: !1,
          forceFullscreen: !1,
          allowedDashboardIds: [],
          edgesSupportEnabled: !1,
          hasRepository: !1,
          tbelEnabled: !1,
        },
        a = Object.assign(
          {
            isAuthenticated: !1,
            isUserLoaded: !1,
            lastPublicDashboardId: null,
          },
          n
        );
      function C(s = a, d) {
        switch (d.type) {
          case e.sS.AUTHENTICATED:
            return Object.assign(
              Object.assign(Object.assign({}, s), { isAuthenticated: !0 }),
              d.payload
            );
          case e.sS.UNAUTHENTICATED:
            return Object.assign(
              Object.assign(Object.assign({}, s), { isAuthenticated: !1 }),
              n
            );
          case e.sS.LOAD_USER:
            return Object.assign(
              Object.assign(Object.assign(Object.assign({}, s), d.payload), {
                isAuthenticated: !!d.payload.isUserLoaded && s.isAuthenticated,
              }),
              d.payload.isUserLoaded ? {} : n
            );
          case e.sS.UPDATE_USER_DETAILS:
          case e.sS.UPDATE_LAST_PUBLIC_DASHBOARD_ID:
          case e.sS.UPDATE_HAS_REPOSITORY:
            return Object.assign(Object.assign({}, s), d.payload);
          default:
            return s;
        }
      }
    },
    54787: (ee, R, t) => {
      "use strict";
      t.d(R, {
        _9: () => a,
        Hz: () => C,
        vN: () => s,
        To: () => d,
        rk: () => o,
        uy: () => i,
        g7: () => g,
        yu: () => D,
        Cv: () => y,
        dE: () => m,
        fP: () => r,
      });
      var e = t(86710),
        n = t(15257);
      const a = (0, e.createFeatureSelector)("auth"),
        C = (0, e.createSelector)(a, (h) => h),
        s = (0, e.createSelector)(a, (h) => h.isAuthenticated),
        d = (0, e.createSelector)(a, (h) => h.isUserLoaded),
        o = (0, e.createSelector)(a, (h) => h.authUser),
        i = (0, e.createSelector)(a, (h) => h.userDetails),
        g = (0, e.createSelector)(a, (h) => h.userTokenAccessEnabled),
        D = (0, e.createSelector)(a, (h) => h.hasRepository),
        y = (0, e.createSelector)(a, (h) => h.tbelEnabled);
      function m(h) {
        let p;
        return (
          h.pipe((0, e.select)(C), (0, n.q)(1)).subscribe((_) => (p = _)), p
        );
      }
      function r(h) {
        let p;
        return (
          h.pipe((0, e.select)(o), (0, n.q)(1)).subscribe((_) => (p = _)), p
        );
      }
    },
    88951: (ee, R, t) => {
      "use strict";
      t.d(R, { e: () => k });
      var e = t(37716),
        n = t(6686),
        a = t(25917),
        C = t(40205),
        s = t(88229),
        d = t(35758),
        o = t(68307),
        i = t(5304),
        g = t(19773),
        D = t(88002),
        y = t(66054),
        m = t(53372),
        r = t(54283),
        h = t(54787),
        p = t(26311),
        _ = t(40005),
        E = t(72491),
        c = t(1361),
        v = t(50377),
        I = t(39774),
        l = t(28255),
        T = t(65264),
        O = t(87602),
        w = t(47445),
        b = t(41960),
        S = t(86710),
        u = t(91841),
        f = t(39895),
        M = t(29790),
        L = t(22238);
      class k {
        constructor(B, j, F, V, P, A, U, G, Z, le, X, se) {
          (this.store = B),
            (this.http = j),
            (this.userService = F),
            (this.timeService = V),
            (this.router = P),
            (this.route = A),
            (this.zone = U),
            (this.utils = G),
            (this.dashboardService = Z),
            (this.adminService = le),
            (this.translate = X),
            (this.dialog = se),
            (this.oauth2Clients = null),
            (this.twoFactorAuthProviders = null),
            (this.refreshTokenSubject = null),
            (this.jwtHelper = new n.N0());
        }
        static _storeGet(B) {
          return localStorage.getItem(B);
        }
        static isTokenValid(B) {
          const j = k._storeGet(B + "_expiration");
          return j && Number(j) > new Date().valueOf() + 2e3;
        }
        static isJwtTokenValid() {
          return k.isTokenValid("jwt_token");
        }
        static clearTokenData() {
          localStorage.removeItem("jwt_token"),
            localStorage.removeItem("jwt_token_expiration"),
            localStorage.removeItem("refresh_token"),
            localStorage.removeItem("refresh_token_expiration");
        }
        static getJwtToken() {
          return k._storeGet("jwt_token");
        }
        reloadUser() {
          this.loadUser(!0).subscribe(
            (B) => {
              this.notifyAuthenticated(B), this.notifyUserLoaded(!0);
            },
            () => {
              this.notifyUnauthenticated(), this.notifyUserLoaded(!0);
            }
          );
        }
        login(B) {
          return this.http.post("/api/auth/login", B, (0, y.gM)()).pipe(
            (0, o.b)((j) => {
              this.setUserFromJwtToken(j.token, j.refreshToken, !0),
                j.scope === p.W.PRE_VERIFICATION_TOKEN &&
                  this.router.navigateByUrl("login/mfa");
            })
          );
        }
        checkTwoFaVerificationCode(B, j) {
          return this.http
            .post(
              `/api/auth/2fa/verification/check?providerType=${B}&verificationCode=${j}`,
              null,
              (0, y.gM)(!1, !0)
            )
            .pipe(
              (0, o.b)((F) => {
                this.setUserFromJwtToken(F.token, F.refreshToken, !0);
              })
            );
        }
        publicLogin(B) {
          const j = { publicId: B };
          return this.http.post("/api/auth/login/public", j, (0, y.gM)());
        }
        sendResetPasswordLink(B) {
          return this.http.post(
            "/api/noauth/resetPasswordByEmail",
            { email: B },
            (0, y.gM)()
          );
        }
        activate(B, j, F) {
          return this.http
            .post(
              `/api/noauth/activate?sendActivationMail=${F}`,
              { activateToken: B, password: j },
              (0, y.gM)()
            )
            .pipe(
              (0, o.b)((V) => {
                this.setUserFromJwtToken(V.token, V.refreshToken, !0);
              })
            );
        }
        resetPassword(B, j) {
          return this.http
            .post(
              "/api/noauth/resetPassword",
              { resetToken: B, password: j },
              (0, y.gM)()
            )
            .pipe(
              (0, o.b)((F) => {
                this.setUserFromJwtToken(F.token, F.refreshToken, !0);
              })
            );
        }
        changePassword(B, j, F) {
          return this.http
            .post(
              "/api/auth/changePassword",
              { currentPassword: B, newPassword: j },
              (0, y.T7)(F)
            )
            .pipe(
              (0, o.b)((V) => {
                this.setUserFromJwtToken(V.token, V.refreshToken, !1);
              })
            );
        }
        getUserPasswordPolicy() {
          return this.http.get("/api/noauth/userPasswordPolicy", (0, y.gM)());
        }
        activateByEmailCode(B) {
          return this.http.post(
            `/api/noauth/activateByEmailCode?emailCode=${B}`,
            null,
            (0, y.gM)()
          );
        }
        resendEmailActivation(B) {
          const j = encodeURIComponent(B);
          return this.http.post(
            `/api/noauth/resendEmailActivation?email=${j}`,
            null,
            (0, y.gM)()
          );
        }
        loginAsUser(B) {
          return this.http.get(`/api/user/${B}/token`, (0, y.gM)()).pipe(
            (0, o.b)((j) => {
              this.setUserFromJwtToken(j.token, j.refreshToken, !0);
            })
          );
        }
        logout(B = !1, j = !1) {
          B && (this.redirectUrl = this.router.url),
            j
              ? this.clearJwtToken()
              : this.http
                  .post("/api/auth/logout", null, (0, y.gM)(!0, !0))
                  .subscribe(
                    () => {
                      this.clearJwtToken();
                    },
                    () => {
                      this.clearJwtToken();
                    }
                  );
        }
        notifyUserLoaded(B) {
          this.store.dispatch(new r.Mv({ isUserLoaded: B }));
        }
        gotoDefaultPlace(B) {
          if (!(0, b.k)()) {
            const j = (0, h.dE)(this.store),
              F = this.defaultUrl(B, j);
            this.zone.run(() => {
              this.router.navigateByUrl(F);
            });
          }
        }
        loadOAuth2Clients() {
          const B = "/api/noauth/oauth2Clients?platform=" + w.zh.WEB;
          return this.http.post(B, null, (0, y.gM)()).pipe(
            (0, i.K)((j) => (0, a.of)([])),
            (0, o.b)((j) => {
              this.oauth2Clients = j;
            })
          );
        }
        getAvailableTwoFaLoginProviders() {
          return this.http.get("/api/auth/2fa/providers", (0, y.gM)()).pipe(
            (0, i.K)(() => (0, a.of)([])),
            (0, o.b)((B) => {
              this.twoFactorAuthProviders = B;
            })
          );
        }
        forceDefaultPlace(B, j, F) {
          return (
            !(
              !B ||
              !B.authUser ||
              (B.authUser.authority !== p.W.TENANT_ADMIN &&
                B.authUser.authority !== p.W.CUSTOMER_USER) ||
              !(
                (this.userHasDefaultDashboard(B) && B.forceFullscreen) ||
                B.authUser.isPublic
              )
            ) &&
            ("profile" === j || "security" === j
              ? !this.userHasProfile(B.authUser)
              : !(
                  j.startsWith("dashboard.") ||
                  (j.startsWith("dashboards.") &&
                    B.allowedDashboardIds.indexOf(F.dashboardId) > -1)
                ))
          );
        }
        defaultUrl(B, j, F, V) {
          let P = null;
          if (B) {
            if (j.authUser.authority === p.W.PRE_VERIFICATION_TOKEN)
              P = this.router.parseUrl("login/mfa");
            else if (!F || "login" === F || this.forceDefaultPlace(j, F, V)) {
              if (this.redirectUrl) {
                const A = this.redirectUrl;
                (this.redirectUrl = null), (P = this.router.parseUrl(A));
              } else P = this.router.parseUrl("home");
              if (
                j.authUser.authority === p.W.TENANT_ADMIN ||
                j.authUser.authority === p.W.CUSTOMER_USER
              )
                if (this.userHasDefaultDashboard(j)) {
                  const A = j.userDetails.additionalInfo.defaultDashboardId;
                  P = j.forceFullscreen
                    ? this.router.parseUrl(`dashboard/${A}`)
                    : this.router.parseUrl(`dashboards/${A}`);
                } else
                  j.authUser.isPublic &&
                    (P = this.router.parseUrl(
                      `dashboard/${j.lastPublicDashboardId}`
                    ));
              else
                j.authUser.authority === p.W.SYS_ADMIN &&
                  this.adminService.checkUpdates().subscribe((A) => {
                    A &&
                      A.updateAvailable &&
                      this.store.dispatch(
                        new T.zi({
                          message: A.message,
                          type: "info",
                          verticalPosition: "bottom",
                          horizontalPosition: "right",
                        })
                      );
                  });
            }
          } else P = this.router.parseUrl("login");
          return P;
        }
        loadUser(B) {
          if ((0, h.fP)(this.store)) return (0, a.of)({});
          {
            const F = this.utils.getQueryParam("publicId"),
              V = this.utils.getQueryParam("accessToken"),
              P = this.utils.getQueryParam("refreshToken"),
              A = this.utils.getQueryParam("username"),
              U = this.utils.getQueryParam("password"),
              G = this.utils.getQueryParam("loginError");
            if (F)
              return this.publicLogin(F).pipe(
                (0, g.zg)(
                  (Z) => (
                    this.updateAndValidateTokens(Z.token, Z.refreshToken, !1),
                    this.procceedJwtTokenValidate()
                  )
                ),
                (0, i.K)((Z) => {
                  throw (
                    (this.utils.updateQueryParam("publicId", null), Error())
                  );
                })
              );
            if (V) {
              const Z = ["accessToken"];
              P && Z.push("refreshToken"), this.utils.removeQueryParams(Z);
              try {
                this.updateAndValidateToken(V, "jwt_token", !1),
                  P
                    ? this.updateAndValidateToken(P, "refresh_token", !1)
                    : (localStorage.removeItem("refresh_token"),
                      localStorage.removeItem("refresh_token_expiration"));
              } catch (le) {
                return (0, C._)(le);
              }
              return this.procceedJwtTokenValidate();
            }
            if (A && U) {
              this.utils.updateQueryParam("username", null),
                this.utils.updateQueryParam("password", null);
              const Z = { username: A, password: U };
              return this.http
                .post("/api/auth/login", Z, (0, y.gM)())
                .pipe(
                  (0, g.zg)(
                    (le) => (
                      this.updateAndValidateTokens(
                        le.token,
                        le.refreshToken,
                        !1
                      ),
                      this.procceedJwtTokenValidate()
                    )
                  )
                );
            }
            return G
              ? (this.showLoginErrorDialog(G),
                this.utils.updateQueryParam("loginError", null),
                (0, C._)(Error()))
              : this.procceedJwtTokenValidate(B);
          }
        }
        showLoginErrorDialog(B) {
          this.translate.get(["login.error", "action.close"]).subscribe((j) => {
            const F = {
              disableClose: !0,
              data: {
                title: j["login.error"],
                message: B,
                ok: j["action.close"],
              },
            };
            this.dialog.open(O.AlertDialogComponent, F);
          });
        }
        procceedJwtTokenValidate(B) {
          const j = new s.t();
          return (
            this.validateJwtToken(B).subscribe(
              () => {
                let F = {};
                const V = k._storeGet("jwt_token");
                (F.authUser = this.jwtHelper.decodeToken(V)),
                  F.authUser && F.authUser.scopes && F.authUser.scopes.length
                    ? (F.authUser.authority = p.W[F.authUser.scopes[0]])
                    : F.authUser && (F.authUser.authority = p.W.ANONYMOUS),
                  F.authUser.isPublic && (F.forceFullscreen = !0),
                  F.authUser.isPublic
                    ? this.loadSystemParams(F).subscribe(
                        (P) => {
                          (F = Object.assign(Object.assign({}, F), P)),
                            j.next(F),
                            j.complete();
                        },
                        (P) => {
                          j.error(P);
                        }
                      )
                    : F.authUser.authority === p.W.PRE_VERIFICATION_TOKEN
                    ? (j.next(F), j.complete())
                    : F.authUser.userId
                    ? this.userService.getUser(F.authUser.userId).subscribe(
                        (P) => {
                          (F.userDetails = P),
                            (F.forceFullscreen = !1),
                            this.userForceFullscreen(F) &&
                              (F.forceFullscreen = !0),
                            this.loadSystemParams(F).subscribe(
                              (A) => {
                                let U;
                                (F = Object.assign(Object.assign({}, F), A)),
                                  (U =
                                    F.userDetails.additionalInfo &&
                                    F.userDetails.additionalInfo.lang
                                      ? F.userDetails.additionalInfo.lang
                                      : null),
                                  this.notifyUserLang(U),
                                  j.next(F),
                                  j.complete();
                              },
                              (A) => {
                                j.error(A), this.logout();
                              }
                            );
                        },
                        (P) => {
                          j.error(P), this.logout();
                        }
                      )
                    : j.error(null);
              },
              (F) => {
                j.error(F);
              }
            ),
            j
          );
        }
        loadIsUserTokenAccessEnabled(B) {
          return B.authority === p.W.SYS_ADMIN ||
            B.authority === p.W.TENANT_ADMIN
            ? this.http.get("/api/user/tokenAccessEnabled", (0, y.gM)())
            : (0, a.of)(!1);
        }
        loadIsEdgesSupportEnabled() {
          return this.http.get("/api/edges/enabled", (0, y.gM)());
        }
        loadHasRepository(B) {
          return B.authority === p.W.TENANT_ADMIN
            ? this.http.get("/api/admin/repositorySettings/exists", (0, y.gM)())
            : (0, a.of)(!1);
        }
        loadTbelEnabled(B) {
          return B.authority === p.W.TENANT_ADMIN
            ? this.http.get("/api/ruleChain/tbelEnabled", (0, y.gM)())
            : (0, a.of)(!1);
        }
        loadSystemParams(B) {
          const j = [
            this.loadIsUserTokenAccessEnabled(B.authUser),
            this.fetchAllowedDashboardIds(B),
            this.loadIsEdgesSupportEnabled(),
            this.loadHasRepository(B.authUser),
            this.loadTbelEnabled(B.authUser),
            this.timeService.loadMaxDatapointsLimit(),
          ];
          return (0, d.D)(j).pipe(
            (0, D.U)(
              (F) => ({
                userTokenAccessEnabled: F[0],
                allowedDashboardIds: F[1],
                edgesSupportEnabled: F[2],
                hasRepository: F[3],
                tbelEnabled: F[4],
              }),
              (0, i.K)((F) => (0, a.of)({}))
            )
          );
        }
        refreshJwtToken(B = !0) {
          let j = this.refreshTokenSubject;
          if (null === this.refreshTokenSubject) {
            (this.refreshTokenSubject = new s.t(1)),
              (j = this.refreshTokenSubject);
            const F = k._storeGet("refresh_token"),
              V = k.isTokenValid("refresh_token");
            if ((this.setUserFromJwtToken(null, null, !1), V)) {
              const P = { refreshToken: F };
              this.http.post("/api/auth/token", P, (0, y.gM)()).subscribe(
                (U) => {
                  B
                    ? this.setUserFromJwtToken(U.token, U.refreshToken, !1)
                    : this.updateAndValidateTokens(U.token, U.refreshToken, !0),
                    this.refreshTokenSubject.next(U),
                    this.refreshTokenSubject.complete(),
                    (this.refreshTokenSubject = null);
                },
                () => {
                  this.clearJwtToken(),
                    this.refreshTokenSubject.error(
                      new Error(
                        this.translate.instant("access.refresh-token-failed")
                      )
                    ),
                    (this.refreshTokenSubject = null);
                }
              );
            } else
              this.translate
                .get("access.refresh-token-expired")
                .subscribe((P) => {
                  this.refreshTokenSubject.error(new Error(P)),
                    (this.refreshTokenSubject = null);
                });
          }
          return j;
        }
        validateJwtToken(B) {
          const j = new s.t();
          return (
            k.isTokenValid("jwt_token")
              ? (j.next(), j.complete())
              : B
              ? this.refreshJwtToken(!B).subscribe(
                  () => {
                    j.next(), j.complete();
                  },
                  (F) => {
                    j.error(F);
                  }
                )
              : (this.clearJwtToken(), j.error(null)),
            j
          );
        }
        refreshTokenPending() {
          return null !== this.refreshTokenSubject;
        }
        setUserFromJwtToken(B, j, F) {
          const V = new s.t();
          return (
            B
              ? (this.updateAndValidateTokens(B, j, !0),
                F
                  ? (this.notifyUserLoaded(!1),
                    this.loadUser(!1).subscribe(
                      (P) => {
                        this.notifyUserLoaded(!0),
                          this.notifyAuthenticated(P),
                          V.next(!0),
                          V.complete();
                      },
                      () => {
                        this.notifyUserLoaded(!0),
                          this.notifyUnauthenticated(),
                          V.next(!1),
                          V.complete();
                      }
                    ))
                  : this.loadUser(!1).subscribe(
                      () => {
                        V.next(!0), V.complete();
                      },
                      () => {
                        V.next(!1), V.complete();
                      }
                    ))
              : (k.clearTokenData(),
                F && this.notifyUnauthenticated(),
                V.next(!1),
                V.complete()),
            V
          );
        }
        updateAndValidateTokens(B, j, F) {
          this.updateAndValidateToken(B, "jwt_token", F),
            this.updateAndValidateToken(j, "refresh_token", F);
        }
        parsePublicId() {
          const B = k.getJwtToken();
          if (B) {
            const j = this.jwtHelper.decodeToken(B);
            if (j && j.isPublic) return j.sub;
          }
          return null;
        }
        notifyUnauthenticated() {
          this.store.dispatch(new r.a2());
        }
        notifyAuthenticated(B) {
          this.store.dispatch(new r.fR(B));
        }
        notifyUserLang(B) {
          this.store.dispatch(new _.N({ userLang: B }));
        }
        updateAndValidateToken(B, j, F) {
          let V = !1;
          const P = this.jwtHelper.decodeToken(B),
            A = null == P ? void 0 : P.iat,
            U = null == P ? void 0 : P.exp;
          if (A && U) {
            const G = U - A;
            if (G > 0) {
              const Z = new Date().valueOf() + 1e3 * G;
              localStorage.setItem(j, B),
                localStorage.setItem(j + "_expiration", "" + Z),
                (V = !0);
            }
          }
          !V && F && this.notifyUnauthenticated();
        }
        clearJwtToken() {
          this.setUserFromJwtToken(null, null, !0);
        }
        userForceFullscreen(B) {
          return (
            (B.authUser && B.authUser.isPublic) ||
            (B.userDetails &&
              B.userDetails.additionalInfo &&
              B.userDetails.additionalInfo.defaultDashboardFullscreen &&
              !0 === B.userDetails.additionalInfo.defaultDashboardFullscreen)
          );
        }
        userHasProfile(B) {
          return B && !B.isPublic;
        }
        userHasDefaultDashboard(B) {
          return !!(
            B &&
            B.userDetails &&
            B.userDetails.additionalInfo &&
            B.userDetails.additionalInfo.defaultDashboardId
          );
        }
        fetchAllowedDashboardIds(B) {
          if (
            !B.forceFullscreen ||
            (B.authUser.authority !== p.W.TENANT_ADMIN &&
              B.authUser.authority !== p.W.CUSTOMER_USER)
          )
            return (0, a.of)([]);
          {
            const j = new I.H_(100);
            let F;
            return (
              (F =
                B.authUser.authority === p.W.TENANT_ADMIN
                  ? this.dashboardService.getTenantDashboards(j)
                  : this.dashboardService.getCustomerDashboards(
                      B.authUser.customerId,
                      j
                    )),
              F.pipe((0, D.U)((V) => V.data.map((A) => A.id.id)))
            );
          }
        }
      }
      (k.ɵfac = function (B) {
        return new (B || k)(
          e.ɵɵinject(S.Store),
          e.ɵɵinject(u.HttpClient),
          e.ɵɵinject(m.K),
          e.ɵɵinject(E.O),
          e.ɵɵinject(f.Router),
          e.ɵɵinject(f.ActivatedRoute),
          e.ɵɵinject(e.NgZone),
          e.ɵɵinject(c.F),
          e.ɵɵinject(v.s),
          e.ɵɵinject(l.l),
          e.ɵɵinject(M.TranslateService),
          e.ɵɵinject(L.MatDialog)
        );
      }),
        (k.ɵprov = e.ɵɵdefineInjectable({
          token: k,
          factory: k.ɵfac,
          providedIn: "root",
        }));
    },
    24246: (ee, R, t) => {
      "use strict";
      t.d(R, { I: () => Z, g: () => G });
      var e = t(37716),
        n = t(38583),
        a = t(91841),
        C = t(86710),
        s = t(85322),
        d = t(93572),
        o = t(88951),
        i = t(82068),
        g = t(24111),
        D = t(68939),
        y = t(5304),
        m = t(65792),
        r = t(19773),
        h = t(43190),
        p = t(40205),
        _ = t(25917),
        E = t(61325),
        c = t(9492),
        v = t(65264),
        I = t(16797),
        l = t(29790),
        T = t(41960);
      let O = {};
      class w {
        constructor(X, se, ne, re) {
          (this.store = X),
            (this.dialogService = se),
            (this.translate = ne),
            (this.authService = re),
            (this.AUTH_SCHEME = "Bearer "),
            (this.AUTH_HEADER_NAME = "X-Authorization"),
            (this.internalUrlPrefixes = ["/api/auth/token", "/api/rpc"]),
            (this.activeRequests = 0);
        }
        intercept(X, se) {
          if (X.url.startsWith("/api/")) {
            const ne = this.getInterceptorConfig(X);
            let re;
            return (
              this.updateLoadingState(ne, !0),
              (re = this.isTokenBasedAuthEntryPoint(X.url)
                ? o.e.getJwtToken() || this.authService.refreshTokenPending()
                  ? o.e.isJwtTokenValid()
                    ? this.jwtIntercept(X, se)
                    : this.handleResponseError(
                        X,
                        se,
                        new a.HttpErrorResponse({
                          error: { refreshTokenPending: !0 },
                        })
                      )
                  : this.handleResponseError(
                      X,
                      se,
                      new a.HttpErrorResponse({
                        error: { message: "Unauthorized!" },
                        status: 401,
                      })
                    )
                : this.handleRequest(X, se)),
              re.pipe(
                (0, D.x)(() => {
                  X.url.startsWith("/api/") && this.updateLoadingState(ne, !1);
                })
              )
            );
          }
          return se.handle(X);
        }
        jwtIntercept(X, se) {
          const ne = this.updateAuthorizationHeader(X);
          return ne
            ? this.handleRequest(ne, se)
            : (0, p._)(new Error("Could not get JWT token from store."));
        }
        handleRequest(X, se) {
          return se.handle(X).pipe(
            (0, y.K)((ne) => {
              const re = ne;
              return this.handleResponseError(X, se, re);
            })
          );
        }
        handleResponseError(X, se, ne) {
          const re = this.getInterceptorConfig(X);
          let de = !1;
          const pe = re.ignoreErrors,
            Q = re.resendRequest,
            K = ne.error ? ne.error.errorCode : null;
          if (
            (ne.error && ne.error.refreshTokenPending) ||
            (401 === ne.status && X.url !== i.gT.entryPoints.tokenRefresh)
          ) {
            if (
              (ne.error && ne.error.refreshTokenPending) ||
              (K && K === i.gT.serverErrorCode.jwtTokenExpired)
            )
              return this.refreshTokenAndRetry(X, se);
            K !== i.gT.serverErrorCode.credentialsExpired && (de = !0);
          } else if (429 === ne.status) {
            if (Q) return this.retryRequest(X, se);
          } else
            403 === ne.status
              ? pe || this.dialogService.forbidden()
              : 0 === ne.status || -1 === ne.status
              ? this.showError("Unable to connect")
              : X.url.startsWith("/api/rpc") ||
                X.url.startsWith("/api/plugins/rpc") ||
                (404 === ne.status
                  ? pe ||
                    this.showError(
                      X.method +
                        ": " +
                        X.url +
                        "<br/>" +
                        ne.status +
                        ": " +
                        ne.statusText
                    )
                  : (de = !0));
          if (de && !pe) {
            const H = (0, T.dn)(ne, this.translate, X.responseType);
            this.showError(H.message, H.timeout);
          }
          return (0, p._)(ne);
        }
        retryRequest(X, se) {
          const ne = 1e3 + 3e3 * Math.random();
          return (0, _.of)(null).pipe(
            (0, m.g)(ne),
            (0, r.zg)(() => this.jwtIntercept(X, se))
          );
        }
        refreshTokenAndRetry(X, se) {
          return this.authService.refreshJwtToken().pipe(
            (0, h.w)(() => this.jwtIntercept(X, se)),
            (0, y.K)((ne) => {
              this.authService.logout(!0, !0);
              const re = ne ? ne.message : "Unauthorized!";
              return this.handleResponseError(
                X,
                se,
                new a.HttpErrorResponse({
                  error: { message: re, timeout: 200 },
                  status: 401,
                })
              );
            })
          );
        }
        updateAuthorizationHeader(X) {
          const se = o.e.getJwtToken();
          return se
            ? (X = X.clone({
                setHeaders:
                  ((O = {}),
                  (O[this.AUTH_HEADER_NAME] = "" + this.AUTH_SCHEME + se),
                  O),
              }))
            : null;
        }
        isInternalUrlPrefix(X) {
          for (const se in this.internalUrlPrefixes)
            if (X.startsWith(this.internalUrlPrefixes[se])) return !0;
          return !1;
        }
        isTokenBasedAuthEntryPoint(X) {
          return (
            X.startsWith("/api/") &&
            !X.startsWith(i.gT.entryPoints.login) &&
            !X.startsWith(i.gT.entryPoints.tokenRefresh) &&
            !X.startsWith(i.gT.entryPoints.nonTokenBased)
          );
        }
        updateLoadingState(X, se) {
          X.ignoreLoading ||
            (se ? this.activeRequests++ : this.activeRequests--,
            1 === this.activeRequests && se
              ? this.store.dispatch(new c.kY())
              : 0 === this.activeRequests && this.store.dispatch(new c.pw()));
        }
        getInterceptorConfig(X) {
          let se;
          return (
            (se =
              X.params && X.params instanceof g.t
                ? X.params.interceptorConfig
                : new E.g(!1, !1)),
            this.isInternalUrlPrefix(X.url) && (se.ignoreLoading = !0),
            se
          );
        }
        showError(X, se = 0) {
          setTimeout(() => {
            this.store.dispatch(new v.zi({ message: X, type: "error" }));
          }, se);
        }
      }
      (w.ɵfac = function (X) {
        return new (X || w)(
          e.ɵɵinject(C.Store),
          e.ɵɵinject(I.x),
          e.ɵɵinject(l.TranslateService),
          e.ɵɵinject(o.e)
        );
      }),
        (w.ɵprov = e.ɵɵdefineInjectable({ token: w, factory: w.ɵfac }));
      var b = t(26929),
        S = t(92340),
        u = t(32472);
      var M = t(51095),
        L = t(22238),
        k = t(77001),
        N = t(25830),
        B = t(51403),
        j = t(4340),
        F = t.n(j);
      class V extends B.Fq {
        constructor(X) {
          super(X);
        }
        compile(X, se) {
          return this.defaultCompile(X, se);
        }
        compileTranslations(X, se) {
          return this.defaultCompile(X, se);
        }
        defaultCompile(X, se) {
          if ("object" != typeof X)
            return this.checkIsPlural(X) ? super.compile(X, se) : X;
          {
            const ne = {};
            for (const re of Object.keys(X))
              ne[re] = this.defaultCompile(X[re], se);
            return ne;
          }
        }
        checkIsPlural(X) {
          let se;
          try {
            se = F().parse(X.replace(/\{\{/g, "{").replace(/\}\}/g, "}"), {
              cardinal: [],
              ordinal: [],
            });
          } catch (re) {
            return (
              console.warn(`Failed to parse source: ${X}`),
              console.error(re),
              !1
            );
          }
          return (
            se.filter((re) => "string" != typeof re && "plural" === re.type)
              .length > 0
          );
        }
      }
      (V.ɵfac = function (X) {
        return new (X || V)(e.ɵɵinject(B.HL, 8));
      }),
        (V.ɵprov = e.ɵɵdefineInjectable({
          token: V,
          factory: V.ɵfac,
          providedIn: "root",
        }));
      var P = t(11877),
        A = t(74426);
      class U extends l.TranslateParser {
        constructor() {
          super(...arguments), (this.templateMatcher = /{{\s?([^{}\s]*)\s?}}/g);
        }
        interpolate(X, se) {
          let ne;
          return (
            "string" == typeof X
              ? (ne = this.interpolateString(X, se))
              : "function" == typeof X
              ? ((ne = this.interpolateFunction(X, se)),
                "string" == typeof ne && (ne = this.interpolateString(ne, se)))
              : (ne = X),
            ne
          );
        }
        getValue(X, se) {
          const ne = "string" == typeof se ? se.split(".") : [se];
          se = "";
          do {
            (se += ne.shift()),
              !(0, T.nu)(X) ||
              !(0, T.nu)(X[se]) ||
              ("object" != typeof X[se] && ne.length)
                ? ne.length
                  ? (se += ".")
                  : (X = void 0)
                : ((X = X[se]), (se = ""));
          } while (ne.length);
          return X;
        }
        interpolateFunction(X, se) {
          return X(se);
        }
        interpolateString(X, se) {
          return se
            ? X.replace(this.templateMatcher, (ne, re) => {
                const de = this.getValue(se, re);
                return (0, T.nu)(de) ? de : ne;
              })
            : X;
        }
      }
      function G(le) {
        return new u.w(le, "./assets/locale/locale.constant-", ".json");
      }
      (U.ɵfac = (function () {
        let le;
        return function (se) {
          return (le || (le = e.ɵɵgetInheritedFactory(U)))(se || U);
        };
      })()),
        (U.ɵprov = e.ɵɵdefineInjectable({
          token: U,
          factory: U.ɵfac,
          providedIn: "root",
        }));
      class Z {}
      (Z.ɵfac = function (X) {
        return new (X || Z)();
      }),
        (Z.ɵmod = e.ɵɵdefineNgModule({ type: Z })),
        (Z.ɵinj = e.ɵɵdefineInjector({
          providers: [
            { provide: a.HTTP_INTERCEPTORS, useClass: w, multi: !0 },
            P.Yp,
          ],
          imports: [
            [
              n.CommonModule,
              a.HttpClientModule,
              N.FlexLayoutModule.withConfig({ addFlexToParent: !1 }),
              L.MatDialogModule,
              M.MatButtonModule,
              k.MatSnackBarModule,
              l.TranslateModule.forRoot({
                loader: {
                  provide: l.TranslateLoader,
                  useFactory: G,
                  deps: [a.HttpClient],
                },
                missingTranslationHandler: {
                  provide: l.MissingTranslationHandler,
                  useClass: class {
                    handle(X) {
                      X.key &&
                        !X.key.startsWith(i._T) &&
                        console.warn(
                          "Translation for " + X.key + " doesn't exist"
                        );
                    }
                  },
                },
                compiler: { provide: l.TranslateCompiler, useClass: V },
                parser: { provide: l.TranslateParser, useClass: U },
              }),
              A.mb.forRoot(),
              C.StoreModule.forRoot(b.ll, {
                metaReducers: b.pu,
                runtimeChecks: {
                  strictStateImmutability: !0,
                  strictActionImmutability: !0,
                  strictStateSerializability: !0,
                  strictActionSerializability: !0,
                },
              }),
              s.sQ.forRoot(b.Sz),
              S.N.production ? [] : d.FT.instrument({ name: S.N.appTitle }),
            ],
          ],
        })),
        ("undefined" == typeof ngJitMode || ngJitMode) &&
          e.ɵɵsetNgModuleScope(Z, {
            imports: [
              n.CommonModule,
              a.HttpClientModule,
              N.FlexLayoutModule,
              L.MatDialogModule,
              M.MatButtonModule,
              k.MatSnackBarModule,
              l.TranslateModule,
              A.mb,
              C.StoreRootModule,
              s.pU,
            ],
          });
    },
    26929: (ee, R, t) => {
      "use strict";
      t.d(R, { Sz: () => ne, pu: () => se, ll: () => X });
      var e = t(96949),
        n = t(92340),
        a = t(86710),
        C = t(97316);
      var o = t(9492);
      const i = { isLoading: !1 };
      var D = t(13131),
        y = t(40005);
      const m = { userLang: null };
      var h = t(64762),
        p = t(39895),
        _ = t(37716),
        E = t(85322),
        c = t(66682),
        v = t(57057),
        I = t(68307),
        l = t(88002),
        T = t(87519),
        O = t(45435);
      const w = (0, a.createFeatureSelector)("settings"),
        b = (0, a.createSelector)(w, (re) => re);
      (0, a.createSelector)(b, (re) => re.userLang);
      var u = t(72516),
        f = t(16738);
      function M(re, de) {
        let pe = de;
        n.N.production || console.log(`User lang: ${pe}`),
          pe ||
            ((pe = re.getBrowserCultureLang()),
            n.N.production || console.log(`Fallback to browser lang: ${pe}`));
        const Q = (function (re) {
          const de = (re || "").split("-").join("_");
          if (de.length) {
            if (n.N.supportedLangs.indexOf(de) > -1) return de;
            {
              const pe = de.split("_");
              let Q;
              Q = 2 === pe.length ? pe[0] : de;
              const K = n.N.supportedLangs.filter((H) => H.split("_")[0] === Q);
              if (K.length) return K[0];
            }
          }
          return n.N.defaultLang;
        })(pe);
        n.N.production || console.log(`Detected supported lang: ${Q}`),
          re.use(Q),
          f.locale([Q]);
      }
      var k = t(88951),
        N = t(1361),
        B = t(54787),
        j = t(54283),
        F = t(29790);
      class P {
        constructor(de, pe, Q, K, H, x, W, $) {
          (this.actions$ = de),
            (this.store = pe),
            (this.authService = Q),
            (this.utils = K),
            (this.router = H),
            (this.localStorageService = x),
            (this.titleService = W),
            (this.translate = $),
            (this.persistSettings = this.actions$.pipe(
              (0, E.l4)(y.o.CHANGE_LANGUAGE),
              (0, v.M)(this.store.pipe((0, a.select)(w))),
              (0, I.b)(([J, te]) =>
                this.localStorageService.setItem("SETTINGS", te)
              )
            )),
            (this.setTranslateServiceLanguage = this.store.pipe(
              (0, a.select)(w),
              (0, l.U)((J) => J.userLang),
              (0, T.x)(),
              (0, I.b)((J) => M(this.translate, J))
            )),
            (this.setTitle = (0, c.T)(
              this.actions$.pipe((0, E.l4)(y.o.CHANGE_LANGUAGE)),
              this.router.events.pipe(
                (0, O.h)((J) => J instanceof p.ActivationEnd)
              )
            ).pipe(
              (0, I.b)(() => {
                this.titleService.setTitle(
                  this.router.routerState.snapshot.root,
                  this.translate
                );
              })
            )),
            (this.setPublicId = (0, c.T)(
              this.router.events.pipe(
                (0, O.h)((J) => J instanceof p.ActivationEnd)
              )
            ).pipe(
              (0, I.b)((J) => {
                const te = (0, B.fP)(this.store),
                  _e = J.snapshot;
                te &&
                  te.isPublic &&
                  _e.url &&
                  _e.url.length &&
                  "dashboard" === _e.url[0].path &&
                  (this.utils.updateQueryParam("publicId", te.sub),
                  this.store.dispatch(
                    new j.r2({ lastPublicDashboardId: _e.params.dashboardId })
                  ));
              })
            ));
        }
      }
      (P.ɵfac = function (de) {
        return new (de || P)(
          _.ɵɵinject(E.eX),
          _.ɵɵinject(a.Store),
          _.ɵɵinject(k.e),
          _.ɵɵinject(N.F),
          _.ɵɵinject(p.Router),
          _.ɵɵinject(C.n),
          _.ɵɵinject(u.y),
          _.ɵɵinject(F.TranslateService)
        );
      }),
        (P.ɵprov = _.ɵɵdefineInjectable({ token: P, factory: P.ɵfac })),
        (0, h.__decorate)(
          [
            (0, E.Qm)({ dispatch: !1 }),
            (0, h.__metadata)("design:type", Object),
          ],
          P.prototype,
          "persistSettings",
          void 0
        ),
        (0, h.__decorate)(
          [
            (0, E.Qm)({ dispatch: !1 }),
            (0, h.__metadata)("design:type", Object),
          ],
          P.prototype,
          "setTranslateServiceLanguage",
          void 0
        ),
        (0, h.__decorate)(
          [
            (0, E.Qm)({ dispatch: !1 }),
            (0, h.__metadata)("design:type", Object),
          ],
          P.prototype,
          "setTitle",
          void 0
        ),
        (0, h.__decorate)(
          [
            (0, E.Qm)({ dispatch: !1 }),
            (0, h.__metadata)("design:type", Object),
          ],
          P.prototype,
          "setPublicId",
          void 0
        );
      var A = t(65264);
      const U = { notification: null, hideNotification: null };
      var Z = t(91645);
      class le {
        constructor(de, pe) {
          (this.actions$ = de),
            (this.notificationService = pe),
            (this.dispatchNotification = this.actions$.pipe(
              (0, E.l4)(A.N4.SHOW_NOTIFICATION),
              (0, l.U)(({ notification: Q }) => {
                this.notificationService.dispatchNotification(Q);
              })
            )),
            (this.hideNotification = this.actions$.pipe(
              (0, E.l4)(A.N4.HIDE_NOTIFICATION),
              (0, l.U)(({ hideNotification: Q }) => {
                this.notificationService.hideNotification(Q);
              })
            ));
        }
      }
      (le.ɵfac = function (de) {
        return new (de || le)(_.ɵɵinject(E.eX), _.ɵɵinject(Z.g));
      }),
        (le.ɵprov = _.ɵɵdefineInjectable({ token: le, factory: le.ɵfac })),
        (0, h.__decorate)(
          [
            (0, E.Qm)({ dispatch: !1 }),
            (0, h.__metadata)("design:type", Object),
          ],
          le.prototype,
          "dispatchNotification",
          void 0
        ),
        (0, h.__decorate)(
          [
            (0, E.Qm)({ dispatch: !1 }),
            (0, h.__metadata)("design:type", Object),
          ],
          le.prototype,
          "hideNotification",
          void 0
        );
      const X = {
          load: function (re = i, de) {
            switch (de.type) {
              case o.jx.START_LOAD:
                return Object.assign(Object.assign({}, re), { isLoading: !0 });
              case o.jx.FINISH_LOAD:
                return Object.assign(Object.assign({}, re), { isLoading: !1 });
              default:
                return re;
            }
          },
          auth: D.d,
          settings: function (re = m, de) {
            switch (de.type) {
              case y.o.CHANGE_LANGUAGE:
                return Object.assign(Object.assign({}, re), de.payload);
              default:
                return re;
            }
          },
          notification: function (re = U, de) {
            switch (de.type) {
              case A.N4.SHOW_NOTIFICATION:
                return Object.assign(Object.assign({}, re), {
                  notification: de.notification,
                });
              case A.N4.HIDE_NOTIFICATION:
                return Object.assign(Object.assign({}, re), {
                  hideNotification: de.hideNotification,
                });
              default:
                return re;
            }
          },
        },
        se = [
          function (re) {
            return (de, pe) => {
              const Q = re(de, pe);
              return [a.INIT.toString(), a.UPDATE.toString()].includes(pe.type)
                ? Object.assign(Object.assign({}, Q), C.n.loadInitialState())
                : Q;
            };
          },
        ];
      n.N.production ||
        (se.unshift(e.p),
        se.unshift(function (re) {
          return (de, pe) => {
            const Q = re(de, pe);
            return (
              console.log(`[DEBUG] action: ${pe.type}`, {
                payload: pe.payload,
                oldState: de,
                newState: Q,
              }),
              Q
            );
          };
        }));
      const ne = [P, le];
    },
    28255: (ee, R, t) => {
      "use strict";
      t.d(R, { l: () => d });
      var e = t(37716),
        n = t(66054),
        a = t(16624),
        C = t(68307),
        s = t(91841);
      class d {
        constructor(i, g) {
          (this.http = i), (this.entitiesVersionControlService = g);
        }
        getAdminSettings(i, g) {
          return this.http.get(`/api/admin/settings/${i}`, (0, n.T7)(g));
        }
        saveAdminSettings(i, g) {
          return this.http.post("/api/admin/settings", i, (0, n.T7)(g));
        }
        sendTestMail(i, g) {
          return this.http.post(
            "/api/admin/settings/testMail",
            i,
            (0, n.T7)(g)
          );
        }
        sendTestSms(i, g) {
          return this.http.post("/api/admin/settings/testSms", i, (0, n.T7)(g));
        }
        getSecuritySettings(i) {
          return this.http.get("/api/admin/securitySettings", (0, n.T7)(i));
        }
        saveSecuritySettings(i, g) {
          return this.http.post("/api/admin/securitySettings", i, (0, n.T7)(g));
        }
        getJwtSettings(i) {
          return this.http.get("/api/admin/jwtSettings", (0, n.T7)(i));
        }
        saveJwtSettings(i, g) {
          return this.http.post("/api/admin/jwtSettings", i, (0, n.T7)(g));
        }
        getRepositorySettings(i) {
          return this.http.get("/api/admin/repositorySettings", (0, n.T7)(i));
        }
        saveRepositorySettings(i, g) {
          return this.http
            .post("/api/admin/repositorySettings", i, (0, n.T7)(g))
            .pipe(
              (0, C.b)(() => {
                this.entitiesVersionControlService.clearBranchList();
              })
            );
        }
        deleteRepositorySettings(i) {
          return this.http
            .delete("/api/admin/repositorySettings", (0, n.T7)(i))
            .pipe(
              (0, C.b)(() => {
                this.entitiesVersionControlService.clearBranchList();
              })
            );
        }
        checkRepositoryAccess(i, g) {
          return this.http.post(
            "/api/admin/repositorySettings/checkAccess",
            i,
            (0, n.T7)(g)
          );
        }
        getRepositorySettingsInfo(i) {
          return this.http.get(
            "/api/admin/repositorySettings/info",
            (0, n.T7)(i)
          );
        }
        getAutoCommitSettings(i) {
          return this.http.get("/api/admin/autoCommitSettings", (0, n.T7)(i));
        }
        autoCommitSettingsExists(i) {
          return this.http.get(
            "/api/admin/autoCommitSettings/exists",
            (0, n.T7)(i)
          );
        }
        saveAutoCommitSettings(i, g) {
          return this.http.post(
            "/api/admin/autoCommitSettings",
            i,
            (0, n.T7)(g)
          );
        }
        deleteAutoCommitSettings(i) {
          return this.http.delete(
            "/api/admin/autoCommitSettings",
            (0, n.T7)(i)
          );
        }
        checkUpdates(i) {
          return this.http.get("/api/admin/updates", (0, n.T7)(i));
        }
      }
      (d.ɵfac = function (i) {
        return new (i || d)(e.ɵɵinject(s.HttpClient), e.ɵɵinject(a.Q));
      }),
        (d.ɵprov = e.ɵɵdefineInjectable({
          token: d,
          factory: d.ɵfac,
          providedIn: "root",
        }));
    },
    58118: (ee, R, t) => {
      "use strict";
      t.d(R, { w: () => C });
      var e = t(37716),
        n = t(66054),
        a = t(91841);
      class C {
        constructor(d) {
          this.http = d;
        }
        getAssetProfiles(d, o) {
          return this.http.get(
            `/api/assetProfiles${d.toQuery()}`,
            (0, n.T7)(o)
          );
        }
        getAssetProfile(d, o) {
          return this.http.get(`/api/assetProfile/${d}`, (0, n.T7)(o));
        }
        saveAssetProfile(d, o) {
          return this.http.post("/api/assetProfile", d, (0, n.T7)(o));
        }
        deleteAssetProfile(d, o) {
          return this.http.delete(`/api/assetProfile/${d}`, (0, n.T7)(o));
        }
        setDefaultAssetProfile(d, o) {
          return this.http.post(`/api/assetProfile/${d}/default`, (0, n.T7)(o));
        }
        getDefaultAssetProfileInfo(d) {
          return this.http.get("/api/assetProfileInfo/default", (0, n.T7)(d));
        }
        getAssetProfileInfo(d, o) {
          return this.http.get(`/api/assetProfileInfo/${d}`, (0, n.T7)(o));
        }
        getAssetProfileInfos(d, o) {
          return this.http.get(
            `/api/assetProfileInfos${d.toQuery()}`,
            (0, n.T7)(o)
          );
        }
      }
      (C.ɵfac = function (d) {
        return new (d || C)(e.ɵɵinject(a.HttpClient));
      }),
        (C.ɵprov = e.ɵɵdefineInjectable({
          token: C,
          factory: C.ɵfac,
          providedIn: "root",
        }));
    },
    68677: (ee, R, t) => {
      "use strict";
      t.d(R, { d: () => C });
      var e = t(37716),
        n = t(66054),
        a = t(91841);
      class C {
        constructor(d) {
          this.http = d;
        }
        getTenantAssetInfos(d, o = "", i) {
          return this.http.get(
            `/api/tenant/assetInfos${d.toQuery()}&type=${o}`,
            (0, n.T7)(i)
          );
        }
        getTenantAssetInfosByAssetProfileId(d, o = "", i) {
          return this.http.get(
            `/api/tenant/assetInfos${d.toQuery()}&assetProfileId=${o}`,
            (0, n.T7)(i)
          );
        }
        getCustomerAssetInfos(d, o, i = "", g) {
          return this.http.get(
            `/api/customer/${d}/assetInfos${o.toQuery()}&type=${i}`,
            (0, n.T7)(g)
          );
        }
        getCustomerAssetInfosByAssetProfileId(d, o, i = "", g) {
          return this.http.get(
            `/api/customer/${d}/assetInfos${o.toQuery()}&assetProfileId=${i}`,
            (0, n.T7)(g)
          );
        }
        getAsset(d, o) {
          return this.http.get(`/api/asset/${d}`, (0, n.T7)(o));
        }
        getAssets(d, o) {
          return this.http.get(
            `/api/assets?assetIds=${d.join(",")}`,
            (0, n.T7)(o)
          );
        }
        getAssetInfo(d, o) {
          return this.http.get(`/api/asset/info/${d}`, (0, n.T7)(o));
        }
        saveAsset(d, o) {
          return this.http.post("/api/asset", d, (0, n.T7)(o));
        }
        deleteAsset(d, o) {
          return this.http.delete(`/api/asset/${d}`, (0, n.T7)(o));
        }
        getAssetTypes(d) {
          return this.http.get("/api/asset/types", (0, n.T7)(d));
        }
        makeAssetPublic(d, o) {
          return this.http.post(
            `/api/customer/public/asset/${d}`,
            null,
            (0, n.T7)(o)
          );
        }
        assignAssetToCustomer(d, o, i) {
          return this.http.post(
            `/api/customer/${d}/asset/${o}`,
            null,
            (0, n.T7)(i)
          );
        }
        unassignAssetFromCustomer(d, o) {
          return this.http.delete(`/api/customer/asset/${d}`, (0, n.T7)(o));
        }
        findByQuery(d, o) {
          return this.http.post("/api/assets", d, (0, n.T7)(o));
        }
        findByName(d, o) {
          return this.http.get(
            `/api/tenant/assets?assetName=${d}`,
            (0, n.T7)(o)
          );
        }
        assignAssetToEdge(d, o, i) {
          return this.http.post(
            `/api/edge/${d}/asset/${o}`,
            null,
            (0, n.T7)(i)
          );
        }
        unassignAssetFromEdge(d, o, i) {
          return this.http.delete(`/api/edge/${d}/asset/${o}`, (0, n.T7)(i));
        }
        getEdgeAssets(d, o, i = "", g) {
          return this.http.get(
            `/api/edge/${d}/assets${o.toQuery()}&type=${i}`,
            (0, n.T7)(g)
          );
        }
        bulkImportAssets(d, o) {
          return this.http.post("/api/asset/bulk_import", d, (0, n.T7)(o));
        }
      }
      (C.ɵfac = function (d) {
        return new (d || C)(e.ɵɵinject(a.HttpClient));
      }),
        (C.ɵprov = e.ɵɵdefineInjectable({
          token: C,
          factory: C.ɵfac,
          providedIn: "root",
        }));
    },
    69385: (ee, R, t) => {
      "use strict";
      t.d(R, { c: () => g });
      var e = t(37716),
        n = t(66054),
        a = t(25917),
        C = t(35758),
        s = t(69331),
        d = t(41960),
        o = t(95341),
        i = t(91841);
      class g {
        constructor(y) {
          this.http = y;
        }
        getEntityAttributes(y, m, r, h) {
          let p = `/api/plugins/telemetry/${y.entityType}/${y.id}/values/attributes/${m}`;
          return (
            r && r.length && (p += `?keys=${r.join(",")}`),
            this.http.get(p, (0, n.T7)(h))
          );
        }
        deleteEntityAttributes(y, m, r, h) {
          const p = r.map((_) => encodeURIComponent(_.key)).join(",");
          return this.http.delete(
            `/api/plugins/telemetry/${y.entityType}/${y.id}/${m}?keys=${p}`,
            (0, n.T7)(h)
          );
        }
        deleteEntityTimeseries(y, m, r = !1, h, p, _) {
          const E = m.map((v) => encodeURIComponent(v.key)).join(",");
          let c = `/api/plugins/telemetry/${y.entityType}/${y.id}/timeseries/delete?keys=${E}&deleteAllDataForKeys=${r}`;
          return (
            (0, d.nu)(h) && (c += `&startTs=${h}`),
            (0, d.nu)(p) && (c += `&endTs=${p}`),
            this.http.delete(c, (0, n.T7)(_))
          );
        }
        saveEntityAttributes(y, m, r, h) {
          const p = {},
            _ = [];
          let E, c;
          return (
            r.forEach((v) => {
              (0, d.nu)(v.value) ? (p[v.key] = v.value) : _.push(v);
            }),
            (E = _.length
              ? this.deleteEntityAttributes(y, m, _, h)
              : (0, a.of)(null)),
            (c = Object.keys(p).length
              ? this.http.post(
                  `/api/plugins/telemetry/${y.entityType}/${y.id}/${m}`,
                  p,
                  (0, n.T7)(h)
                )
              : (0, a.of)(null)),
            (0, C.D)([c, E])
          );
        }
        saveEntityTimeseries(y, m, r, h) {
          const p = {},
            _ = [];
          let E, c;
          return (
            r.forEach((v) => {
              (0, d.nu)(v.value) ? (p[v.key] = v.value) : _.push(v);
            }),
            (E = _.length
              ? this.deleteEntityTimeseries(y, _, !0, null, null, h)
              : (0, a.of)(null)),
            (c = Object.keys(p).length
              ? this.http.post(
                  `/api/plugins/telemetry/${y.entityType}/${y.id}/timeseries/${m}`,
                  p,
                  (0, n.T7)(h)
                )
              : (0, a.of)(null)),
            (0, C.D)([c, E])
          );
        }
        getEntityTimeseries(
          y,
          m,
          r,
          h,
          p = 100,
          _ = o.Eu.NONE,
          E,
          c = s.WC.DESC,
          v = !1,
          I
        ) {
          let l = `/api/plugins/telemetry/${y.entityType}/${
            y.id
          }/values/timeseries?keys=${m.join(",")}&startTs=${r}&endTs=${h}`;
          return (
            (0, d.nu)(p) && (l += `&limit=${p}`),
            (0, d.nu)(_) && (l += `&agg=${_}`),
            (0, d.nu)(E) && (l += `&interval=${E}`),
            (0, d.nu)(c) && (l += `&orderBy=${c}`),
            (0, d.nu)(v) && (l += `&useStrictDataTypes=${v}`),
            this.http.get(l, (0, n.T7)(I))
          );
        }
        getEntityTimeseriesLatest(y, m, r = !1, h) {
          let p = `/api/plugins/telemetry/${y.entityType}/${y.id}/values/timeseries?useStrictDataTypes=${r}`;
          return (
            (0, d.nu)(m) && m.length && (p += `&keys=${m.join(",")}`),
            this.http.get(p, (0, n.T7)(h))
          );
        }
      }
      (g.ɵfac = function (y) {
        return new (y || g)(e.ɵɵinject(i.HttpClient));
      }),
        (g.ɵprov = e.ɵɵdefineInjectable({
          token: g,
          factory: g.ɵfac,
          providedIn: "root",
        }));
    },
    81375: (ee, R, t) => {
      "use strict";
      t.d(R, { W: () => d });
      var e = t(37716),
        n = t(66054),
        a = t(25917),
        C = t(88002),
        s = t(91841);
      class d {
        constructor(i) {
          (this.http = i),
            (this.componentsByTypeByRuleChainType = new Map()),
            (this.componentsByClazz = new Map());
        }
        getComponentDescriptorsByType(i, g, D) {
          this.componentsByTypeByRuleChainType.get(g) ||
            this.componentsByTypeByRuleChainType.set(g, new Map());
          const y = this.componentsByTypeByRuleChainType.get(g).get(i);
          return y
            ? (0, a.of)(y)
            : this.http
                .get(`/api/components/${i}&ruleChainType=${g}`, (0, n.T7)(D))
                .pipe(
                  (0, C.U)(
                    (m) => (
                      this.componentsByTypeByRuleChainType.get(g).set(i, m),
                      m.forEach((r) => {
                        this.componentsByClazz.set(r.clazz, r);
                      }),
                      m
                    )
                  )
                );
        }
        getComponentDescriptorsByTypes(i, g, D) {
          this.componentsByTypeByRuleChainType.get(g) ||
            this.componentsByTypeByRuleChainType.set(g, new Map());
          let y = [];
          for (let m = i.length - 1; m >= 0; m--) {
            const r = i[m],
              h = this.componentsByTypeByRuleChainType.get(g).get(r);
            h && ((y = y.concat(h)), i.splice(m, 1));
          }
          return i.length
            ? this.http
                .get(
                  `/api/components?componentTypes=${i.join(
                    ","
                  )}&ruleChainType=${g}`,
                  (0, n.T7)(D)
                )
                .pipe(
                  (0, C.U)(
                    (m) => (
                      m.forEach((r) => {
                        let h = this.componentsByTypeByRuleChainType
                          .get(g)
                          .get(r.type);
                        h ||
                          ((h = new Array()),
                          this.componentsByTypeByRuleChainType
                            .get(g)
                            .set(r.type, h)),
                          h.push(r),
                          this.componentsByClazz.set(r.clazz, r);
                      }),
                      (y = y.concat(m)),
                      y
                    )
                  )
                )
            : (0, a.of)(y);
        }
        getComponentDescriptorByClazz(i, g) {
          const D = this.componentsByClazz.get(i);
          return D
            ? (0, a.of)(D)
            : this.http
                .get(`/api/component/${i}`, (0, n.T7)(g))
                .pipe((0, C.U)((y) => (this.componentsByClazz.set(i, y), y)));
        }
      }
      (d.ɵfac = function (i) {
        return new (i || d)(e.ɵɵinject(s.HttpClient));
      }),
        (d.ɵprov = e.ɵɵdefineInjectable({
          token: d,
          factory: d.ɵfac,
          providedIn: "root",
        }));
    },
    66993: (ee, R, t) => {
      "use strict";
      t.d(R, { v: () => C });
      var e = t(37716),
        n = t(66054),
        a = t(91841);
      class C {
        constructor(d) {
          this.http = d;
        }
        getCustomers(d, o) {
          return this.http.get(`/api/customers${d.toQuery()}`, (0, n.T7)(o));
        }
        getCustomer(d, o) {
          return this.http.get(`/api/customer/${d}`, (0, n.T7)(o));
        }
        saveCustomer(d, o) {
          return this.http.post("/api/customer", d, (0, n.T7)(o));
        }
        deleteCustomer(d, o) {
          return this.http.delete(`/api/customer/${d}`, (0, n.T7)(o));
        }
      }
      (C.ɵfac = function (d) {
        return new (d || C)(e.ɵɵinject(a.HttpClient));
      }),
        (C.ɵprov = e.ɵɵdefineInjectable({
          token: C,
          factory: C.ɵfac,
          providedIn: "root",
        }));
    },
    50377: (ee, R, t) => {
      "use strict";
      t.d(R, { s: () => D });
      var e = t(37716),
        n = t(66054),
        a = t(11877),
        C = t(39895),
        s = t(45435),
        d = t(88002),
        o = t(35226),
        i = t(51307),
        g = t(91841);
      class D {
        constructor(m, r, h) {
          (this.http = m),
            (this.router = r),
            (this.window = h),
            (this.currentUrl = this.router.url.split("?")[0]),
            this.router.events
              .pipe((0, s.h)((p) => p instanceof C.NavigationEnd))
              .subscribe(() => {
                const p = this.router.url.split("?")[0];
                this.currentUrl !== p &&
                  ((this.stDiffObservable = null), (this.currentUrl = p));
              });
        }
        getTenantDashboards(m, r) {
          return this.http.get(
            `/api/tenant/dashboards${m.toQuery()}`,
            (0, n.T7)(r)
          );
        }
        getTenantDashboardsByTenantId(m, r, h) {
          return this.http.get(
            `/api/tenant/${m}/dashboards${r.toQuery()}`,
            (0, n.T7)(h)
          );
        }
        getCustomerDashboards(m, r, h) {
          return this.http.get(
            `/api/customer/${m}/dashboards${r.toQuery()}`,
            (0, n.T7)(h)
          );
        }
        getDashboard(m, r) {
          return this.http.get(`/api/dashboard/${m}`, (0, n.T7)(r));
        }
        getDashboardInfo(m, r) {
          return this.http.get(`/api/dashboard/info/${m}`, (0, n.T7)(r));
        }
        saveDashboard(m, r) {
          return this.http.post("/api/dashboard", m, (0, n.T7)(r));
        }
        deleteDashboard(m, r) {
          return this.http.delete(`/api/dashboard/${m}`, (0, n.T7)(r));
        }
        assignDashboardToCustomer(m, r, h) {
          return this.http.post(
            `/api/customer/${m}/dashboard/${r}`,
            null,
            (0, n.T7)(h)
          );
        }
        unassignDashboardFromCustomer(m, r, h) {
          return this.http.delete(
            `/api/customer/${m}/dashboard/${r}`,
            (0, n.T7)(h)
          );
        }
        makeDashboardPublic(m, r) {
          return this.http.post(
            `/api/customer/public/dashboard/${m}`,
            null,
            (0, n.T7)(r)
          );
        }
        makeDashboardPrivate(m, r) {
          return this.http.delete(
            `/api/customer/public/dashboard/${m}`,
            (0, n.T7)(r)
          );
        }
        updateDashboardCustomers(m, r, h) {
          return this.http.post(
            `/api/dashboard/${m}/customers`,
            r,
            (0, n.T7)(h)
          );
        }
        addDashboardCustomers(m, r, h) {
          return this.http.post(
            `/api/dashboard/${m}/customers/add`,
            r,
            (0, n.T7)(h)
          );
        }
        removeDashboardCustomers(m, r, h) {
          return this.http.post(
            `/api/dashboard/${m}/customers/remove`,
            r,
            (0, n.T7)(h)
          );
        }
        getHomeDashboard(m) {
          return this.http.get("/api/dashboard/home", (0, n.T7)(m));
        }
        getTenantHomeDashboardInfo(m) {
          return this.http.get("/api/tenant/dashboard/home/info", (0, n.T7)(m));
        }
        setTenantHomeDashboardInfo(m, r) {
          return this.http.post(
            "/api/tenant/dashboard/home/info",
            m,
            (0, n.T7)(r)
          );
        }
        getPublicDashboardLink(m) {
          if (m && m.assignedCustomers && m.assignedCustomers.length > 0) {
            const r = m.assignedCustomers.filter((h) => h.public);
            if (r.length > 0) {
              const h = r[0].customerId.id;
              let p =
                this.window.location.protocol +
                "//" +
                this.window.location.hostname;
              const _ = this.window.location.port;
              return (
                _ &&
                  _.length > 0 &&
                  "80" !== _ &&
                  "443" !== _ &&
                  (p += ":" + _),
                (p += `/dashboard/${m.id.id}?publicId=${h}`),
                p
              );
            }
          }
          return null;
        }
        getServerTimeDiff() {
          if (!this.stDiffObservable) {
            const m = "/api/dashboard/serverTime",
              r = Date.now();
            this.stDiffObservable = this.http.get(m, (0, n.gM)(!0)).pipe(
              (0, d.U)((h) => {
                const p = Date.now();
                return Math.ceil(h - (r + p) / 2);
              }),
              (0, o._)(1),
              (0, i.x)()
            );
          }
          return this.stDiffObservable;
        }
        getEdgeDashboards(m, r, h = "", p) {
          return this.http.get(
            `/api/edge/${m}/dashboards${r.toQuery()}&type=${h}`,
            (0, n.T7)(p)
          );
        }
        assignDashboardToEdge(m, r, h) {
          return this.http.post(
            `/api/edge/${m}/dashboard/${r}`,
            null,
            (0, n.T7)(h)
          );
        }
        unassignDashboardFromEdge(m, r, h) {
          return this.http.delete(
            `/api/edge/${m}/dashboard/${r}`,
            (0, n.T7)(h)
          );
        }
      }
      (D.ɵfac = function (m) {
        return new (m || D)(
          e.ɵɵinject(g.HttpClient),
          e.ɵɵinject(C.Router),
          e.ɵɵinject(a.m9)
        );
      }),
        (D.ɵprov = e.ɵɵdefineInjectable({
          token: D,
          factory: D.ɵfac,
          providedIn: "root",
        }));
    },
    130: (ee, R, t) => {
      "use strict";
      t.d(R, { A: () => m });
      var e = t(37716),
        n = t(66054),
        a = t(25917),
        C = t(40205),
        s = t(41960),
        d = t(54481),
        o = t(68307),
        i = t(88002),
        g = t(19773),
        D = t(6456),
        y = t(91841);
      class m {
        constructor(h, p) {
          (this.http = h),
            (this.otaPackageService = p),
            (this.lwm2mBootstrapSecurityInfoInMemoryCache = new Map());
        }
        getDeviceProfiles(h, p) {
          return this.http.get(
            `/api/deviceProfiles${h.toQuery()}`,
            (0, n.T7)(p)
          );
        }
        getDeviceProfile(h, p) {
          return this.http.get(`/api/deviceProfile/${h}`, (0, n.T7)(p));
        }
        getLwm2mObjects(h, p, _, E) {
          let c = `/api/resource/lwm2m/?sortProperty=${h.property}&sortOrder=${h.direction}`;
          return (
            (0, s.nu)(p) && p.length > 0 && (c += `&objectIds=${p}`),
            (0, s.nu)(_) && !(0, s.jH)(_) && (c += `&searchText=${_}`),
            this.http.get(c, (0, n.T7)(E))
          );
        }
        getLwm2mBootstrapSecurityInfo(h, p) {
          const _ = this.lwm2mBootstrapSecurityInfoInMemoryCache.get(h);
          return _
            ? (0, a.of)(_)
            : this.http
                .get(`/api/lwm2m/deviceProfile/bootstrap/${h}`, (0, n.T7)(p))
                .pipe(
                  (0, o.b)((E) =>
                    this.lwm2mBootstrapSecurityInfoInMemoryCache.set(h, E)
                  )
                );
        }
        getLwm2mBootstrapSecurityInfoBySecurityType(h, p = D.kE.NO_SEC, _) {
          return this.getLwm2mBootstrapSecurityInfo(h, _).pipe(
            (0, i.U)((E) => {
              const c = (0, s.I8)(E);
              if (c)
                switch (p) {
                  case D.kE.PSK:
                    (c.port = c.securityPort),
                      (c.host = c.securityHost),
                      (c.serverPublicKey = "");
                    break;
                  case D.kE.RPK:
                  case D.kE.X509:
                    (c.port = c.securityPort), (c.host = c.securityHost);
                    break;
                  case D.kE.NO_SEC:
                    c.serverPublicKey = "";
                }
              return c;
            })
          );
        }
        getLwm2mObjectsPage(h, p) {
          return this.http.get(
            `/api/resource/lwm2m/page${h.toQuery()}`,
            (0, n.T7)(p)
          );
        }
        saveDeviceProfileAndConfirmOtaChange(h, p, _) {
          return this.otaPackageService
            .confirmDialogUpdatePackage(p, h)
            .pipe(
              (0, g.zg)((E) =>
                E
                  ? this.saveDeviceProfile(p, _)
                  : (0, C._)("Canceled saving device profiles")
              )
            );
        }
        saveDeviceProfile(h, p) {
          return this.http.post("/api/deviceProfile", h, (0, n.T7)(p));
        }
        deleteDeviceProfile(h, p) {
          return this.http.delete(`/api/deviceProfile/${h}`, (0, n.T7)(p));
        }
        setDefaultDeviceProfile(h, p) {
          return this.http.post(
            `/api/deviceProfile/${h}/default`,
            (0, n.T7)(p)
          );
        }
        getDefaultDeviceProfileInfo(h) {
          return this.http.get("/api/deviceProfileInfo/default", (0, n.T7)(h));
        }
        getDeviceProfileInfo(h, p) {
          return this.http.get(`/api/deviceProfileInfo/${h}`, (0, n.T7)(p));
        }
        getDeviceProfileInfos(h, p, _) {
          let E = `/api/deviceProfileInfos${h.toQuery()}`;
          return (
            (0, s.nu)(p) && (E += `&transportType=${p}`),
            this.http.get(E, (0, n.T7)(_))
          );
        }
        getDeviceProfileDevicesAttributesKeys(h, p) {
          let _ = "/api/deviceProfile/devices/keys/attributes";
          return (
            (0, s.nu)(h) && (_ += `?deviceProfileId=${h}`),
            this.http.get(_, (0, n.T7)(p))
          );
        }
        getDeviceProfileDevicesTimeseriesKeys(h, p) {
          let _ = "/api/deviceProfile/devices/keys/timeseries";
          return (
            (0, s.nu)(h) && (_ += `?deviceProfileId=${h}`),
            this.http.get(_, (0, n.T7)(p))
          );
        }
      }
      (m.ɵfac = function (h) {
        return new (h || m)(e.ɵɵinject(y.HttpClient), e.ɵɵinject(d.H));
      }),
        (m.ɵprov = e.ɵɵdefineInjectable({
          token: m,
          factory: m.ɵfac,
          providedIn: "root",
        }));
    },
    33441: (ee, R, t) => {
      "use strict";
      t.d(R, { U: () => d });
      var e = t(37716),
        n = t(66054),
        a = t(88229),
        C = t(88951),
        s = t(91841);
      class d {
        constructor(i) {
          this.http = i;
        }
        getTenantDeviceInfos(i, g = "", D) {
          return this.http.get(
            `/api/tenant/deviceInfos${i.toQuery()}&type=${g}`,
            (0, n.T7)(D)
          );
        }
        getTenantDeviceInfosByDeviceProfileId(i, g = "", D) {
          return this.http.get(
            `/api/tenant/deviceInfos${i.toQuery()}&deviceProfileId=${g}`,
            (0, n.T7)(D)
          );
        }
        getCustomerDeviceInfos(i, g, D = "", y) {
          return this.http.get(
            `/api/customer/${i}/deviceInfos${g.toQuery()}&type=${D}`,
            (0, n.T7)(y)
          );
        }
        getCustomerDeviceInfosByDeviceProfileId(i, g, D = "", y) {
          return this.http.get(
            `/api/customer/${i}/deviceInfos${g.toQuery()}&deviceProfileId=${D}`,
            (0, n.T7)(y)
          );
        }
        getDevice(i, g) {
          return this.http.get(`/api/device/${i}`, (0, n.T7)(g));
        }
        getDevices(i, g) {
          return this.http.get(
            `/api/devices?deviceIds=${i.join(",")}`,
            (0, n.T7)(g)
          );
        }
        getDeviceInfo(i, g) {
          return this.http.get(`/api/device/info/${i}`, (0, n.T7)(g));
        }
        saveDevice(i, g) {
          return this.http.post("/api/device", i, (0, n.T7)(g));
        }
        deleteDevice(i, g) {
          return this.http.delete(`/api/device/${i}`, (0, n.T7)(g));
        }
        getDeviceTypes(i) {
          return this.http.get("/api/device/types", (0, n.T7)(i));
        }
        getDeviceCredentials(i, g = !1, D) {
          const y = `/api/device/${i}/credentials`;
          if (g) {
            const m = new a.t(),
              r = new XMLHttpRequest();
            r.open("GET", y, !1),
              r.setRequestHeader("Accept", "application/json, text/plain, */*");
            const h = C.e.getJwtToken();
            if (
              (h && r.setRequestHeader("X-Authorization", "Bearer " + h),
              r.send(null),
              200 === r.status)
            ) {
              const p = JSON.parse(r.responseText);
              m.next(p);
            } else m.error(null);
            return m.asObservable();
          }
          return this.http.get(y, (0, n.T7)(D));
        }
        saveDeviceCredentials(i, g) {
          return this.http.post("/api/device/credentials", i, (0, n.T7)(g));
        }
        makeDevicePublic(i, g) {
          return this.http.post(
            `/api/customer/public/device/${i}`,
            null,
            (0, n.T7)(g)
          );
        }
        assignDeviceToCustomer(i, g, D) {
          return this.http.post(
            `/api/customer/${i}/device/${g}`,
            null,
            (0, n.T7)(D)
          );
        }
        unassignDeviceFromCustomer(i, g) {
          return this.http.delete(`/api/customer/device/${i}`, (0, n.T7)(g));
        }
        sendOneWayRpcCommand(i, g, D) {
          return this.http.post(`/api/rpc/oneway/${i}`, g, (0, n.T7)(D));
        }
        sendTwoWayRpcCommand(i, g, D) {
          return this.http.post(`/api/rpc/twoway/${i}`, g, (0, n.T7)(D));
        }
        getPersistedRpc(i, g = !1, D) {
          return this.http.get(`/api/rpc/persistent/${i}`, (0, n.T7)(D));
        }
        deletePersistedRpc(i, g) {
          return this.http.delete(`/api/rpc/persistent/${i}`, (0, n.T7)(g));
        }
        getPersistedRpcRequests(i, g, D, y) {
          let m = `/api/rpc/persistent/device/${i}${g.toQuery()}`;
          return (
            D && D.length && (m += `&rpcStatus=${D}`),
            this.http.get(m, (0, n.T7)(y))
          );
        }
        findByQuery(i, g) {
          return this.http.post("/api/devices", i, (0, n.T7)(g));
        }
        findByName(i, g) {
          return this.http.get(
            `/api/tenant/devices?deviceName=${i}`,
            (0, n.T7)(g)
          );
        }
        claimDevice(i, g, D) {
          return this.http.post(
            `/api/customer/device/${i}/claim`,
            g,
            (0, n.T7)(D)
          );
        }
        unclaimDevice(i, g) {
          return this.http.delete(
            `/api/customer/device/${i}/claim`,
            (0, n.T7)(g)
          );
        }
        assignDeviceToEdge(i, g, D) {
          return this.http.post(`/api/edge/${i}/device/${g}`, (0, n.T7)(D));
        }
        unassignDeviceFromEdge(i, g, D) {
          return this.http.delete(`/api/edge/${i}/device/${g}`, (0, n.T7)(D));
        }
        getEdgeDevices(i, g, D = "", y) {
          return this.http.get(
            `/api/edge/${i}/devices${g.toQuery()}&type=${D}`,
            (0, n.T7)(y)
          );
        }
        bulkImportDevices(i, g) {
          return this.http.post("/api/device/bulk_import", i, (0, n.T7)(g));
        }
      }
      (d.ɵfac = function (i) {
        return new (i || d)(e.ɵɵinject(s.HttpClient));
      }),
        (d.ɵprov = e.ɵɵdefineInjectable({
          token: d,
          factory: d.ɵfac,
          providedIn: "root",
        }));
    },
    80140: (ee, R, t) => {
      "use strict";
      t.d(R, { A: () => C });
      var e = t(37716),
        n = t(66054),
        a = t(91841);
      class C {
        constructor(d) {
          this.http = d;
        }
        getEdges(d, o) {
          return this.http.get(
            `/api/edges?edgeIds=${d.join(",")}`,
            (0, n.T7)(o)
          );
        }
        getEdge(d, o) {
          return this.http.get(`/api/edge/${d}`, (0, n.T7)(o));
        }
        getEdgeInfo(d, o) {
          return this.http.get(`/api/edge/info/${d}`, (0, n.T7)(o));
        }
        saveEdge(d, o) {
          return this.http.post("/api/edge", d, (0, n.T7)(o));
        }
        deleteEdge(d, o) {
          return this.http.delete(`/api/edge/${d}`, (0, n.T7)(o));
        }
        getEdgeTypes(d) {
          return this.http.get("/api/edge/types", (0, n.T7)(d));
        }
        getCustomerEdgeInfos(d, o, i = "", g) {
          return this.http.get(
            `/api/customer/${d}/edgeInfos${o.toQuery()}&type=${i}`,
            (0, n.T7)(g)
          );
        }
        assignEdgeToCustomer(d, o, i) {
          return this.http.post(`/api/customer/${d}/edge/${o}`, (0, n.T7)(i));
        }
        unassignEdgeFromCustomer(d, o) {
          return this.http.delete(`/api/customer/edge/${d}`, (0, n.T7)(o));
        }
        makeEdgePublic(d, o) {
          return this.http.post(
            `/api/customer/public/edge/${d}`,
            null,
            (0, n.T7)(o)
          );
        }
        getTenantEdgeInfos(d, o = "", i) {
          return this.http.get(
            `/api/tenant/edgeInfos${d.toQuery()}&type=${o}`,
            (0, n.T7)(i)
          );
        }
        findByQuery(d, o) {
          return this.http.post("/api/edges", d, (0, n.T7)(o));
        }
        getEdgeEvents(d, o, i) {
          return this.http.get(
            `/api/edge/${d.id}/events${o.toQuery()}`,
            (0, n.T7)(i)
          );
        }
        syncEdge(d, o) {
          return this.http.post(`/api/edge/sync/${d}`, d, (0, n.T7)(o));
        }
        findMissingToRelatedRuleChains(d, o) {
          return this.http.get(
            `/api/edge/missingToRelatedRuleChains/${d}`,
            (0, n.T7)(o)
          );
        }
        findByName(d, o) {
          return this.http.get(`/api/tenant/edges?edgeName=${d}`, (0, n.T7)(o));
        }
        bulkImportEdges(d, o) {
          return this.http.post("/api/edge/bulk_import", d, (0, n.T7)(o));
        }
      }
      (C.ɵfac = function (d) {
        return new (d || C)(e.ɵɵinject(a.HttpClient));
      }),
        (C.ɵprov = e.ɵɵdefineInjectable({
          token: C,
          factory: C.ɵfac,
          providedIn: "root",
        }));
    },
    16624: (ee, R, t) => {
      "use strict";
      t.d(R, { Q: () => c });
      var e = t(37716),
        n = t(66054),
        a = t(25917),
        C = t(46797),
        s = t(74768),
        d = t(52042),
        o = t(86710),
        i = t(54787),
        g = t(5304),
        D = t(68307),
        y = t(43190),
        m = t(70409),
        r = t(68939),
        h = t(9492),
        p = t(91841),
        _ = t(29790),
        E = t(39075);
      class c {
        constructor(I, l, T, O) {
          (this.http = I),
            (this.translate = l),
            (this.sanitizer = T),
            (this.store = O),
            (this.branchList = null),
            this.store.pipe((0, o.select)(i.To)).subscribe(() => {
              this.branchList = null;
            });
        }
        clearBranchList() {
          this.branchList = null;
        }
        listBranches() {
          return this.branchList
            ? (0, a.of)(this.branchList)
            : this.http
                .get(
                  "/api/entities/vc/branches",
                  (0, n.T7)({ ignoreErrors: !0, ignoreLoading: !1 })
                )
                .pipe(
                  (0, g.K)(() => (0, a.of)([])),
                  (0, D.b)((I) => {
                    this.branchList = I;
                  })
                );
        }
        getEntityDataInfo(I, l, T) {
          return this.http.get(
            `/api/entities/vc/info/${l}/${I.entityType}/${I.id}`,
            (0, n.T7)(T)
          );
        }
        saveEntitiesVersion(I, l) {
          return (
            this.store.dispatch(new h.kY()),
            this.http
              .post(
                "/api/entities/vc/version",
                I,
                (0, n.T7)(
                  Object.assign(Object.assign({}, l), { ignoreLoading: !0 })
                )
              )
              .pipe(
                (0, y.w)((T) =>
                  (0, C.H)(0, 2e3).pipe(
                    (0, y.w)(() => this.getVersionCreateRequestStatus(T, l)),
                    (0, m.o)((O) => !O.done, !0)
                  )
                ),
                (0, r.x)(() => {
                  const T = I.branch;
                  this.branchList &&
                    !this.branchList.find((O) => O.name === T) &&
                    (this.branchList = null),
                    this.store.dispatch(new h.pw());
                })
              )
          );
        }
        getVersionCreateRequestStatus(I, l) {
          return this.http.get(
            `/api/entities/vc/version/${I}/status`,
            (0, n.T7)(
              Object.assign(Object.assign({}, l), { ignoreLoading: !0 })
            )
          );
        }
        listEntityVersions(I, l, T, O) {
          const w = encodeURIComponent(l);
          return this.http.get(
            `/api/entities/vc/version/${T.entityType}/${
              T.id
            }${I.toQuery()}&branch=${w}`,
            (0, n.T7)(O)
          );
        }
        listEntityTypeVersions(I, l, T, O) {
          const w = encodeURIComponent(l);
          return this.http.get(
            `/api/entities/vc/version/${T}${I.toQuery()}&branch=${w}`,
            (0, n.T7)(O)
          );
        }
        listVersions(I, l, T) {
          const O = encodeURIComponent(l);
          return this.http.get(
            `/api/entities/vc/version${I.toQuery()}&branch=${O}`,
            (0, n.T7)(T)
          );
        }
        loadEntitiesVersion(I, l) {
          return (
            this.store.dispatch(new h.kY()),
            this.http
              .post(
                "/api/entities/vc/entity",
                I,
                (0, n.T7)(
                  Object.assign(Object.assign({}, l), { ignoreLoading: !0 })
                )
              )
              .pipe(
                (0, y.w)((T) =>
                  (0, C.H)(0, 2e3).pipe(
                    (0, y.w)(() => this.getVersionLoadRequestStatus(T, l)),
                    (0, m.o)((O) => !O.done, !0)
                  )
                ),
                (0, r.x)(() => {
                  this.store.dispatch(new h.pw());
                })
              )
          );
        }
        getVersionLoadRequestStatus(I, l) {
          return this.http.get(
            `/api/entities/vc/entity/${I}/status`,
            (0, n.T7)(
              Object.assign(Object.assign({}, l), { ignoreLoading: !0 })
            )
          );
        }
        compareEntityDataToVersion(I, l, T) {
          return this.http.get(
            `/api/entities/vc/diff/${I.entityType}/${I.id}?versionId=${l}`,
            (0, n.T7)(T)
          );
        }
        entityLoadErrorToMessage(I) {
          const l = I.type,
            T = s.oK.get(l),
            O = {};
          switch (l) {
            case s.Ku.DEVICE_CREDENTIALS_CONFLICT:
              O.entityId = I.source.id;
              break;
            case s.Ku.MISSING_REFERENCED_ENTITY:
              (O.sourceEntityTypeName = this.translate
                .instant(d.Jr.get(I.source.entityType).type)
                .toLowerCase()),
                (O.sourceEntityId = I.source.id),
                (O.targetEntityTypeName = this.translate
                  .instant(d.Jr.get(I.target.entityType).type)
                  .toLowerCase()),
                (O.targetEntityId = I.target.id);
              break;
            case s.Ku.RUNTIME:
              O.message = I.message;
          }
          return this.sanitizer.bypassSecurityTrustHtml(
            this.translate.instant(T, O)
          );
        }
      }
      (c.ɵfac = function (I) {
        return new (I || c)(
          e.ɵɵinject(p.HttpClient),
          e.ɵɵinject(_.TranslateService),
          e.ɵɵinject(E.DomSanitizer),
          e.ɵɵinject(o.Store)
        );
      }),
        (c.ɵprov = e.ɵɵdefineInjectable({
          token: c,
          factory: c.ɵfac,
          providedIn: "root",
        }));
    },
    71540: (ee, R, t) => {
      "use strict";
      t.d(R, { Z: () => C });
      var e = t(37716),
        n = t(66054),
        a = t(91841);
      class C {
        constructor(d) {
          this.http = d;
        }
        saveRelation(d, o) {
          return this.http.post("/api/relation", d, (0, n.T7)(o));
        }
        deleteRelation(d, o, i, g) {
          return this.http.delete(
            `/api/relation?fromId=${d.id}&fromType=${d.entityType}&relationType=${o}&toId=${i.id}&toType=${i.entityType}`,
            (0, n.T7)(g)
          );
        }
        deleteRelations(d, o) {
          return this.http.delete(
            `/api/relations?entityId=${d.id}&entityType=${d.entityType}`,
            (0, n.T7)(o)
          );
        }
        getRelation(d, o, i, g) {
          return this.http.get(
            `/api/relation?fromId=${d.id}&fromType=${d.entityType}&relationType=${o}&toId=${i.id}&toType=${i.entityType}`,
            (0, n.T7)(g)
          );
        }
        findByFrom(d, o) {
          return this.http.get(
            `/api/relations?fromId=${d.id}&fromType=${d.entityType}`,
            (0, n.T7)(o)
          );
        }
        findInfoByFrom(d, o) {
          return this.http.get(
            `/api/relations/info?fromId=${d.id}&fromType=${d.entityType}`,
            (0, n.T7)(o)
          );
        }
        findByFromAndType(d, o, i) {
          return this.http.get(
            `/api/relations?fromId=${d.id}&fromType=${d.entityType}&relationType=${o}`,
            (0, n.T7)(i)
          );
        }
        findByTo(d, o) {
          return this.http.get(
            `/api/relations?toId=${d.id}&toType=${d.entityType}`,
            (0, n.T7)(o)
          );
        }
        findInfoByTo(d, o) {
          return this.http.get(
            `/api/relations/info?toId=${d.id}&toType=${d.entityType}`,
            (0, n.T7)(o)
          );
        }
        findByToAndType(d, o, i) {
          return this.http.get(
            `/api/relations?toId=${d.id}&toType=${d.entityType}&relationType=${o}`,
            (0, n.T7)(i)
          );
        }
        findByQuery(d, o) {
          return this.http.post("/api/relations", d, (0, n.T7)(o));
        }
        findInfoByQuery(d, o) {
          return this.http.post("/api/relations/info", d, (0, n.T7)(o));
        }
      }
      (C.ɵfac = function (d) {
        return new (d || C)(e.ɵɵinject(a.HttpClient));
      }),
        (C.ɵprov = e.ɵɵdefineInjectable({
          token: C,
          factory: C.ɵfac,
          providedIn: "root",
        }));
    },
    6744: (ee, R, t) => {
      "use strict";
      t.d(R, { l: () => C });
      var e = t(37716),
        n = t(66054),
        a = t(91841);
      class C {
        constructor(d) {
          this.http = d;
        }
        getTenantEntityViewInfos(d, o = "", i) {
          return this.http.get(
            `/api/tenant/entityViewInfos${d.toQuery()}&type=${o}`,
            (0, n.T7)(i)
          );
        }
        getCustomerEntityViewInfos(d, o, i = "", g) {
          return this.http.get(
            `/api/customer/${d}/entityViewInfos${o.toQuery()}&type=${i}`,
            (0, n.T7)(g)
          );
        }
        getEntityView(d, o) {
          return this.http.get(`/api/entityView/${d}`, (0, n.T7)(o));
        }
        getEntityViewInfo(d, o) {
          return this.http.get(`/api/entityView/info/${d}`, (0, n.T7)(o));
        }
        saveEntityView(d, o) {
          return this.http.post("/api/entityView", d, (0, n.T7)(o));
        }
        deleteEntityView(d, o) {
          return this.http.delete(`/api/entityView/${d}`, (0, n.T7)(o));
        }
        getEntityViewTypes(d) {
          return this.http.get("/api/entityView/types", (0, n.T7)(d));
        }
        makeEntityViewPublic(d, o) {
          return this.http.post(
            `/api/customer/public/entityView/${d}`,
            null,
            (0, n.T7)(o)
          );
        }
        assignEntityViewToCustomer(d, o, i) {
          return this.http.post(
            `/api/customer/${d}/entityView/${o}`,
            null,
            (0, n.T7)(i)
          );
        }
        unassignEntityViewFromCustomer(d, o) {
          return this.http.delete(
            `/api/customer/entityView/${d}`,
            (0, n.T7)(o)
          );
        }
        findByQuery(d, o) {
          return this.http.post("/api/entityViews", d, (0, n.T7)(o));
        }
        assignEntityViewToEdge(d, o, i) {
          return this.http.post(
            `/api/edge/${d}/entityView/${o}`,
            null,
            (0, n.T7)(i)
          );
        }
        unassignEntityViewFromEdge(d, o, i) {
          return this.http.delete(
            `/api/edge/${d}/entityView/${o}`,
            (0, n.T7)(i)
          );
        }
        getEdgeEntityViews(d, o, i = "", g) {
          return this.http.get(
            `/api/edge/${d}/entityViews${o.toQuery()}&type=${i}`,
            (0, n.T7)(g)
          );
        }
      }
      (C.ɵfac = function (d) {
        return new (d || C)(e.ɵɵinject(a.HttpClient));
      }),
        (C.ɵprov = e.ɵɵdefineInjectable({
          token: C,
          factory: C.ɵfac,
          providedIn: "root",
        }));
    },
    23914: (ee, R, t) => {
      "use strict";
      t.d(R, { c: () => de });
      var e = t(37716),
        n = t(40205),
        a = t(35758),
        C = t(59193),
        s = t(25917),
        d = t(39774),
        o = t(52042),
        i = t(33441),
        g = t(54525),
        D = t(66993),
        y = t(53372),
        m = t(50377),
        r = t(23360),
        h = t(54787),
        p = t(26311),
        _ = t(88002),
        E = t(7703),
        c = t(94612),
        v = t(2590),
        I = t(19773),
        l = t(5304),
        T = t(68677),
        O = t(6744),
        w = t(69331),
        b = t(66054),
        S = t(40940),
        u = t(62909),
        f = t(1361),
        M = t(91320),
        L = t(76637),
        k = t(71540),
        N = t(41960),
        B = t(92400),
        j = t(69385),
        F = t(36066),
        V = t(29472),
        P = t(54481),
        A = t(80140),
        U = t(83215),
        G = t(97371),
        Z = t(40039),
        le = t(130),
        X = t(15208),
        se = t(58118),
        ne = t(91841),
        re = t(86710);
      class de {
        constructor(
          Q,
          K,
          H,
          x,
          W,
          $,
          J,
          te,
          _e,
          me,
          fe,
          Ce,
          Te,
          be,
          tt,
          Se,
          nt,
          Le,
          Ye
        ) {
          (this.http = Q),
            (this.store = K),
            (this.deviceService = H),
            (this.edgeService = x),
            (this.assetService = W),
            (this.entityViewService = $),
            (this.tenantService = J),
            (this.customerService = te),
            (this.userService = _e),
            (this.ruleChainService = me),
            (this.dashboardService = fe),
            (this.entityRelationService = Ce),
            (this.attributeService = Te),
            (this.otaPackageService = be),
            (this.widgetService = tt),
            (this.deviceProfileService = Se),
            (this.assetProfileService = nt),
            (this.utils = Le),
            (this.queueService = Ye);
        }
        getEntityObservable(Q, K, H) {
          let x;
          switch (Q) {
            case o.py.DEVICE:
              x = this.deviceService.getDevice(K, H);
              break;
            case o.py.ASSET:
              x = this.assetService.getAsset(K, H);
              break;
            case o.py.EDGE:
              x = this.edgeService.getEdge(K, H);
              break;
            case o.py.ENTITY_VIEW:
              x = this.entityViewService.getEntityView(K, H);
              break;
            case o.py.TENANT:
              x = this.tenantService.getTenant(K, H);
              break;
            case o.py.CUSTOMER:
              x = this.customerService.getCustomer(K, H);
              break;
            case o.py.DASHBOARD:
              x = this.dashboardService.getDashboardInfo(K, H);
              break;
            case o.py.USER:
              x = this.userService.getUser(K, H);
              break;
            case o.py.RULE_CHAIN:
              x = this.ruleChainService.getRuleChain(K, H);
              break;
            case o.py.ALARM:
              console.error("Get Alarm Entity is not implemented!");
              break;
            case o.py.OTA_PACKAGE:
              x = this.otaPackageService.getOtaPackageInfo(K, H);
              break;
            case o.py.QUEUE:
              x = this.queueService.getQueueById(K, H);
          }
          return x;
        }
        getEntity(Q, K, H) {
          return this.getEntityObservable(Q, K, H) || (0, n._)(null);
        }
        getEntitiesByIdsObservable(Q, K) {
          const H = [];
          return (
            K.forEach((x) => {
              H.push(Q(x));
            }),
            (0, a.D)(H).pipe(
              (0, _.U)((x) =>
                x
                  ? (x.sort((W, $) => K.indexOf(W.id.id) - K.indexOf($.id.id)),
                    x)
                  : []
              )
            )
          );
        }
        getEntitiesObservable(Q, K, H) {
          let x;
          switch (Q) {
            case o.py.DEVICE:
              x = this.deviceService.getDevices(K, H);
              break;
            case o.py.ASSET:
              x = this.assetService.getAssets(K, H);
              break;
            case o.py.EDGE:
              x = this.edgeService.getEdges(K, H);
              break;
            case o.py.ENTITY_VIEW:
              x = this.getEntitiesByIdsObservable(
                (W) => this.entityViewService.getEntityView(W, H),
                K
              );
              break;
            case o.py.TENANT:
              x = this.getEntitiesByIdsObservable(
                (W) => this.tenantService.getTenant(W, H),
                K
              );
              break;
            case o.py.CUSTOMER:
              x = this.getEntitiesByIdsObservable(
                (W) => this.customerService.getCustomer(W, H),
                K
              );
              break;
            case o.py.DASHBOARD:
              x = this.getEntitiesByIdsObservable(
                (W) => this.dashboardService.getDashboardInfo(W, H),
                K
              );
              break;
            case o.py.USER:
              x = this.getEntitiesByIdsObservable(
                (W) => this.userService.getUser(W, H),
                K
              );
              break;
            case o.py.ALARM:
              console.error("Get Alarm Entity is not implemented!");
              break;
            case o.py.DEVICE_PROFILE:
              x = this.getEntitiesByIdsObservable(
                (W) => this.deviceProfileService.getDeviceProfileInfo(W, H),
                K
              );
              break;
            case o.py.ASSET_PROFILE:
              x = this.getEntitiesByIdsObservable(
                (W) => this.assetProfileService.getAssetProfileInfo(W, H),
                K
              );
              break;
            case o.py.WIDGETS_BUNDLE:
              x = this.getEntitiesByIdsObservable(
                (W) => this.widgetService.getWidgetsBundle(W, H),
                K
              );
          }
          return x;
        }
        getEntities(Q, K, H) {
          return this.getEntitiesObservable(Q, K, H) || (0, n._)(null);
        }
        getSingleTenantByPageLinkObservable(Q, K) {
          const x = (0, h.fP)(this.store).tenantId;
          return this.tenantService.getTenant(x, K).pipe(
            (0, _.U)((W) => {
              const $ = {
                data: [],
                totalPages: 0,
                totalElements: 0,
                hasNext: !1,
              };
              return (
                W.title.toLowerCase().startsWith(Q.textSearch.toLowerCase()) &&
                  ($.data.push(W), ($.totalPages = 1), ($.totalElements = 1)),
                $
              );
            })
          );
        }
        getSingleCustomerByPageLinkObservable(Q, K) {
          const x = (0, h.fP)(this.store).customerId;
          return this.customerService.getCustomer(x, K).pipe(
            (0, _.U)((W) => {
              const $ = {
                data: [],
                totalPages: 0,
                totalElements: 0,
                hasNext: !1,
              };
              return (
                W.title.toLowerCase().startsWith(Q.textSearch.toLowerCase()) &&
                  ($.data.push(W), ($.totalPages = 1), ($.totalElements = 1)),
                $
              );
            })
          );
        }
        getEntitiesByPageLinkObservable(Q, K, H = "", x) {
          let W;
          const $ = (0, h.fP)(this.store),
            J = $.customerId;
          switch (Q) {
            case o.py.DEVICE:
              (K.sortOrder.property = "name"),
                (W =
                  $.authority === p.W.CUSTOMER_USER
                    ? this.deviceService.getCustomerDeviceInfos(J, K, H, x)
                    : this.deviceService.getTenantDeviceInfos(K, H, x));
              break;
            case o.py.ASSET:
              (K.sortOrder.property = "name"),
                (W =
                  $.authority === p.W.CUSTOMER_USER
                    ? this.assetService.getCustomerAssetInfos(J, K, H, x)
                    : this.assetService.getTenantAssetInfos(K, H, x));
              break;
            case o.py.EDGE:
              (K.sortOrder.property = "name"),
                (W =
                  $.authority === p.W.CUSTOMER_USER
                    ? this.edgeService.getCustomerEdgeInfos(J, K, H, x)
                    : this.edgeService.getTenantEdgeInfos(K, H, x));
              break;
            case o.py.ENTITY_VIEW:
              (K.sortOrder.property = "name"),
                (W =
                  $.authority === p.W.CUSTOMER_USER
                    ? this.entityViewService.getCustomerEntityViewInfos(
                        J,
                        K,
                        H,
                        x
                      )
                    : this.entityViewService.getTenantEntityViewInfos(K, H, x));
              break;
            case o.py.TENANT:
              (K.sortOrder.property = "title"),
                (W =
                  $.authority === p.W.TENANT_ADMIN
                    ? this.getSingleTenantByPageLinkObservable(K, x)
                    : this.tenantService.getTenants(K, x));
              break;
            case o.py.CUSTOMER:
              (K.sortOrder.property = "title"),
                (W =
                  $.authority === p.W.CUSTOMER_USER
                    ? this.getSingleCustomerByPageLinkObservable(K, x)
                    : this.customerService.getCustomers(K, x));
              break;
            case o.py.RULE_CHAIN:
              (K.sortOrder.property = "name"),
                (W = G.CI[H]
                  ? this.ruleChainService.getRuleChains(K, H, x)
                  : this.ruleChainService.getRuleChains(K, G.CI.CORE, x));
              break;
            case o.py.DASHBOARD:
              (K.sortOrder.property = "title"),
                (W =
                  $.authority === p.W.CUSTOMER_USER
                    ? this.dashboardService.getCustomerDashboards(J, K, x)
                    : this.dashboardService.getTenantDashboards(K, x));
              break;
            case o.py.USER:
              (K.sortOrder.property = "email"),
                (W = this.userService.getUsers(K));
              break;
            case o.py.ALARM:
              console.error("Get Alarm Entities is not implemented!");
              break;
            case o.py.OTA_PACKAGE:
              (K.sortOrder.property = "title"),
                (W = this.otaPackageService.getOtaPackages(K, x));
              break;
            case o.py.DEVICE_PROFILE:
              (K.sortOrder.property = "name"),
                (W = this.deviceProfileService.getDeviceProfileInfos(
                  K,
                  null,
                  x
                ));
              break;
            case o.py.ASSET_PROFILE:
              (K.sortOrder.property = "name"),
                (W = this.assetProfileService.getAssetProfileInfos(K, x));
              break;
            case o.py.WIDGETS_BUNDLE:
              (K.sortOrder.property = "title"),
                (W = this.widgetService.getWidgetBundles(K, x));
          }
          return W;
        }
        getEntitiesByPageLink(Q, K, H = "", x) {
          const W = this.getEntitiesByPageLinkObservable(Q, K, H, x);
          return W
            ? W.pipe(
                (0, E.jn)(($) =>
                  $.hasNext
                    ? ((K.page += 1),
                      this.getEntitiesByPageLinkObservable(Q, K, H, x))
                    : C.E
                ),
                (0, _.U)(($) => $.data),
                (0, c.b)(($) => $),
                (0, v.q)()
              )
            : (0, s.of)(null);
        }
        getEntitiesByNameFilter(Q, K, H, x = "", W) {
          const $ = new d.H_(H, 0, K, { property: "name", direction: r.N.ASC });
          if (-1 === H)
            return (
              ($.pageSize = 100),
              this.getEntitiesByPageLink(Q, $, x, W).pipe(
                (0, _.U)((J) => (J && J.length ? J : null))
              )
            );
          {
            const J = this.getEntitiesByPageLinkObservable(Q, $, x, W);
            return J
              ? J.pipe(
                  (0, _.U)((te) => (te && te.data.length ? te.data : null))
                )
              : (0, s.of)(null);
          }
        }
        findEntityDataByQuery(Q, K) {
          return this.http.post("/api/entitiesQuery/find", Q, (0, b.T7)(K));
        }
        findEntityKeysByQuery(Q, K = !0, H = !0, x) {
          return this.http.post(
            `/api/entitiesQuery/find/keys?attributes=${K}&timeseries=${H}`,
            Q,
            (0, b.T7)(x)
          );
        }
        findAlarmDataByQuery(Q, K) {
          return this.http.post("/api/alarmsQuery/find", Q, (0, b.T7)(K));
        }
        findEntityInfosByFilterAndName(Q, K, H) {
          const x = { type: F.Y1.ENTITY_FIELD, key: "name" },
            W = {
              entityFilter: Q,
              pageLink: {
                pageSize: 10,
                page: 0,
                sortOrder: { key: x, direction: r.N.ASC },
              },
              entityFields: F.ft,
              keyFilters:
                K && K.length
                  ? [
                      {
                        key: x,
                        valueType: F.KP.STRING,
                        value: null,
                        predicate: {
                          type: F.PQ.STRING,
                          operation: F.X6.STARTS_WITH,
                          ignoreCase: !0,
                          value: { defaultValue: K },
                        },
                      },
                    ]
                  : null,
            };
          return this.findEntityDataByQuery(W, H).pipe(
            (0, _.U)(($) => ({
              data: $.data.map((te) => (0, F.MX)(te)),
              hasNext: $.hasNext,
              totalElements: $.totalElements,
              totalPages: $.totalPages,
            }))
          );
        }
        findSingleEntityInfoByEntityFilter(Q, K) {
          const H = {
            entityFilter: Q,
            pageLink: (0, F.Kv)(1),
            entityFields: F.ft,
          };
          return this.findEntityDataByQuery(H, K).pipe(
            (0, _.U)((x) => {
              if (x.data.length) {
                const W = x.data[0];
                return (0, F.MX)(W);
              }
              return null;
            })
          );
        }
        getAliasFilterTypesByEntityTypes(Q) {
          const K = (0, h.dE)(this.store);
          let H = Object.values(M.aA);
          if (
            (K.edgesSupportEnabled || (H = H.filter((W) => !M.Y_.includes(W))),
            !Q || !Q.length)
          )
            return H;
          const x = [];
          for (const W of H)
            this.filterAliasFilterTypeByEntityTypes(W, Q) && x.push(W);
          return x;
        }
        filterAliasByEntityTypes(Q, K) {
          const H = Q.filter;
          if (this.filterAliasFilterTypeByEntityTypes(H.type, K))
            switch (H.type) {
              case M.aA.singleEntity:
                return K.indexOf(H.singleEntity.entityType) > -1;
              case M.aA.entityList:
              case M.aA.entityName:
              case M.aA.entityType:
                return K.indexOf(H.entityType) > -1;
              case M.aA.stateEntity:
                return !0;
              case M.aA.assetType:
                return K.indexOf(o.py.ASSET) > -1;
              case M.aA.deviceType:
                return K.indexOf(o.py.DEVICE) > -1;
              case M.aA.edgeType:
                return K.indexOf(o.py.EDGE) > -1;
              case M.aA.entityViewType:
                return K.indexOf(o.py.ENTITY_VIEW) > -1;
              case M.aA.relationsQuery:
                if (H.filters && H.filters.length) {
                  let x = !1;
                  for (const W of H.filters) {
                    if (!W.entityTypes || !W.entityTypes.length) {
                      x = !0;
                      break;
                    }
                    for (const $ of W.entityTypes)
                      if (K.indexOf($) > -1) {
                        x = !0;
                        break;
                      }
                  }
                  return x;
                }
                return !0;
              case M.aA.assetSearchQuery:
                return K.indexOf(o.py.ASSET) > -1;
              case M.aA.deviceSearchQuery:
                return K.indexOf(o.py.DEVICE) > -1;
              case M.aA.edgeSearchQuery:
                return K.indexOf(o.py.EDGE) > -1;
              case M.aA.entityViewSearchQuery:
                return K.indexOf(o.py.ENTITY_VIEW) > -1;
            }
          return !1;
        }
        filterAliasFilterTypeByEntityTypes(Q, K) {
          if (!K || !K.length) return !0;
          let H = !1;
          return (
            K.forEach((x) => {
              H = H || this.filterAliasFilterTypeByEntityType(Q, x);
            }),
            H
          );
        }
        filterAliasFilterTypeByEntityType(Q, K) {
          switch (Q) {
            case M.aA.singleEntity:
            case M.aA.entityList:
            case M.aA.entityName:
            case M.aA.entityType:
            case M.aA.stateEntity:
              return !0;
            case M.aA.assetType:
              return K === o.py.ASSET;
            case M.aA.deviceType:
              return K === o.py.DEVICE;
            case M.aA.edgeType:
              return K === o.py.EDGE;
            case M.aA.entityViewType:
              return K === o.py.ENTITY_VIEW;
            case M.aA.relationsQuery:
            case M.aA.apiUsageState:
              return !0;
            case M.aA.assetSearchQuery:
              return K === o.py.ASSET;
            case M.aA.deviceSearchQuery:
              return K === o.py.DEVICE;
            case M.aA.edgeSearchQuery:
              return K === o.py.EDGE;
            case M.aA.entityViewSearchQuery:
              return K === o.py.ENTITY_VIEW;
          }
          return !1;
        }
        prepareAllowedEntityTypesList(Q, K) {
          const H = (0, h.dE)(this.store),
            x = [];
          switch (H.authUser.authority) {
            case p.W.SYS_ADMIN:
              x.push(o.py.TENANT);
              break;
            case p.W.TENANT_ADMIN:
              x.push(o.py.DEVICE),
                x.push(o.py.ASSET),
                x.push(o.py.ENTITY_VIEW),
                x.push(o.py.TENANT),
                x.push(o.py.CUSTOMER),
                x.push(o.py.USER),
                x.push(o.py.DASHBOARD),
                H.edgesSupportEnabled && x.push(o.py.EDGE),
                K &&
                  (x.push(o.Ul.CURRENT_CUSTOMER), x.push(o.Ul.CURRENT_TENANT));
              break;
            case p.W.CUSTOMER_USER:
              x.push(o.py.DEVICE),
                x.push(o.py.ASSET),
                x.push(o.py.ENTITY_VIEW),
                x.push(o.py.CUSTOMER),
                x.push(o.py.USER),
                x.push(o.py.DASHBOARD),
                H.edgesSupportEnabled && x.push(o.py.EDGE),
                K && x.push(o.Ul.CURRENT_CUSTOMER);
          }
          if (
            (K &&
              (x.push(o.Ul.CURRENT_USER),
              H.authUser.authority !== p.W.SYS_ADMIN &&
                x.push(o.Ul.CURRENT_USER_OWNER)),
            Q && Q.length)
          )
            for (let W = x.length - 1; W >= 0; W--)
              -1 === Q.indexOf(x[W]) && x.splice(W, 1);
          return x;
        }
        getEntityFieldKeys(Q, K = "") {
          const H = [L.i.createdTime.keyName],
            x = K.toLowerCase();
          switch (Q) {
            case o.py.USER:
              H.push(L.i.name.keyName),
                H.push(L.i.email.keyName),
                H.push(L.i.firstName.keyName),
                H.push(L.i.lastName.keyName);
              break;
            case o.py.TENANT:
            case o.py.CUSTOMER:
              H.push(L.i.title.keyName),
                H.push(L.i.email.keyName),
                H.push(L.i.country.keyName),
                H.push(L.i.state.keyName),
                H.push(L.i.city.keyName),
                H.push(L.i.address.keyName),
                H.push(L.i.address2.keyName),
                H.push(L.i.zip.keyName),
                H.push(L.i.phone.keyName);
              break;
            case o.py.ENTITY_VIEW:
              H.push(L.i.name.keyName), H.push(L.i.type.keyName);
              break;
            case o.py.DEVICE:
            case o.py.EDGE:
            case o.py.ASSET:
              H.push(L.i.name.keyName),
                H.push(L.i.type.keyName),
                H.push(L.i.label.keyName);
              break;
            case o.py.DASHBOARD:
              H.push(L.i.title.keyName);
              break;
            case o.py.API_USAGE_STATE:
              H.push(L.i.name.keyName);
          }
          return x ? H.filter((W) => 0 === W.toLowerCase().indexOf(x)) : H;
        }
        getAlarmKeys(Q = "") {
          const K = Object.keys(V.rI),
            H = Q.toLowerCase();
          return H ? K.filter((x) => 0 === x.toLowerCase().indexOf(H)) : K;
        }
        getEntityKeys(Q, K, H, x) {
          if (H === w.dG.entityField)
            return (0, s.of)(this.getEntityFieldKeys(Q.entityType, K));
          if (H === w.dG.alarm) return (0, s.of)(this.getAlarmKeys(K));
          let W = `/api/plugins/telemetry/${Q.entityType}/${Q.id}/keys/`;
          return (
            H === w.dG.timeseries
              ? (W += "timeseries")
              : H === w.dG.attribute && (W += "attributes"),
            this.http.get(W, (0, b.T7)(x)).pipe(
              (0, _.U)(($) => {
                if (K) {
                  const J = K.toLowerCase();
                  return $.filter((te) => 0 === te.toLowerCase().indexOf(J));
                }
                return $;
              })
            )
          );
        }
        getEntityKeysByEntityFilter(Q, K, H) {
          if (!K.length) return (0, s.of)([]);
          let x;
          if (
            null !== Q &&
            K.some((W) => [w.dG.timeseries, w.dG.attribute].includes(W))
          ) {
            const W = { entityFilter: Q, pageLink: (0, F.Kv)(100) };
            x = this.findEntityKeysByQuery(
              W,
              K.includes(w.dG.attribute),
              K.includes(w.dG.timeseries),
              H
            );
          } else
            x = (0, s.of)({ attribute: [], timeseries: [], entityTypes: [] });
          return x.pipe(
            (0, _.U)((W) => {
              const $ = [];
              return (
                K.forEach((J) => {
                  let te;
                  switch (J) {
                    case w.dG.entityField:
                      if (W.entityTypes.length) {
                        const _e = [];
                        W.entityTypes.forEach((me) =>
                          _e.push(...this.getEntityFieldKeys(me))
                        ),
                          (te = Array.from(new Set(_e)));
                      }
                      break;
                    case w.dG.alarm:
                      te = this.getAlarmKeys();
                      break;
                    case w.dG.attribute:
                    case w.dG.timeseries:
                      W[J].length && (te = W[J]);
                  }
                  te && $.push(...te.map((_e) => ({ name: _e, type: J })));
                }),
                $
              );
            })
          );
        }
        createDatasourcesFromSubscriptionsInfo(Q) {
          const K = Q.map((H) => this.createDatasourceFromSubscriptionInfo(H));
          return this.utils.generateColors(K), K;
        }
        createAlarmSourceFromSubscriptionInfo(Q) {
          if (Q.entityId && Q.entityType) {
            const K = this.createDatasourceFromSubscriptionInfo(Q);
            return this.utils.generateColors([K]), K;
          }
          throw new Error(
            "Can't crate alarm source without entityId information!"
          );
        }
        resolveAlias(Q, K) {
          const H = Q.filter;
          return this.resolveAliasFilter(H, K).pipe(
            (0, I.zg)((x) => {
              const W = {
                alias: Q.alias,
                entityFilter: x.entityFilter,
                stateEntity: x.stateEntity,
                entityParamName: x.entityParamName,
                resolveMultiple: H.resolveMultiple,
                currentEntity: null,
              };
              if (!W.resolveMultiple && W.entityFilter) {
                let $ = null;
                if (
                  x.stateEntity &&
                  W.entityFilter.type === M.aA.singleEntity &&
                  K
                ) {
                  let te = K;
                  x.entityParamName &&
                    x.entityParamName.length &&
                    (te = K[x.entityParamName]),
                    te &&
                      te.entityId &&
                      te.entityName &&
                      ($ = {
                        id: te.entityId.id,
                        entityType: te.entityId.entityType,
                        name: te.entityName,
                        label: te.entityLabel,
                      });
                }
                return (
                  $
                    ? (0, s.of)($)
                    : this.findSingleEntityInfoByEntityFilter(W.entityFilter, {
                        ignoreLoading: !0,
                        ignoreErrors: !0,
                      })
                ).pipe((0, _.U)((te) => ((W.currentEntity = te), W)));
              }
              return (0, s.of)(W);
            })
          );
        }
        resolveAliasFilter(Q, K) {
          const H = { entityFilter: null, stateEntity: !1 };
          Q.stateEntityParamName &&
            Q.stateEntityParamName.length &&
            (H.entityParamName = Q.stateEntityParamName);
          const W = this.getStateEntityInfo(Q, K).entityId;
          switch (Q.type) {
            case M.aA.singleEntity:
              const $ = this.resolveAliasEntityId(
                Q.singleEntity.entityType,
                Q.singleEntity.id
              );
              return (
                (H.entityFilter = { type: M.aA.singleEntity, singleEntity: $ }),
                (0, s.of)(H)
              );
            case M.aA.entityList:
            case M.aA.entityName:
            case M.aA.entityType:
              return (H.entityFilter = (0, N.I8)(Q)), (0, s.of)(H);
            case M.aA.stateEntity:
              return (
                (H.stateEntity = !0),
                W &&
                  (H.entityFilter = {
                    type: M.aA.singleEntity,
                    singleEntity: W,
                  }),
                (0, s.of)(H)
              );
            case M.aA.assetType:
            case M.aA.deviceType:
            case M.aA.entityViewType:
            case M.aA.apiUsageState:
            case M.aA.edgeType:
              return (H.entityFilter = (0, N.I8)(Q)), (0, s.of)(H);
            case M.aA.relationsQuery:
            case M.aA.assetSearchQuery:
            case M.aA.deviceSearchQuery:
            case M.aA.edgeSearchQuery:
            case M.aA.entityViewSearchQuery:
              let J, te;
              if (
                ((H.stateEntity = Q.rootStateEntity),
                H.stateEntity && W
                  ? ((J = W.entityType), (te = W.id))
                  : H.stateEntity ||
                    ((J = Q.rootEntity.entityType), (te = Q.rootEntity.id)),
                J && te)
              ) {
                const _e = this.resolveAliasEntityId(J, te);
                return (
                  (H.entityFilter = (0, N.I8)(Q)),
                  (H.entityFilter.rootEntity = _e),
                  (0, s.of)(H)
                );
              }
              return (0, s.of)(H);
          }
        }
        checkEntityAlias(Q) {
          return this.resolveAliasFilter(Q.filter, null).pipe(
            (0, _.U)((K) => !!K.stateEntity || (0, N.nu)(K.entityFilter)),
            (0, l.K)((K) => (0, s.of)(!1))
          );
        }
        saveEntityParameters(Q, K, H, x) {
          return this.getSaveEntityObservable(Q, K, x).pipe(
            (0, I.zg)(($) =>
              this.saveEntityData($.id, K, x).pipe(
                (0, _.U)(() => ({ create: { entity: 1 } })),
                (0, l.K)((J) =>
                  (0, s.of)({ error: { entity: 1, errors: J.message } })
                )
              )
            ),
            (0, l.K)(($) => {
              if (H) {
                let J;
                switch (Q) {
                  case o.py.DEVICE:
                    J = this.deviceService.findByName(K.name, x);
                    break;
                  case o.py.ASSET:
                    J = this.assetService.findByName(K.name, x);
                    break;
                  case o.py.EDGE:
                    J = this.edgeService.findByName(K.name, x);
                }
                return J.pipe(
                  (0, I.zg)((te) => {
                    const _e = this.getUpdateEntityTasks(Q, K, te, x);
                    return (0, a.D)(_e).pipe(
                      (0, _.U)(() => ({ update: { entity: 1 } })),
                      (0, l.K)((me) =>
                        (0, s.of)({ error: { entity: 1, errors: me.message } })
                      )
                    );
                  }),
                  (0, l.K)((te) =>
                    (0, s.of)({
                      error: {
                        entity: 1,
                        errors: `Line: ${K.lineNumber}; Error: ${te.error.message}`,
                      },
                    })
                  )
                );
              }
              return (0, s.of)({
                error: {
                  entity: 1,
                  errors: `Line: ${K.lineNumber}; Error: ${$.error.message}`,
                },
              });
            })
          );
        }
        getSaveEntityObservable(Q, K, H) {
          let x;
          switch (Q) {
            case o.py.DEVICE:
              const W = {
                name: K.name,
                type: K.type,
                label: K.label,
                additionalInfo: { description: K.description },
              };
              null !== K.gateway &&
                (W.additionalInfo = Object.assign(
                  Object.assign({}, W.additionalInfo),
                  { gateway: K.gateway }
                )),
                (x = this.deviceService.saveDevice(W, H));
              break;
            case o.py.ASSET:
              const $ = {
                name: K.name,
                type: K.type,
                label: K.label,
                additionalInfo: { description: K.description },
              };
              x = this.assetService.saveAsset($, H);
              break;
            case o.py.EDGE:
              const J = K,
                te = {
                  name: J.name,
                  type: J.type,
                  label: J.label,
                  additionalInfo: { description: J.description },
                  routingKey: "" !== J.routingKey ? J.routingKey : (0, N.M8)(),
                  secret: "" !== J.secret ? J.secret : (0, N.KK)(20),
                };
              x = this.edgeService.saveEdge(te, H);
          }
          return x;
        }
        getUpdateEntityTasks(Q, K, H, x) {
          const W = [];
          let $, J;
          switch (Q) {
            case o.py.ASSET:
            case o.py.DEVICE:
              if (
                (($ = H),
                (J = $.additionalInfo || {}),
                $.label !== K.label ||
                  $.type !== K.type ||
                  J.description !== K.description ||
                  ($.id.entityType === o.py.DEVICE && J.gateway !== K.gateway))
              )
                switch (
                  (($.label = K.label),
                  ($.type = K.type),
                  ($.additionalInfo = J),
                  ($.additionalInfo.description = K.description),
                  $.id.entityType === o.py.DEVICE &&
                    ($.additionalInfo.gateway = K.gateway),
                  $.id.entityType)
                ) {
                  case o.py.DEVICE:
                    W.push(this.deviceService.saveDevice($, x));
                    break;
                  case o.py.ASSET:
                    W.push(this.assetService.saveAsset($, x));
                }
              W.push(this.saveEntityData(H.id, K, x));
              break;
            case o.py.EDGE:
              ($ = H), (J = $.additionalInfo || {});
              const te = K;
              ($.label !== te.label ||
                $.type !== te.type ||
                ("" !== te.routingKey && $.routingKey !== te.routingKey) ||
                ("" !== te.secret && $.secret !== te.secret) ||
                J.description !== te.description) &&
                (($.label = te.label),
                ($.type = te.type),
                ($.additionalInfo = J),
                ($.additionalInfo.description = te.description),
                "" !== te.routingKey && ($.routingKey = te.routingKey),
                "" !== te.secret && ($.secret = te.secret),
                W.push(this.edgeService.saveEdge($, x))),
                W.push(this.saveEntityData(H.id, te, x));
          }
          return W;
        }
        saveEntityData(Q, K, H) {
          const x = [];
          let W;
          if (Object.keys(K.credential).length) {
            let $,
              J = null,
              te = null;
            (0, N.nu)(K.credential.mqtt)
              ? (($ = B.e9.MQTT_BASIC),
                (te = JSON.stringify(K.credential.mqtt)))
              : (0, N.nu)(K.credential.lwm2m)
              ? (($ = B.e9.LWM2M_CREDENTIALS),
                (te = JSON.stringify(K.credential.lwm2m)))
              : (0, N.XE)(K.credential.x509)
              ? (($ = B.e9.X509_CERTIFICATE), (te = K.credential.x509))
              : (($ = B.e9.ACCESS_TOKEN), (J = K.credential.accessToken)),
              (W = this.deviceService.getDeviceCredentials(Q.id, !1, H).pipe(
                (0, I.zg)(
                  (_e) => (
                    (_e.credentialsId = J),
                    (_e.credentialsType = $),
                    (_e.credentialsValue = te),
                    this.deviceService.saveDeviceCredentials(_e, H).pipe(
                      (0, _.U)(() => "ok"),
                      (0, l.K)((me) =>
                        (0, s.of)(
                          `Line: ${K.lineNumber}; Error: ${me.error.message}`
                        )
                      )
                    )
                  )
                )
              )),
              x.push(W);
          }
          return (
            K.attributes.shared &&
              K.attributes.shared.length &&
              ((W = this.attributeService
                .saveEntityAttributes(
                  Q,
                  w.My.SHARED_SCOPE,
                  K.attributes.shared,
                  H
                )
                .pipe(
                  (0, _.U)(() => "ok"),
                  (0, l.K)(($) =>
                    (0, s.of)(
                      `Line: ${K.lineNumber}; Error: ${$.error.message}`
                    )
                  )
                )),
              x.push(W)),
            K.attributes.server &&
              K.attributes.server.length &&
              ((W = this.attributeService
                .saveEntityAttributes(
                  Q,
                  w.My.SERVER_SCOPE,
                  K.attributes.server,
                  H
                )
                .pipe(
                  (0, _.U)(() => "ok"),
                  (0, l.K)(($) =>
                    (0, s.of)(
                      `Line: ${K.lineNumber}; Error: ${$.error.message}`
                    )
                  )
                )),
              x.push(W)),
            K.timeseries &&
              K.timeseries.length &&
              ((W = this.attributeService
                .saveEntityTimeseries(Q, "time", K.timeseries, H)
                .pipe(
                  (0, _.U)(() => "ok"),
                  (0, l.K)(($) =>
                    (0, s.of)(
                      `Line: ${K.lineNumber}; Error: ${$.error.message}`
                    )
                  )
                )),
              x.push(W)),
            x.length
              ? (0, a.D)(x).pipe(
                  (0, _.U)(($) => {
                    const J = $.filter((te) => "ok" !== te);
                    if (J.length > 0) throw Error(J.join("\n"));
                    return $;
                  })
                )
              : (0, s.of)(null)
          );
        }
        getStateEntityInfo(Q, K) {
          let H = null;
          return (
            K &&
              (Q.stateEntityParamName && Q.stateEntityParamName.length
                ? K[Q.stateEntityParamName] &&
                  (H = K[Q.stateEntityParamName].entityId)
                : (H = K.entityId)),
            H || (H = Q.defaultStateEntity),
            H && (H = this.resolveAliasEntityId(H.entityType, H.id)),
            { entityId: H }
          );
        }
        resolveAliasEntityId(Q, K) {
          const H = { entityType: Q, id: K };
          if (Q === o.Ul.CURRENT_CUSTOMER) {
            const x = (0, h.fP)(this.store);
            (H.entityType = o.py.CUSTOMER),
              x.authority === p.W.CUSTOMER_USER && (H.id = x.customerId);
          } else if (Q === o.Ul.CURRENT_TENANT) {
            const x = (0, h.fP)(this.store);
            (H.entityType = o.py.TENANT), (H.id = x.tenantId);
          } else if (Q === o.Ul.CURRENT_USER) {
            const x = (0, h.fP)(this.store);
            (H.entityType = o.py.USER), (H.id = x.userId);
          } else if (Q === o.Ul.CURRENT_USER_OWNER) {
            const x = (0, h.fP)(this.store);
            x.authority === p.W.TENANT_ADMIN
              ? ((H.entityType = o.py.TENANT), (H.id = x.tenantId))
              : x.authority === p.W.CUSTOMER_USER &&
                ((H.entityType = o.py.CUSTOMER), (H.id = x.customerId));
          }
          return H;
        }
        createDatasourceFromSubscriptionInfo(Q) {
          let K = null;
          if (
            ((Q = this.validateSubscriptionInfo(Q)).type === u.i9.entity
              ? ((K = {
                  type: Q.type,
                  entityName: Q.entityName,
                  name: Q.entityName,
                  entityType: Q.entityType,
                  entityId: Q.entityId,
                  dataKeys: [],
                }),
                this.prepareEntityFilterFromSubscriptionInfo(K, Q))
              : (Q.type === u.i9.function || Q.type === u.i9.entityCount) &&
                (K = { type: Q.type, name: Q.name || Q.type, dataKeys: [] }),
            null !== K &&
              (Q.timeseries &&
                this.createDatasourceKeys(Q.timeseries, w.dG.timeseries, K),
              Q.attributes &&
                this.createDatasourceKeys(Q.attributes, w.dG.attribute, K),
              Q.functions &&
                this.createDatasourceKeys(Q.functions, w.dG.function, K),
              Q.alarmFields &&
                this.createDatasourceKeys(Q.alarmFields, w.dG.alarm, K),
              Q.type === u.i9.entityCount))
          ) {
            const H = this.utils.createKey({ name: "count" }, w.dG.count);
            K.dataKeys.push(H);
          }
          return K;
        }
        validateSubscriptionInfo(Q) {
          return (
            "device" === Q.type &&
              ((Q.type = u.i9.entity),
              (Q.entityType = o.py.DEVICE),
              Q.deviceId
                ? (Q.entityId = Q.deviceId)
                : Q.deviceName
                ? (Q.entityName = Q.deviceName)
                : Q.deviceNamePrefix
                ? (Q.entityNamePrefix = Q.deviceNamePrefix)
                : Q.deviceIds && (Q.entityIds = Q.deviceIds)),
            Q
          );
        }
        prepareEntityFilterFromSubscriptionInfo(Q, K) {
          if (K.entityId)
            (Q.entityFilter = {
              type: M.aA.singleEntity,
              singleEntity: { entityType: K.entityType, id: K.entityId },
            }),
              (Q.pageLink = F.ts);
          else if (K.entityName || K.entityNamePrefix) {
            let H, x;
            if ((0, N.$K)(K.entityName) && K.entityName.length)
              (H = K.entityName), (x = (0, N.I8)(F.ts));
            else {
              H = K.entityNamePrefix;
              const W =
                (0, N.nu)(K.pageSize) && K.pageSize > 0 ? K.pageSize : 1024;
              x = (0, F.Kv)(W);
            }
            (Q.entityFilter = {
              type: M.aA.entityName,
              entityType: K.entityType,
              entityNameFilter: H,
            }),
              (Q.pageLink = x);
          } else if (K.entityIds) {
            Q.entityFilter = {
              type: M.aA.entityList,
              entityType: K.entityType,
              entityList: K.entityIds,
            };
            const H =
              (0, N.nu)(K.pageSize) && K.pageSize > 0 ? K.pageSize : 1024;
            Q.pageLink = (0, F.Kv)(H);
          }
        }
        createDatasourceKeys(Q, K, H) {
          Q.forEach((x) => {
            const W = this.utils.createKey(x, K);
            H.dataKeys.push(W);
          });
        }
        getAssignedToEdgeEntitiesByType(Q, K, H) {
          let x;
          switch (K) {
            case o.py.ASSET:
              x = this.assetService.getEdgeAssets(Q, H);
              break;
            case o.py.DEVICE:
              x = this.deviceService.getEdgeDevices(Q, H);
              break;
            case o.py.ENTITY_VIEW:
              x = this.entityViewService.getEdgeEntityViews(Q, H);
              break;
            case o.py.DASHBOARD:
              x = this.dashboardService.getEdgeDashboards(Q, H);
              break;
            case o.py.RULE_CHAIN:
              x = this.ruleChainService.getEdgeRuleChains(Q, H);
          }
          return x;
        }
        getEdgeEventContent(Q) {
          let K;
          const H = Q.entityId,
            x = Q.type;
          switch (x) {
            case U.Lj.DASHBOARD:
            case U.Lj.ALARM:
            case U.Lj.RULE_CHAIN:
            case U.Lj.EDGE:
            case U.Lj.USER:
            case U.Lj.CUSTOMER:
            case U.Lj.TENANT:
            case U.Lj.ASSET:
            case U.Lj.DEVICE:
            case U.Lj.ENTITY_VIEW:
              K = U.s3.includes(Q.action)
                ? (0, s.of)(Q.body)
                : this.getEntity(x, H, { ignoreLoading: !0, ignoreErrors: !0 });
              break;
            case U.Lj.RULE_CHAIN_METADATA:
              K = this.ruleChainService.getRuleChainMetadata(H);
              break;
            case U.Lj.WIDGET_TYPE:
              K = this.widgetService.getWidgetTypeById(H);
              break;
            case U.Lj.WIDGETS_BUNDLE:
              K = this.widgetService.getWidgetsBundle(H);
              break;
            case U.Lj.DEVICE_PROFILE:
              K = this.deviceProfileService.getDeviceProfile(H);
              break;
            case U.Lj.ASSET_PROFILE:
              K = this.assetProfileService.getAssetProfile(H);
              break;
            case U.Lj.RELATION:
              K = (0, s.of)(Q.body);
          }
          return K;
        }
      }
      (de.ɵfac = function (Q) {
        return new (Q || de)(
          e.ɵɵinject(ne.HttpClient),
          e.ɵɵinject(re.Store),
          e.ɵɵinject(i.U),
          e.ɵɵinject(A.A),
          e.ɵɵinject(T.d),
          e.ɵɵinject(O.l),
          e.ɵɵinject(g.a),
          e.ɵɵinject(D.v),
          e.ɵɵinject(y.K),
          e.ɵɵinject(S.U),
          e.ɵɵinject(m.s),
          e.ɵɵinject(k.Z),
          e.ɵɵinject(j.c),
          e.ɵɵinject(P.H),
          e.ɵɵinject(Z.i),
          e.ɵɵinject(le.A),
          e.ɵɵinject(se.w),
          e.ɵɵinject(f.F),
          e.ɵɵinject(X.g)
        );
      }),
        (de.ɵprov = e.ɵɵdefineInjectable({
          token: de,
          factory: de.ɵfac,
          providedIn: "root",
        }));
    },
    66054: (ee, R, t) => {
      "use strict";
      t.d(R, { T7: () => C, gM: () => s, hx: () => d });
      var e = t(24111),
        n = t(91841),
        a = t(61325);
      function C(o) {
        return (
          o || (o = {}), s(o.ignoreLoading, o.ignoreErrors, o.resendRequest)
        );
      }
      function s(o = !1, i = !1, g = !1) {
        return {
          headers: new n.HttpHeaders({ "Content-Type": "application/json" }),
          params: new e.t(new a.g(o, i, g)),
        };
      }
      function d(o = !1, i = !1, g = !1) {
        return { params: new e.t(new a.g(o, i, g)) };
      }
    },
    54481: (ee, R, t) => {
      "use strict";
      t.d(R, { H: () => r });
      var e = t(37716),
        n = t(66054),
        a = t(25917),
        C = t(35758),
        s = t(57331),
        d = t(88002),
        o = t(19773),
        i = t(5304),
        g = t(41960),
        D = t(16797),
        y = t(91841),
        m = t(29790);
      class r {
        constructor(p, _, E) {
          (this.http = p), (this.translate = _), (this.dialogService = E);
        }
        getOtaPackages(p, _) {
          return this.http.get(`/api/otaPackages${p.toQuery()}`, (0, n.T7)(_));
        }
        getOtaPackagesInfoByDeviceProfileId(p, _, E, c) {
          const v = `/api/otaPackages/${_}/${E}${p.toQuery()}`;
          return this.http.get(v, (0, n.T7)(c));
        }
        getOtaPackage(p, _) {
          return this.http.get(`/api/otaPackages/${p}`, (0, n.T7)(_));
        }
        getOtaPackageInfo(p, _) {
          return this.http.get(`/api/otaPackage/info/${p}`, (0, n.T7)(_));
        }
        downloadOtaPackage(p) {
          return this.http
            .get(`/api/otaPackage/${p}/download`, {
              responseType: "arraybuffer",
              observe: "response",
            })
            .pipe(
              (0, d.U)((_) => {
                const E = _.headers,
                  c = E.get("x-filename"),
                  v = E.get("content-type"),
                  I = document.createElement("a");
                try {
                  const l = new Blob([_.body], { type: v }),
                    T = URL.createObjectURL(l);
                  I.setAttribute("href", T), I.setAttribute("download", c);
                  const O = new MouseEvent("click", {
                    view: window,
                    bubbles: !0,
                    cancelable: !1,
                  });
                  return I.dispatchEvent(O), null;
                } catch (l) {
                  throw l;
                }
              })
            );
        }
        saveOtaPackage(p, _) {
          if (!p.file) return this.saveOtaPackageInfo(p, _);
          const E = (0, g.I8)(p);
          return (
            delete E.file,
            delete E.checksum,
            delete E.checksumAlgorithm,
            this.saveOtaPackageInfo(E, _).pipe(
              (0, o.zg)((c) =>
                this.uploadOtaPackageFile(
                  c.id.id,
                  p.file,
                  p.checksumAlgorithm,
                  p.checksum
                ).pipe((0, i.K)(() => this.deleteOtaPackage(c.id.id)))
              )
            )
          );
        }
        saveOtaPackageInfo(p, _) {
          return this.http.post("/api/otaPackage", p, (0, n.T7)(_));
        }
        uploadOtaPackageFile(p, _, E, c, v) {
          v || (v = {});
          const I = new FormData();
          I.append("file", _);
          let l = `/api/otaPackage/${p}?checksumAlgorithm=${E}`;
          return (
            c && (l += `&checksum=${c}`),
            this.http.post(
              l,
              I,
              (0, n.hx)(v.ignoreLoading, v.ignoreErrors, v.resendRequest)
            )
          );
        }
        deleteOtaPackage(p, _) {
          return this.http.delete(`/api/otaPackage/${p}`, (0, n.T7)(_));
        }
        countUpdateDeviceAfterChangePackage(p, _, E) {
          return this.http.get(`/api/devices/count/${p}/${_.id}`, (0, n.T7)(E));
        }
        confirmDialogUpdatePackage(p, _) {
          var E, c, v, I, l, T;
          const O = [];
          return (
            (null === (E = null == _ ? void 0 : _.id) || void 0 === E
              ? void 0
              : E.id) &&
            (null === (c = _.firmwareId) || void 0 === c ? void 0 : c.id) !==
              (null === (v = p.firmwareId) || void 0 === v ? void 0 : v.id)
              ? O.push(
                  this.countUpdateDeviceAfterChangePackage(s.Jj.FIRMWARE, p.id)
                )
              : O.push((0, a.of)(0)),
            (null === (I = null == _ ? void 0 : _.id) || void 0 === I
              ? void 0
              : I.id) &&
            (null === (l = _.softwareId) || void 0 === l ? void 0 : l.id) !==
              (null === (T = p.softwareId) || void 0 === T ? void 0 : T.id)
              ? O.push(
                  this.countUpdateDeviceAfterChangePackage(s.Jj.SOFTWARE, p.id)
                )
              : O.push((0, a.of)(0)),
            (0, C.D)(O).pipe(
              (0, o.zg)(([w, b]) => {
                let S = "";
                return (
                  w > 0 &&
                    (S += this.translate.instant("ota-update.change-firmware", {
                      count: w,
                    })),
                  b > 0 &&
                    ((S += S.length ? " " : ""),
                    (S += this.translate.instant("ota-update.change-software", {
                      count: b,
                    }))),
                  "" !== S
                    ? this.dialogService.confirm(
                        "",
                        S,
                        null,
                        this.translate.instant("common.proceed")
                      )
                    : (0, a.of)(!0)
                );
              })
            )
          );
        }
      }
      (r.ɵfac = function (p) {
        return new (p || r)(
          e.ɵɵinject(y.HttpClient),
          e.ɵɵinject(m.TranslateService),
          e.ɵɵinject(D.x)
        );
      }),
        (r.ɵprov = e.ɵɵdefineInjectable({
          token: r,
          factory: r.ɵfac,
          providedIn: "root",
        }));
    },
    15208: (ee, R, t) => {
      "use strict";
      t.d(R, { g: () => C });
      var e = t(37716),
        n = t(66054),
        a = t(91841);
      class C {
        constructor(d) {
          this.http = d;
        }
        getQueueById(d, o) {
          return this.http.get(`/api/queues/${d}`, (0, n.T7)(o));
        }
        getQueueByName(d, o) {
          return this.http.get(`/api/queues/name/${d}`, (0, n.T7)(o));
        }
        getTenantQueuesByServiceType(d, o, i) {
          return this.http.get(
            `/api/queues${d.toQuery()}&serviceType=${o}`,
            (0, n.T7)(i)
          );
        }
        saveQueue(d, o, i) {
          return this.http.post(
            `/api/queues?serviceType=${o}`,
            d,
            (0, n.T7)(i)
          );
        }
        deleteQueue(d) {
          return this.http.delete(`/api/queues/${d}`);
        }
      }
      (C.ɵfac = function (d) {
        return new (d || C)(e.ɵɵinject(a.HttpClient));
      }),
        (C.ɵprov = e.ɵɵdefineInjectable({
          token: C,
          factory: C.ɵfac,
          providedIn: "root",
        }));
    },
    40940: (ee, R, t) => {
      "use strict";
      t.d(R, { U: () => h });
      var e = t(37716),
        n = t(66054),
        a = t(25917),
        C = t(35758),
        s = t(97371),
        d = t(81375),
        o = t(11152),
        i = t(19773),
        g = t(88002),
        D = t(5304),
        y = t(41960),
        m = t(91841),
        r = t(29790);
      class h {
        constructor(_, E, c, v) {
          (this.http = _),
            (this.componentDescriptorService = E),
            (this.resourcesService = c),
            (this.translate = v),
            (this.ruleNodeComponentsMap = new Map()),
            (this.ruleNodeConfigFactories = {});
        }
        getRuleChains(_, E = s.CI.CORE, c) {
          return this.http.get(
            `/api/ruleChains${_.toQuery()}&type=${E}`,
            (0, n.T7)(c)
          );
        }
        getRuleChain(_, E) {
          return this.http.get(`/api/ruleChain/${_}`, (0, n.T7)(E));
        }
        getRuleChainOutputLabels(_, E) {
          return this.http.get(
            `/api/ruleChain/${_}/output/labels`,
            (0, n.T7)(E)
          );
        }
        createDefaultRuleChain(_, E) {
          return this.http.post(
            "/api/ruleChain/device/default",
            { name: _ },
            (0, n.T7)(E)
          );
        }
        saveRuleChain(_, E) {
          return this.http.post("/api/ruleChain", _, (0, n.T7)(E));
        }
        deleteRuleChain(_, E) {
          return this.http.delete(`/api/ruleChain/${_}`, (0, n.T7)(E));
        }
        setRootRuleChain(_, E) {
          return this.http.post(`/api/ruleChain/${_}/root`, null, (0, n.T7)(E));
        }
        getRuleChainMetadata(_, E) {
          return this.http.get(`/api/ruleChain/${_}/metadata`, (0, n.T7)(E));
        }
        saveRuleChainMetadata(_, E) {
          return this.http.post("/api/ruleChain/metadata", _, (0, n.T7)(E));
        }
        getRuleNodeComponents(_, E, c) {
          return this.ruleNodeComponentsMap.get(E)
            ? (0, a.of)(this.ruleNodeComponentsMap.get(E))
            : this.loadRuleNodeComponents(E, c).pipe(
                (0, i.zg)((v) =>
                  this.resolveRuleNodeComponentsUiResources(v, _).pipe(
                    (0, g.U)(
                      (I) => (
                        this.ruleNodeComponentsMap.set(E, I),
                        this.ruleNodeComponentsMap.get(E).sort((l, T) => {
                          let O = l.type
                            .toString()
                            .localeCompare(T.type.toString());
                          return (
                            0 === O && (O = l.name.localeCompare(T.name)), O
                          );
                        }),
                        this.ruleNodeComponentsMap.get(E)
                      )
                    )
                  )
                )
              );
        }
        getRuleNodeConfigFactory(_) {
          return this.ruleNodeConfigFactories[_];
        }
        getRuleNodeComponentByClazz(_ = s.CI.CORE, E) {
          const c = this.ruleNodeComponentsMap
            .get(_)
            .filter((v) => v.clazz === E);
          if (c && c.length) return c[0];
          {
            const v = (0, y.I8)(s.Bj);
            return (
              (v.clazz = E),
              (v.configurationDescriptor.nodeDefinition.details =
                "Unknown Rule Node class: " + E),
              v
            );
          }
        }
        getRuleNodeSupportedLinks(_) {
          const E = _.configurationDescriptor.nodeDefinition.relationTypes,
            c = {};
          return (
            E.forEach((v) => {
              c[v] = { name: v, value: v };
            }),
            c
          );
        }
        ruleNodeAllowCustomLinks(_) {
          return _.configurationDescriptor.nodeDefinition.customRelations;
        }
        ruleNodeSourceRuleChainId(_, E) {
          return _.configurationDescriptor.nodeDefinition.ruleChainNode
            ? null == E
              ? void 0
              : E.ruleChainId
            : null;
        }
        getLatestRuleNodeDebugInput(_, E) {
          return this.http.get(`/api/ruleNode/${_}/debugIn`, (0, n.T7)(E));
        }
        testScript(_, E, c) {
          let v = "/api/ruleChain/testScript";
          return (
            E && (v += `?scriptLang=${E}`), this.http.post(v, _, (0, n.T7)(c))
          );
        }
        loadRuleNodeComponents(_, E) {
          return this.componentDescriptorService
            .getComponentDescriptorsByTypes(s.il, _, E)
            .pipe(
              (0, g.U)((c) => {
                const v = [];
                return (
                  c.forEach((I) => {
                    v.push(I);
                  }),
                  v
                );
              })
            );
        }
        resolveRuleNodeComponentsUiResources(_, E) {
          const c = [];
          return (
            _.forEach((v) => {
              c.push(this.resolveRuleNodeComponentUiResources(v, E));
            }),
            (0, C.D)(c).pipe((0, D.K)(() => (0, a.of)(_)))
          );
        }
        resolveRuleNodeComponentUiResources(_, E) {
          const c = _.configurationDescriptor.nodeDefinition,
            v = c.uiResources;
          if (v && v.length) {
            const I = v.filter((O) => !O.endsWith(".js")),
              l = v.find((O) => O.endsWith(".js")),
              T = [];
            return (
              I &&
                I.length &&
                I.forEach((O) => {
                  T.push(this.resourcesService.loadResource(O));
                }),
              l &&
                T.push(
                  this.resourcesService.loadFactories(l, E).pipe(
                    (0, g.U)((O) => {
                      if (c.configDirective && c.configDirective.length) {
                        const w = (0, y.fu)(c.configDirective, "-"),
                          b = O.factories.find((S) => S.selector === w);
                        b
                          ? (this.ruleNodeConfigFactories[c.configDirective] =
                              b)
                          : (_.configurationDescriptor.nodeDefinition.uiResourceLoadError =
                              this.translate.instant(
                                "rulenode.directive-is-not-loaded",
                                { directiveName: c.configDirective }
                              ));
                      }
                      return (0, a.of)(_);
                    })
                  )
                ),
              (0, C.D)(T).pipe(
                (0, g.U)(() => _),
                (0, D.K)(
                  () => (
                    (_.configurationDescriptor.nodeDefinition.uiResourceLoadError =
                      this.translate.instant(
                        "rulenode.ui-resources-load-error"
                      )),
                    (0, a.of)(_)
                  )
                )
              )
            );
          }
          return (0, a.of)(_);
        }
        getEdgeRuleChains(_, E, c) {
          return this.http.get(
            `/api/edge/${_}/ruleChains${E.toQuery()}`,
            (0, n.T7)(c)
          );
        }
        assignRuleChainToEdge(_, E, c) {
          return this.http.post(
            `/api/edge/${_}/ruleChain/${E}`,
            null,
            (0, n.T7)(c)
          );
        }
        unassignRuleChainFromEdge(_, E, c) {
          return this.http.delete(
            `/api/edge/${_}/ruleChain/${E}`,
            (0, n.T7)(c)
          );
        }
        setEdgeTemplateRootRuleChain(_, E) {
          return this.http.post(
            `/api/ruleChain/${_}/edgeTemplateRoot`,
            (0, n.T7)(E)
          );
        }
        setAutoAssignToEdgeRuleChain(_, E) {
          return this.http.post(
            `/api/ruleChain/${_}/autoAssignToEdge`,
            (0, n.T7)(E)
          );
        }
        unsetAutoAssignToEdgeRuleChain(_, E) {
          return this.http.delete(
            `/api/ruleChain/${_}/autoAssignToEdge`,
            (0, n.T7)(E)
          );
        }
        getAutoAssignToEdgeRuleChains(_) {
          return this.http.get(
            "/api/ruleChain/autoAssignToEdgeRuleChains",
            (0, n.T7)(_)
          );
        }
        setEdgeRootRuleChain(_, E, c) {
          return this.http.post(`/api/edge/${_}/${E}/root`, (0, n.T7)(c));
        }
      }
      (h.ɵfac = function (_) {
        return new (_ || h)(
          e.ɵɵinject(m.HttpClient),
          e.ɵɵinject(d.W),
          e.ɵɵinject(o.z),
          e.ɵɵinject(r.TranslateService)
        );
      }),
        (h.ɵprov = e.ɵɵdefineInjectable({
          token: h,
          factory: h.ɵfac,
          providedIn: "root",
        }));
    },
    54525: (ee, R, t) => {
      "use strict";
      t.d(R, { a: () => C });
      var e = t(37716),
        n = t(66054),
        a = t(91841);
      class C {
        constructor(d) {
          this.http = d;
        }
        getTenants(d, o) {
          return this.http.get(`/api/tenants${d.toQuery()}`, (0, n.T7)(o));
        }
        getTenantInfos(d, o) {
          return this.http.get(`/api/tenantInfos${d.toQuery()}`, (0, n.T7)(o));
        }
        getTenant(d, o) {
          return this.http.get(`/api/tenant/${d}`, (0, n.T7)(o));
        }
        getTenantInfo(d, o) {
          return this.http.get(`/api/tenant/info/${d}`, (0, n.T7)(o));
        }
        saveTenant(d, o) {
          return this.http.post("/api/tenant", d, (0, n.T7)(o));
        }
        deleteTenant(d, o) {
          return this.http.delete(`/api/tenant/${d}`, (0, n.T7)(o));
        }
      }
      (C.ɵfac = function (d) {
        return new (d || C)(e.ɵɵinject(a.HttpClient));
      }),
        (C.ɵprov = e.ɵɵdefineInjectable({
          token: C,
          factory: C.ɵfac,
          providedIn: "root",
        }));
    },
    89181: (ee, R, t) => {
      "use strict";
      t.d(R, { b: () => s });
      var e = t(37716),
        n = t(66054),
        a = t(41960),
        C = t(91841);
      class s {
        constructor(o) {
          this.http = o;
        }
        getTwoFaSettings(o) {
          return this.http.get("/api/2fa/settings", (0, n.T7)(o));
        }
        saveTwoFaSettings(o, i) {
          return this.http.post("/api/2fa/settings", o, (0, n.T7)(i));
        }
        getAvailableTwoFaProviders(o) {
          return this.http.get("/api/2fa/providers", (0, n.T7)(o));
        }
        generateTwoFaAccountConfig(o, i) {
          return this.http.post(
            `/api/2fa/account/config/generate?providerType=${o}`,
            (0, n.T7)(i)
          );
        }
        getAccountTwoFaSettings(o) {
          return this.http.get("/api/2fa/account/settings", (0, n.T7)(o));
        }
        updateTwoFaAccountConfig(o, i, g) {
          return this.http.put(
            `/api/2fa/account/config?providerType=${o}`,
            { useByDefault: i },
            (0, n.T7)(g)
          );
        }
        submitTwoFaAccountConfig(o, i) {
          return this.http.post(
            "/api/2fa/account/config/submit",
            o,
            (0, n.T7)(i)
          );
        }
        verifyAndSaveTwoFaAccountConfig(o, i, g) {
          let D = "/api/2fa/account/config";
          return (
            (0, a.nu)(i) && (D += `?verificationCode=${i}`),
            this.http.post(D, o, (0, n.T7)(g))
          );
        }
        deleteTwoFaAccountConfig(o, i) {
          return this.http.delete(
            `/api/2fa/account/config?providerType=${o}`,
            (0, n.T7)(i)
          );
        }
        requestTwoFaVerificationCodeSend(o, i) {
          return this.http.post(
            `/api/auth/2fa/verification/send?providerType=${o}`,
            (0, n.T7)(i)
          );
        }
      }
      (s.ɵfac = function (o) {
        return new (o || s)(e.ɵɵinject(C.HttpClient));
      }),
        (s.ɵprov = e.ɵɵdefineInjectable({
          token: s,
          factory: s.ɵfac,
          providedIn: "root",
        }));
    },
    32224: (ee, R, t) => {
      "use strict";
      t.d(R, { Y: () => d });
      var e = t(37716),
        n = t(66054),
        a = t(35226),
        C = t(51307),
        s = t(91841);
      class d {
        constructor(i) {
          this.http = i;
        }
        getHelpBaseUrl() {
          return (
            this.helpBaseUrlObservable ||
              (this.helpBaseUrlObservable = this.http
                .get(
                  "/api/uiSettings/helpBaseUrl",
                  Object.assign({ responseType: "text" }, (0, n.gM)(!0))
                )
                .pipe((0, a._)(1), (0, C.x)())),
            this.helpBaseUrlObservable
          );
        }
      }
      (d.ɵfac = function (i) {
        return new (i || d)(e.ɵɵinject(s.HttpClient));
      }),
        (d.ɵprov = e.ɵɵdefineInjectable({
          token: d,
          factory: d.ɵfac,
          providedIn: "root",
        }));
    },
    53372: (ee, R, t) => {
      "use strict";
      t.d(R, { K: () => s });
      var e = t(37716),
        n = t(66054),
        a = t(41960),
        C = t(91841);
      class s {
        constructor(o) {
          this.http = o;
        }
        getUsers(o, i) {
          return this.http.get(`/api/users${o.toQuery()}`, (0, n.T7)(i));
        }
        getTenantAdmins(o, i, g) {
          return this.http.get(
            `/api/tenant/${o}/users${i.toQuery()}`,
            (0, n.T7)(g)
          );
        }
        getCustomerUsers(o, i, g) {
          return this.http.get(
            `/api/customer/${o}/users${i.toQuery()}`,
            (0, n.T7)(g)
          );
        }
        getUser(o, i) {
          return this.http.get(`/api/user/${o}`, (0, n.T7)(i));
        }
        saveUser(o, i = !1, g) {
          let D = "/api/user";
          return (
            (D += "?sendActivationMail=" + i),
            this.http.post(D, o, (0, n.T7)(g))
          );
        }
        deleteUser(o, i) {
          return this.http.delete(`/api/user/${o}`, (0, n.T7)(i));
        }
        getActivationLink(o, i) {
          return this.http.get(
            `/api/user/${o}/activationLink`,
            Object.assign({ responseType: "text" }, (0, n.T7)(i))
          );
        }
        sendActivationEmail(o, i) {
          const g = encodeURIComponent(o);
          return this.http.post(
            `/api/user/sendActivationMail?email=${g}`,
            null,
            (0, n.T7)(i)
          );
        }
        setUserCredentialsEnabled(o, i, g) {
          let D = `/api/user/${o}/userCredentialsEnabled`;
          return (
            (0, a.$K)(i) && (D += `?userCredentialsEnabled=${i}`),
            this.http.post(D, null, (0, n.T7)(g))
          );
        }
      }
      (s.ɵfac = function (o) {
        return new (o || s)(e.ɵɵinject(C.HttpClient));
      }),
        (s.ɵprov = e.ɵɵdefineInjectable({
          token: s,
          factory: s.ɵfac,
          providedIn: "root",
        }));
    },
    40039: (ee, R, t) => {
      "use strict";
      t.d(R, { i: () => E });
      var e = t(37716),
        n = t(66054),
        a = t(25917),
        C = t(88229),
        s = t(62909),
        d = t(1361),
        o = t(11152),
        i = t(62112),
        g = t(45435),
        D = t(88002),
        y = t(68307),
        m = t(19773),
        r = t(86057),
        h = t(39895),
        p = t(91841),
        _ = t(29790);
      class E {
        constructor(v, I, l, T, O) {
          (this.http = v),
            (this.utils = I),
            (this.resources = l),
            (this.translate = T),
            (this.router = O),
            (this.widgetTypeInfosCache = new Map()),
            (this.widgetsInfoInMemoryCache = new Map()),
            this.router.events
              .pipe((0, g.h)((w) => w instanceof h.ActivationEnd))
              .subscribe(() => {
                this.invalidateWidgetsBundleCache();
              });
        }
        getWidgetScopeVariables() {
          return ["tinycolor", "cssjs", "moment", "$", "jQuery"];
        }
        getAllWidgetsBundles(v) {
          return this.loadWidgetsBundleCache(v).pipe(
            (0, D.U)(() => this.allWidgetsBundles)
          );
        }
        getSystemWidgetsBundles(v) {
          return this.loadWidgetsBundleCache(v).pipe(
            (0, D.U)(() => this.systemWidgetsBundles)
          );
        }
        getTenantWidgetsBundles(v) {
          return this.loadWidgetsBundleCache(v).pipe(
            (0, D.U)(() => this.tenantWidgetsBundles)
          );
        }
        getWidgetBundles(v, I) {
          return this.http.get(
            `/api/widgetsBundles${v.toQuery()}`,
            (0, n.T7)(I)
          );
        }
        getWidgetsBundle(v, I) {
          return this.http.get(`/api/widgetsBundle/${v}`, (0, n.T7)(I));
        }
        saveWidgetsBundle(v, I) {
          return this.http.post("/api/widgetsBundle", v, (0, n.T7)(I)).pipe(
            (0, y.b)(() => {
              this.invalidateWidgetsBundleCache();
            })
          );
        }
        deleteWidgetsBundle(v, I) {
          return this.getWidgetsBundle(v, I).pipe(
            (0, m.zg)((l) =>
              this.http.delete(`/api/widgetsBundle/${v}`, (0, n.T7)(I)).pipe(
                (0, y.b)(() => {
                  this.invalidateWidgetsBundleCache(),
                    this.widgetsBundleDeleted(l);
                })
              )
            )
          );
        }
        getBundleWidgetTypes(v, I, l) {
          return this.http.get(
            `/api/widgetTypes?isSystem=${I}&bundleAlias=${v}`,
            (0, n.T7)(l)
          );
        }
        getBundleWidgetTypesDetails(v, I, l) {
          return this.http.get(
            `/api/widgetTypesDetails?isSystem=${I}&bundleAlias=${v}`,
            (0, n.T7)(l)
          );
        }
        getBundleWidgetTypeInfos(v, I, l) {
          const T = v + (I ? "_sys" : "");
          return this.widgetTypeInfosCache.has(T)
            ? (0, a.of)(this.widgetTypeInfosCache.get(T))
            : this.http
                .get(
                  `/api/widgetTypesInfos?isSystem=${I}&bundleAlias=${v}`,
                  (0, n.T7)(l)
                )
                .pipe((0, y.b)((O) => this.widgetTypeInfosCache.set(T, O)));
        }
        loadBundleLibraryWidgets(v, I, l) {
          return this.getBundleWidgetTypes(v, I, l).pipe(
            (0, D.U)((T) => {
              T = T.sort((f, M) => {
                let L = s.oS[M.descriptor.type].localeCompare(
                  s.oS[f.descriptor.type]
                );
                return 0 === L && (L = M.createdTime - f.createdTime), L;
              });
              const O = new Array();
              let w = 0;
              const b = [0, 0, 0];
              let S = 0,
                u = 0;
              return (
                T.forEach((f) => {
                  const M = (0, i.ld)(f),
                    k = Math.floor(M.sizeY),
                    N = {
                      typeId: f.id,
                      isSystemType: I,
                      bundleAlias: v,
                      typeAlias: M.alias,
                      type: M.type,
                      title: M.widgetName,
                      sizeX: 8,
                      sizeY: k,
                      row: w,
                      col: S,
                      config: JSON.parse(M.defaultConfig),
                    };
                  (N.config.title = M.widgetName),
                    O.push(N),
                    (w += k),
                    w > b[u] + 10 &&
                      ((b[u] = w),
                      u++,
                      u > 2 && (u = 0),
                      (w = b[u]),
                      (S = 8 * u));
                }),
                O
              );
            })
          );
        }
        getWidgetType(v, I, l, T) {
          return this.http.get(
            `/api/widgetType?isSystem=${l}&bundleAlias=${v}&alias=${I}`,
            (0, n.T7)(T)
          );
        }
        saveWidgetTypeDetails(v, I, l, T, O) {
          const w = (0, i.BY)(v, I, void 0, l, T);
          return this.http.post("/api/widgetType", w, (0, n.T7)(O)).pipe(
            (0, y.b)((b) => {
              this.widgetTypeUpdated(b);
            })
          );
        }
        saveImportedWidgetTypeDetails(v, I) {
          return this.http.post("/api/widgetType", v, (0, n.T7)(I)).pipe(
            (0, y.b)((l) => {
              this.widgetTypeUpdated(l);
            })
          );
        }
        deleteWidgetType(v, I, l, T) {
          return this.getWidgetType(v, I, l, T).pipe(
            (0, m.zg)((O) =>
              this.http.delete(`/api/widgetType/${O.id.id}`, (0, n.T7)(T)).pipe(
                (0, y.b)(() => {
                  this.widgetTypeUpdated(O);
                })
              )
            )
          );
        }
        getWidgetTypeById(v, I) {
          return this.http.get(`/api/widgetType/${v}`, (0, n.T7)(I));
        }
        getWidgetTemplate(v, I) {
          const l = s.eO.get(v);
          return this.getWidgetType(
            l.template.bundleAlias,
            l.template.alias,
            !0,
            I
          ).pipe(
            (0, D.U)((T) => {
              const O = (0, i.ld)(T);
              return (O.alias = void 0), O;
            })
          );
        }
        createWidgetInfoCacheKey(v, I, l) {
          return `${l ? "sys_" : ""}${v}_${I}`;
        }
        getWidgetInfoFromCache(v, I, l) {
          const T = this.createWidgetInfoCacheKey(v, I, l);
          return this.widgetsInfoInMemoryCache.get(T);
        }
        putWidgetInfoToCache(v, I, l, T) {
          const O = this.createWidgetInfoCacheKey(I, l, T);
          this.widgetsInfoInMemoryCache.set(O, v);
        }
        widgetTypeUpdated(v) {
          this.deleteWidgetInfoFromCache(
            v.bundleAlias,
            v.alias,
            v.tenantId.id === r._
          );
        }
        widgetsBundleDeleted(v) {
          this.deleteWidgetsBundleFromCache(v.alias, v.tenantId.id === r._);
        }
        deleteWidgetInfoFromCache(v, I, l) {
          const T = this.createWidgetInfoCacheKey(v, I, l);
          this.widgetsInfoInMemoryCache.delete(T);
        }
        deleteWidgetsBundleFromCache(v, I) {
          const l = (I ? "sys_" : "") + v;
          this.widgetsInfoInMemoryCache.forEach((T, O) => {
            O.startsWith(l) && this.widgetsInfoInMemoryCache.delete(O);
          });
        }
        loadWidgetsBundleCache(v) {
          return this.allWidgetsBundles
            ? (0, a.of)(null)
            : (this.loadWidgetsBundleCacheSubject ||
                ((this.loadWidgetsBundleCacheSubject = new C.t()),
                this.http.get("/api/widgetsBundles", (0, n.T7)(v)).subscribe(
                  (I) => {
                    (this.allWidgetsBundles = I),
                      (this.systemWidgetsBundles = new Array()),
                      (this.tenantWidgetsBundles = new Array()),
                      (this.allWidgetsBundles = this.allWidgetsBundles.sort(
                        (l, T) => {
                          let O = l.title.localeCompare(T.title);
                          return (
                            0 === O && (O = T.createdTime - l.createdTime), O
                          );
                        }
                      )),
                      this.allWidgetsBundles.forEach((l) => {
                        l.tenantId.id === r._
                          ? this.systemWidgetsBundles.push(l)
                          : this.tenantWidgetsBundles.push(l);
                      }),
                      this.loadWidgetsBundleCacheSubject.next(),
                      this.loadWidgetsBundleCacheSubject.complete();
                  },
                  () => {
                    this.loadWidgetsBundleCacheSubject.error(null);
                  }
                )),
              this.loadWidgetsBundleCacheSubject.asObservable());
        }
        invalidateWidgetsBundleCache() {
          (this.allWidgetsBundles = void 0),
            (this.systemWidgetsBundles = void 0),
            (this.tenantWidgetsBundles = void 0),
            (this.loadWidgetsBundleCacheSubject = void 0),
            this.widgetTypeInfosCache.clear();
        }
      }
      (E.ɵfac = function (v) {
        return new (v || E)(
          e.ɵɵinject(p.HttpClient),
          e.ɵɵinject(d.F),
          e.ɵɵinject(o.z),
          e.ɵɵinject(_.TranslateService),
          e.ɵɵinject(h.Router)
        );
      }),
        (E.ɵprov = e.ɵɵdefineInjectable({
          token: E,
          factory: E.ɵfac,
          providedIn: "root",
        }));
    },
    61325: (ee, R, t) => {
      "use strict";
      t.d(R, { g: () => e });
      class e {
        constructor(a = !1, C = !1, s = !1) {
          (this.ignoreLoading = a),
            (this.ignoreErrors = C),
            (this.resendRequest = s);
        }
      }
    },
    24111: (ee, R, t) => {
      "use strict";
      t.d(R, { t: () => n });
      var e = t(91841);
      class n extends e.HttpParams {
        constructor(C, s) {
          super({ fromObject: s }), (this.interceptorConfig = C);
        }
      }
    },
    9492: (ee, R, t) => {
      "use strict";
      var e, C;
      t.d(R, { jx: () => e, kY: () => n, pw: () => a }),
        ((C = e || (e = {})).START_LOAD = "[Load] Start"),
        (C.FINISH_LOAD = "[Load] Finish");
      class n {
        constructor() {
          this.type = e.START_LOAD;
        }
      }
      class a {
        constructor() {
          this.type = e.FINISH_LOAD;
        }
      }
    },
    90917: (ee, R, t) => {
      "use strict";
      t.d(R, { xU: () => s, Oc: () => d });
      var e = t(86710),
        n = t(15257);
      const a = (0, e.createFeatureSelector)("load"),
        s =
          ((0, e.createSelector)(a, (o) => o),
          (0, e.createSelector)(a, (o) => o.isLoading));
      function d(o) {
        let i;
        return (
          o.pipe((0, e.select)(s), (0, n.q)(1)).subscribe((g) => (i = g)), i
        );
      }
    },
    97316: (ee, R, t) => {
      "use strict";
      t.d(R, { n: () => a });
      var e = t(37716);
      const n = "TB-";
      class a {
        constructor() {}
        static loadInitialState() {
          return Object.keys(localStorage).reduce((s, d) => {
            if (d.includes(n)) {
              const o = d
                .replace(n, "")
                .toLowerCase()
                .split(".")
                .map((g) =>
                  g
                    .split("-")
                    .map((D, y) =>
                      0 === y ? D : D.charAt(0).toUpperCase() + D.slice(1)
                    )
                    .join("")
                );
              let i = s;
              o.forEach((g, D) => {
                D !== o.length - 1
                  ? ((i[g] = i[g] || {}), (i = i[g]))
                  : (i[g] = JSON.parse(localStorage.getItem(d)));
              });
            }
            return s;
          }, {});
        }
        setItem(s, d) {
          localStorage.setItem(`TB-${s}`, JSON.stringify(d));
        }
        getItem(s) {
          return JSON.parse(localStorage.getItem(`TB-${s}`));
        }
        removeItem(s) {
          localStorage.removeItem(`TB-${s}`);
        }
        testLocalStorage() {
          const s = "testValue",
            d = "testKey";
          let o;
          if (
            (this.setItem(d, s),
            (o = this.getItem(d)),
            this.removeItem(d),
            o !== s)
          )
            throw new Error("localStorage did not return expected value");
        }
      }
      (a.ɵfac = function (s) {
        return new (s || a)();
      }),
        (a.ɵprov = e.ɵɵdefineInjectable({
          token: a,
          factory: a.ɵfac,
          providedIn: "root",
        }));
    },
    65264: (ee, R, t) => {
      "use strict";
      var e, C;
      t.d(R, { N4: () => e, zi: () => n, VD: () => a }),
        ((C = e || (e = {})).SHOW_NOTIFICATION = "[Notification] Show"),
        (C.HIDE_NOTIFICATION = "[Notification] Hide");
      class n {
        constructor(s) {
          (this.notification = s), (this.type = e.SHOW_NOTIFICATION);
        }
      }
      class a {
        constructor(s) {
          (this.hideNotification = s), (this.type = e.HIDE_NOTIFICATION);
        }
      }
    },
    14866: (ee, R, t) => {
      "use strict";
      t.d(R, { M: () => C });
      var e = t(37716),
        n = t(79765),
        a = t(45435);
      class C {
        constructor() {
          this.broadcastSubject = new n.xQ();
        }
        broadcast(d, ...o) {
          const i = { name: d, args: o };
          this.broadcastSubject.next(i);
        }
        on(d, o) {
          return this.broadcastSubject
            .asObservable()
            .pipe((0, a.h)((i) => i.name === d))
            .subscribe((i) => {
              const g = { name: i.name };
              o(g, i.args);
            });
        }
      }
      (C.ɵfac = function (d) {
        return new (d || C)();
      }),
        (C.ɵprov = e.ɵɵdefineInjectable({
          token: C,
          factory: C.ɵfac,
          providedIn: "root",
        }));
    },
    16797: (ee, R, t) => {
      "use strict";
      t.d(R, { x: () => D });
      var e = t(37716),
        n = t(88951),
        a = t(50035),
        C = t(2496),
        s = t(57921),
        d = t(87602),
        o = t(72062),
        i = t(29790),
        g = t(22238);
      class D {
        constructor(m, r, h) {
          (this.translate = m), (this.authService = r), (this.dialog = h);
        }
        confirm(m, r, h = null, p = null, _ = !1) {
          const E = {
            disableClose: !0,
            data: {
              title: m,
              message: r,
              cancel: h || this.translate.instant("action.cancel"),
              ok: p || this.translate.instant("action.ok"),
            },
          };
          return (
            _ && (E.panelClass = ["tb-fullscreen-dialog"]),
            this.dialog.open(s.ConfirmDialogComponent, E).afterClosed()
          );
        }
        alert(m, r, h = null, p = !1) {
          const _ = {
            disableClose: !0,
            data: {
              title: m,
              message: r,
              ok: h || this.translate.instant("action.ok"),
            },
          };
          return (
            p && (_.panelClass = ["tb-fullscreen-dialog"]),
            this.dialog.open(d.AlertDialogComponent, _).afterClosed()
          );
        }
        colorPicker(m) {
          return this.dialog
            .open(a.ColorPickerDialogComponent, {
              disableClose: !0,
              panelClass: ["tb-dialog", "tb-fullscreen-dialog"],
              data: { color: m },
            })
            .afterClosed();
        }
        materialIconPicker(m) {
          return this.dialog
            .open(C.MaterialIconsDialogComponent, {
              disableClose: !0,
              panelClass: ["tb-dialog", "tb-fullscreen-dialog"],
              data: { icon: m },
            })
            .afterClosed();
        }
        permissionDenied() {
          this.alert(
            this.translate.instant("access.permission-denied"),
            this.translate.instant("access.permission-denied-text"),
            this.translate.instant("action.close")
          );
        }
        forbidden() {
          const m = this.confirm(
            this.translate.instant("access.access-forbidden"),
            this.translate.instant("access.access-forbidden-text"),
            this.translate.instant("action.cancel"),
            this.translate.instant("action.sign-in"),
            !0
          );
          return (
            m.subscribe((r) => {
              r && this.authService.logout();
            }),
            m
          );
        }
        todo() {
          return this.dialog
            .open(o.TodoDialogComponent, {
              disableClose: !0,
              panelClass: ["tb-fullscreen-dialog"],
            })
            .afterClosed();
        }
      }
      (D.ɵfac = function (m) {
        return new (m || D)(
          e.ɵɵinject(i.TranslateService),
          e.ɵɵinject(n.e),
          e.ɵɵinject(g.MatDialog)
        );
      }),
        (D.ɵprov = e.ɵɵdefineInjectable({
          token: D,
          factory: D.ɵfac,
          providedIn: "root",
        }));
    },
    76801: (ee, R, t) => {
      "use strict";
      t.d(R, { K: () => o, u: () => i });
      var e = t(37716),
        n = t(69412),
        a = t(38583),
        C = t(19773),
        s = t(88002),
        d = t(5304);
      class o {
        ngOnDestroy() {}
      }
      (o.ɵfac = function (D) {
        return new (D || o)();
      }),
        (o.ɵmod = e.ɵɵdefineNgModule({ type: o })),
        (o.ɵinj = e.ɵɵdefineInjector({}));
      class i {
        constructor(D, y) {
          (this.compiler = D),
            (this.injector = y),
            (this.dynamicComponentModulesMap = new Map());
        }
        createDynamicComponentFactory(D, y, m, r, h = 1) {
          return (0, n.D)(t.e(9101).then(t.bind(t, 89101))).pipe(
            (0, C.zg)(() => {
              const p = this.createDynamicComponent(D, y, r);
              let _ = [a.CommonModule];
              m && (_ = [..._, ...m]);
              const E = (0, e.NgModule)({ declarations: [p], imports: _ })(
                class extends o {}
              );
              return (0, n.D)(this.compiler.compileModuleAsync(E)).pipe(
                (0, s.U)((c) => {
                  let v;
                  try {
                    v = c.create(this.injector);
                  } catch (l) {
                    throw (this.compiler.clearCacheFor(c.moduleType), l);
                  }
                  const I =
                    v.componentFactoryResolver.resolveComponentFactory(p);
                  return (
                    this.dynamicComponentModulesMap.set(I, {
                      moduleRef: v,
                      moduleType: c.moduleType,
                    }),
                    I
                  );
                }),
                (0, d.K)((c) => {
                  if (1 === h)
                    return (
                      (0, e.ɵresetCompiledComponents)(),
                      this.createDynamicComponentFactory(D, y, m, r, ++h)
                    );
                  throw c;
                })
              );
            })
          );
        }
        destroyDynamicComponentFactory(D) {
          const y = this.dynamicComponentModulesMap.get(D);
          y &&
            (y.moduleRef.destroy(),
            this.compiler.clearCacheFor(y.moduleType),
            this.dynamicComponentModulesMap.delete(D));
        }
        createDynamicComponent(D, y, m) {
          return (0, e.Component)({ template: y, preserveWhitespaces: m })(D);
        }
      }
      (i.ɵfac = function (D) {
        return new (D || i)(e.ɵɵinject(e.Compiler), e.ɵɵinject(e.Injector));
      }),
        (i.ɵprov = e.ɵɵdefineInjectable({
          token: i,
          factory: i.ɵfac,
          providedIn: "root",
        }));
    },
    32534: (ee, R, t) => {
      "use strict";
      t.d(R, { s: () => r });
      var e = t(37716),
        n = t(25917),
        a = t(5304),
        C = t(19773),
        s = t(68307),
        d = t(88002),
        o = t(82068),
        i = t(32224),
        g = t(29790),
        D = t(91841);
      const y = "/assets",
        m = { content: "## Not found", helpBaseUrl: y };
      class r {
        constructor(p, _, E) {
          (this.translate = p),
            (this.http = _),
            (this.uiSettingsService = E),
            (this.siteBaseUrl = o.mT),
            (this.helpCache = {});
        }
        getHelpContent(p) {
          const _ = this.translate.currentLang;
          return this.helpCache[_] && this.helpCache[_][p]
            ? (0, n.of)(this.helpCache[_][p])
            : this.loadHelpContent(_, p).pipe(
                (0, a.K)(() => {
                  const E = this.translate.getDefaultLang();
                  return _ !== E
                    ? this.loadHelpContent(E, p).pipe(
                        (0, a.K)(() => (0, n.of)(m))
                      )
                    : (0, n.of)(m);
                }),
                (0, C.zg)((E) =>
                  this.processIncludes(this.processVariables(E))
                ),
                (0, s.b)((E) => {
                  let c = this.helpCache[_];
                  c || ((c = {}), (this.helpCache[_] = c)), (c[p] = E);
                })
              );
        }
        loadHelpContent(p, _) {
          return this.uiSettingsService.getHelpBaseUrl().pipe(
            (0, C.zg)((E) =>
              this.loadHelpContentFromBaseUrl(E, p, _).pipe(
                (0, a.K)((c) => {
                  if (y !== E) return this.loadHelpContentFromBaseUrl(y, p, _);
                  throw c;
                })
              )
            )
          );
        }
        loadHelpContentFromBaseUrl(p, _, E) {
          return this.http
            .get(`${p}/help/${_}/${E}.md`, { responseType: "text" })
            .pipe((0, d.U)((c) => ({ content: c, helpBaseUrl: p })));
        }
        processVariables(p) {
          p.content = p.content.replace(/\${siteBaseUrl}/g, this.siteBaseUrl);
          return p.content.replace(/\${helpBaseUrl}/g, p.helpBaseUrl);
        }
        processIncludes(p) {
          const E = /{% include (.*) %}/.exec(p);
          if (E) {
            const c = E[1];
            return this.getHelpContent(c).pipe(
              (0, C.zg)(
                (v) => ((p = p.replace(E[0], v)), this.processIncludes(p))
              )
            );
          }
          return (0, n.of)(p);
        }
      }
      (r.ɵfac = function (p) {
        return new (p || r)(
          e.ɵɵinject(g.TranslateService),
          e.ɵɵinject(D.HttpClient),
          e.ɵɵinject(i.Y)
        );
      }),
        (r.ɵprov = e.ɵɵdefineInjectable({
          token: r,
          factory: r.ɵfac,
          providedIn: "root",
        }));
    },
    48145: (ee, R, t) => {
      "use strict";
      t.d(R, { h: () => g });
      var e = t(37716),
        n = t(88951),
        a = t(86710),
        C = t(54787),
        s = t(15257),
        d = t(26215),
        o = t(26311),
        i = t(41960);
      class g {
        constructor(y, m) {
          (this.store = y),
            (this.authService = m),
            (this.menuSections$ = new d.X([])),
            (this.homeSections$ = new d.X([])),
            this.store.pipe((0, a.select)(C.vN)).subscribe((r) => {
              r && this.buildMenu();
            });
        }
        buildMenu() {
          this.store.pipe((0, a.select)(C.Hz), (0, s.q)(1)).subscribe((y) => {
            if (y.authUser) {
              let m, r;
              switch (y.authUser.authority) {
                case o.W.SYS_ADMIN:
                  (m = this.buildSysAdminMenu(y)),
                    (r = this.buildSysAdminHome(y));
                  break;
                case o.W.TENANT_ADMIN:
                  (m = this.buildTenantAdminMenu(y)),
                    (r = this.buildTenantAdminHome(y));
                  break;
                case o.W.CUSTOMER_USER:
                  (m = this.buildCustomerUserMenu(y)),
                    (r = this.buildCustomerUserHome(y));
              }
              this.menuSections$.next(m), this.homeSections$.next(r);
            }
          });
        }
        buildSysAdminMenu(y) {
          const m = [];
          return (
            m.push(
              {
                id: (0, i.M8)(),
                name: "home.home",
                type: "link",
                path: "/home",
                icon: "home",
              },
              {
                id: (0, i.M8)(),
                name: "tenant.tenants",
                type: "link",
                path: "/tenants",
                icon: "supervisor_account",
              },
              {
                id: (0, i.M8)(),
                name: "tenant-profile.tenant-profiles",
                type: "link",
                path: "/tenantProfiles",
                icon: "mdi:alpha-t-box",
                isMdiIcon: !0,
              },
              {
                id: (0, i.M8)(),
                name: "widget.widget-library",
                type: "link",
                path: "/widgets-bundles",
                icon: "now_widgets",
              },
              {
                id: (0, i.M8)(),
                name: "admin.system-settings",
                type: "toggle",
                path: "/settings",
                height: "320px",
                icon: "settings",
                pages: [
                  {
                    id: (0, i.M8)(),
                    name: "admin.general",
                    type: "link",
                    path: "/settings/general",
                    icon: "settings_applications",
                  },
                  {
                    id: (0, i.M8)(),
                    name: "admin.outgoing-mail",
                    type: "link",
                    path: "/settings/outgoing-mail",
                    icon: "mail",
                  },
                  {
                    id: (0, i.M8)(),
                    name: "admin.sms-provider",
                    type: "link",
                    path: "/settings/sms-provider",
                    icon: "sms",
                  },
                  {
                    id: (0, i.M8)(),
                    name: "admin.security-settings",
                    type: "link",
                    path: "/settings/security-settings",
                    icon: "security",
                  },
                  {
                    id: (0, i.M8)(),
                    name: "admin.oauth2.oauth2",
                    type: "link",
                    path: "/settings/oauth2",
                    icon: "security",
                  },
                  {
                    id: (0, i.M8)(),
                    name: "admin.2fa.2fa",
                    type: "link",
                    path: "/settings/2fa",
                    icon: "mdi:two-factor-authentication",
                    isMdiIcon: !0,
                  },
                  {
                    id: (0, i.M8)(),
                    name: "resource.resources-library",
                    type: "link",
                    path: "/settings/resources-library",
                    icon: "folder",
                  },
                  {
                    id: (0, i.M8)(),
                    name: "admin.queues",
                    type: "link",
                    path: "/settings/queues",
                    icon: "swap_calls",
                  },
                ],
              }
            ),
            m
          );
        }
        buildSysAdminHome(y) {
          const m = [];
          return (
            m.push(
              {
                name: "tenant.management",
                places: [
                  {
                    name: "tenant.tenants",
                    icon: "supervisor_account",
                    path: "/tenants",
                  },
                  {
                    name: "tenant-profile.tenant-profiles",
                    icon: "mdi:alpha-t-box",
                    isMdiIcon: !0,
                    path: "/tenantProfiles",
                  },
                ],
              },
              {
                name: "widget.management",
                places: [
                  {
                    name: "widget.widget-library",
                    icon: "now_widgets",
                    path: "/widgets-bundles",
                  },
                ],
              },
              {
                name: "admin.system-settings",
                places: [
                  {
                    name: "admin.general",
                    icon: "settings_applications",
                    path: "/settings/general",
                  },
                  {
                    name: "admin.outgoing-mail",
                    icon: "mail",
                    path: "/settings/outgoing-mail",
                  },
                  {
                    name: "admin.sms-provider",
                    icon: "sms",
                    path: "/settings/sms-provider",
                  },
                  {
                    name: "admin.security-settings",
                    icon: "security",
                    path: "/settings/security-settings",
                  },
                  {
                    name: "admin.oauth2.oauth2",
                    icon: "security",
                    path: "/settings/oauth2",
                  },
                  {
                    name: "admin.2fa.2fa",
                    icon: "mdi:two-factor-authentication",
                    isMdiIcon: !0,
                    path: "/settings/2fa",
                  },
                  {
                    name: "resource.resources-library",
                    icon: "folder",
                    path: "/settings/resources-library",
                  },
                  {
                    name: "admin.queues",
                    icon: "swap_calls",
                    path: "/settings/queues",
                  },
                ],
              }
            ),
            m
          );
        }
        buildTenantAdminMenu(y) {
          const m = [];
          return (
            m.push(
              {
                id: (0, i.M8)(),
                name: "home.home",
                type: "link",
                path: "/home",
                icon: "home",
              },
              {
                id: (0, i.M8)(),
                name: "rulechain.rulechains",
                type: "link",
                path: "/ruleChains",
                icon: "settings_ethernet",
              },
              {
                id: (0, i.M8)(),
                name: "customer.customers",
                type: "link",
                path: "/customers",
                icon: "supervisor_account",
              },
              {
                id: (0, i.M8)(),
                name: "asset.assets",
                type: "link",
                path: "/assets",
                icon: "domain",
              },
              {
                id: (0, i.M8)(),
                name: "device.devices",
                type: "link",
                path: "/devices",
                icon: "devices_other",
              },
              {
                id: (0, i.M8)(),
                name: "profiles.profiles",
                type: "toggle",
                path: "/profiles",
                height: "80px",
                icon: "badge",
                pages: [
                  {
                    id: (0, i.M8)(),
                    name: "device-profile.device-profiles",
                    type: "link",
                    path: "/profiles/deviceProfiles",
                    icon: "mdi:alpha-d-box",
                    isMdiIcon: !0,
                  },
                  {
                    id: (0, i.M8)(),
                    name: "asset-profile.asset-profiles",
                    type: "link",
                    path: "/profiles/assetProfiles",
                    icon: "mdi:alpha-a-box",
                    isMdiIcon: !0,
                  },
                ],
              },
              {
                id: (0, i.M8)(),
                name: "ota-update.ota-updates",
                type: "link",
                path: "/otaUpdates",
                icon: "memory",
              },
              {
                id: (0, i.M8)(),
                name: "entity-view.entity-views",
                type: "link",
                path: "/entityViews",
                icon: "view_quilt",
              }
            ),
            y.edgesSupportEnabled &&
              m.push(
                {
                  id: (0, i.M8)(),
                  name: "edge.edge-instances",
                  type: "link",
                  path: "/edgeInstances",
                  icon: "router",
                },
                {
                  id: (0, i.M8)(),
                  name: "edge.management",
                  type: "toggle",
                  path: "/edgeManagement",
                  height: "40px",
                  icon: "settings_input_antenna",
                  pages: [
                    {
                      id: (0, i.M8)(),
                      name: "edge.rulechain-templates",
                      type: "link",
                      path: "/edgeManagement/ruleChains",
                      icon: "settings_ethernet",
                    },
                  ],
                }
              ),
            m.push(
              {
                id: (0, i.M8)(),
                name: "widget.widget-library",
                type: "link",
                path: "/widgets-bundles",
                icon: "now_widgets",
              },
              {
                id: (0, i.M8)(),
                name: "dashboard.dashboards",
                type: "link",
                path: "/dashboards",
                icon: "dashboards",
              },
              {
                id: (0, i.M8)(),
                name: "version-control.version-control",
                type: "link",
                path: "/vc",
                icon: "history",
              },
              {
                id: (0, i.M8)(),
                name: "audit-log.audit-logs",
                type: "link",
                path: "/auditLogs",
                icon: "track_changes",
              },
              {
                id: (0, i.M8)(),
                name: "api-usage.api-usage",
                type: "link",
                path: "/usage",
                icon: "insert_chart",
              },
              {
                id: (0, i.M8)(),
                name: "admin.system-settings",
                type: "toggle",
                path: "/settings",
                height: "160px",
                icon: "settings",
                pages: [
                  {
                    id: (0, i.M8)(),
                    name: "admin.home-settings",
                    type: "link",
                    path: "/settings/home",
                    icon: "settings_applications",
                  },
                  {
                    id: (0, i.M8)(),
                    name: "resource.resources-library",
                    type: "link",
                    path: "/settings/resources-library",
                    icon: "folder",
                  },
                  {
                    id: (0, i.M8)(),
                    name: "admin.repository-settings",
                    type: "link",
                    path: "/settings/repository",
                    icon: "manage_history",
                  },
                  {
                    id: (0, i.M8)(),
                    name: "admin.auto-commit-settings",
                    type: "link",
                    path: "/settings/auto-commit",
                    icon: "settings_backup_restore",
                  },
                ],
              }
            ),
            m
          );
        }
        buildTenantAdminHome(y) {
          const m = [];
          return (
            m.push(
              {
                name: "rulechain.management",
                places: [
                  {
                    name: "rulechain.rulechains",
                    icon: "settings_ethernet",
                    path: "/ruleChains",
                  },
                ],
              },
              {
                name: "customer.management",
                places: [
                  {
                    name: "customer.customers",
                    icon: "supervisor_account",
                    path: "/customers",
                  },
                ],
              },
              {
                name: "asset.management",
                places: [
                  { name: "asset.assets", icon: "domain", path: "/assets" },
                  {
                    name: "asset-profile.asset-profiles",
                    icon: "mdi:alpha-a-box",
                    isMdiIcon: !0,
                    path: "/profiles/assetProfiles",
                  },
                ],
              },
              {
                name: "device.management",
                places: [
                  {
                    name: "device.devices",
                    icon: "devices_other",
                    path: "/devices",
                  },
                  {
                    name: "device-profile.device-profiles",
                    icon: "mdi:alpha-d-box",
                    isMdiIcon: !0,
                    path: "/profiles/deviceProfiles",
                  },
                  {
                    name: "ota-update.ota-updates",
                    icon: "memory",
                    path: "/otaUpdates",
                  },
                ],
              },
              {
                name: "entity-view.management",
                places: [
                  {
                    name: "entity-view.entity-views",
                    icon: "view_quilt",
                    path: "/entityViews",
                  },
                ],
              }
            ),
            y.edgesSupportEnabled &&
              m.push({
                name: "edge.management",
                places: [
                  {
                    name: "edge.edge-instances",
                    icon: "router",
                    path: "/edgeInstances",
                  },
                  {
                    name: "edge.rulechain-templates",
                    icon: "settings_ethernet",
                    path: "/edgeManagement/ruleChains",
                  },
                ],
              }),
            m.push(
              {
                name: "dashboard.management",
                places: [
                  {
                    name: "widget.widget-library",
                    icon: "now_widgets",
                    path: "/widgets-bundles",
                  },
                  {
                    name: "dashboard.dashboards",
                    icon: "dashboard",
                    path: "/dashboards",
                  },
                ],
              },
              {
                name: "version-control.management",
                places: [
                  {
                    name: "version-control.version-control",
                    icon: "history",
                    path: "/vc",
                  },
                ],
              },
              {
                name: "audit-log.audit",
                places: [
                  {
                    name: "audit-log.audit-logs",
                    icon: "track_changes",
                    path: "/auditLogs",
                  },
                  {
                    name: "api-usage.api-usage",
                    icon: "insert_chart",
                    path: "/usage",
                  },
                ],
              },
              {
                name: "admin.system-settings",
                places: [
                  {
                    name: "admin.home-settings",
                    icon: "settings_applications",
                    path: "/settings/home",
                  },
                  {
                    name: "resource.resources-library",
                    icon: "folder",
                    path: "/settings/resources-library",
                  },
                  {
                    name: "admin.repository-settings",
                    icon: "manage_history",
                    path: "/settings/repository",
                  },
                  {
                    name: "admin.auto-commit-settings",
                    icon: "settings_backup_restore",
                    path: "/settings/auto-commit",
                  },
                ],
              }
            ),
            m
          );
        }
        buildCustomerUserMenu(y) {
          const m = [];
          return (
            m.push(
              {
                id: (0, i.M8)(),
                name: "home.home",
                type: "link",
                path: "/home",
                icon: "home",
              },
              {
                id: (0, i.M8)(),
                name: "asset.assets",
                type: "link",
                path: "/assets",
                icon: "domain",
              },
              {
                id: (0, i.M8)(),
                name: "device.devices",
                type: "link",
                path: "/devices",
                icon: "devices_other",
              },
              {
                id: (0, i.M8)(),
                name: "entity-view.entity-views",
                type: "link",
                path: "/entityViews",
                icon: "view_quilt",
              }
            ),
            y.edgesSupportEnabled &&
              m.push({
                id: (0, i.M8)(),
                name: "edge.edge-instances",
                type: "link",
                path: "/edgeInstances",
                icon: "router",
              }),
            m.push({
              id: (0, i.M8)(),
              name: "dashboard.dashboards",
              type: "link",
              path: "/dashboards",
              icon: "dashboard",
            }),
            m
          );
        }
        buildCustomerUserHome(y) {
          const m = [];
          return (
            m.push(
              {
                name: "asset.view-assets",
                places: [
                  { name: "asset.assets", icon: "domain", path: "/assets" },
                ],
              },
              {
                name: "device.view-devices",
                places: [
                  {
                    name: "device.devices",
                    icon: "devices_other",
                    path: "/devices",
                  },
                ],
              },
              {
                name: "entity-view.management",
                places: [
                  {
                    name: "entity-view.entity-views",
                    icon: "view_quilt",
                    path: "/entityViews",
                  },
                ],
              }
            ),
            y.edgesSupportEnabled &&
              m.push({
                name: "edge.management",
                places: [
                  {
                    name: "edge.edge-instances",
                    icon: "settings_input_antenna",
                    path: "/edgeInstances",
                  },
                ],
              }),
            m.push({
              name: "dashboard.view-dashboards",
              places: [
                {
                  name: "dashboard.dashboards",
                  icon: "dashboard",
                  path: "/dashboards",
                },
              ],
            }),
            m
          );
        }
        menuSections() {
          return this.menuSections$;
        }
        homeSections() {
          return this.homeSections$;
        }
      }
      (g.ɵfac = function (y) {
        return new (y || g)(e.ɵɵinject(a.Store), e.ɵɵinject(n.e));
      }),
        (g.ɵprov = e.ɵɵdefineInjectable({
          token: g,
          factory: g.ɵfac,
          providedIn: "root",
        }));
    },
    53682: (ee, R, t) => {
      "use strict";
      t.d(R, { W: () => p });
      var e = t(37716),
        n = t(11877),
        a = t(41960),
        C = t(69412),
        s = t(25917),
        d = t(5304),
        o = t(68307),
        i = t(88951),
        g = t(39895);
      class p {
        constructor(E, c, v) {
          (this.window = E),
            (this.router = c),
            (this.authService = v),
            (this.onWindowMessageListener = this.onWindowMessage.bind(this));
          const I = this.window;
          (this.mobileChannel = I.flutter_inappwebview),
            (this.mobileApp = (0, a.$K)(this.mobileChannel)),
            this.mobileApp &&
              E.addEventListener("message", this.onWindowMessageListener);
        }
        isMobileApp() {
          return this.mobileApp;
        }
        handleDashboardStateName(E) {
          this.mobileApp &&
            this.mobileChannel.callHandler(
              "tbMobileDashboardStateNameHandler",
              E
            );
        }
        onDashboardLoaded(E, c) {
          this.mobileApp &&
            this.mobileChannel.callHandler(
              "tbMobileDashboardLoadedHandler",
              E,
              c
            );
        }
        onDashboardRightLayoutChanged(E) {
          this.mobileApp &&
            this.mobileChannel.callHandler("tbMobileDashboardLayoutHandler", E);
        }
        registerToggleLayoutFunction(E) {
          this.toggleLayoutFunction = E;
        }
        unregisterToggleLayoutFunction() {
          this.toggleLayoutFunction = null;
        }
        handleWidgetMobileAction(E, ...c) {
          return this.mobileApp
            ? (0, C.D)(
                this.mobileChannel.callHandler("tbMobileHandler", E, ...c)
              ).pipe(
                (0, d.K)((v) =>
                  (0, s.of)({
                    hasError: !0,
                    error: (null == v ? void 0 : v.message)
                      ? v.message
                      : `Failed to execute mobile action ${E}`,
                  })
                )
              )
            : (0, s.of)(null);
        }
        handleMobileNavigation(E, c) {
          this.mobileApp &&
            this.mobileChannel.callHandler("tbMobileNavigationHandler", E, c);
        }
        onWindowMessage(E) {
          if (E.data) {
            let c;
            try {
              c = JSON.parse(E.data);
            } catch (v) {}
            if (c && c.type)
              switch (c.type) {
                case "openDashboardMessage":
                  const v = c.data;
                  this.openDashboard(v);
                  break;
                case "reloadUserMessage":
                  const I = c.data;
                  this.reloadUser(I);
                  break;
                case "toggleDashboardLayout":
                  this.toggleLayoutFunction && this.toggleLayoutFunction();
              }
          }
        }
        openDashboard(E) {
          E &&
            E.dashboardId &&
            (this.reloadUserObservable
              ? this.reloadUserObservable.subscribe((c) => {
                  c && this.doDashboardNavigation(E);
                })
              : this.doDashboardNavigation(E));
        }
        doDashboardNavigation(E) {
          let c = `/dashboard/${E.dashboardId}`;
          const v = [];
          E.state && v.push(`state=${E.state}`),
            E.embedded && v.push("embedded=true"),
            E.hideToolbar && v.push("hideToolbar=true"),
            this.lastDashboardId === E.dashboardId &&
              v.push(`reload=${new Date().getTime()}`),
            v.length && (c += `?${v.join("&")}`),
            (this.lastDashboardId = E.dashboardId),
            this.router.navigateByUrl(c, { replaceUrl: !0 });
        }
        reloadUser(E) {
          E &&
            E.accessToken &&
            E.refreshToken &&
            (this.reloadUserObservable = this.authService
              .setUserFromJwtToken(E.accessToken, E.refreshToken, !0)
              .pipe(
                (0, o.b)(() => {
                  this.reloadUserObservable = null;
                })
              ));
        }
      }
      (p.ɵfac = function (E) {
        return new (E || p)(
          e.ɵɵinject(n.m9),
          e.ɵɵinject(g.Router),
          e.ɵɵinject(i.e)
        );
      }),
        (p.ɵprov = e.ɵɵdefineInjectable({
          token: p,
          factory: p.ɵfac,
          providedIn: "root",
        }));
    },
    91645: (ee, R, t) => {
      "use strict";
      t.d(R, { g: () => a });
      var e = t(37716),
        n = t(79765);
      class a {
        constructor() {
          (this.notificationSubject = new n.xQ()),
            (this.hideNotificationSubject = new n.xQ());
        }
        dispatchNotification(s) {
          this.notificationSubject.next(s);
        }
        hideNotification(s) {
          this.hideNotificationSubject.next(s);
        }
        getNotification() {
          return this.notificationSubject.asObservable();
        }
        getHideNotification() {
          return this.hideNotificationSubject.asObservable();
        }
      }
      (a.ɵfac = function (s) {
        return new (s || a)();
      }),
        (a.ɵprov = e.ɵɵdefineInjectable({
          token: a,
          factory: a.ɵfac,
          providedIn: "root",
        }));
    },
    25280: (ee, R, t) => {
      "use strict";
      t.d(R, { i: () => a });
      var e = t(37716),
        n = t(11877);
      class a {
        constructor(s, d) {
          (this.window = s), (this.ngZone = d);
          const o = s.requestAnimationFrame || s.webkitRequestAnimationFrame,
            i =
              s.cancelAnimationFrame ||
              s.webkitCancelAnimationFrame ||
              s.webkitCancelRequestAnimationFrame;
          (this.rafSupported = !!o),
            this.rafSupported
              ? (this.rafFunction = (g) => {
                  const D = o(g);
                  return () => {
                    i(D);
                  };
                })
              : (this.rafFunction = (g) => {
                  const D = setTimeout(g, 16.66);
                  return () => {
                    clearTimeout(D);
                  };
                });
        }
        raf(s, d = !1) {
          return d
            ? this.rafFunction(s)
            : this.ngZone.runOutsideAngular(() => this.rafFunction(s));
        }
      }
      (a.ɵfac = function (s) {
        return new (s || a)(e.ɵɵinject(n.m9), e.ɵɵinject(e.NgZone));
      }),
        (a.ɵprov = e.ɵɵdefineInjectable({
          token: a,
          factory: a.ɵfac,
          providedIn: "root",
        }));
    },
    11152: (ee, R, t) => {
      "use strict";
      t.d(R, { z: () => o });
      var e = t(37716),
        n = t(38583),
        a = t(40205),
        C = t(88229),
        s = t(35758),
        d = t(91841);
      class o {
        constructor(g, D, y, m) {
          (this.document = g),
            (this.compiler = D),
            (this.http = y),
            (this.injector = m),
            (this.loadedResources = {}),
            (this.loadedModules = {}),
            (this.loadedModulesAndFactories = {}),
            (this.anchor =
              this.document.getElementsByTagName("head")[0] ||
              this.document.getElementsByTagName("body")[0]);
        }
        loadResource(g) {
          if (this.loadedResources[g])
            return this.loadedResources[g].asObservable();
          let D;
          const y = /[./](css|less|html|htm|js)?(([?#]).*)?$/.exec(g);
          return (
            null !== y && (D = y[1]),
            D
              ? "css" !== D && "js" !== D
                ? (0, a._)(new Error(`Unsupported file type: ${D}`))
                : this.loadResourceByType(D, g)
              : (0, a._)(new Error(`Unable to detect file type from url: ${g}`))
          );
        }
        loadFactories(g, D) {
          if (this.loadedModulesAndFactories[g])
            return this.loadedModulesAndFactories[g].asObservable();
          D.init();
          const y = new C.t();
          return (
            (this.loadedModulesAndFactories[g] = y),
            t
              .e(9101)
              .then(t.bind(t, 89101))
              .then(() => {
                System.import(g).then(
                  (m) => {
                    const r = this.extractNgModules(m);
                    if (r.length) {
                      const h = [];
                      for (const p of r)
                        h.push(
                          this.compiler.compileModuleAndAllComponentsAsync(p)
                        );
                      (0, s.D)(h).subscribe(
                        (p) => {
                          try {
                            const _ = [];
                            for (const c of p)
                              c.ngModuleFactory.create(this.injector),
                                _.push(...c.componentFactories);
                            const E = { modules: r, factories: _ };
                            this.loadedModulesAndFactories[g].next(E),
                              this.loadedModulesAndFactories[g].complete();
                          } catch (_) {
                            this.loadedModulesAndFactories[g].error(
                              new Error(`Unable to init module from url: ${g}`)
                            ),
                              delete this.loadedModulesAndFactories[g];
                          }
                        },
                        (p) => {
                          this.loadedModulesAndFactories[g].error(
                            new Error(`Unable to compile module from url: ${g}`)
                          ),
                            delete this.loadedModulesAndFactories[g];
                        }
                      );
                    } else
                      this.loadedModulesAndFactories[g].error(
                        new Error(`Module '${g}' doesn't have default export!`)
                      ),
                        delete this.loadedModulesAndFactories[g];
                  },
                  (m) => {
                    this.loadedModulesAndFactories[g].error(
                      new Error(`Unable to load module from url: ${g}`)
                    ),
                      delete this.loadedModulesAndFactories[g];
                  }
                );
              }),
            y.asObservable()
          );
        }
        loadModules(g, D) {
          if (this.loadedModules[g])
            return this.loadedModules[g].asObservable();
          D.init();
          const y = new C.t();
          return (
            (this.loadedModules[g] = y),
            t
              .e(9101)
              .then(t.bind(t, 89101))
              .then(() => {
                System.import(g).then(
                  (m) => {
                    try {
                      let r;
                      try {
                        r = this.extractNgModules(m);
                      } catch (h) {
                        console.error(h);
                      }
                      if (r && r.length) {
                        const h = [];
                        for (const p of r)
                          h.push(
                            this.compiler.compileModuleAndAllComponentsAsync(p)
                          );
                        (0, s.D)(h).subscribe(
                          (p) => {
                            try {
                              for (const _ of p)
                                _.ngModuleFactory.create(this.injector);
                              this.loadedModules[g].next(r),
                                this.loadedModules[g].complete();
                            } catch (_) {
                              this.loadedModules[g].error(
                                new Error(
                                  `Unable to init module from url: ${g}`
                                )
                              ),
                                delete this.loadedModules[g];
                            }
                          },
                          (p) => {
                            this.loadedModules[g].error(
                              new Error(
                                `Unable to compile module from url: ${g}`
                              )
                            ),
                              delete this.loadedModules[g];
                          }
                        );
                      } else
                        this.loadedModules[g].error(
                          new Error(
                            `Module '${g}' doesn't have default export or not NgModule!`
                          )
                        ),
                          delete this.loadedModules[g];
                    } catch (r) {
                      this.loadedModules[g].error(
                        new Error(`Unable to load module from url: ${g}`)
                      ),
                        delete this.loadedModules[g];
                    }
                  },
                  (m) => {
                    this.loadedModules[g].error(
                      new Error(`Unable to load module from url: ${g}`)
                    ),
                      delete this.loadedModules[g],
                      console.error(`Unable to load module from url: ${g}`, m);
                  }
                );
              }),
            y.asObservable()
          );
        }
        extractNgModules(g, D = []) {
          try {
            let y = [g],
              m = 0;
            for (; y.length && m < 10; ) {
              const r = [];
              for (const h of y)
                if (h && "\u0275mod" in h) D.push(h);
                else
                  for (const p of Object.keys(h))
                    this.isPrimitive(h[p]) || r.push(h[p]);
              (y = r), m++;
            }
          } catch (y) {
            console.log("Could not load NgModule", y);
          }
          return D;
        }
        isPrimitive(g) {
          return g !== Object(g);
        }
        loadResourceByType(g, D) {
          const y = new C.t();
          this.loadedResources[D] = y;
          let m,
            r = !1;
          switch (g) {
            case "js":
              (m = this.document.createElement("script")),
                (m.type = "text/javascript"),
                (m.async = !1),
                (m.src = D);
              break;
            case "css":
              (m = this.document.createElement("link")),
                (m.type = "text/css"),
                (m.rel = "stylesheet"),
                (m.href = D);
          }
          return (
            (m.onload = m.onreadystatechange =
              (h) => {
                (m.readyState && !/^c|loade/.test(m.readyState)) ||
                  r ||
                  ((m.onload = m.onreadystatechange = null),
                  (r = !0),
                  this.loadedResources[D].next(),
                  this.loadedResources[D].complete());
              }),
            (m.onerror = () => {
              this.loadedResources[D].error(new Error(`Unable to load ${D}`)),
                delete this.loadedResources[D];
            }),
            this.anchor.appendChild(m),
            y.asObservable()
          );
        }
      }
      (o.ɵfac = function (g) {
        return new (g || o)(
          e.ɵɵinject(n.DOCUMENT),
          e.ɵɵinject(e.Compiler),
          e.ɵɵinject(d.HttpClient),
          e.ɵɵinject(e.Injector)
        );
      }),
        (o.ɵprov = e.ɵɵdefineInjectable({
          token: o,
          factory: o.ɵfac,
          providedIn: "root",
        }));
    },
    72491: (ee, R, t) => {
      "use strict";
      t.d(R, { O: () => y });
      var e = t(37716),
        n = t(95341),
        a = t(66054),
        C = t(88002),
        s = t(41960),
        d = t(91841);
      const o = n.sh,
        i = 7300 * n.x4;
      class y {
        constructor(r) {
          (this.http = r), (this.maxDatapointsLimit = 500);
        }
        loadMaxDatapointsLimit() {
          return this.http
            .get("/api/dashboard/maxDatapointsLimit", (0, a.gM)(!0))
            .pipe(
              (0, C.U)(
                (r) => (
                  (this.maxDatapointsLimit = r),
                  (!this.maxDatapointsLimit || this.maxDatapointsLimit <= 7) &&
                    (this.maxDatapointsLimit = 8),
                  this.maxDatapointsLimit
                )
              )
            );
        }
        matchesExistingInterval(r, h, p) {
          return this.getIntervals(r, h).findIndex((E) => E.value === p) > -1;
        }
        getIntervals(r, h) {
          return (
            (r = this.boundMinInterval(r)),
            (h = this.boundMaxInterval(h)),
            n.Mk.filter((p) => p.value >= r && p.value <= h)
          );
        }
        boundMinInterval(r) {
          return (
            (0, s.$K)(r) && (r = 1e3 * Math.ceil(r / 1e3)),
            this.toBound(r, o, i, o)
          );
        }
        boundMaxInterval(r) {
          return (
            (0, s.$K)(r) && (r = 1e3 * Math.floor(r / 1e3)),
            this.toBound(r, o, i, i)
          );
        }
        boundToPredefinedInterval(r, h, p) {
          const _ = this.getIntervals(r, h);
          let E = i;
          const c = p || r;
          if (!_.length) return c;
          let v = _[0];
          return (
            _.forEach((I) => {
              const l = Math.abs(I.value - c);
              l < E && ((v = I), (E = l));
            }),
            v.value
          );
        }
        boundIntervalToTimewindow(r, h, p) {
          if (p === n.Eu.NONE) return n.sh;
          {
            const _ = this.minIntervalLimit(r),
              E = this.maxIntervalLimit(r);
            return h
              ? this.toBound(h, _, E, h)
              : this.boundToPredefinedInterval(_, E, this.avgInterval(r));
          }
        }
        getMaxDatapointsLimit() {
          return this.maxDatapointsLimit;
        }
        getMinDatapointsLimit() {
          return 7;
        }
        avgInterval(r) {
          const h = r / 200;
          return this.boundMinInterval(h);
        }
        minIntervalLimit(r) {
          const h = r / 500;
          return this.boundMinInterval(h);
        }
        maxIntervalLimit(r) {
          const h = r / 7;
          return this.boundMaxInterval(h);
        }
        defaultTimewindow() {
          return (0, n.B3)(this);
        }
        toBound(r, h, p, _) {
          return (0, s.$K)(r)
            ? ((r = Math.max(r, h)), (r = Math.min(r, p)))
            : _;
        }
      }
      (y.ɵfac = function (r) {
        return new (r || y)(e.ɵɵinject(d.HttpClient));
      }),
        (y.ɵprov = e.ɵɵdefineInjectable({
          token: y,
          factory: y.ɵfac,
          providedIn: "root",
        }));
    },
    72516: (ee, R, t) => {
      "use strict";
      t.d(R, { y: () => d });
      var e = t(37716),
        n = t(45435),
        a = t(92340),
        C = t(29790),
        s = t(39075);
      class d {
        constructor(i, g) {
          (this.translate = i), (this.title = g);
        }
        setTitle(i, g) {
          let D = i;
          for (; D.children.length; ) D = D.children[0];
          const { title: y } = D.data,
            m = g || this.translate;
          y
            ? m
                .get(y)
                .pipe((0, n.h)((r) => r !== y))
                .subscribe((r) => this.title.setTitle(`${a.N.appTitle} | ${r}`))
            : this.title.setTitle(a.N.appTitle);
        }
      }
      (d.ɵfac = function (i) {
        return new (i || d)(
          e.ɵɵinject(C.TranslateService),
          e.ɵɵinject(s.Title)
        );
      }),
        (d.ɵprov = e.ɵɵdefineInjectable({
          token: d,
          factory: d.ɵfac,
          providedIn: "root",
        }));
    },
    1361: (ee, R, t) => {
      "use strict";
      t.d(R, { F: () => O });
      var e = t(37716),
        n = t(11877),
        a = t(41960),
        C = t(82068),
        s = t(62909),
        d = t(52042),
        o = t(69331),
        i = t(29472),
        g = t(16421),
        D = t(19957),
        y = t.n(D);
      const m =
        "10k e951\n10mp e952\n11mp e953\n123 eb8d\n12mp e954\n13mp e955\n14mp e956\n15mp e957\n16mp e958\n17mp e959\n18mp e95a\n19mp e95b\n1k e95c\n1k_plus e95d\n1x_mobiledata efcd\n20mp e95e\n21mp e95f\n22mp e960\n23mp e961\n24mp e962\n2k e963\n2k_plus e964\n2mp e965\n30fps efce\n30fps_select efcf\n360 e577\n3d_rotation e84d\n3g_mobiledata efd0\n3k e966\n3k_plus e967\n3mp e968\n3p efd1\n4g_mobiledata efd2\n4g_plus_mobiledata efd3\n4k e072\n4k_plus e969\n4mp e96a\n5g ef38\n5k e96b\n5k_plus e96c\n5mp e96d\n60fps efd4\n60fps_select efd5\n6_ft_apart f21e\n6k e96e\n6k_plus e96f\n6mp e970\n7k e971\n7k_plus e972\n7mp e973\n8k e974\n8k_plus e975\n8mp e976\n9k e977\n9k_plus e978\n9mp e979\nabc eb94\nac_unit eb3b\naccess_alarm e190\naccess_alarms e191\naccess_time e192\naccess_time_filled efd6\naccessibility e84e\naccessibility_new e92c\naccessible e914\naccessible_forward e934\naccount_balance e84f\naccount_balance_wallet e850\naccount_box e851\naccount_circle e853\naccount_tree e97a\nad_units ef39\nadb e60e\nadd e145\nadd_a_photo e439\nadd_alarm e193\nadd_alert e003\nadd_box e146\nadd_business e729\nadd_call e0e8\nadd_card eb86\nadd_chart e97b\nadd_circle e147\nadd_circle_outline e148\nadd_comment e266\nadd_ic_call e97c\nadd_link e178\nadd_location e567\nadd_location_alt ef3a\nadd_moderator e97d\nadd_photo_alternate e43e\nadd_reaction e1d3\nadd_road ef3b\nadd_shopping_cart e854\nadd_task f23a\nadd_to_drive e65c\nadd_to_home_screen e1fe\nadd_to_photos e39d\nadd_to_queue e05c\naddchart ef3c\nadf_scanner eada\nadjust e39e\nadmin_panel_settings ef3d\nadobe ea96\nads_click e762\nagriculture ea79\nair efd8\nairline_seat_flat e630\nairline_seat_flat_angled e631\nairline_seat_individual_suite e632\nairline_seat_legroom_extra e633\nairline_seat_legroom_normal e634\nairline_seat_legroom_reduced e635\nairline_seat_recline_extra e636\nairline_seat_recline_normal e637\nairline_stops e7d0\nairlines e7ca\nairplane_ticket efd9\nairplanemode_active e195\nairplanemode_inactive e194\nairplanemode_off e194\nairplanemode_on e195\nairplay e055\nairport_shuttle eb3c\nalarm e855\nalarm_add e856\nalarm_off e857\nalarm_on e858\nalbum e019\nalign_horizontal_center e00f\nalign_horizontal_left e00d\nalign_horizontal_right e010\nalign_vertical_bottom e015\nalign_vertical_center e011\nalign_vertical_top e00c\nall_inbox e97f\nall_inclusive eb3d\nall_out e90b\nalt_route f184\nalternate_email e0e6\namp_stories ea13\nanalytics ef3e\nanchor f1cd\nandroid e859\nanimation e71c\nannouncement e85a\naod efda\napartment ea40\napi f1b7\napp_blocking ef3f\napp_registration ef40\napp_settings_alt ef41\napp_shortcut eae4\napple ea80\napproval e982\napps e5c3\napps_outage e7cc\narchitecture ea3b\narchive e149\narea_chart e770\narrow_back e5c4\narrow_back_ios e5e0\narrow_back_ios_new e2ea\narrow_circle_down f181\narrow_circle_left eaa7\narrow_circle_right eaaa\narrow_circle_up f182\narrow_downward e5db\narrow_drop_down e5c5\narrow_drop_down_circle e5c6\narrow_drop_up e5c7\narrow_forward e5c8\narrow_forward_ios e5e1\narrow_left e5de\narrow_right e5df\narrow_right_alt e941\narrow_upward e5d8\nart_track e060\narticle ef42\naspect_ratio e85b\nassessment e85c\nassignment e85d\nassignment_ind e85e\nassignment_late e85f\nassignment_return e860\nassignment_returned e861\nassignment_turned_in e862\nassistant e39f\nassistant_direction e988\nassistant_navigation e989\nassistant_photo e3a0\nassured_workload eb6f\natm e573\nattach_email ea5e\nattach_file e226\nattach_money e227\nattachment e2bc\nattractions ea52\nattribution efdb\naudio_file eb82\naudiotrack e3a1\nauto_awesome e65f\nauto_awesome_mosaic e660\nauto_awesome_motion e661\nauto_delete ea4c\nauto_fix_high e663\nauto_fix_normal e664\nauto_fix_off e665\nauto_graph e4fb\nauto_stories e666\nautofps_select efdc\nautorenew e863\nav_timer e01b\nbaby_changing_station f19b\nback_hand e764\nbackpack f19c\nbackspace e14a\nbackup e864\nbackup_table ef43\nbadge ea67\nbakery_dining ea53\nbalance eaf6\nbalcony e58f\nballot e172\nbar_chart e26b\nbatch_prediction f0f5\nbathroom efdd\nbathtub ea41\nbattery_0_bar ebdc\nbattery_1_bar ebd9\nbattery_2_bar ebe0\nbattery_3_bar ebdd\nbattery_4_bar ebe2\nbattery_5_bar ebd4\nbattery_6_bar ebd2\nbattery_alert e19c\nbattery_charging_full e1a3\nbattery_full e1a4\nbattery_saver efde\nbattery_std e1a5\nbattery_unknown e1a6\nbeach_access eb3e\nbed efdf\nbedroom_baby efe0\nbedroom_child efe1\nbedroom_parent efe2\nbedtime ef44\nbedtime_off eb76\nbeenhere e52d\nbento f1f4\nbike_scooter ef45\nbiotech ea3a\nblender efe3\nblock e14b\nblock_flipped ef46\nbloodtype efe4\nbluetooth e1a7\nbluetooth_audio e60f\nbluetooth_connected e1a8\nbluetooth_disabled e1a9\nbluetooth_drive efe5\nbluetooth_searching e1aa\nblur_circular e3a2\nblur_linear e3a3\nblur_off e3a4\nblur_on e3a5\nbolt ea0b\nbook e865\nbook_online f217\nbookmark e866\nbookmark_add e598\nbookmark_added e599\nbookmark_border e867\nbookmark_outline e867\nbookmark_remove e59a\nbookmarks e98b\nborder_all e228\nborder_bottom e229\nborder_clear e22a\nborder_color e22b\nborder_horizontal e22c\nborder_inner e22d\nborder_left e22e\nborder_outer e22f\nborder_right e230\nborder_style e231\nborder_top e232\nborder_vertical e233\nboy eb67\nbranding_watermark e06b\nbreakfast_dining ea54\nbrightness_1 e3a6\nbrightness_2 e3a7\nbrightness_3 e3a8\nbrightness_4 e3a9\nbrightness_5 e3aa\nbrightness_6 e3ab\nbrightness_7 e3ac\nbrightness_auto e1ab\nbrightness_high e1ac\nbrightness_low e1ad\nbrightness_medium e1ae\nbroken_image e3ad\nbrowse_gallery ebd1\nbrowser_not_supported ef47\nbrowser_updated e7cf\nbrunch_dining ea73\nbrush e3ae\nbubble_chart e6dd\nbug_report e868\nbuild e869\nbuild_circle ef48\nbungalow e591\nburst_mode e43c\nbus_alert e98f\nbusiness e0af\nbusiness_center eb3f\ncabin e589\ncable efe6\ncached e86a\ncake e7e9\ncalculate ea5f\ncalendar_month ebcc\ncalendar_today e935\ncalendar_view_day e936\ncalendar_view_month efe7\ncalendar_view_week efe8\ncall e0b0\ncall_end e0b1\ncall_made e0b2\ncall_merge e0b3\ncall_missed e0b4\ncall_missed_outgoing e0e4\ncall_received e0b5\ncall_split e0b6\ncall_to_action e06c\ncamera e3af\ncamera_alt e3b0\ncamera_enhance e8fc\ncamera_front e3b1\ncamera_indoor efe9\ncamera_outdoor efea\ncamera_rear e3b2\ncamera_roll e3b3\ncameraswitch efeb\ncampaign ef49\ncancel e5c9\ncancel_presentation e0e9\ncancel_schedule_send ea39\ncandlestick_chart ead4\ncar_crash ebf2\ncar_rental ea55\ncar_repair ea56\ncard_giftcard e8f6\ncard_membership e8f7\ncard_travel e8f8\ncarpenter f1f8\ncases e992\ncasino eb40\ncast e307\ncast_connected e308\ncast_for_education efec\ncastle eab1\ncatching_pokemon e508\ncategory e574\ncelebration ea65\ncell_tower ebba\ncell_wifi e0ec\ncenter_focus_strong e3b4\ncenter_focus_weak e3b5\nchair efed\nchair_alt efee\nchalet e585\nchange_circle e2e7\nchange_history e86b\ncharging_station f19d\nchat e0b7\nchat_bubble e0ca\nchat_bubble_outline e0cb\ncheck e5ca\ncheck_box e834\ncheck_box_outline_blank e835\ncheck_circle e86c\ncheck_circle_outline e92d\nchecklist e6b1\nchecklist_rtl e6b3\ncheckroom f19e\nchevron_left e5cb\nchevron_right e5cc\nchild_care eb41\nchild_friendly eb42\nchrome_reader_mode e86d\nchurch eaae\ncircle ef4a\ncircle_notifications e994\nclass e86e\nclean_hands f21f\ncleaning_services f0ff\nclear e14c\nclear_all e0b8\nclose e5cd\nclose_fullscreen f1cf\nclosed_caption e01c\nclosed_caption_disabled f1dc\nclosed_caption_off e996\ncloud e2bd\ncloud_circle e2be\ncloud_done e2bf\ncloud_download e2c0\ncloud_off e2c1\ncloud_queue e2c2\ncloud_sync eb5a\ncloud_upload e2c3\ncloudy_snowing e810\nco2 e7b0\nco_present eaf0\ncode e86f\ncode_off e4f3\ncoffee efef\ncoffee_maker eff0\ncollections e3b6\ncollections_bookmark e431\ncolor_lens e3b7\ncolorize e3b8\ncomment e0b9\ncomment_bank ea4e\ncomments_disabled e7a2\ncommit eaf5\ncommute e940\ncompare e3b9\ncompare_arrows e915\ncompass_calibration e57c\ncompost e761\ncompress e94d\ncomputer e30a\nconfirmation_num e638\nconfirmation_number e638\nconnect_without_contact f223\nconnected_tv e998\nconnecting_airports e7c9\nconstruction ea3c\ncontact_mail e0d0\ncontact_page f22e\ncontact_phone e0cf\ncontact_support e94c\ncontactless ea71\ncontacts e0ba\ncontent_copy e14d\ncontent_cut e14e\ncontent_paste e14f\ncontent_paste_go ea8e\ncontent_paste_off e4f8\ncontent_paste_search ea9b\ncontrast eb37\ncontrol_camera e074\ncontrol_point e3ba\ncontrol_point_duplicate e3bb\ncookie eaac\ncopy_all e2ec\ncopyright e90c\ncoronavirus f221\ncorporate_fare f1d0\ncottage e587\ncountertops f1f7\ncreate e150\ncreate_new_folder e2cc\ncredit_card e870\ncredit_card_off e4f4\ncredit_score eff1\ncrib e588\ncrisis_alert ebe9\ncrop e3be\ncrop_16_9 e3bc\ncrop_3_2 e3bd\ncrop_5_4 e3bf\ncrop_7_5 e3c0\ncrop_din e3c1\ncrop_free e3c2\ncrop_landscape e3c3\ncrop_original e3c4\ncrop_portrait e3c5\ncrop_rotate e437\ncrop_square e3c6\ncruelty_free e799\ncss eb93\ncurrency_bitcoin ebc5\ncurrency_exchange eb70\ncurrency_franc eafa\ncurrency_lira eaef\ncurrency_pound eaf1\ncurrency_ruble eaec\ncurrency_rupee eaf7\ncurrency_yen eafb\ncurrency_yuan eaf9\ncyclone ebd5\ndangerous e99a\ndark_mode e51c\ndashboard e871\ndashboard_customize e99b\ndata_array ead1\ndata_exploration e76f\ndata_object ead3\ndata_saver_off eff2\ndata_saver_on eff3\ndata_thresholding eb9f\ndata_usage e1af\ndate_range e916\ndeblur eb77\ndeck ea42\ndehaze e3c7\ndelete e872\ndelete_forever e92b\ndelete_outline e92e\ndelete_sweep e16c\ndelivery_dining ea72\ndensity_large eba9\ndensity_medium eb9e\ndensity_small eba8\ndeparture_board e576\ndescription e873\ndeselect ebb6\ndesign_services f10a\ndesktop_access_disabled e99d\ndesktop_mac e30b\ndesktop_windows e30c\ndetails e3c8\ndeveloper_board e30d\ndeveloper_board_off e4ff\ndeveloper_mode e1b0\ndevice_hub e335\ndevice_thermostat e1ff\ndevice_unknown e339\ndevices e1b1\ndevices_fold ebde\ndevices_other e337\ndialer_sip e0bb\ndialpad e0bc\ndiamond ead5\ndifference eb7d\ndining eff4\ndinner_dining ea57\ndirections e52e\ndirections_bike e52f\ndirections_boat e532\ndirections_boat_filled eff5\ndirections_bus e530\ndirections_bus_filled eff6\ndirections_car e531\ndirections_car_filled eff7\ndirections_ferry e532\ndirections_off f10f\ndirections_railway e534\ndirections_railway_filled eff8\ndirections_run e566\ndirections_subway e533\ndirections_subway_filled eff9\ndirections_train e534\ndirections_transit e535\ndirections_transit_filled effa\ndirections_walk e536\ndirty_lens ef4b\ndisabled_by_default f230\ndisabled_visible e76e\ndisc_full e610\ndiscord ea6c\ndiscount ebc9\ndisplay_settings eb97\ndnd_forwardslash e611\ndns e875\ndo_disturb f08c\ndo_disturb_alt f08d\ndo_disturb_off f08e\ndo_disturb_on f08f\ndo_not_disturb e612\ndo_not_disturb_alt e611\ndo_not_disturb_off e643\ndo_not_disturb_on e644\ndo_not_disturb_on_total_silence effb\ndo_not_step f19f\ndo_not_touch f1b0\ndock e30e\ndocument_scanner e5fa\ndomain e7ee\ndomain_add eb62\ndomain_disabled e0ef\ndomain_verification ef4c\ndone e876\ndone_all e877\ndone_outline e92f\ndonut_large e917\ndonut_small e918\ndoor_back effc\ndoor_front effd\ndoor_sliding effe\ndoorbell efff\ndouble_arrow ea50\ndownhill_skiing e509\ndownload f090\ndownload_done f091\ndownload_for_offline f000\ndownloading f001\ndrafts e151\ndrag_handle e25d\ndrag_indicator e945\ndraw e746\ndrive_eta e613\ndrive_file_move e675\ndrive_file_move_outline e9a1\ndrive_file_move_rtl e76d\ndrive_file_rename_outline e9a2\ndrive_folder_upload e9a3\ndry f1b3\ndry_cleaning ea58\nduo e9a5\ndvr e1b2\ndynamic_feed ea14\ndynamic_form f1bf\ne_mobiledata f002\nearbuds f003\nearbuds_battery f004\neast f1df\neco ea35\nedgesensor_high f005\nedgesensor_low f006\nedit e3c9\nedit_attributes e578\nedit_calendar e742\nedit_location e568\nedit_location_alt e1c5\nedit_note e745\nedit_notifications e525\nedit_off e950\nedit_road ef4d\negg eacc\negg_alt eac8\neject e8fb\nelderly f21a\nelderly_woman eb69\nelectric_bike eb1b\nelectric_car eb1c\nelectric_moped eb1d\nelectric_rickshaw eb1e\nelectric_scooter eb1f\nelectrical_services f102\nelevator f1a0\nemail e0be\nemergency e1eb\nemergency_recording ebf4\nemergency_share ebf6\nemoji_emotions ea22\nemoji_events ea23\nemoji_flags ea1a\nemoji_food_beverage ea1b\nemoji_nature ea1c\nemoji_objects ea24\nemoji_people ea1d\nemoji_symbols ea1e\nemoji_transportation ea1f\nengineering ea3d\nenhance_photo_translate e8fc\nenhanced_encryption e63f\nequalizer e01d\nerror e000\nerror_outline e001\nescalator f1a1\nescalator_warning f1ac\neuro ea15\neuro_symbol e926\nev_station e56d\nevent e878\nevent_available e614\nevent_busy e615\nevent_note e616\nevent_repeat eb7b\nevent_seat e903\nexit_to_app e879\nexpand e94f\nexpand_circle_down e7cd\nexpand_less e5ce\nexpand_more e5cf\nexplicit e01e\nexplore e87a\nexplore_off e9a8\nexposure e3ca\nexposure_minus_1 e3cb\nexposure_minus_2 e3cc\nexposure_neg_1 e3cb\nexposure_neg_2 e3cc\nexposure_plus_1 e3cd\nexposure_plus_2 e3ce\nexposure_zero e3cf\nextension e87b\nextension_off e4f5\nface e87c\nface_retouching_natural ef4e\nface_retouching_off f007\nfacebook f234\nfact_check f0c5\nfactory ebbc\nfamily_restroom f1a2\nfast_forward e01f\nfast_rewind e020\nfastfood e57a\nfavorite e87d\nfavorite_border e87e\nfavorite_outline e87e\nfax ead8\nfeatured_play_list e06d\nfeatured_video e06e\nfeed f009\nfeedback e87f\nfemale e590\nfence f1f6\nfestival ea68\nfiber_dvr e05d\nfiber_manual_record e061\nfiber_new e05e\nfiber_pin e06a\nfiber_smart_record e062\nfile_copy e173\nfile_download e2c4\nfile_download_done e9aa\nfile_download_off e4fe\nfile_open eaf3\nfile_present ea0e\nfile_upload e2c6\nfilter e3d3\nfilter_1 e3d0\nfilter_2 e3d1\nfilter_3 e3d2\nfilter_4 e3d4\nfilter_5 e3d5\nfilter_6 e3d6\nfilter_7 e3d7\nfilter_8 e3d8\nfilter_9 e3d9\nfilter_9_plus e3da\nfilter_alt ef4f\nfilter_alt_off eb32\nfilter_b_and_w e3db\nfilter_center_focus e3dc\nfilter_drama e3dd\nfilter_frames e3de\nfilter_hdr e3df\nfilter_list e152\nfilter_list_alt e94e\nfilter_list_off eb57\nfilter_none e3e0\nfilter_tilt_shift e3e2\nfilter_vintage e3e3\nfind_in_page e880\nfind_replace e881\nfingerprint e90d\nfire_extinguisher f1d8\nfire_hydrant f1a3\nfireplace ea43\nfirst_page e5dc\nfit_screen ea10\nfitbit e82b\nfitness_center eb43\nflag e153\nflag_circle eaf8\nflaky ef50\nflare e3e4\nflash_auto e3e5\nflash_off e3e6\nflash_on e3e7\nflashlight_off f00a\nflashlight_on f00b\nflatware f00c\nflight e539\nflight_class e7cb\nflight_land e904\nflight_takeoff e905\nflip e3e8\nflip_camera_android ea37\nflip_camera_ios ea38\nflip_to_back e882\nflip_to_front e883\nflood ebe6\nflourescent f00d\nflutter_dash e00b\nfmd_bad f00e\nfmd_good f00f\nfoggy e818\nfolder e2c7\nfolder_copy ebbd\nfolder_delete eb34\nfolder_off eb83\nfolder_open e2c8\nfolder_shared e2c9\nfolder_special e617\nfolder_zip eb2c\nfollow_the_signs f222\nfont_download e167\nfont_download_off e4f9\nfood_bank f1f2\nforest ea99\nfork_left eba0\nfork_right ebac\nformat_align_center e234\nformat_align_justify e235\nformat_align_left e236\nformat_align_right e237\nformat_bold e238\nformat_clear e239\nformat_color_fill e23a\nformat_color_reset e23b\nformat_color_text e23c\nformat_indent_decrease e23d\nformat_indent_increase e23e\nformat_italic e23f\nformat_line_spacing e240\nformat_list_bulleted e241\nformat_list_numbered e242\nformat_list_numbered_rtl e267\nformat_overline eb65\nformat_paint e243\nformat_quote e244\nformat_shapes e25e\nformat_size e245\nformat_strikethrough e246\nformat_textdirection_l_to_r e247\nformat_textdirection_r_to_l e248\nformat_underline e249\nformat_underlined e249\nfort eaad\nforum e0bf\nforward e154\nforward_10 e056\nforward_30 e057\nforward_5 e058\nforward_to_inbox f187\nfoundation f200\nfree_breakfast eb44\nfree_cancellation e748\nfront_hand e769\nfullscreen e5d0\nfullscreen_exit e5d1\nfunctions e24a\ng_mobiledata f010\ng_translate e927\ngamepad e30f\ngames e021\ngarage f011\ngavel e90e\ngenerating_tokens e749\ngesture e155\nget_app e884\ngif e908\ngif_box e7a3\ngirl eb68\ngite e58b\ngoat 10fffd\ngolf_course eb45\ngpp_bad f012\ngpp_good f013\ngpp_maybe f014\ngps_fixed e1b3\ngps_not_fixed e1b4\ngps_off e1b5\ngrade e885\ngradient e3e9\ngrading ea4f\ngrain e3ea\ngraphic_eq e1b8\ngrass f205\ngrid_3x3 f015\ngrid_4x4 f016\ngrid_goldenratio f017\ngrid_off e3eb\ngrid_on e3ec\ngrid_view e9b0\ngroup e7ef\ngroup_add e7f0\ngroup_off e747\ngroup_remove e7ad\ngroup_work e886\ngroups f233\nh_mobiledata f018\nh_plus_mobiledata f019\nhail e9b1\nhandshake ebcb\nhandyman f10b\nhardware ea59\nhd e052\nhdr_auto f01a\nhdr_auto_select f01b\nhdr_enhanced_select ef51\nhdr_off e3ed\nhdr_off_select f01c\nhdr_on e3ee\nhdr_on_select f01d\nhdr_plus f01e\nhdr_strong e3f1\nhdr_weak e3f2\nheadphones f01f\nheadphones_battery f020\nheadset e310\nheadset_mic e311\nheadset_off e33a\nhealing e3f3\nhealth_and_safety e1d5\nhearing e023\nhearing_disabled f104\nheart_broken eac2\nheight ea16\nhelp e887\nhelp_center f1c0\nhelp_outline e8fd\nhevc f021\nhexagon eb39\nhide_image f022\nhide_source f023\nhigh_quality e024\nhighlight e25f\nhighlight_alt ef52\nhighlight_off e888\nhighlight_remove e888\nhiking e50a\nhistory e889\nhistory_edu ea3e\nhistory_toggle_off f17d\nhive eaa6\nhls eb8a\nhls_off eb8c\nholiday_village e58a\nhome e88a\nhome_filled e9b2\nhome_max f024\nhome_mini f025\nhome_repair_service f100\nhome_work ea09\nhorizontal_distribute e014\nhorizontal_rule f108\nhorizontal_split e947\nhot_tub eb46\nhotel e53a\nhotel_class e743\nhourglass_bottom ea5c\nhourglass_disabled ef53\nhourglass_empty e88b\nhourglass_full e88c\nhourglass_top ea5b\nhouse ea44\nhouse_siding f202\nhouseboat e584\nhow_to_reg e174\nhow_to_vote e175\nhtml eb7e\nhttp e902\nhttps e88d\nhub e9f4\nhvac f10e\nice_skating e50b\nicecream ea69\nimage e3f4\nimage_aspect_ratio e3f5\nimage_not_supported f116\nimage_search e43f\nimagesearch_roller e9b4\nimport_contacts e0e0\nimport_export e0c3\nimportant_devices e912\ninbox e156\nincomplete_circle e79b\nindeterminate_check_box e909\ninfo e88e\ninfo_outline e88f\ninput e890\ninsert_chart e24b\ninsert_chart_outlined e26a\ninsert_comment e24c\ninsert_drive_file e24d\ninsert_emoticon e24e\ninsert_invitation e24f\ninsert_link e250\ninsert_page_break eaca\ninsert_photo e251\ninsights f092\ninstall_desktop eb71\ninstall_mobile eb72\nintegration_instructions ef54\ninterests e7c8\ninterpreter_mode e83b\ninventory e179\ninventory_2 e1a1\ninvert_colors e891\ninvert_colors_off e0c4\ninvert_colors_on e891\nios_share e6b8\niron e583\niso e3f6\njavascript eb7c\njoin_full eaeb\njoin_inner eaf4\njoin_left eaf2\njoin_right eaea\nkayaking e50c\nkebab_dining e842\nkey e73c\nkey_off eb84\nkeyboard e312\nkeyboard_alt f028\nkeyboard_arrow_down e313\nkeyboard_arrow_left e314\nkeyboard_arrow_right e315\nkeyboard_arrow_up e316\nkeyboard_backspace e317\nkeyboard_capslock e318\nkeyboard_command eae0\nkeyboard_command_key eae7\nkeyboard_control e5d3\nkeyboard_control_key eae6\nkeyboard_double_arrow_down ead0\nkeyboard_double_arrow_left eac3\nkeyboard_double_arrow_right eac9\nkeyboard_double_arrow_up eacf\nkeyboard_hide e31a\nkeyboard_option eadf\nkeyboard_option_key eae8\nkeyboard_return e31b\nkeyboard_tab e31c\nkeyboard_voice e31d\nking_bed ea45\nkitchen eb47\nkitesurfing e50d\nlabel e892\nlabel_important e937\nlabel_important_outline e948\nlabel_off e9b6\nlabel_outline e893\nlan eb2f\nlandscape e3f7\nlandslide ebd7\nlanguage e894\nlaptop e31e\nlaptop_chromebook e31f\nlaptop_mac e320\nlaptop_windows e321\nlast_page e5dd\nlaunch e895\nlayers e53b\nlayers_clear e53c\nleaderboard f20c\nleak_add e3f8\nleak_remove e3f9\nleave_bags_at_home f21b\nlegend_toggle f11b\nlens e3fa\nlens_blur f029\nlibrary_add e02e\nlibrary_add_check e9b7\nlibrary_books e02f\nlibrary_music e030\nlight f02a\nlight_mode e518\nlightbulb e0f0\nlightbulb_outline e90f\nline_axis ea9a\nline_style e919\nline_weight e91a\nlinear_scale e260\nlink e157\nlink_off e16f\nlinked_camera e438\nliquor ea60\nlist e896\nlist_alt e0ee\nlive_help e0c6\nlive_tv e639\nliving f02b\nlocal_activity e53f\nlocal_airport e53d\nlocal_atm e53e\nlocal_attraction e53f\nlocal_bar e540\nlocal_cafe e541\nlocal_car_wash e542\nlocal_convenience_store e543\nlocal_dining e556\nlocal_drink e544\nlocal_fire_department ef55\nlocal_florist e545\nlocal_gas_station e546\nlocal_grocery_store e547\nlocal_hospital e548\nlocal_hotel e549\nlocal_laundry_service e54a\nlocal_library e54b\nlocal_mall e54c\nlocal_movies e54d\nlocal_offer e54e\nlocal_parking e54f\nlocal_pharmacy e550\nlocal_phone e551\nlocal_pizza e552\nlocal_play e553\nlocal_police ef56\nlocal_post_office e554\nlocal_print_shop e555\nlocal_printshop e555\nlocal_restaurant e556\nlocal_see e557\nlocal_shipping e558\nlocal_taxi e559\nlocation_city e7f1\nlocation_disabled e1b6\nlocation_history e55a\nlocation_off e0c7\nlocation_on e0c8\nlocation_pin f1db\nlocation_searching e1b7\nlock e897\nlock_clock ef57\nlock_open e898\nlock_outline e899\nlock_reset eade\nlogin ea77\nlogo_dev ead6\nlogout e9ba\nlooks e3fc\nlooks_3 e3fb\nlooks_4 e3fd\nlooks_5 e3fe\nlooks_6 e3ff\nlooks_one e400\nlooks_two e401\nloop e028\nloupe e402\nlow_priority e16d\nloyalty e89a\nlte_mobiledata f02c\nlte_plus_mobiledata f02d\nluggage f235\nlunch_dining ea61\nmail e158\nmail_outline e0e1\nmale e58e\nman e4eb\nmanage_accounts f02e\nmanage_history ebe7\nmanage_search f02f\nmap e55b\nmaps_home_work f030\nmaps_ugc ef58\nmargin e9bb\nmark_as_unread e9bc\nmark_chat_read f18b\nmark_chat_unread f189\nmark_email_read f18c\nmark_email_unread f18a\nmark_unread_chat_alt eb9d\nmarkunread e159\nmarkunread_mailbox e89b\nmasks f218\nmaximize e930\nmedia_bluetooth_off f031\nmedia_bluetooth_on f032\nmediation efa7\nmedical_information ebed\nmedical_services f109\nmedication f033\nmedication_liquid ea87\nmeeting_room eb4f\nmemory e322\nmenu e5d2\nmenu_book ea19\nmenu_open e9bd\nmerge eb98\nmerge_type e252\nmessage e0c9\nmessenger e0ca\nmessenger_outline e0cb\nmic e029\nmic_external_off ef59\nmic_external_on ef5a\nmic_none e02a\nmic_off e02b\nmicrowave f204\nmilitary_tech ea3f\nminimize e931\nminor_crash ebf1\nmiscellaneous_services f10c\nmissed_video_call e073\nmms e618\nmobile_friendly e200\nmobile_off e201\nmobile_screen_share e0e7\nmobiledata_off f034\nmode f097\nmode_comment e253\nmode_edit e254\nmode_edit_outline f035\nmode_night f036\nmode_of_travel e7ce\nmode_standby f037\nmodel_training f0cf\nmonetization_on e263\nmoney e57d\nmoney_off e25c\nmoney_off_csred f038\nmonitor ef5b\nmonitor_heart eaa2\nmonitor_weight f039\nmonochrome_photos e403\nmood e7f2\nmood_bad e7f3\nmoped eb28\nmore e619\nmore_horiz e5d3\nmore_time ea5d\nmore_vert e5d4\nmosque eab2\nmotion_photos_auto f03a\nmotion_photos_off e9c0\nmotion_photos_on e9c1\nmotion_photos_pause f227\nmotion_photos_paused e9c2\nmotorcycle e91b\nmouse e323\nmove_down eb61\nmove_to_inbox e168\nmove_up eb64\nmovie e02c\nmovie_creation e404\nmovie_filter e43a\nmoving e501\nmp e9c3\nmultiline_chart e6df\nmultiple_stop f1b9\nmultitrack_audio e1b8\nmuseum ea36\nmusic_note e405\nmusic_off e440\nmusic_video e063\nmy_library_add e02e\nmy_library_books e02f\nmy_library_music e030\nmy_location e55c\nnat ef5c\nnature e406\nnature_people e407\nnavigate_before e408\nnavigate_next e409\nnavigation e55d\nnear_me e569\nnear_me_disabled f1ef\nnearby_error f03b\nnearby_off f03c\nnetwork_cell e1b9\nnetwork_check e640\nnetwork_locked e61a\nnetwork_ping ebca\nnetwork_wifi e1ba\nnetwork_wifi_1_bar ebe4\nnetwork_wifi_2_bar ebd6\nnetwork_wifi_3_bar ebe1\nnew_label e609\nnew_releases e031\nnewspaper eb81\nnext_plan ef5d\nnext_week e16a\nnfc e1bb\nnight_shelter f1f1\nnightlife ea62\nnightlight f03d\nnightlight_round ef5e\nnights_stay ea46\nno_accounts f03e\nno_backpack f237\nno_cell f1a4\nno_crash ebf0\nno_drinks f1a5\nno_encryption e641\nno_encryption_gmailerrorred f03f\nno_flash f1a6\nno_food f1a7\nno_luggage f23b\nno_meals f1d6\nno_meals_ouline f229\nno_meeting_room eb4e\nno_photography f1a8\nno_sim e0cc\nno_stroller f1af\nno_transfer f1d5\nnoise_aware ebec\nnoise_control_off ebf3\nnordic_walking e50e\nnorth f1e0\nnorth_east f1e1\nnorth_west f1e2\nnot_accessible f0fe\nnot_interested e033\nnot_listed_location e575\nnot_started f0d1\nnote e06f\nnote_add e89c\nnote_alt f040\nnotes e26c\nnotification_add e399\nnotification_important e004\nnotifications e7f4\nnotifications_active e7f7\nnotifications_none e7f5\nnotifications_off e7f6\nnotifications_on e7f7\nnotifications_paused e7f8\nnow_wallpaper e1bc\nnow_widgets e1bd\nnumbers eac7\noffline_bolt e932\noffline_pin e90a\noffline_share e9c5\nondemand_video e63a\nonline_prediction f0eb\nopacity e91c\nopen_in_browser e89d\nopen_in_full f1ce\nopen_in_new e89e\nopen_in_new_off e4f6\nopen_with e89f\nother_houses e58c\noutbond f228\noutbound e1ca\noutbox ef5f\noutdoor_grill ea47\noutgoing_mail f0d2\noutlet f1d4\noutlined_flag e16e\noutput ebbe\npadding e9c8\npages e7f9\npageview e8a0\npaid f041\npalette e40a\npan_tool e925\npan_tool_alt ebb9\npanorama e40b\npanorama_fish_eye e40c\npanorama_fisheye e40c\npanorama_horizontal e40d\npanorama_horizontal_select ef60\npanorama_photosphere e9c9\npanorama_photosphere_select e9ca\npanorama_vertical e40e\npanorama_vertical_select ef61\npanorama_wide_angle e40f\npanorama_wide_angle_select ef62\nparagliding e50f\npark ea63\nparty_mode e7fa\npassword f042\npattern f043\npause e034\npause_circle e1a2\npause_circle_filled e035\npause_circle_outline e036\npause_presentation e0ea\npayment e8a1\npayments ef63\npaypal ea8d\npedal_bike eb29\npending ef64\npending_actions f1bb\npentagon eb50\npeople e7fb\npeople_alt ea21\npeople_outline e7fc\npercent eb58\nperm_camera_mic e8a2\nperm_contact_cal e8a3\nperm_contact_calendar e8a3\nperm_data_setting e8a4\nperm_device_info e8a5\nperm_device_information e8a5\nperm_identity e8a6\nperm_media e8a7\nperm_phone_msg e8a8\nperm_scan_wifi e8a9\nperson e7fd\nperson_add e7fe\nperson_add_alt ea4d\nperson_add_alt_1 ef65\nperson_add_disabled e9cb\nperson_off e510\nperson_outline e7ff\nperson_pin e55a\nperson_pin_circle e56a\nperson_remove ef66\nperson_remove_alt_1 ef67\nperson_search f106\npersonal_injury e6da\npersonal_video e63b\npest_control f0fa\npest_control_rodent f0fd\npets e91d\nphishing ead7\nphone e0cd\nphone_android e324\nphone_bluetooth_speaker e61b\nphone_callback e649\nphone_disabled e9cc\nphone_enabled e9cd\nphone_forwarded e61c\nphone_in_talk e61d\nphone_iphone e325\nphone_locked e61e\nphone_missed e61f\nphone_paused e620\nphonelink e326\nphonelink_erase e0db\nphonelink_lock e0dc\nphonelink_off e327\nphonelink_ring e0dd\nphonelink_setup e0de\nphoto e410\nphoto_album e411\nphoto_camera e412\nphoto_camera_back ef68\nphoto_camera_front ef69\nphoto_filter e43b\nphoto_library e413\nphoto_size_select_actual e432\nphoto_size_select_large e433\nphoto_size_select_small e434\nphp eb8f\npiano e521\npiano_off e520\npicture_as_pdf e415\npicture_in_picture e8aa\npicture_in_picture_alt e911\npie_chart e6c4\npie_chart_outline f044\npie_chart_outlined e6c5\npin f045\npin_drop e55e\npin_end e767\npin_invoke e763\npinch eb38\npivot_table_chart e9ce\npix eaa3\nplace e55f\nplagiarism ea5a\nplay_arrow e037\nplay_circle e1c4\nplay_circle_fill e038\nplay_circle_filled e038\nplay_circle_outline e039\nplay_disabled ef6a\nplay_for_work e906\nplay_lesson f047\nplaylist_add e03b\nplaylist_add_check e065\nplaylist_add_check_circle e7e6\nplaylist_add_circle e7e5\nplaylist_play e05f\nplaylist_remove eb80\nplumbing f107\nplus_one e800\npodcasts f048\npoint_of_sale f17e\npolicy ea17\npoll e801\npolyline ebbb\npolymer e8ab\npool eb48\nportable_wifi_off e0ce\nportrait e416\npost_add ea20\npower e63c\npower_input e336\npower_off e646\npower_settings_new e8ac\nprecision_manufacturing f049\npregnant_woman e91e\npresent_to_all e0df\npreview f1c5\nprice_change f04a\nprice_check f04b\nprint e8ad\nprint_disabled e9cf\npriority_high e645\nprivacy_tip f0dc\nprivate_connectivity e744\nproduction_quantity_limits e1d1\npsychology ea4a\npublic e80b\npublic_off f1ca\npublish e255\npublished_with_changes f232\npunch_clock eaa8\npush_pin f10d\nqr_code ef6b\nqr_code_2 e00a\nqr_code_scanner f206\nquery_builder e8ae\nquery_stats e4fc\nquestion_answer e8af\nquestion_mark eb8b\nqueue e03c\nqueue_music e03d\nqueue_play_next e066\nquick_contacts_dialer e0cf\nquick_contacts_mail e0d0\nquickreply ef6c\nquiz f04c\nquora ea98\nr_mobiledata f04d\nradar f04e\nradio e03e\nradio_button_checked e837\nradio_button_off e836\nradio_button_on e837\nradio_button_unchecked e836\nrailway_alert e9d1\nramen_dining ea64\nramp_left eb9c\nramp_right eb96\nrate_review e560\nraw_off f04f\nraw_on f050\nread_more ef6d\nreal_estate_agent e73a\nreceipt e8b0\nreceipt_long ef6e\nrecent_actors e03f\nrecommend e9d2\nrecord_voice_over e91f\nrectangle eb54\nrecycling e760\nreddit eaa0\nredeem e8b1\nredo e15a\nreduce_capacity f21c\nrefresh e5d5\nremember_me f051\nremove e15b\nremove_circle e15c\nremove_circle_outline e15d\nremove_done e9d3\nremove_from_queue e067\nremove_moderator e9d4\nremove_red_eye e417\nremove_shopping_cart e928\nreorder e8fe\nrepeat e040\nrepeat_on e9d6\nrepeat_one e041\nrepeat_one_on e9d7\nreplay e042\nreplay_10 e059\nreplay_30 e05a\nreplay_5 e05b\nreplay_circle_filled e9d8\nreply e15e\nreply_all e15f\nreport e160\nreport_gmailerrorred f052\nreport_off e170\nreport_problem e8b2\nrequest_page f22c\nrequest_quote f1b6\nreset_tv e9d9\nrestart_alt f053\nrestaurant e56c\nrestaurant_menu e561\nrestore e8b3\nrestore_from_trash e938\nrestore_page e929\nreviews f054\nrice_bowl f1f5\nring_volume e0d1\nrocket eba5\nrocket_launch eb9b\nroller_skating ebcd\nroofing f201\nroom e8b4\nroom_preferences f1b8\nroom_service eb49\nrotate_90_degrees_ccw e418\nrotate_90_degrees_cw eaab\nrotate_left e419\nrotate_right e41a\nroundabout_left eb99\nroundabout_right eba3\nrounded_corner e920\nroute eacd\nrouter e328\nrowing e921\nrss_feed e0e5\nrsvp f055\nrtt e9ad\nrule f1c2\nrule_folder f1c9\nrun_circle ef6f\nrunning_with_errors e51d\nrv_hookup e642\nsafety_check ebef\nsafety_divider e1cc\nsailing e502\nsanitizer f21d\nsatellite e562\nsatellite_alt eb3a\nsave e161\nsave_alt e171\nsave_as eb60\nsaved_search ea11\nsavings e2eb\nscale eb5f\nscanner e329\nscatter_plot e268\nschedule e8b5\nschedule_send ea0a\nschema e4fd\nschool e80c\nscience ea4b\nscore e269\nscoreboard ebd0\nscreen_lock_landscape e1be\nscreen_lock_portrait e1bf\nscreen_lock_rotation e1c0\nscreen_rotation e1c1\nscreen_rotation_alt ebee\nscreen_search_desktop ef70\nscreen_share e0e2\nscreenshot f056\nscuba_diving ebce\nsd e9dd\nsd_card e623\nsd_card_alert f057\nsd_storage e1c2\nsearch e8b6\nsearch_off ea76\nsecurity e32a\nsecurity_update f058\nsecurity_update_good f059\nsecurity_update_warning f05a\nsegment e94b\nselect_all e162\nself_improvement ea78\nsell f05b\nsend e163\nsend_and_archive ea0c\nsend_time_extension eadb\nsend_to_mobile f05c\nsensor_door f1b5\nsensor_window f1b4\nsensors e51e\nsensors_off e51f\nsentiment_dissatisfied e811\nsentiment_neutral e812\nsentiment_satisfied e813\nsentiment_satisfied_alt e0ed\nsentiment_very_dissatisfied e814\nsentiment_very_satisfied e815\nset_meal f1ea\nsettings e8b8\nsettings_accessibility f05d\nsettings_applications e8b9\nsettings_backup_restore e8ba\nsettings_bluetooth e8bb\nsettings_brightness e8bd\nsettings_cell e8bc\nsettings_display e8bd\nsettings_ethernet e8be\nsettings_input_antenna e8bf\nsettings_input_component e8c0\nsettings_input_composite e8c1\nsettings_input_hdmi e8c2\nsettings_input_svideo e8c3\nsettings_overscan e8c4\nsettings_phone e8c5\nsettings_power e8c6\nsettings_remote e8c7\nsettings_suggest f05e\nsettings_system_daydream e1c3\nsettings_voice e8c8\nsevere_cold ebd3\nshare e80d\nshare_arrival_time e524\nshare_location f05f\nshield e9e0\nshield_moon eaa9\nshop e8c9\nshop_2 e19e\nshop_two e8ca\nshopify ea9d\nshopping_bag f1cc\nshopping_basket e8cb\nshopping_cart e8cc\nshopping_cart_checkout eb88\nshort_text e261\nshortcut f060\nshow_chart e6e1\nshower f061\nshuffle e043\nshuffle_on e9e1\nshutter_speed e43d\nsick f220\nsign_language ebe5\nsignal_cellular_0_bar f0a8\nsignal_cellular_4_bar e1c8\nsignal_cellular_alt e202\nsignal_cellular_alt_1_bar ebdf\nsignal_cellular_alt_2_bar ebe3\nsignal_cellular_connected_no_internet_0_bar f0ac\nsignal_cellular_connected_no_internet_4_bar e1cd\nsignal_cellular_no_sim e1ce\nsignal_cellular_nodata f062\nsignal_cellular_null e1cf\nsignal_cellular_off e1d0\nsignal_wifi_0_bar f0b0\nsignal_wifi_4_bar e1d8\nsignal_wifi_4_bar_lock e1d9\nsignal_wifi_bad f063\nsignal_wifi_connected_no_internet_4 f064\nsignal_wifi_off e1da\nsignal_wifi_statusbar_4_bar f065\nsignal_wifi_statusbar_connected_no_internet_4 f066\nsignal_wifi_statusbar_null f067\nsignpost eb91\nsim_card e32b\nsim_card_alert e624\nsim_card_download f068\nsingle_bed ea48\nsip f069\nskateboarding e511\nskip_next e044\nskip_previous e045\nsledding e512\nslideshow e41b\nslow_motion_video e068\nsmart_button f1c1\nsmart_display f06a\nsmart_screen f06b\nsmart_toy f06c\nsmartphone e32c\nsmoke_free eb4a\nsmoking_rooms eb4b\nsms e625\nsms_failed e626\nsnapchat ea6e\nsnippet_folder f1c7\nsnooze e046\nsnowboarding e513\nsnowing e80f\nsnowmobile e503\nsnowshoeing e514\nsoap f1b2\nsocial_distance e1cb\nsort e164\nsort_by_alpha e053\nsos ebf7\nsoup_kitchen e7d3\nsource f1c4\nsouth f1e3\nsouth_america e7e4\nsouth_east f1e4\nsouth_west f1e5\nspa eb4c\nspace_bar e256\nspace_dashboard e66b\nspatial_audio ebeb\nspatial_audio_off ebe8\nspatial_tracking ebea\nspeaker e32d\nspeaker_group e32e\nspeaker_notes e8cd\nspeaker_notes_off e92a\nspeaker_phone e0d2\nspeed e9e4\nspellcheck e8ce\nsplitscreen f06d\nspoke e9a7\nsports ea30\nsports_bar f1f3\nsports_baseball ea51\nsports_basketball ea26\nsports_cricket ea27\nsports_esports ea28\nsports_football ea29\nsports_golf ea2a\nsports_gymnastics ebc4\nsports_handball ea33\nsports_hockey ea2b\nsports_kabaddi ea34\nsports_martial_arts eae9\nsports_mma ea2c\nsports_motorsports ea2d\nsports_rugby ea2e\nsports_score f06e\nsports_soccer ea2f\nsports_tennis ea32\nsports_volleyball ea31\nsquare eb36\nsquare_foot ea49\nssid_chart eb66\nstacked_bar_chart e9e6\nstacked_line_chart f22b\nstadium eb90\nstairs f1a9\nstar e838\nstar_border e83a\nstar_border_purple500 f099\nstar_half e839\nstar_outline f06f\nstar_purple500 f09a\nstar_rate f0ec\nstars e8d0\nstart e089\nstay_current_landscape e0d3\nstay_current_portrait e0d4\nstay_primary_landscape e0d5\nstay_primary_portrait e0d6\nsticky_note_2 f1fc\nstop e047\nstop_circle ef71\nstop_screen_share e0e3\nstorage e1db\nstore e8d1\nstore_mall_directory e563\nstorefront ea12\nstorm f070\nstraight eb95\nstraighten e41c\nstream e9e9\nstreetview e56e\nstrikethrough_s e257\nstroller f1ae\nstyle e41d\nsubdirectory_arrow_left e5d9\nsubdirectory_arrow_right e5da\nsubject e8d2\nsubscript f111\nsubscriptions e064\nsubtitles e048\nsubtitles_off ef72\nsubway e56f\nsummarize f071\nsunny e81a\nsunny_snowing e819\nsuperscript f112\nsupervised_user_circle e939\nsupervisor_account e8d3\nsupport ef73\nsupport_agent f0e2\nsurfing e515\nsurround_sound e049\nswap_calls e0d7\nswap_horiz e8d4\nswap_horizontal_circle e933\nswap_vert e8d5\nswap_vert_circle e8d6\nswap_vertical_circle e8d6\nswipe e9ec\nswipe_down eb53\nswipe_down_alt eb30\nswipe_left eb59\nswipe_left_alt eb33\nswipe_right eb52\nswipe_right_alt eb56\nswipe_up eb2e\nswipe_up_alt eb35\nswipe_vertical eb51\nswitch_access_shortcut e7e1\nswitch_access_shortcut_add e7e2\nswitch_account e9ed\nswitch_camera e41e\nswitch_left f1d1\nswitch_right f1d2\nswitch_video e41f\nsynagogue eab0\nsync e627\nsync_alt ea18\nsync_disabled e628\nsync_lock eaee\nsync_problem e629\nsystem_security_update f072\nsystem_security_update_good f073\nsystem_security_update_warning f074\nsystem_update e62a\nsystem_update_alt e8d7\nsystem_update_tv e8d7\ntab e8d8\ntab_unselected e8d9\ntable_bar ead2\ntable_chart e265\ntable_restaurant eac6\ntable_rows f101\ntable_view f1be\ntablet e32f\ntablet_android e330\ntablet_mac e331\ntag e9ef\ntag_faces e420\ntakeout_dining ea74\ntap_and_play e62b\ntapas f1e9\ntask f075\ntask_alt e2e6\ntaxi_alert ef74\ntelegram ea6b\ntemple_buddhist eab3\ntemple_hindu eaaf\nterminal eb8e\nterrain e564\ntext_decrease eadd\ntext_fields e262\ntext_format e165\ntext_increase eae2\ntext_rotate_up e93a\ntext_rotate_vertical e93b\ntext_rotation_angledown e93c\ntext_rotation_angleup e93d\ntext_rotation_down e93e\ntext_rotation_none e93f\ntext_snippet f1c6\ntextsms e0d8\ntexture e421\ntheater_comedy ea66\ntheaters e8da\nthermostat f076\nthermostat_auto f077\nthumb_down e8db\nthumb_down_alt e816\nthumb_down_off_alt e9f2\nthumb_up e8dc\nthumb_up_alt e817\nthumb_up_off_alt e9f3\nthumbs_up_down e8dd\nthunderstorm ebdb\ntiktok ea7e\ntime_to_leave e62c\ntimelapse e422\ntimeline e922\ntimer e425\ntimer_10 e423\ntimer_10_select f07a\ntimer_3 e424\ntimer_3_select f07b\ntimer_off e426\ntips_and_updates e79a\ntire_repair ebc8\ntitle e264\ntoc e8de\ntoday e8df\ntoggle_off e9f5\ntoggle_on e9f6\ntoken ea25\ntoll e8e0\ntonality e427\ntopic f1c8\ntouch_app e913\ntour ef75\ntoys e332\ntrack_changes e8e1\ntraffic e565\ntrain e570\ntram e571\ntransfer_within_a_station e572\ntransform e428\ntransgender e58d\ntransit_enterexit e579\ntranslate e8e2\ntravel_explore e2db\ntrending_down e8e3\ntrending_flat e8e4\ntrending_neutral e8e4\ntrending_up e8e5\ntrip_origin e57b\ntry f07c\ntsunami ebd8\ntty f1aa\ntune e429\ntungsten f07d\nturn_left eba6\nturn_right ebab\nturn_sharp_left eba7\nturn_sharp_right ebaa\nturn_slight_left eba4\nturn_slight_right eb9a\nturned_in e8e6\nturned_in_not e8e7\ntv e333\ntv_off e647\ntwo_wheeler e9f9\nu_turn_left eba1\nu_turn_right eba2\numbrella f1ad\nunarchive e169\nundo e166\nunfold_less e5d6\nunfold_more e5d7\nunpublished f236\nunsubscribe e0eb\nupcoming f07e\nupdate e923\nupdate_disabled e075\nupgrade f0fb\nupload f09b\nupload_file e9fc\nusb e1e0\nusb_off e4fa\nvaccines e138\nvape_free ebc6\nvaping_rooms ebcf\nverified ef76\nverified_user e8e8\nvertical_align_bottom e258\nvertical_align_center e259\nvertical_align_top e25a\nvertical_distribute e076\nvertical_split e949\nvibration e62d\nvideo_call e070\nvideo_camera_back f07f\nvideo_camera_front f080\nvideo_collection e04a\nvideo_file eb87\nvideo_label e071\nvideo_library e04a\nvideo_settings ea75\nvideo_stable f081\nvideocam e04b\nvideocam_off e04c\nvideogame_asset e338\nvideogame_asset_off e500\nview_agenda e8e9\nview_array e8ea\nview_carousel e8eb\nview_column e8ec\nview_comfortable e42a\nview_comfy e42a\nview_comfy_alt eb73\nview_compact e42b\nview_compact_alt eb74\nview_cozy eb75\nview_day e8ed\nview_headline e8ee\nview_in_ar e9fe\nview_kanban eb7f\nview_list e8ef\nview_module e8f0\nview_quilt e8f1\nview_sidebar f114\nview_stream e8f2\nview_timeline eb85\nview_week e8f3\nvignette e435\nvilla e586\nvisibility e8f4\nvisibility_off e8f5\nvoice_chat e62e\nvoice_over_off e94a\nvoicemail e0d9\nvolcano ebda\nvolume_down e04d\nvolume_down_alt e79c\nvolume_mute e04e\nvolume_off e04f\nvolume_up e050\nvolunteer_activism ea70\nvpn_key e0da\nvpn_key_off eb7a\nvpn_lock e62f\nvrpano f082\nwallet_giftcard e8f6\nwallet_membership e8f7\nwallet_travel e8f8\nwallpaper e1bc\nwarehouse ebb8\nwarning e002\nwarning_amber f083\nwash f1b1\nwatch e334\nwatch_later e924\nwatch_off eae3\nwater f084\nwater_damage f203\nwater_drop e798\nwaterfall_chart ea00\nwaves e176\nwaving_hand e766\nwb_auto e42c\nwb_cloudy e42d\nwb_incandescent e42e\nwb_iridescent e436\nwb_shade ea01\nwb_sunny e430\nwb_twighlight ea02\nwb_twilight e1c6\nwc e63d\nweb e051\nweb_asset e069\nweb_asset_off e4f7\nweb_stories e595\nwebhook eb92\nwechat ea81\nweekend e16b\nwest f1e6\nwhatsapp ea9c\nwhatshot e80e\nwheelchair_pickup f1ab\nwhere_to_vote e177\nwidgets e1bd\nwifi e63e\nwifi_1_bar e4ca\nwifi_2_bar e4d9\nwifi_calling ef77\nwifi_calling_3 f085\nwifi_channel eb6a\nwifi_find eb31\nwifi_lock e1e1\nwifi_off e648\nwifi_password eb6b\nwifi_protected_setup f0fc\nwifi_tethering e1e2\nwifi_tethering_error ead9\nwifi_tethering_error_rounded f086\nwifi_tethering_off f087\nwindow f088\nwine_bar f1e8\nwoman e13e\nwoo_commerce ea6d\nwordpress ea9f\nwork e8f9\nwork_off e942\nwork_outline e943\nworkspace_premium e7af\nworkspaces e1a0\nworkspaces_filled ea0d\nworkspaces_outline ea0f\nwrap_text e25b\nwrong_location ef78\nwysiwyg f1c3\nyard f089\nyoutube_searched_for e8fa\nzoom_in e8ff\nzoom_in_map eb2d\nzoom_out e900\nzoom_out_map e56b\n";
      var r = t(25917),
        h = t(88229),
        p = t(35226),
        _ = t(51307),
        E = t(29790);
      const c = new RegExp(`{${C.hB}:[^{}]+}`, "g"),
        v = {
          Sin: "return Math.round(1000*Math.sin(time/5000));",
          Cos: "return Math.round(1000*Math.cos(time/5000));",
          Random:
            "var value = prevValue + Math.random() * 100 - 50;\nvar multiplier = Math.pow(10, 2 || 0);\nvar value = Math.round(value * multiplier) / multiplier;\nif (value < -1000) {\n\tvalue = -1000;\n} else if (value > 1000) {\n\tvalue = 1000;\n}\nreturn value;",
        },
        I = [];
      for (const w of Object.keys(v)) I.push(w);
      const l = [
          i.rI.createdTime.keyName,
          i.rI.originator.keyName,
          i.rI.type.keyName,
          i.rI.severity.keyName,
          i.rI.status.keyName,
        ],
        T = [
          "more_horiz",
          "more_vert",
          "open_in_new",
          "visibility",
          "play_arrow",
          "arrow_back",
          "arrow_downward",
          "arrow_forward",
          "arrow_upwards",
          "close",
          "refresh",
          "menu",
          "show_chart",
          "multiline_chart",
          "pie_chart",
          "insert_chart",
          "people",
          "person",
          "domain",
          "devices_other",
          "now_widgets",
          "dashboards",
          "map",
          "pin_drop",
          "my_location",
          "extension",
          "search",
          "settings",
          "notifications",
          "notifications_active",
          "info",
          "info_outline",
          "warning",
          "list",
          "file_download",
          "import_export",
          "share",
          "add",
          "edit",
          "done",
        ];
      class O {
        constructor(b, S, u) {
          (this.window = b),
            (this.zone = S),
            (this.translate = u),
            (this.iframeMode = !1),
            (this.widgetEditMode = !1),
            (this.editWidgetInfo = null),
            (this.defaultDataKey = {
              name: "f(x)",
              type: o.dG.function,
              label: "Sin",
              color: this.getMaterialColor(0),
              funcBody: this.getPredefinedFunctionBody("Sin"),
              settings: {},
              _hash: Math.random(),
            }),
            (this.defaultDatasource = {
              type: s.i9.function,
              name: s.i9.function,
              dataKeys: [(0, a.I8)(this.defaultDataKey)],
            }),
            (this.defaultAlarmDataKeys = []),
            (this.materialIcons = []);
          let f = null;
          try {
            f = b.frameElement;
          } catch (M) {}
          if (f) {
            this.iframeMode = !0;
            const M = f.getAttribute("data-widget");
            M &&
              M.length &&
              ((this.editWidgetInfo = JSON.parse(M)),
              (this.widgetEditMode = !0));
          }
        }
        getPredefinedFunctionsList() {
          return I;
        }
        getPredefinedFunctionBody(b) {
          return v[b];
        }
        getDefaultDatasource(b) {
          const S = (0, a.I8)(this.defaultDatasource);
          return (
            (0, a.$K)(b) &&
              (S.dataKeys[0].settings = this.generateObjectFromJsonSchema(b)),
            S
          );
        }
        initDefaultAlarmDataKeys() {
          for (let b = 0; b < l.length; b++) {
            const S = l[b],
              u = {
                name: S,
                type: o.dG.alarm,
                label: this.translate.instant(i.rI[S].name),
                color: this.getMaterialColor(b),
                settings: {},
                _hash: Math.random(),
              };
            this.defaultAlarmDataKeys.push(u);
          }
        }
        getDefaultAlarmDataKeys() {
          return (
            this.defaultAlarmDataKeys.length || this.initDefaultAlarmDataKeys(),
            (0, a.I8)(this.defaultAlarmDataKeys)
          );
        }
        generateObjectFromJsonSchema(b) {
          const S = y()(b);
          return (0, a.eb)(S), S;
        }
        processWidgetException(b) {
          const S = this.parseException(b, -6);
          if (this.widgetEditMode) {
            const u = { type: "widgetException", data: S };
            this.window.parent.postMessage(JSON.stringify(u), "*");
          }
          return S;
        }
        parseException(b, S) {
          const u = {};
          if (b)
            if ("string" == typeof b) u.message = b;
            else if (b instanceof String) u.message = b.toString();
            else if (
              (b.name ? (u.name = b.name) : (u.name = "UnknownError"),
              b.message && (u.message = b.message),
              b.lineNumber)
            )
              (u.lineNumber = b.lineNumber),
                b.columnNumber && (u.columnNumber = b.columnNumber);
            else if (b.stack) {
              const M = /(.*<anonymous>):(\d*)(:)?(\d*)?/g.exec(b.stack);
              null != M &&
                M.length >= 3 &&
                ((0, a.o8)(S) && (S = -2),
                (u.lineNumber = Number(M[2]) + S),
                M.length >= 5 && (u.columnNumber = Number(M[4])));
            }
          return u;
        }
        customTranslation(b, S) {
          if (b && (0, a.HD)(b)) {
            if (b.includes(`{${C.hB}`)) {
              const u = b.match(c);
              let f = b;
              for (const M of u) {
                const L = M.substring(6, M.length - 1);
                f = f.replace(M, this.doTranslate(L, M));
              }
              return f;
            }
            return this.doTranslate(b, S, C._T);
          }
          return b;
        }
        doTranslate(b, S, u) {
          let f, M;
          M = u ? u + b : b;
          const L = this.translate.instant(M);
          return (f = L !== M ? L + "" : S), f;
        }
        guid() {
          return (0, a.M8)();
        }
        validateDatasources(b) {
          return (
            b.forEach((S) => {
              "device" === S.type &&
                ((S.type = s.i9.entity),
                (S.entityType = d.py.DEVICE),
                S.deviceId
                  ? (S.entityId = S.deviceId)
                  : S.deviceAliasId && (S.entityAliasId = S.deviceAliasId),
                S.deviceName && (S.entityName = S.deviceName)),
                S.type === s.i9.entity && S.entityId && (S.name = S.entityName),
                S.dataKeys || (S.dataKeys = []),
                S.dataKeys.forEach((u) => {
                  (0, a.o8)(u.label) && (u.label = u.name);
                });
            }),
            b
          );
        }
        getMaterialIcons() {
          if (this.materialIcons.length) return (0, r.of)(this.materialIcons);
          {
            const b = new h.t();
            return (
              this.zone.runOutsideAngular(() => {
                m
                  .split("\n")
                  .filter((u) => u && u.length)
                  .forEach((u) => {
                    const f = u.split(" ");
                    f && 2 === f.length && this.materialIcons.push(f[0]);
                  }),
                  b.next(this.materialIcons);
              }),
              b.asObservable()
            );
          }
        }
        getCommonMaterialIcons() {
          return T;
        }
        getMaterialColor(b) {
          const S = b % g.W.length;
          return g.W[S].value;
        }
        createKey(b, S, u = -1) {
          let f;
          if (S === o.dG.alarm && !b.label) {
            const L = i.rI[b.name];
            L && (f = this.translate.instant(L.name));
          }
          f || (f = b.label || b.name);
          const M = {
            name: b.name,
            type: S,
            label: f,
            funcBody: b.funcBody,
            settings: {},
            _hash: Math.random(),
          };
          return (
            b.units && (M.units = b.units),
            (0, a.$K)(b.decimals) && (M.decimals = b.decimals),
            b.color
              ? (M.color = b.color)
              : u > -1 && (M.color = this.getMaterialColor(u)),
            b.postFuncBody &&
              b.postFuncBody.length &&
              ((M.usePostProcessing = !0), (M.postFuncBody = b.postFuncBody)),
            M
          );
        }
        createLabelFromDatasource(b, S) {
          return (0, a.mZ)(b, S);
        }
        generateColors(b) {
          let S = 0;
          b.forEach((u) => {
            u.dataKeys.forEach((f) => {
              f.color || (f.color = this.getMaterialColor(S)), S++;
            });
          });
        }
        currentPerfTime() {
          return this.window.performance && this.window.performance.now
            ? this.window.performance.now()
            : Date.now();
        }
        getQueryParam(b) {
          const S = this.window.location.href;
          b = b.replace(/[\[\]]/g, "\\$&");
          const f = new RegExp("[?&]" + b + "(=([^&#]*)|&|#|$)").exec(S);
          return f
            ? f[2]
              ? decodeURIComponent(f[2].replace(/\+/g, " "))
              : ""
            : null;
        }
        removeQueryParams(b) {
          let S = this.window.location.search;
          for (const f of b) S = this.updateUrlQueryString(S, f, null);
          const u = [(0, a.FH)(), this.window.location.pathname].join("");
          this.window.history.replaceState({}, "", u + S);
        }
        updateQueryParam(b, S) {
          const u = [(0, a.FH)(), this.window.location.pathname].join(""),
            f = this.window.location.search,
            M = this.updateUrlQueryString(f, b, S);
          this.window.history.replaceState({}, "", u + M);
        }
        updateUrlQueryString(b, S, u) {
          let f = "",
            M = "";
          if ((null !== u && (f = S + "=" + u), b)) {
            const L = new RegExp("([?&])" + S + "[^&]*");
            null !== b.match(L)
              ? (f && (f = "$1" + f),
                (M = b.replace(L, f)),
                M.startsWith("&") && (M = "?" + M.substring(1)))
              : f && (M = b + "&" + f);
          } else f && (M = "?" + f);
          return M;
        }
        baseUrl() {
          return (0, a.FH)();
        }
        deepClone(b, S) {
          return (0, a.I8)(b, S);
        }
        isUndefined(b) {
          return (0, a.o8)(b);
        }
        isDefined(b) {
          return (0, a.$K)(b);
        }
        defaultValue(b, S) {
          return (0, a.nu)(b) ? b : S;
        }
        getEntityIdFromDatasource(b) {
          return { id: b.entityId, entityType: b.entityType };
        }
        subscribeToEntityTelemetry(b, S, u = o.B5.LATEST_TELEMETRY, f = null) {
          !S &&
            b.datasources.length > 0 &&
            (S = this.getEntityIdFromDatasource(b.datasources[0]));
          const M = o.xb.createEntityAttributesSubscription(
            b.telemetryWsService,
            S,
            u,
            b.ngZone,
            f
          );
          return (
            b.telemetrySubscribers || (b.telemetrySubscribers = []),
            b.telemetrySubscribers.push(M),
            M.subscribe(),
            M.attributeData$().pipe((0, p._)(1), (0, _.x)())
          );
        }
      }
      (O.ɵfac = function (b) {
        return new (b || O)(
          e.ɵɵinject(n.m9),
          e.ɵɵinject(e.NgZone),
          e.ɵɵinject(E.TranslateService)
        );
      }),
        (O.ɵprov = e.ɵɵdefineInjectable({
          token: O,
          factory: O.ɵfac,
          providedIn: "root",
        }));
    },
    11877: (ee, R, t) => {
      "use strict";
      t.d(R, {
        m9: () => a,
        X9: () => C,
        lk: () => s,
        n0: () => d,
        UO: () => o,
        sz: () => i,
        Yp: () => g,
      });
      var e = t(38583),
        n = t(37716);
      const a = new n.InjectionToken("WindowToken");
      class C {
        get nativeWindow() {
          throw new Error("Not implemented.");
        }
      }
      class s extends C {
        constructor() {
          super();
        }
        get nativeWindow() {
          return window;
        }
      }
      function d(D, y) {
        return (0, e.isPlatformBrowser)(y) ? D.nativeWindow : new Object();
      }
      (s.ɵfac = function (y) {
        return new (y || s)();
      }),
        (s.ɵprov = n.ɵɵdefineInjectable({ token: s, factory: s.ɵfac }));
      const o = { provide: C, useClass: s },
        i = { provide: a, useFactory: d, deps: [C, n.PLATFORM_ID] },
        g = [o, i];
    },
    40005: (ee, R, t) => {
      "use strict";
      var e;
      t.d(R, { o: () => e, N: () => n }),
        ((e || (e = {})).CHANGE_LANGUAGE = "[Settings] Change Language");
      class n {
        constructor(C) {
          (this.payload = C), (this.type = e.CHANGE_LANGUAGE);
        }
      }
    },
    41960: (ee, R, t) => {
      "use strict";
      t.d(R, {
        lg: () => D,
        R8: () => y,
        WX: () => m,
        o8: () => r,
        Jp: () => h,
        $K: () => p,
        nu: () => _,
        jH: () => E,
        XE: () => c,
        mf: () => v,
        Kn: () => I,
        hj: () => l,
        kE: () => T,
        jn: () => O,
        HD: () => w,
        xb: () => b,
        cD: () => S,
        Bw: () => u,
        TT: () => f,
        eb: () => M,
        PR: () => L,
        DR: () => k,
        HP: () => N,
        iI: () => B,
        un: () => G,
        d3: () => Z,
        I8: () => X,
        Yg: () => se,
        Xy: () => ne,
        Ee: () => re,
        M8: () => de,
        fu: () => Q,
        Wt: () => K,
        Wh: () => H,
        mZ: () => x,
        uM: () => W,
        Lj: () => $,
        c: () => J,
        PM: () => te,
        TW: () => _e,
        vr: () => me,
        rc: () => fe,
        b5: () => Ce,
        z2: () => Te,
        dL: () => be,
        p_: () => tt,
        fX: () => Se,
        FH: () => nt,
        yC: () => Le,
        se: () => Ye,
        KK: () => Ke,
        jP: () => dt,
        k: () => Ct,
        PX: () => ht,
        cu: () => gt,
        dn: () => ct,
        I: () => ke,
      });
      var e = t(23815),
        n = t.n(e),
        a = t(79765),
        C = t(68939),
        s = t(78345),
        d = t(86057),
        o = t(52042),
        i = t(82068);
      const g = /\${([^}]*)}/g;
      function D(z) {
        const oe = new a.xQ(),
          ie = (function (z) {
            if (!(z instanceof HTMLElement || z instanceof SVGElement))
              return [];
            const oe = [];
            return (
              F(z, []).forEach((ce) => {
                (function (z) {
                  return (
                    z instanceof Element &&
                    j.test(
                      (function (z) {
                        return (
                          V(z, "overflow") +
                          V(z, "overflow-y") +
                          V(z, "overflow-x")
                        );
                      })(z)
                    )
                  );
                })(ce) && oe.push(ce);
              }),
              document.scrollingElement
                ? oe.push(document.scrollingElement)
                : document.documentElement && oe.push(document.documentElement),
              oe
            );
          })(z),
          ce = {
            handleEvent(ue) {
              oe.next(ue);
            },
          };
        return (
          ie.forEach((ue) => {
            ue.addEventListener("scroll", ce);
          }),
          window.addEventListener("resize", ce),
          oe.pipe(
            (0, C.x)(() => {
              ie.forEach((ue) => {
                ue.removeEventListener("scroll", ce);
              }),
                window.removeEventListener("resize", ce);
            }),
            (0, s.B)()
          )
        );
      }
      function y(z) {
        const oe = document.createElement("a");
        oe.href = z;
        const ie = oe.hostname;
        return "localhost" === ie || "127.0.0.1" === ie;
      }
      function m(z, oe, ie) {
        let ce = 0;
        const Ee = z.scrollTop,
          ye = oe,
          Oe = ie || 0,
          Pe = ye - Ee,
          Ne = () => {
            0 === Oe
              ? (z.scrollTop = ye)
              : ((ce += 20),
                (z.scrollTop = (function (z, oe, ie, ce) {
                  return (z /= ce / 2) < 1
                    ? (ie / 2) * z * z + oe
                    : (z--, (-ie / 2) * (z * (z - 2) - 1) + oe);
                })(ce, Ee, Pe, Oe)),
                ce < Oe && setTimeout(Ne, 20));
          };
        Ne();
      }
      function r(z) {
        return void 0 === z;
      }
      function h(z) {
        return null == z;
      }
      function p(z) {
        return void 0 !== z;
      }
      function _(z) {
        return null != z;
      }
      function E(z) {
        return "" === z;
      }
      function c(z) {
        return "string" == typeof z && z.trim().length > 0;
      }
      function v(z) {
        return "function" == typeof z;
      }
      function I(z) {
        return null !== z && "object" == typeof z;
      }
      function l(z) {
        return "number" == typeof z;
      }
      function T(z) {
        return z - parseFloat(z) + 1 >= 0;
      }
      function O(z) {
        return "boolean" == typeof z;
      }
      function w(z) {
        return "string" == typeof z;
      }
      function b(z) {
        for (const oe of Object.keys(z))
          if (Object.prototype.hasOwnProperty.call(z, oe)) return !1;
        return !0;
      }
      function S(z) {
        return !!z && z.constructor === Object;
      }
      function u(z, oe, ie, ce) {
        if (_(z) && T(z) && (_(oe) || _(ie) || Number(z).toString() === z)) {
          let ue = Number(z);
          return (
            _(oe) && (ue = ue.toFixed(oe)),
            ce || (ue = Number(ue)),
            (ue = ue.toString()),
            _(ie) && ie.length > 0 && (ue += " " + ie),
            ue
          );
        }
        return null !== z ? z : "";
      }
      function f(z) {
        return Object.keys(z).map((oe) => z[oe]);
      }
      function M(z) {
        r(z) ||
          null == z ||
          Object.keys(z).forEach((oe) => {
            null === z[oe] || r(z[oe])
              ? delete z[oe]
              : I(z[oe])
              ? M(z[oe])
              : z[oe] instanceof Array &&
                z[oe].forEach((ie) => {
                  M(ie);
                });
          });
      }
      function L(z) {
        const oe = JSON.stringify(z);
        return btoa(
          encodeURIComponent(oe).replace(/%([0-9A-F]{2})/g, function (ce, ue) {
            return String.fromCharCode(Number("0x" + ue));
          })
        );
      }
      function k(z) {
        return decodeURIComponent(
          atob(z)
            .split("")
            .map((oe) => "%" + ("00" + oe.charCodeAt(0).toString(16)).slice(-2))
            .join("")
        );
      }
      function N(z) {
        return encodeURIComponent(L(z));
      }
      function B(z) {
        const oe = decodeURIComponent(
          atob(z)
            .split("")
            .map((ie) => "%" + ("00" + ie.charCodeAt(0).toString(16)).slice(-2))
            .join("")
        );
        return JSON.parse(oe);
      }
      const j = /(auto|scroll)/;
      function F(z, oe) {
        return null === z.parentNode ? oe : F(z.parentNode, oe.concat([z]));
      }
      function V(z, oe) {
        return getComputedStyle(z, null).getPropertyValue(oe);
      }
      function G(z) {
        let ie,
          ce,
          oe = 0;
        if (0 === z.length) return oe;
        for (ie = 0; ie < z.length; ie++)
          (ce = z.charCodeAt(ie)), (oe = (oe << 5) - oe + ce), (oe &= oe);
        return oe;
      }
      function Z(z) {
        let oe = 0;
        if (z) {
          oe = G(JSON.stringify(z));
        }
        return oe;
      }
      function X(z, oe) {
        if (null === z) return z;
        if (z instanceof Date) return new Date(z.getTime());
        if (z instanceof Array) {
          const ie = [];
          return (
            z.forEach((ce) => {
              ie.push(ce);
            }),
            ie.map((ce) => X(ce))
          );
        }
        if ("object" == typeof z && z !== {}) {
          const ie = Object.assign({}, z);
          return (
            Object.keys(ie).forEach((ce) => {
              (!oe || -1 === oe.indexOf(ce)) && (ie[ce] = X(ie[ce]));
            }),
            ie
          );
        }
        return z;
      }
      function se(z, oe) {
        return n().pick(z, oe);
      }
      function ne(z, oe) {
        return n().isEqual(z, oe);
      }
      function re(z, ...oe) {
        return n().merge(z, ...oe);
      }
      function de() {
        function z() {
          return Math.floor(65536 * (1 + Math.random()))
            .toString(16)
            .substring(1);
        }
        return (
          z() + z() + "-" + z() + "-" + z() + "-" + z() + "-" + z() + z() + z()
        );
      }
      const pe = /[A-Z]/g;
      function Q(z, oe) {
        return (
          (oe = oe || "_"),
          z.replace(pe, (ie, ce) => (ce ? oe : "") + ie.toLowerCase())
        );
      }
      function K(z, oe) {
        return z.hasOwnProperty(oe)
          ? z[oe]
          : oe.split(".").reduce((ie, ce) => ie && ie[ce], z);
      }
      function H(z, oe, ie) {
        let ce = z,
          ue = g.exec(z);
        for (; null !== ue; ) {
          const Ee = ue[0];
          ue[1] === oe && (ce = ce.replace(Ee, ie)), (ue = g.exec(z));
        }
        return ce;
      }
      function x(z, oe) {
        let ie = oe;
        if (!z) return ie;
        let ce = g.exec(oe);
        for (; null !== ce; ) {
          const ue = ce[0],
            Ee = ce[1];
          "dsName" === Ee
            ? (ie = ie.replace(ue, z.name))
            : "entityName" === Ee || "deviceName" === Ee
            ? (ie = ie.replace(ue, z.entityName))
            : "entityLabel" === Ee
            ? (ie = ie.replace(ue, z.entityLabel || z.entityName))
            : "aliasName" === Ee
            ? (ie = ie.replace(ue, z.aliasName))
            : "entityDescription" === Ee &&
              (ie = ie.replace(ue, z.entityDescription)),
            (ce = g.exec(oe));
        }
        return ie;
      }
      function W(z, oe) {
        return n()(z)
          .groupBy((ie) => ie.datasource.entityName + ie.datasource.entityType)
          .values()
          .value()
          .map((ie, ce) => {
            const Ee = J(ie[0].datasource, ce);
            return (
              ie
                .filter((ye) => ye.data.length)
                .forEach((ye) => {
                  const Oe = p(oe) ? oe : ye.data.length - 1;
                  (!Ee.hasOwnProperty(ye.dataKey.label) ||
                    "" !== ye.data[Oe][1]) &&
                    ((Ee[ye.dataKey.label] = ye.data[Oe][1]),
                    (Ee[ye.dataKey.label + "|ts"] = ye.data[Oe][0]),
                    "type" === ye.dataKey.label.toLowerCase() &&
                      (Ee.deviceType = ye.data[Oe][1]));
                }),
              Ee
            );
          });
      }
      function $(z) {
        return n()(z)
          .groupBy((oe) => oe.datasource.entityName)
          .values()
          .value()
          .map((oe, ie) => {
            const ce = {};
            return (
              oe
                .filter((ue) => ue.data.length)
                .forEach((ue) => {
                  ue.data.forEach((Ee) => {
                    const ye = Ee[0],
                      Oe = Ee[1];
                    let Pe = ce[ye];
                    if (!Pe) {
                      (Pe = J(ue.datasource, ie)),
                        (Pe.time = ye),
                        (ce[ye] = Pe);
                    }
                    (Pe[ue.dataKey.label] = Oe),
                      (Pe[ue.dataKey.label + "|ts"] = ye),
                      "type" === ue.dataKey.label.toLowerCase() &&
                        (Pe.deviceType = Oe);
                  });
                }),
              n().values(ce)
            );
          });
      }
      function J(z, oe) {
        return {
          entityName: z.entityName,
          deviceName: z.entityName,
          entityId: z.entityId,
          entityType: z.entityType,
          entityLabel: z.entityLabel || z.entityName,
          entityDescription: z.entityDescription,
          aliasName: z.aliasName,
          $datasource: z,
          dsIndex: oe,
          dsName: z.name,
          deviceType: null,
        };
      }
      function te(z) {
        let oe = {};
        if (z.length) {
          for (const ce of z) oe = Object.assign(Object.assign({}, oe), ce);
          const ie = z[0];
          (oe.entityName = ie.entityName),
            (oe.deviceName = ie.deviceName),
            (oe.entityId = ie.entityId),
            (oe.entityType = ie.entityType),
            (oe.entityLabel = ie.entityLabel),
            (oe.entityDescription = ie.entityDescription),
            (oe.aliasName = ie.aliasName),
            (oe.$datasource = ie.$datasource),
            (oe.dsIndex = ie.dsIndex),
            (oe.dsName = ie.dsName),
            (oe.deviceType = ie.deviceType);
        }
        return oe;
      }
      function _e(z) {
        const oe = {};
        return (
          z.forEach((ie) => {
            Object.keys(ie).forEach((ce) => {
              (!_(oe[ce]) || E(oe[ce])) && (oe[ce] = ie[ce]);
            });
          }),
          oe
        );
      }
      function me(z, oe) {
        const ie = z.concat(oe);
        return n()(ie)
          .groupBy((ce) => ce.$datasource)
          .values()
          .value()
          .map((ce, ue) => {
            let Ee = ce[0];
            if (ce.length > 1) {
              const ye = ce[1];
              Ee = Object.assign(Object.assign({}, Ee), ye);
            }
            return Ee;
          });
      }
      function fe(z, oe) {
        const ie = [];
        try {
          const ce = /\${([^}]*)}/g;
          let ue = ce.exec(z);
          for (; null !== ue; ) {
            const Ee = { dataKeyName: "", valDec: 2, variable: "" },
              ye = ue[0];
            let Oe = ue[1],
              Pe = 2;
            const Ne = Oe.split(":");
            if (
              (Ne.length > 1 && ((Oe = Ne[0]), (Pe = parseFloat(Ne[1]))),
              (Ee.variable = ye),
              (Ee.valDec = Pe),
              Oe.startsWith("#"))
            ) {
              const Et = Oe.substring(1),
                _t = Math.floor(Number(Et));
              String(_t) === Et &&
                _t >= 0 &&
                (Ee.dataKeyName = oe.$datasource.dataKeys[_t].label);
            } else Ee.dataKeyName = Oe;
            ie.push(Ee), (ue = ce.exec(z));
          }
        } catch (ce) {
          console.log(ce, z);
        }
        return ie;
      }
      function Ce(z, oe, ie) {
        let ce = x(ie.$datasource, z);
        if (oe)
          for (const ue of oe) {
            let Ee = "";
            if (ue.dataKeyName && _(ie[ue.dataKeyName])) {
              const ye = ie[ue.dataKeyName];
              Ee = l(ye) ? Se(ye, ue.valDec) : ye;
            }
            ce = ce.replace(ue.variable, Ee);
          }
        return ce;
      }
      function Te(z, oe) {
        return Ce(z, fe(z, oe), oe);
      }
      function be(z, oe = ["def"]) {
        let ie = null;
        if (null == z ? void 0 : z.length)
          try {
            ie = new Function(...oe, z);
          } catch (ce) {
            ie = null;
          }
        return ie;
      }
      function tt(z, oe = []) {
        let ie = null;
        if (z && "function" == typeof z)
          try {
            ie = z(...oe);
          } catch (ce) {
            console.log("error in external function:", ce), (ie = null);
          }
        return ie;
      }
      function Se(z, oe) {
        let ie, ce;
        return (
          (ce = (z = parseFloat(z)) < 0),
          (z = Math.abs(z)),
          (ie = oe > 0 ? z.toFixed(oe) : Math.round(z).toString()),
          (ie = (ce ? "-" : "") + ie),
          ie
        );
      }
      function nt() {
        let z = window.location.protocol + "//" + window.location.hostname;
        const oe = window.location.port;
        return (
          oe && oe.length > 0 && "80" !== oe && "443" !== oe && (z += ":" + oe),
          z
        );
      }
      function Le(z) {
        return Object.keys(z)
          .sort()
          .reduce((oe, ie) => ((oe[ie] = z[ie]), oe), {});
      }
      function Ye(z) {
        return l(z) || r(z) || w(z) || null === z || z instanceof File
          ? z
          : Object.keys(z).reduce(
              (oe, ie) => (
                w(z[ie])
                  ? (oe[ie] = z[ie].trim())
                  : I(z[ie])
                  ? (oe[ie] = Ye(z[ie]))
                  : (oe[ie] = z[ie]),
                oe
              ),
              Array.isArray(z) ? [] : {}
            );
      }
      function Ke(z) {
        (r(z) || null == z) && (z = 1);
        const oe = z > 10 ? 10 : z,
          ie = Math.random().toString(36).substr(2, oe);
        return ie.length >= z ? ie : ie.concat(Ke(z - ie.length));
      }
      function dt(z) {
        return (
          _(null == z ? void 0 : z.id) &&
          z.id !== d._ &&
          _(null == z ? void 0 : z.entityType)
        );
      }
      function Ct() {
        return p(window.flutter_inappwebview);
      }
      const mt =
          "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",
        vt = mt.length;
      function ht(z) {
        let oe = "";
        for (let ie = 0; ie < z; ie++)
          oe += mt.charAt(Math.floor(Math.random() * vt));
        return oe;
      }
      function gt(z, oe) {
        return `${o.MM.get(oe)}/${z}`;
      }
      function ct(z, oe, ie) {
        let ue,
          ce = null,
          Ee = 0;
        if ("text" === ie)
          try {
            ce = z.error ? JSON.parse(z.error) : null;
          } catch (ye) {}
        else ce = z.error;
        if (
          (ce && !ce.message
            ? (ue = (function (z) {
                if ("object" != typeof z || z.constructor !== ArrayBuffer)
                  return z;
                {
                  const oe = String.fromCharCode.apply(null, new Uint8Array(z));
                  try {
                    const ie = JSON.parse(oe);
                    return ie.message ? ie.message : oe;
                  } catch (ie) {
                    return oe;
                  }
                }
              })(ce))
            : ce && ce.message
            ? ((ue = ce.message), (Ee = ce.timeout ? ce.timeout : 0))
            : (ue = `Unhandled error code ${ce ? ce.status : "'Unknown'"}`),
          I(ue))
        ) {
          let ye = `${z.status}: `,
            Oe = null;
          ue.errorCode && (Oe = i.AU.get(ue.errorCode)),
            (ye += Oe ? oe.instant(Oe) : z.statusText),
            (ue = ye);
        }
        return { message: ue, timeout: Ee };
      }
      function ke(z, oe) {
        let ie = z,
          ce = 1,
          ue = !1;
        if (oe)
          do {
            (ue = !1),
              oe.forEach((Ee) => {
                Ee &&
                  (Ee.dataKeys &&
                    Ee.dataKeys.forEach((ye) => {
                      ye.label === ie && (ce++, (ie = z + " " + ce), (ue = !0));
                    }),
                  Ee.latestDataKeys &&
                    Ee.latestDataKeys.forEach((ye) => {
                      ye.label === ie && (ce++, (ie = z + " " + ce), (ue = !0));
                    }));
              });
          } while (ue);
        return ie;
      }
    },
    84314: (ee, R, t) => {
      "use strict";
      t.d(R, {
        se: () => n,
        qq: () => a,
        rP: () => C,
        iF: () => s,
        Y4: () => d,
        C: () => o,
        kq: () => i,
        ir: () => I,
        ue: () => l,
        vm: () => O,
        dd: () => w,
        n0: () => b,
        iX: () => S,
        X6: () => u,
        Hq: () => f,
        LO: () => M,
        dM: () => L,
        wh: () => k,
        E9: () => N,
        jP: () => B,
        hS: () => j,
        DQ: () => F,
        mo: () => V,
        Dy: () => P,
        gN: () => A,
      });
      var e = t(3679);
      const n = 50,
        a = "instances",
        C = "resources",
        s = "observe",
        d = "attribute",
        o = "telemetry",
        i = "keyName",
        y = "localhost",
        I = 0,
        l = 65535,
        T = "coap://",
        O = T + y + ":5685",
        w = T + y + ":5685",
        b = 1e4,
        S = 81e3,
        u = 1e4;
      var f, U;
      ((U = f || (f = {})).U = "U"),
        (U.M = "M"),
        (U.H = "H"),
        (U.T = "T"),
        (U.S = "S"),
        (U.N = "N"),
        (U.UQ = "UQ"),
        (U.UQS = "UQS"),
        (U.TQ = "TQ"),
        (U.TQS = "TQS"),
        (U.SQ = "SQ");
      const M = new Map([
        [f.U, "device-profile.lwm2m.binding-type.u"],
        [f.M, "device-profile.lwm2m.binding-type.m"],
        [f.H, "device-profile.lwm2m.binding-type.h"],
        [f.T, "device-profile.lwm2m.binding-type.t"],
        [f.S, "device-profile.lwm2m.binding-type.s"],
        [f.N, "device-profile.lwm2m.binding-type.n"],
        [f.UQ, "device-profile.lwm2m.binding-type.uq"],
        [f.UQS, "device-profile.lwm2m.binding-type.uqs"],
        [f.TQ, "device-profile.lwm2m.binding-type.tq"],
        [f.TQS, "device-profile.lwm2m.binding-type.tqs"],
        [f.SQ, "device-profile.lwm2m.binding-type.sq"],
      ]);
      var L;
      !(function (U) {
        (U.pmin = "pmin"),
          (U.pmax = "pmax"),
          (U.gt = "gt"),
          (U.lt = "lt"),
          (U.st = "st");
      })(L || (L = {}));
      const k = new Map([
        [L.pmin, "device-profile.lwm2m.attributes-name.min-period"],
        [L.pmax, "device-profile.lwm2m.attributes-name.max-period"],
        [L.gt, "device-profile.lwm2m.attributes-name.greater-than"],
        [L.lt, "device-profile.lwm2m.attributes-name.less-than"],
        [L.st, "device-profile.lwm2m.attributes-name.step"],
      ]);
      var N;
      !(function (U) {
        (U.LWM2M = "LWM2M"), (U.BOOTSTRAP = "BOOTSTRAP");
      })(N || (N = {}));
      const B = new Map([
        [N.LWM2M, "device-profile.lwm2m.lwm2m-server"],
        [N.BOOTSTRAP, "device-profile.lwm2m.bootstrap-server"],
      ]);
      var j;
      !(function (U) {
        (U.PSM = "PSM"), (U.DRX = "DRX"), (U.E_DRX = "E_DRX");
      })(j || (j = {}));
      const F = new Map([
        [j.PSM, "device-profile.power-saving-mode-type.psm"],
        [j.DRX, "device-profile.power-saving-mode-type.drx"],
        [j.E_DRX, "device-profile.power-saving-mode-type.edrx"],
      ]);
      function V() {
        return {
          observe: [],
          attribute: [],
          telemetry: [],
          keyName: {},
          attributeLwm2m: {},
        };
      }
      function P() {
        return {
          clientOnlyObserveAfterConnect: 1,
          fwUpdateStrategy: 1,
          swUpdateStrategy: 1,
          powerMode: j.DRX,
          compositeOperationsSupport: !1,
        };
      }
      function A(U) {
        const G = [e.Validators.required];
        switch (U) {
          case L.pmin:
          case L.pmax:
            G.push(e.Validators.min(0), e.Validators.pattern("[0-9]*"));
        }
        return G;
      }
    },
    44235: (ee, R, t) => {
      "use strict";
      t.d(R, { o: () => e, c: () => n });
      const e = [
          "Afghanistan",
          "\xc5land Islands",
          "Albania",
          "Algeria",
          "American Samoa",
          "Andorra",
          "Angola",
          "Anguilla",
          "Antarctica",
          "Antigua and Barbuda",
          "Argentina",
          "Armenia",
          "Aruba",
          "Australia",
          "Austria",
          "Azerbaijan",
          "Bahamas",
          "Bahrain",
          "Bangladesh",
          "Barbados",
          "Belarus",
          "Belgium",
          "Belize",
          "Benin",
          "Bermuda",
          "Bhutan",
          "Bolivia",
          "Bonaire, Sint Eustatius and Saba",
          "Bosnia and Herzegovina",
          "Botswana",
          "Bouvet Island",
          "Brazil",
          "British Indian Ocean Territory",
          "Brunei Darussalam",
          "Bulgaria",
          "Burkina Faso",
          "Burundi",
          "Cambodia",
          "Cameroon",
          "Canada",
          "Cape Verde",
          "Cayman Islands",
          "Central African Republic",
          "Chad",
          "Chile",
          "China",
          "Christmas Island",
          "Cocos (Keeling) Islands",
          "Colombia",
          "Comoros",
          "Congo",
          "Congo, The Democratic Republic of the",
          "Cook Islands",
          "Costa Rica",
          "C\xf4te d'Ivoire",
          "Croatia",
          "Cuba",
          "Cura\xe7ao",
          "Cyprus",
          "Czech Republic",
          "Denmark",
          "Djibouti",
          "Dominica",
          "Dominican Republic",
          "Ecuador",
          "Egypt",
          "El Salvador",
          "Equatorial Guinea",
          "Eritrea",
          "Estonia",
          "Ethiopia",
          "Falkland Islands (Malvinas)",
          "Faroe Islands",
          "Fiji",
          "Finland",
          "France",
          "French Guiana",
          "French Polynesia",
          "French Southern Territories",
          "Gabon",
          "Gambia",
          "Georgia",
          "Germany",
          "Ghana",
          "Gibraltar",
          "Greece",
          "Greenland",
          "Grenada",
          "Guadeloupe",
          "Guam",
          "Guatemala",
          "Guernsey",
          "Guinea",
          "Guinea-Bissau",
          "Guyana",
          "Haiti",
          "Heard Island and McDonald Islands",
          "Holy See (Vatican City State)",
          "Honduras",
          "Hong Kong",
          "Hungary",
          "Iceland",
          "India",
          "Indonesia",
          "Iran, Islamic Republic of",
          "Iraq",
          "Ireland",
          "Isle of Man",
          "Israel",
          "Italy",
          "Jamaica",
          "Japan",
          "Jersey",
          "Jordan",
          "Kazakhstan",
          "Kenya",
          "Kiribati",
          "Korea, Democratic People's Republic of",
          "Korea, Republic of",
          "Kuwait",
          "Kyrgyzstan",
          "Lao People's Democratic Republic",
          "Latvia",
          "Lebanon",
          "Lesotho",
          "Liberia",
          "Libya",
          "Liechtenstein",
          "Lithuania",
          "Luxembourg",
          "Macao",
          "Macedonia, Republic Of",
          "Madagascar",
          "Malawi",
          "Malaysia",
          "Maldives",
          "Mali",
          "Malta",
          "Marshall Islands",
          "Martinique",
          "Mauritania",
          "Mauritius",
          "Mayotte",
          "Mexico",
          "Micronesia, Federated States of",
          "Moldova, Republic of",
          "Monaco",
          "Mongolia",
          "Montenegro",
          "Montserrat",
          "Morocco",
          "Mozambique",
          "Myanmar",
          "Namibia",
          "Nauru",
          "Nepal",
          "Netherlands",
          "New Caledonia",
          "New Zealand",
          "Nicaragua",
          "Niger",
          "Nigeria",
          "Niue",
          "Norfolk Island",
          "Northern Mariana Islands",
          "Norway",
          "Oman",
          "Pakistan",
          "Palau",
          "Palestinian Territory, Occupied",
          "Panama",
          "Papua New Guinea",
          "Paraguay",
          "Peru",
          "Philippines",
          "Pitcairn",
          "Poland",
          "Portugal",
          "Puerto Rico",
          "Qatar",
          "Reunion",
          "Romania",
          "Russian Federation",
          "Rwanda",
          "Saint Barth\xe9lemy",
          "Saint Helena, Ascension and Tristan da Cunha",
          "Saint Kitts and Nevis",
          "Saint Lucia",
          "Saint Martin (French Part)",
          "Saint Pierre and Miquelon",
          "Saint Vincent and the Grenadines",
          "Samoa",
          "San Marino",
          "Sao Tome and Principe",
          "Saudi Arabia",
          "Senegal",
          "Serbia",
          "Seychelles",
          "Sierra Leone",
          "Singapore",
          "Sint Maarten (Dutch Part)",
          "Slovakia",
          "Slovenia",
          "Solomon Islands",
          "Somalia",
          "South Africa",
          "South Georgia and the South Sandwich Islands",
          "South Sudan",
          "Spain",
          "Sri Lanka",
          "Sudan",
          "Suriname",
          "Svalbard and Jan Mayen",
          "Swaziland",
          "Sweden",
          "Switzerland",
          "Syrian Arab Republic",
          "Taiwan",
          "Tajikistan",
          "Tanzania, United Republic of",
          "Thailand",
          "Timor-Leste",
          "Togo",
          "Tokelau",
          "Tonga",
          "Trinidad and Tobago",
          "Tunisia",
          "Turkey",
          "Turkmenistan",
          "Turks and Caicos Islands",
          "Tuvalu",
          "Uganda",
          "Ukraine",
          "United Arab Emirates",
          "United Kingdom",
          "United States",
          "United States Minor Outlying Islands",
          "Uruguay",
          "Uzbekistan",
          "Vanuatu",
          "Venezuela",
          "Viet Nam",
          "Virgin Islands, British",
          "Virgin Islands, U.S.",
          "Wallis and Futuna",
          "Western Sahara",
          "Yemen",
          "Zambia",
          "Zimbabwe",
        ],
        n = {
          "United States": "(\\d{5}([\\-]\\d{4})?)",
          Australia: "[0-9]{4}",
          Austria: "[0-9]{4}",
          Belgium: "[0-9]{4}",
          Brazil: "[0-9]{5}[\\-]?[0-9]{3}",
          Canada: "^(?!.*[DFIOQU])[A-VXY][0-9][A-Z][ -]?[0-9][A-Z][0-9]$",
          Denmark: "[0-9]{3,4}",
          "Faroe Islands": "[0-9]{3,4}",
          Netherlands: "[1-9][0-9]{3}\\s?[a-zA-Z]{2}",
          Germany: "[0-9]{5}",
          Hungary: "[0-9]{4}",
          Italy: "[0-9]{5}",
          Japan: "\\d{3}-\\d{4}",
          Luxembourg: "(L\\s*(-|\u2014|\u2013))\\s*?[\\d]{4}",
          Poland: "[0-9]{2}\\-[0-9]{3}",
          Spain: "((0[1-9]|5[0-2])|[1-4][0-9])[0-9]{3}",
          Sweden: "\\d{3}\\s?\\d{2}",
          "United Kingdom":
            "[A-Za-z]{1,2}[0-9Rr][0-9A-Za-z]? [0-9][ABD-HJLNP-UW-Zabd-hjlnp-uw-z]{2}",
        };
    },
    62112: (ee, R, t) => {
      "use strict";
      t.d(R, {
        Mv: () => D,
        XG: () => y,
        fd: () => m,
        cJ: () => r,
        ld: () => h,
        BY: () => p,
        Bi: () => _,
        f5: () => E,
      });
      var e = t(62909),
        n = t(41960),
        a = t(65264),
        C = t(54787),
        s = t(39774),
        d = t(25917),
        o = t(19214),
        i = t(54590),
        g = t(29472);
      class D {
        constructor(v, I, l, T, O) {
          (this.dashboard = v),
            (this.dashboardWidget = I),
            (this.widget = l),
            (this.parentDashboard = T),
            (this.popoverComponent = O),
            (this.inited = !1),
            (this.destroyed = !1),
            (this.subscriptions = {}),
            (this.defaultSubscription = null),
            (this.timewindowFunctions = {
              onUpdateTimewindow: (w, b, S) => {
                this.defaultSubscription &&
                  this.defaultSubscription.onUpdateTimewindow(w, b, S);
              },
              onResetTimewindow: () => {
                this.defaultSubscription &&
                  this.defaultSubscription.onResetTimewindow();
              },
            }),
            (this.controlApi = {
              sendOneWayCommand: (w, b, S, u, f, M, L) =>
                this.defaultSubscription
                  ? this.defaultSubscription.sendOneWayCommand(
                      w,
                      b,
                      S,
                      u,
                      f,
                      M,
                      L
                    )
                  : d.of(null),
              sendTwoWayCommand: (w, b, S, u, f, M, L) =>
                this.defaultSubscription
                  ? this.defaultSubscription.sendTwoWayCommand(
                      w,
                      b,
                      S,
                      u,
                      f,
                      M,
                      L
                    )
                  : d.of(null),
              completedCommand: () =>
                this.defaultSubscription
                  ? this.defaultSubscription.completedCommand()
                  : d.of(null),
            }),
            (this.utils = { formatValue: n.Bw }),
            (this.hideTitlePanel = !1),
            (this.popoverComponents = []),
            (this.rxjs = Object.assign(Object.assign({}, o), i));
        }
        get stateController() {
          return this.parentDashboard
            ? this.parentDashboard.stateController
            : this.dashboard.stateController;
        }
        get aliasController() {
          return this.dashboard.aliasController;
        }
        get dashboardTimewindow() {
          return this.dashboard.dashboardTimewindow;
        }
        get widgetConfig() {
          return this.widget.config;
        }
        get settings() {
          return this.widget.config.settings;
        }
        get units() {
          return this.widget.config.units || "";
        }
        get decimals() {
          return (0, n.$K)(this.widget.config.decimals)
            ? this.widget.config.decimals
            : 2;
        }
        set changeDetector(v) {
          this.changeDetectorValue = v;
        }
        set containerChangeDetector(v) {
          this.containerChangeDetectorValue = v;
        }
        get currentUser() {
          return this.store ? (0, C.fP)(this.store) : null;
        }
        registerPopoverComponent(v) {
          this.popoverComponents.push(v),
            v.tbDestroy.subscribe(() => {
              const I = this.popoverComponents.indexOf(v, 0);
              I > -1 && this.popoverComponents.splice(I, 1);
            });
        }
        updatePopoverPositions() {
          this.popoverComponents.forEach((v) => {
            v.updatePosition();
          });
        }
        setPopoversHidden(v) {
          this.popoverComponents.forEach((I) => {
            I.tbHidden = v;
          });
        }
        showSuccessToast(
          v,
          I = 1e3,
          l = "bottom",
          T = "left",
          O = "dashboardRoot"
        ) {
          this.showToast("success", v, I, l, T, O);
        }
        showInfoToast(v, I = "bottom", l = "left", T = "dashboardRoot") {
          this.showToast("info", v, void 0, I, l, T);
        }
        showWarnToast(v, I = "bottom", l = "left", T = "dashboardRoot") {
          this.showToast("warn", v, void 0, I, l, T);
        }
        showErrorToast(v, I = "bottom", l = "left", T = "dashboardRoot") {
          this.showToast("error", v, void 0, I, l, T);
        }
        showToast(v, I, l, T = "bottom", O = "left", w = "dashboardRoot") {
          this.store.dispatch(
            new a.zi({
              message: I,
              type: v,
              duration: l,
              verticalPosition: T,
              horizontalPosition: O,
              target: w,
              panelClass: this.widgetNamespace,
              forceDismiss: !0,
            })
          );
        }
        hideToast(v) {
          this.store.dispatch(new a.VD({ target: v }));
        }
        detectChanges(v = !1) {
          if (!this.destroyed) {
            v && this.dashboardWidget.updateWidgetParams();
            try {
              this.changeDetectorValue.detectChanges();
            } catch (I) {}
          }
        }
        detectContainerChanges() {
          if (!this.destroyed)
            try {
              this.containerChangeDetectorValue.detectChanges();
            } catch (v) {}
        }
        updateWidgetParams() {
          this.destroyed ||
            setTimeout(() => {
              this.dashboardWidget.updateWidgetParams();
            }, 0);
        }
        updateAliases(v) {
          this.aliasController.updateAliases(v);
        }
        reset() {
          (this.destroyed = !1),
            (this.hideTitlePanel = !1),
            (this.widgetTitle = void 0),
            (this.widgetActions = void 0);
        }
        closeDialog(v = null) {
          const I =
            this.$scope.dialogRef ||
            this.stateController.dashboardCtrl.dashboardCtx.getDashboard()
              .dialogRef;
          I && I.close(v);
        }
        pageLink(v, I = 0, l = null, T = null) {
          return new s.H_(v, I, l, T);
        }
        timePageLink(v, I, l, T = 0, O = null, w = null) {
          return new s.tk(l, T, O, w, v, I);
        }
        alarmQuery(v, I, l, T, O) {
          return new g.d4(v, I, l, T, O);
        }
      }
      const y = {
          type: e.oS.latest,
          widgetName: "Widget type not found",
          alias: "undefined",
          sizeX: 8,
          sizeY: 6,
          resources: [],
          templateHtml:
            '<div class="tb-widget-error-container"><div class="tb-widget-error-msg" innerHTML="{{\'widget.widget-type-not-found\' | translate }}"></div></div>',
          templateCss: "",
          controllerScript: "self.onInit = function() {}",
          settingsSchema: "{}\n",
          dataKeySettingsSchema: "{}\n",
          image: null,
          description: null,
          defaultConfig:
            '{\n"title": "Widget type not found",\n"datasources": [],\n"settings": {}\n}\n',
          typeParameters: {},
        },
        m = {
          type: e.oS.latest,
          widgetName: "Error loading widget",
          alias: "error",
          sizeX: 8,
          sizeY: 6,
          resources: [],
          templateHtml:
            '<div class="tb-widget-error-container"><div translate class="tb-widget-error-msg">widget.widget-type-load-error</div><div *ngFor="let error of errorMessages" class="tb-widget-error-msg">{{ error }}</div></div>',
          templateCss: "",
          controllerScript: "self.onInit = function() {}",
          settingsSchema: "{}\n",
          dataKeySettingsSchema: "{}\n",
          image: null,
          description: null,
          defaultConfig:
            '{\n"title": "Widget failed to load",\n"datasources": [],\n"settings": {}\n}\n',
          typeParameters: {},
        };
      function r(c) {
        const v = h(c);
        return (v.image = c.image), (v.description = c.description), v;
      }
      function h(c) {
        return {
          widgetName: c.name,
          alias: c.alias,
          type: c.descriptor.type,
          sizeX: c.descriptor.sizeX,
          sizeY: c.descriptor.sizeY,
          resources: c.descriptor.resources,
          templateHtml: c.descriptor.templateHtml,
          templateCss: c.descriptor.templateCss,
          controllerScript: c.descriptor.controllerScript,
          settingsSchema: c.descriptor.settingsSchema,
          dataKeySettingsSchema: c.descriptor.dataKeySettingsSchema,
          latestDataKeySettingsSchema: c.descriptor.latestDataKeySettingsSchema,
          settingsDirective: c.descriptor.settingsDirective,
          dataKeySettingsDirective: c.descriptor.dataKeySettingsDirective,
          latestDataKeySettingsDirective:
            c.descriptor.latestDataKeySettingsDirective,
          defaultConfig: c.descriptor.defaultConfig,
        };
      }
      function p(c, v, I, l, T) {
        const O = _(c, v, I, l, T);
        return Object.assign(Object.assign({}, O), {
          description: c.description,
          image: c.image,
        });
      }
      function _(c, v, I, l, T) {
        const O = {
          type: c.type,
          sizeX: c.sizeX,
          sizeY: c.sizeY,
          resources: c.resources,
          templateHtml: c.templateHtml,
          templateCss: c.templateCss,
          controllerScript: c.controllerScript,
          settingsSchema: c.settingsSchema,
          dataKeySettingsSchema: c.dataKeySettingsSchema,
          latestDataKeySettingsSchema: c.latestDataKeySettingsSchema,
          settingsDirective: c.settingsDirective,
          dataKeySettingsDirective: c.dataKeySettingsDirective,
          latestDataKeySettingsDirective: c.latestDataKeySettingsDirective,
          defaultConfig: c.defaultConfig,
        };
        return {
          id: v,
          tenantId: I,
          createdTime: T,
          bundleAlias: l,
          alias: c.alias,
          name: c.widgetName,
          descriptor: O,
        };
      }
      function E(c, v, I, l, T) {
        if (I) {
          let O;
          v && v.length
            ? ((O = c[v]),
              O || ((O = {}), (c[v] = O), (c.targetEntityParamName = v)))
            : (O = c),
            (O.entityId = I),
            l && (O.entityName = l),
            T && (O.entityLabel = T);
        }
      }
    },
    1844: (ee, R, t) => {
      "use strict";
      t.r(R), t.d(R, { BreadcrumbComponent: () => T });
      var e = t(37716),
        n = t(26215),
        a = t(39895),
        C = t(45435),
        s = t(87519),
        d = t(88002),
        o = t(41960),
        i = t(14866),
        g = t(29790),
        D = t(35618),
        y = t(38583),
        m = t(88030),
        r = t(76627);
      function h(O, w) {
        if (
          (1 & O &&
            (e.ɵɵelementStart(0, "h1", 3),
            e.ɵɵtext(1),
            e.ɵɵpipe(2, "translate"),
            e.ɵɵelementEnd()),
          2 & O)
        ) {
          const b = w.$implicit;
          e.ɵɵadvance(1),
            e.ɵɵtextInterpolate1(
              " ",
              b.ignoreTranslate
                ? b.labelFunction
                  ? b.labelFunction()
                  : b.label
                : e.ɵɵpipeBind1(2, 1, b.label),
              " "
            );
        }
      }
      function p(O, w) {
        if ((1 & O && e.ɵɵelement(0, "mat-icon", 11), 2 & O)) {
          const b = e.ɵɵnextContext(2).$implicit;
          e.ɵɵproperty("svgIcon", b.icon);
        }
      }
      function _(O, w) {
        if (
          (1 & O &&
            (e.ɵɵelementStart(0, "mat-icon", 12),
            e.ɵɵtext(1),
            e.ɵɵelementEnd()),
          2 & O)
        ) {
          const b = e.ɵɵnextContext(2).$implicit;
          e.ɵɵadvance(1), e.ɵɵtextInterpolate1(" ", b.icon, " ");
        }
      }
      function E(O, w) {
        if (
          (1 & O &&
            (e.ɵɵelementStart(0, "a", 8),
            e.ɵɵtemplate(1, p, 1, 1, "mat-icon", 9),
            e.ɵɵtemplate(2, _, 2, 1, "mat-icon", 10),
            e.ɵɵtext(3),
            e.ɵɵpipe(4, "translate"),
            e.ɵɵelementEnd()),
          2 & O)
        ) {
          const b = e.ɵɵnextContext().$implicit;
          e.ɵɵproperty("routerLink", b.link)("queryParams", b.queryParams),
            e.ɵɵadvance(1),
            e.ɵɵproperty("ngIf", b.isMdiIcon),
            e.ɵɵadvance(1),
            e.ɵɵproperty("ngIf", !b.isMdiIcon),
            e.ɵɵadvance(1),
            e.ɵɵtextInterpolate1(
              " ",
              b.ignoreTranslate
                ? b.labelFunction
                  ? b.labelFunction()
                  : b.label
                : e.ɵɵpipeBind1(4, 5, b.label),
              " "
            );
        }
      }
      function c(O, w) {
        if ((1 & O && e.ɵɵelement(0, "mat-icon", 11), 2 & O)) {
          const b = e.ɵɵnextContext(2).$implicit;
          e.ɵɵproperty("svgIcon", b.icon);
        }
      }
      function v(O, w) {
        if (
          (1 & O &&
            (e.ɵɵelementStart(0, "mat-icon", 12),
            e.ɵɵtext(1),
            e.ɵɵelementEnd()),
          2 & O)
        ) {
          const b = e.ɵɵnextContext(2).$implicit;
          e.ɵɵadvance(1), e.ɵɵtextInterpolate1(" ", b.icon, " ");
        }
      }
      function I(O, w) {
        if (
          (1 & O &&
            (e.ɵɵelementStart(0, "span"),
            e.ɵɵtemplate(1, c, 1, 1, "mat-icon", 9),
            e.ɵɵtemplate(2, v, 2, 1, "mat-icon", 10),
            e.ɵɵtext(3),
            e.ɵɵpipe(4, "translate"),
            e.ɵɵelementEnd()),
          2 & O)
        ) {
          const b = e.ɵɵnextContext().$implicit;
          e.ɵɵadvance(1),
            e.ɵɵproperty("ngIf", b.isMdiIcon),
            e.ɵɵadvance(1),
            e.ɵɵproperty("ngIf", !b.isMdiIcon),
            e.ɵɵadvance(1),
            e.ɵɵtextInterpolate1(
              " ",
              b.ignoreTranslate
                ? b.labelFunction
                  ? b.labelFunction()
                  : b.label
                : e.ɵɵpipeBind1(4, 3, b.label),
              " "
            );
        }
      }
      function l(O, w) {
        if (
          (1 & O &&
            (e.ɵɵelementStart(0, "span", 4),
            e.ɵɵtemplate(1, E, 5, 7, "a", 5),
            e.ɵɵtemplate(2, I, 5, 5, "span", 6),
            e.ɵɵelementStart(3, "span", 7),
            e.ɵɵtext(4, " > "),
            e.ɵɵelementEnd(),
            e.ɵɵelementEnd()),
          2 & O)
        ) {
          const b = w.last;
          e.ɵɵproperty("ngSwitch", b),
            e.ɵɵadvance(1),
            e.ɵɵproperty("ngSwitchCase", !1),
            e.ɵɵadvance(1),
            e.ɵɵproperty("ngSwitchCase", !0),
            e.ɵɵadvance(1),
            e.ɵɵproperty("fxHide", b);
        }
      }
      class T {
        constructor(w, b, S, u, f) {
          (this.router = w),
            (this.activatedRoute = b),
            (this.broadcast = S),
            (this.cd = u),
            (this.translate = f),
            (this.updateBreadcrumbsSubscription = null),
            (this.breadcrumbs$ = new n.X(
              this.buildBreadCrumbs(this.activatedRoute.snapshot)
            )),
            (this.routerEventsSubscription = this.router.events
              .pipe(
                (0, C.h)((M) => M instanceof a.NavigationEnd),
                (0, s.x)(),
                (0, d.U)(() =>
                  this.buildBreadCrumbs(this.activatedRoute.snapshot)
                )
              )
              .subscribe((M) => this.breadcrumbs$.next(M))),
            (this.lastBreadcrumb$ = this.breadcrumbs$.pipe(
              (0, d.U)((M) => M[M.length - 1])
            ));
        }
        set activeComponent(w) {
          this.updateBreadcrumbsSubscription &&
            (this.updateBreadcrumbsSubscription.unsubscribe(),
            (this.updateBreadcrumbsSubscription = null)),
            (this.activeComponentValue = w),
            this.activeComponentValue &&
              this.activeComponentValue.updateBreadcrumbs &&
              (this.updateBreadcrumbsSubscription =
                this.activeComponentValue.updateBreadcrumbs.subscribe(() => {
                  this.breadcrumbs$.next(
                    this.buildBreadCrumbs(this.activatedRoute.snapshot)
                  );
                }));
        }
        ngOnInit() {
          this.broadcast.on("updateBreadcrumb", () => {
            this.cd.markForCheck();
          });
        }
        ngOnDestroy() {
          this.routerEventsSubscription &&
            this.routerEventsSubscription.unsubscribe();
        }
        lastChild(w) {
          let b = w;
          for (; null !== b.firstChild; ) b = b.firstChild;
          return b;
        }
        buildBreadCrumbs(w, b = [], S) {
          S || (S = this.lastChild(w));
          let u = b;
          if (w.routeConfig && w.routeConfig.data) {
            const f = w.routeConfig.data.breadcrumb;
            if (f && !f.skip) {
              let M, L, k;
              f.labelFunction
                ? ((L = () =>
                    f.labelFunction(
                      w,
                      this.translate,
                      this.activeComponentValue,
                      S.data
                    )),
                  (k = !0))
                : ((M = f.label || "home.home"), (k = !1));
              const N = f.icon || "home",
                B = N.startsWith("mdi:"),
                j = [
                  w.pathFromRoot
                    .map((V) => V.url.map((P) => P.toString()).join("/"))
                    .join("/"),
                ],
                F = {
                  id: (0, o.M8)(),
                  label: M,
                  labelFunction: L,
                  ignoreTranslate: k,
                  icon: N,
                  isMdiIcon: B,
                  link: j,
                  queryParams: null,
                };
              u = [...b, F];
            }
          }
          return w.firstChild ? this.buildBreadCrumbs(w.firstChild, u, S) : u;
        }
        trackByBreadcrumbs(w, b) {
          return b.id;
        }
      }
      (T.ɵfac = function (w) {
        return new (w || T)(
          e.ɵɵdirectiveInject(a.Router),
          e.ɵɵdirectiveInject(a.ActivatedRoute),
          e.ɵɵdirectiveInject(i.M),
          e.ɵɵdirectiveInject(e.ChangeDetectorRef),
          e.ɵɵdirectiveInject(g.TranslateService)
        );
      }),
        (T.ɵcmp = e.ɵɵdefineComponent({
          type: T,
          selectors: [["tb-breadcrumb"]],
          inputs: { activeComponent: "activeComponent" },
          decls: 5,
          vars: 7,
          consts: [
            ["fxFlex", "", "fxLayout", "row", 1, "tb-breadcrumb"],
            ["fxFlex", "", "fxHide.gt-sm", "", 4, "ngIf"],
            [
              "fxHide.lt-md",
              "",
              "fxLayout",
              "row",
              3,
              "ngSwitch",
              4,
              "ngFor",
              "ngForOf",
              "ngForTrackBy",
            ],
            ["fxFlex", "", "fxHide.gt-sm", ""],
            ["fxHide.lt-md", "", "fxLayout", "row", 3, "ngSwitch"],
            [3, "routerLink", "queryParams", 4, "ngSwitchCase"],
            [4, "ngSwitchCase"],
            [1, "divider", 3, "fxHide"],
            [3, "routerLink", "queryParams"],
            [3, "svgIcon", 4, "ngIf"],
            ["class", "material-icons", 4, "ngIf"],
            [3, "svgIcon"],
            [1, "material-icons"],
          ],
          template: function (w, b) {
            1 & w &&
              (e.ɵɵelementStart(0, "div", 0),
              e.ɵɵtemplate(1, h, 3, 3, "h1", 1),
              e.ɵɵpipe(2, "async"),
              e.ɵɵtemplate(3, l, 5, 4, "span", 2),
              e.ɵɵpipe(4, "async"),
              e.ɵɵelementEnd()),
              2 & w &&
                (e.ɵɵadvance(1),
                e.ɵɵproperty("ngIf", e.ɵɵpipeBind1(2, 3, b.lastBreadcrumb$)),
                e.ɵɵadvance(2),
                e.ɵɵproperty("ngForOf", e.ɵɵpipeBind1(4, 5, b.breadcrumbs$))(
                  "ngForTrackBy",
                  b.trackByBreadcrumbs
                ));
          },
          directives: [
            D.DefaultFlexDirective,
            D.DefaultLayoutDirective,
            y.NgIf,
            y.NgForOf,
            m.DefaultShowHideDirective,
            y.NgSwitch,
            y.NgSwitchCase,
            a.RouterLinkWithHref,
            r.MatIcon,
          ],
          pipes: [y.AsyncPipe, g.TranslatePipe],
          styles: [
            '@charset "UTF-8";[_nghost-%COMP%]{min-width:0}[_nghost-%COMP%]   .tb-breadcrumb[_ngcontent-%COMP%]{font-size:18px;font-weight:400;overflow:hidden}[_nghost-%COMP%]   .tb-breadcrumb[_ngcontent-%COMP%]   h1[_ngcontent-%COMP%], [_nghost-%COMP%]   .tb-breadcrumb[_ngcontent-%COMP%]   a[_ngcontent-%COMP%], [_nghost-%COMP%]   .tb-breadcrumb[_ngcontent-%COMP%]   span[_ngcontent-%COMP%]:not(.divider){overflow:hidden;text-overflow:ellipsis;white-space:nowrap}[_nghost-%COMP%]   .tb-breadcrumb[_ngcontent-%COMP%]   h1[_ngcontent-%COMP%]{font-size:24px;font-weight:400}[_nghost-%COMP%]   .tb-breadcrumb[_ngcontent-%COMP%]   a[_ngcontent-%COMP%]{border:none;opacity:.75;transition:opacity .35s;color:inherit;text-decoration:none;outline:none}[_nghost-%COMP%]   .tb-breadcrumb[_ngcontent-%COMP%]   a[_ngcontent-%COMP%]:hover, [_nghost-%COMP%]   .tb-breadcrumb[_ngcontent-%COMP%]   a[_ngcontent-%COMP%]:focus{text-decoration:none!important;border:none;opacity:1}[_nghost-%COMP%]   .tb-breadcrumb[_ngcontent-%COMP%]   .divider[_ngcontent-%COMP%]{padding:0 20px}',
          ],
          changeDetection: 0,
        }));
    },
    84059: (ee, R, t) => {
      "use strict";
      t.r(R), t.d(R, { CopyButtonComponent: () => y });
      var e = t(37716),
        n = t(28882),
        a = t(29790),
        C = t(51095),
        s = t(11436),
        d = t(38583),
        o = t(76627),
        i = t(88030);
      function g(m, r) {
        if (
          (1 & m &&
            (e.ɵɵelementStart(0, "mat-icon", 3), e.ɵɵtext(1), e.ɵɵelementEnd()),
          2 & m)
        ) {
          const h = e.ɵɵnextContext();
          e.ɵɵproperty("svgIcon", h.mdiIcon)("ngStyle", h.style),
            e.ɵɵadvance(1),
            e.ɵɵtextInterpolate1(" ", h.icon, " ");
        }
      }
      function D(m, r) {
        if (
          (1 & m &&
            (e.ɵɵelementStart(0, "mat-icon", 4),
            e.ɵɵtext(1, "done"),
            e.ɵɵelementEnd()),
          2 & m)
        ) {
          const h = e.ɵɵnextContext();
          e.ɵɵproperty("ngStyle", h.style);
        }
      }
      class y {
        constructor(r, h, p) {
          (this.clipboardService = r),
            (this.translate = h),
            (this.cd = p),
            (this.copied = !1),
            (this.disabled = !1),
            (this.style = {}),
            (this.successCopied = new e.EventEmitter());
        }
        copy(r) {
          r.stopPropagation(),
            this.timer && clearTimeout(this.timer),
            this.clipboardService.copy(this.copyText),
            this.successCopied.emit(this.copyText),
            (this.copied = !0),
            (this.timer = setTimeout(() => {
              (this.copied = !1), this.cd.detectChanges();
            }, 1500));
        }
        get matTooltipText() {
          return this.copied
            ? this.translate.instant("ota-update.copied")
            : this.tooltipText;
        }
        get matTooltipPosition() {
          return this.copied ? "below" : this.tooltipPosition;
        }
      }
      (y.ɵfac = function (r) {
        return new (r || y)(
          e.ɵɵdirectiveInject(n.Yv),
          e.ɵɵdirectiveInject(a.TranslateService),
          e.ɵɵdirectiveInject(e.ChangeDetectorRef)
        );
      }),
        (y.ɵcmp = e.ɵɵdefineComponent({
          type: y,
          selectors: [["tb-copy-button"]],
          inputs: {
            copyText: "copyText",
            disabled: "disabled",
            mdiIcon: "mdiIcon",
            icon: "icon",
            tooltipText: "tooltipText",
            tooltipPosition: "tooltipPosition",
            style: "style",
            color: "color",
          },
          outputs: { successCopied: "successCopied" },
          decls: 4,
          vars: 6,
          consts: [
            [
              "mat-icon-button",
              "",
              "type",
              "button",
              3,
              "color",
              "disabled",
              "matTooltip",
              "matTooltipPosition",
              "click",
            ],
            [3, "svgIcon", "ngStyle", 4, "ngIf", "ngIfElse"],
            ["copiedTemplate", ""],
            [3, "svgIcon", "ngStyle"],
            [1, "copied", 3, "ngStyle"],
          ],
          template: function (r, h) {
            if (
              (1 & r &&
                (e.ɵɵelementStart(0, "button", 0),
                e.ɵɵlistener("click", function (_) {
                  return h.copy(_);
                }),
                e.ɵɵtemplate(1, g, 2, 3, "mat-icon", 1),
                e.ɵɵtemplate(
                  2,
                  D,
                  2,
                  1,
                  "ng-template",
                  null,
                  2,
                  e.ɵɵtemplateRefExtractor
                ),
                e.ɵɵelementEnd()),
              2 & r)
            ) {
              const p = e.ɵɵreference(3);
              e.ɵɵproperty("color", h.color)("disabled", h.disabled)(
                "matTooltip",
                h.matTooltipText
              )("matTooltipPosition", h.matTooltipPosition),
                e.ɵɵadvance(1),
                e.ɵɵproperty("ngIf", !h.copied)("ngIfElse", p);
            }
          },
          directives: [
            C.MatButton,
            s.MatTooltip,
            d.NgIf,
            o.MatIcon,
            d.NgStyle,
            i.DefaultStyleDirective,
          ],
          styles: [
            '@charset "UTF-8";[_nghost-%COMP%]   .mat-icon-button[_ngcontent-%COMP%]{height:32px;width:32px;line-height:32px}[_nghost-%COMP%]   .mat-icon-button[_ngcontent-%COMP%]   .mat-icon.copied[_ngcontent-%COMP%]{color:#00c851!important}[_nghost-%COMP%]:hover   .mat-icon[_ngcontent-%COMP%]{color:#28567e!important}',
          ],
        }));
    },
    86459: (ee, R, t) => {
      "use strict";
      t.r(R), t.d(R, { TogglePasswordComponent: () => d });
      var e = t(37716),
        n = t(38583),
        a = t(51095),
        C = t(76627);
      function s(o, i) {
        if (1 & o) {
          const g = e.ɵɵgetCurrentView();
          e.ɵɵelementStart(0, "button", 1),
            e.ɵɵlistener("click", function (y) {
              return e.ɵɵrestoreView(g), e.ɵɵnextContext().togglePassword(y);
            }),
            e.ɵɵelementStart(1, "mat-icon"),
            e.ɵɵtext(2),
            e.ɵɵelementEnd(),
            e.ɵɵelementEnd();
        }
        if (2 & o) {
          const g = e.ɵɵnextContext();
          e.ɵɵattribute("aria-pressed", g.showPassword),
            e.ɵɵadvance(2),
            e.ɵɵtextInterpolate(
              g.showPassword ? "visibility" : "visibility_off"
            );
        }
      }
      class d {
        constructor(i) {
          (this.hostElement = i),
            (this.showPassword = !1),
            (this.hideToggle = !1),
            (this.input = null);
        }
        togglePassword(i) {
          i.stopPropagation(),
            (this.showPassword = !this.showPassword),
            (this.input.type = this.showPassword ? "text" : "password");
        }
        ngAfterViewInit() {
          (this.input = this.hostElement.nativeElement
            .closest("mat-form-field")
            .querySelector('input[type="password"]')),
            null === this.input && (this.hideToggle = !0);
        }
      }
      (d.ɵfac = function (i) {
        return new (i || d)(e.ɵɵdirectiveInject(e.ElementRef));
      }),
        (d.ɵcmp = e.ɵɵdefineComponent({
          type: d,
          selectors: [["tb-toggle-password"]],
          decls: 1,
          vars: 1,
          consts: [
            [
              "mat-icon-button",
              "",
              "type",
              "button",
              "tabindex",
              "-1",
              3,
              "click",
              4,
              "ngIf",
            ],
            [
              "mat-icon-button",
              "",
              "type",
              "button",
              "tabindex",
              "-1",
              3,
              "click",
            ],
          ],
          template: function (i, g) {
            1 & i && e.ɵɵtemplate(0, s, 3, 2, "button", 0),
              2 & i && e.ɵɵproperty("ngIf", !g.hideToggle);
          },
          directives: [n.NgIf, a.MatButton, C.MatIcon],
          encapsulation: 2,
        }));
    },
    74391: (ee, R, t) => {
      "use strict";
      t.r(R), t.d(R, { TbCheatSheetComponent: () => y });
      var e = t(37716),
        n = t(13544),
        C = t(74426),
        s = t(38583),
        d = t(88030);
      function o(m, r) {
        if (
          (1 & m &&
            (e.ɵɵelementStart(0, "span", 9), e.ɵɵtext(1), e.ɵɵelementEnd()),
          2 & m)
        ) {
          const h = r.$implicit;
          e.ɵɵadvance(1), e.ɵɵtextInterpolate(h);
        }
      }
      function i(m, r) {
        if (
          (1 & m &&
            (e.ɵɵelementStart(0, "tr"),
            e.ɵɵelementStart(1, "td", 6),
            e.ɵɵtemplate(2, o, 2, 1, "span", 7),
            e.ɵɵelementEnd(),
            e.ɵɵelementStart(3, "td", 8),
            e.ɵɵtext(4),
            e.ɵɵelementEnd(),
            e.ɵɵelementEnd()),
          2 & m)
        ) {
          const h = r.$implicit;
          e.ɵɵadvance(2),
            e.ɵɵproperty("ngForOf", h.formatted),
            e.ɵɵadvance(2),
            e.ɵɵtextInterpolate(h.description);
        }
      }
      function g(m, r) {
        if (
          (1 & m &&
            (e.ɵɵelementStart(0, "table"),
            e.ɵɵelementStart(1, "tbody"),
            e.ɵɵtemplate(2, i, 5, 2, "tr", 5),
            e.ɵɵelementEnd(),
            e.ɵɵelementEnd()),
          2 & m)
        ) {
          const h = e.ɵɵnextContext();
          e.ɵɵadvance(2), e.ɵɵproperty("ngForOf", h.hotkeysList);
        }
      }
      const D = function (m) {
        return { in: m };
      };
      class y {
        constructor(r, h) {
          (this.elementRef = r),
            (this.hotkeysService = h),
            (this.helpVisible = !1),
            (this.title = "Keyboard Shortcuts:"),
            (this.mousetrap = new n(this.elementRef.nativeElement)),
            this.mousetrap.bind("?", (p, _) => {
              this.toggleCheatSheet();
            });
        }
        ngOnInit() {
          this.hotkeys &&
            (this.hotkeysList = this.hotkeys.filter((r) => r.description));
        }
        setHotKeys(r) {
          this.hotkeysList = r.filter((h) => h.description);
        }
        toggleCheatSheet() {
          this.helpVisible = !this.helpVisible;
        }
        ngOnDestroy() {
          this.mousetrap.unbind("?");
        }
      }
      (y.ɵfac = function (r) {
        return new (r || y)(
          e.ɵɵdirectiveInject(e.ElementRef),
          e.ɵɵdirectiveInject(C.tm)
        );
      }),
        (y.ɵcmp = e.ɵɵdefineComponent({
          type: y,
          selectors: [["tb-hotkeys-cheatsheet"]],
          inputs: { title: "title", hotkeys: "hotkeys" },
          decls: 7,
          vars: 5,
          consts: [
            [
              "tabindex",
              "-1",
              1,
              "tb-hotkeys-container",
              "fade",
              2,
              "display",
              "none",
              3,
              "ngClass",
            ],
            [1, "tb-hotkeys"],
            [1, "tb-hotkeys-title"],
            [4, "ngIf"],
            [1, "tb-hotkeys-close", 3, "click"],
            [4, "ngFor", "ngForOf"],
            [1, "tb-hotkeys-keys"],
            ["class", "tb-hotkeys-key", 4, "ngFor", "ngForOf"],
            [1, "tb-hotkeys-text"],
            [1, "tb-hotkeys-key"],
          ],
          template: function (r, h) {
            1 & r &&
              (e.ɵɵelementStart(0, "div", 0),
              e.ɵɵelementStart(1, "div", 1),
              e.ɵɵelementStart(2, "h4", 2),
              e.ɵɵtext(3),
              e.ɵɵelementEnd(),
              e.ɵɵtemplate(4, g, 3, 1, "table", 3),
              e.ɵɵelementStart(5, "div", 4),
              e.ɵɵlistener("click", function () {
                return h.toggleCheatSheet();
              }),
              e.ɵɵtext(6, "\xd7"),
              e.ɵɵelementEnd(),
              e.ɵɵelementEnd(),
              e.ɵɵelementEnd()),
              2 & r &&
                (e.ɵɵproperty(
                  "ngClass",
                  e.ɵɵpureFunction1(3, D, h.helpVisible)
                ),
                e.ɵɵadvance(3),
                e.ɵɵtextInterpolate(h.title),
                e.ɵɵadvance(1),
                e.ɵɵproperty("ngIf", h.helpVisible));
          },
          directives: [s.NgClass, d.DefaultClassDirective, s.NgIf, s.NgForOf],
          styles: [
            ".tb-hotkeys-container[_ngcontent-%COMP%]{display:table!important;position:fixed;width:100%;height:100%;top:0;left:0;color:#333;font-size:1em;background-color:#ffffffe6;outline:0}.tb-hotkeys-container.fade[_ngcontent-%COMP%]{z-index:-1024;visibility:hidden;opacity:0;transition:opacity .15s linear}.tb-hotkeys-container.fade.in[_ngcontent-%COMP%]{z-index:10002;visibility:visible;opacity:1}.tb-hotkeys-title[_ngcontent-%COMP%]{font-weight:bold;text-align:center;font-size:1.2em}.tb-hotkeys[_ngcontent-%COMP%]{width:100%;height:100%;display:table-cell;vertical-align:middle}.tb-hotkeys[_ngcontent-%COMP%]   table[_ngcontent-%COMP%]{margin:auto;color:#333}.tb-content[_ngcontent-%COMP%]{display:table-cell;vertical-align:middle}.tb-hotkeys-keys[_ngcontent-%COMP%]{padding:5px;text-align:right}.tb-hotkeys-key[_ngcontent-%COMP%]{display:inline-block;color:#fff;background-color:#333;border:1px solid #333;border-radius:5px;text-align:center;margin-right:5px;box-shadow:inset 0 1px #666,0 1px #bbb;padding:5px 9px;font-size:1em}.tb-hotkeys-text[_ngcontent-%COMP%]{padding-left:10px;font-size:1em}.tb-hotkeys-close[_ngcontent-%COMP%]{position:fixed;top:20px;right:20px;font-size:2em;font-weight:bold;padding:5px 10px;border:1px solid #ddd;border-radius:5px;min-height:45px;min-width:45px;text-align:center}.tb-hotkeys-close[_ngcontent-%COMP%]:hover{background-color:#fff;cursor:pointer}@media all and (max-width: 500px){.tb-hotkeys[_ngcontent-%COMP%]{font-size:.8em}}@media all and (min-width: 750px){.tb-hotkeys[_ngcontent-%COMP%]{font-size:1.2em}}",
          ],
        }));
    },
    34651: (ee, R, t) => {
      "use strict";
      t.r(R), t.d(R, { CircularProgressDirective: () => C });
      var e = t(37716),
        n = t(4885),
        a = t(5609);
      class C {
        constructor(d, o, i) {
          (this.elementRef = d),
            (this.componentFactoryResolver = o),
            (this.viewContainerRef = i),
            (this.showProgressValue = !1),
            this.createCircularProgress();
        }
        set showProgress(d) {
          if (this.showProgressValue !== d) {
            const o = this.elementRef.nativeElement;
            if (
              ((this.showProgressValue = d),
              (this.spinnerRef.instance._elementRef.nativeElement.style.display =
                d ? "block" : "none"),
              d)
            ) {
              if (
                ((this.cssWidth = a(o).prop("style").width), !this.cssWidth)
              ) {
                a(o).css("width", "");
                const i = a(o).prop("offsetWidth");
                a(o).css("width", i + "px");
              }
              (this.children = a(o).children()),
                a(o).empty(),
                a(o).append(
                  a(this.spinnerRef.instance._elementRef.nativeElement)
                );
            } else
              a(o).empty(),
                a(o).append(this.children),
                this.cssWidth
                  ? a(o).css("width", this.cssWidth)
                  : a(o).css("width", "");
          }
        }
        createCircularProgress() {
          this.elementRef.nativeElement.style.position = "relative";
          const d = this.componentFactoryResolver.resolveComponentFactory(
            n.MatSpinner
          );
          (this.spinnerRef = this.viewContainerRef.createComponent(d, 0)),
            (this.spinnerRef.instance.mode = "indeterminate"),
            (this.spinnerRef.instance.diameter = 20);
          const o = this.spinnerRef.instance._elementRef.nativeElement;
          (o.style.margin = "auto"),
            (o.style.position = "absolute"),
            (o.style.left = "0"),
            (o.style.right = "0"),
            (o.style.top = "0"),
            (o.style.bottom = "0"),
            (o.style.display = "none");
        }
      }
      (C.ɵfac = function (d) {
        return new (d || C)(
          e.ɵɵdirectiveInject(e.ElementRef),
          e.ɵɵdirectiveInject(e.ComponentFactoryResolver),
          e.ɵɵdirectiveInject(e.ViewContainerRef)
        );
      }),
        (C.ɵdir = e.ɵɵdefineDirective({
          type: C,
          selectors: [["", "tb-circular-progress", ""]],
          inputs: { showProgress: ["tb-circular-progress", "showProgress"] },
        }));
    },
    26580: (ee, R, t) => {
      "use strict";
      t.r(R), t.d(R, { ColorInputComponent: () => v });
      var e = t(37716),
        n = t(75362),
        a = t(3679),
        C = t(39490),
        s = t(16797),
        d = t(86710),
        o = t(29790),
        i = t(98295),
        g = t(38583),
        D = t(88030),
        y = t(83166),
        m = t(76627),
        r = t(51095);
      function h(I, l) {
        if (
          (1 & I &&
            (e.ɵɵelementStart(0, "mat-icon"), e.ɵɵtext(1), e.ɵɵelementEnd()),
          2 & I)
        ) {
          const T = e.ɵɵnextContext();
          e.ɵɵadvance(1), e.ɵɵtextInterpolate(T.icon);
        }
      }
      function p(I, l) {
        if (
          (1 & I &&
            (e.ɵɵelementStart(0, "span"), e.ɵɵtext(1), e.ɵɵelementEnd()),
          2 & I)
        ) {
          const T = e.ɵɵnextContext();
          e.ɵɵadvance(1), e.ɵɵtextInterpolate(T.label);
        }
      }
      function _(I, l) {
        if (1 & I) {
          const T = e.ɵɵgetCurrentView();
          e.ɵɵelementStart(0, "button", 6),
            e.ɵɵlistener("click", function () {
              return e.ɵɵrestoreView(T), e.ɵɵnextContext().clear();
            }),
            e.ɵɵelementStart(1, "mat-icon", 7),
            e.ɵɵtext(2, "close"),
            e.ɵɵelementEnd(),
            e.ɵɵelementEnd();
        }
      }
      function E(I, l) {
        if (
          (1 & I &&
            (e.ɵɵelementStart(0, "mat-error"), e.ɵɵtext(1), e.ɵɵelementEnd()),
          2 & I)
        ) {
          const T = e.ɵɵnextContext();
          e.ɵɵadvance(1), e.ɵɵtextInterpolate1(" ", T.requiredText, " ");
        }
      }
      const c = function (I) {
        return { background: I };
      };
      class v extends n.I {
        constructor(l, T, O, w) {
          super(l),
            (this.store = l),
            (this.dialogs = T),
            (this.translate = O),
            (this.fb = w),
            (this.propagateChange = null);
        }
        get colorClearButton() {
          return this.colorClearButtonValue;
        }
        set colorClearButton(l) {
          const T = (0, C.coerceBooleanProperty)(l);
          this.colorClearButtonValue !== T && (this.colorClearButtonValue = T);
        }
        get openOnInput() {
          return this.openOnInputValue;
        }
        set openOnInput(l) {
          const T = (0, C.coerceBooleanProperty)(l);
          this.openOnInputValue !== T && (this.openOnInputValue = T);
        }
        get required() {
          return this.requiredValue;
        }
        set required(l) {
          const T = (0, C.coerceBooleanProperty)(l);
          this.requiredValue !== T &&
            ((this.requiredValue = T), this.updateValidators());
        }
        ngOnInit() {
          (this.colorFormGroup = this.fb.group({
            color: [null, this.required ? [a.Validators.required] : []],
          })),
            this.colorFormGroup.valueChanges.subscribe(() => {
              this.updateModel();
            });
        }
        updateValidators() {
          this.colorFormGroup &&
            (this.colorFormGroup
              .get("color")
              .setValidators(this.required ? [a.Validators.required] : []),
            this.colorFormGroup.get("color").updateValueAndValidity());
        }
        registerOnChange(l) {
          this.propagateChange = l;
        }
        registerOnTouched(l) {}
        setDisabledState(l) {
          (this.disabled = l),
            l
              ? this.colorFormGroup.disable({ emitEvent: !1 })
              : this.colorFormGroup.enable({ emitEvent: !1 });
        }
        writeValue(l) {
          (this.modelValue = l),
            this.colorFormGroup.patchValue(
              { color: this.modelValue },
              { emitEvent: !1 }
            );
        }
        updateModel() {
          const l = this.colorFormGroup.get("color").value;
          this.modelValue !== l &&
            ((this.modelValue = l), this.propagateChange(this.modelValue));
        }
        showColorPicker() {
          this.dialogs
            .colorPicker(this.colorFormGroup.get("color").value)
            .subscribe((l) => {
              l &&
                this.colorFormGroup.patchValue({ color: l }, { emitEvent: !0 });
            });
        }
        clear() {
          this.colorFormGroup.get("color").patchValue(null, { emitEvent: !0 });
        }
      }
      (v.ɵfac = function (l) {
        return new (l || v)(
          e.ɵɵdirectiveInject(d.Store),
          e.ɵɵdirectiveInject(s.x),
          e.ɵɵdirectiveInject(o.TranslateService),
          e.ɵɵdirectiveInject(a.FormBuilder)
        );
      }),
        (v.ɵcmp = e.ɵɵdefineComponent({
          type: v,
          selectors: [["tb-color-input"]],
          inputs: {
            icon: "icon",
            label: "label",
            requiredText: "requiredText",
            colorClearButton: "colorClearButton",
            openOnInput: "openOnInput",
            required: "required",
            disabled: "disabled",
          },
          features: [
            e.ɵɵProvidersFeature([
              {
                provide: a.NG_VALUE_ACCESSOR,
                useExisting: (0, e.forwardRef)(() => v),
                multi: !0,
              },
            ]),
            e.ɵɵInheritDefinitionFeature,
          ],
          decls: 9,
          vars: 9,
          consts: [
            [3, "formGroup"],
            [4, "ngIf"],
            [
              "matPrefix",
              "",
              1,
              "tb-color-preview",
              2,
              "margin-right",
              "5px",
              3,
              "click",
            ],
            [1, "tb-color-result", 3, "ngStyle"],
            [
              "matInput",
              "",
              "formControlName",
              "color",
              3,
              "required",
              "keydown",
              "click",
            ],
            [
              "type",
              "button",
              "matSuffix",
              "",
              "mat-button",
              "",
              "mat-icon-button",
              "",
              "aria-label",
              "Clear",
              3,
              "click",
              4,
              "ngIf",
            ],
            [
              "type",
              "button",
              "matSuffix",
              "",
              "mat-button",
              "",
              "mat-icon-button",
              "",
              "aria-label",
              "Clear",
              3,
              "click",
            ],
            [1, "material-icons"],
          ],
          template: function (l, T) {
            1 & l &&
              (e.ɵɵelementStart(0, "mat-form-field", 0),
              e.ɵɵelementStart(1, "mat-label"),
              e.ɵɵtemplate(2, h, 2, 1, "mat-icon", 1),
              e.ɵɵtemplate(3, p, 2, 1, "span", 1),
              e.ɵɵelementEnd(),
              e.ɵɵelementStart(4, "div", 2),
              e.ɵɵlistener("click", function () {
                return !T.disabled && T.showColorPicker();
              }),
              e.ɵɵelement(5, "div", 3),
              e.ɵɵelementEnd(),
              e.ɵɵelementStart(6, "input", 4),
              e.ɵɵlistener("keydown", function (w) {
                return w.preventDefault();
              })("click", function () {
                return T.openOnInput && T.showColorPicker();
              }),
              e.ɵɵelementEnd(),
              e.ɵɵtemplate(7, _, 3, 0, "button", 5),
              e.ɵɵtemplate(8, E, 2, 1, "mat-error", 1),
              e.ɵɵelementEnd()),
              2 & l &&
                (e.ɵɵproperty("formGroup", T.colorFormGroup),
                e.ɵɵadvance(2),
                e.ɵɵproperty("ngIf", T.icon),
                e.ɵɵadvance(1),
                e.ɵɵproperty("ngIf", T.label),
                e.ɵɵadvance(2),
                e.ɵɵproperty(
                  "ngStyle",
                  e.ɵɵpureFunction1(7, c, T.colorFormGroup.get("color").value)
                ),
                e.ɵɵadvance(1),
                e.ɵɵproperty("required", T.required),
                e.ɵɵadvance(1),
                e.ɵɵproperty("ngIf", T.colorClearButton && !T.disabled),
                e.ɵɵadvance(1),
                e.ɵɵproperty(
                  "ngIf",
                  T.colorFormGroup.get("color").hasError("required")
                ));
          },
          directives: [
            i.MatFormField,
            a.NgControlStatusGroup,
            a.FormGroupDirective,
            i.MatLabel,
            g.NgIf,
            i.MatPrefix,
            g.NgStyle,
            D.DefaultStyleDirective,
            y.MatInput,
            a.DefaultValueAccessor,
            a.NgControlStatus,
            a.FormControlName,
            a.RequiredValidator,
            m.MatIcon,
            r.MatButton,
            i.MatSuffix,
            i.MatError,
          ],
          styles: [
            '@charset "UTF-8";[_nghost-%COMP%]   .mat-form-field[_ngcontent-%COMP%]{width:100%}[_nghost-%COMP%]     .mat-form-field-infix{width:150px}',
          ],
        }));
    },
    96155: (ee, R, t) => {
      "use strict";
      t.r(R), t.d(R, { ContactComponent: () => E });
      var e = t(37716),
        n = t(44235),
        a = t(3679),
        C = t(98295),
        s = t(29790),
        d = t(67441),
        o = t(38583),
        i = t(35618),
        g = t(83166),
        D = t(68251),
        y = t(72458);
      function m(c, v) {
        if (
          (1 & c &&
            (e.ɵɵelementStart(0, "mat-option", 14),
            e.ɵɵtext(1),
            e.ɵɵelementEnd()),
          2 & c)
        ) {
          const I = v.$implicit;
          e.ɵɵproperty("value", I),
            e.ɵɵadvance(1),
            e.ɵɵtextInterpolate1(" ", I, " ");
        }
      }
      function r(c, v) {
        1 & c &&
          (e.ɵɵelementStart(0, "mat-error"),
          e.ɵɵtext(1),
          e.ɵɵpipe(2, "translate"),
          e.ɵɵelementEnd()),
          2 & c &&
            (e.ɵɵadvance(1),
            e.ɵɵtextInterpolate1(
              " ",
              e.ɵɵpipeBind1(2, 1, "contact.city-max-length"),
              " "
            ));
      }
      function h(c, v) {
        1 & c &&
          (e.ɵɵelementStart(0, "mat-error"),
          e.ɵɵtext(1),
          e.ɵɵpipe(2, "translate"),
          e.ɵɵelementEnd()),
          2 & c &&
            (e.ɵɵadvance(1),
            e.ɵɵtextInterpolate1(
              " ",
              e.ɵɵpipeBind1(2, 1, "contact.state-max-length"),
              " "
            ));
      }
      function p(c, v) {
        1 & c &&
          (e.ɵɵelementStart(0, "mat-error"),
          e.ɵɵtext(1),
          e.ɵɵpipe(2, "translate"),
          e.ɵɵelementEnd()),
          2 & c &&
            (e.ɵɵadvance(1),
            e.ɵɵtextInterpolate1(
              " ",
              e.ɵɵpipeBind1(2, 1, "contact.postal-code-invalid"),
              " "
            ));
      }
      function _(c, v) {
        1 & c &&
          (e.ɵɵelementStart(0, "mat-error"),
          e.ɵɵtext(1),
          e.ɵɵpipe(2, "translate"),
          e.ɵɵelementEnd()),
          2 & c &&
            (e.ɵɵadvance(1),
            e.ɵɵtextInterpolate1(
              " ",
              e.ɵɵpipeBind1(2, 1, "user.invalid-email-format"),
              " "
            ));
      }
      class E {
        constructor() {
          this.countries = n.o;
        }
      }
      (E.ɵfac = function (v) {
        return new (v || E)();
      }),
        (E.ɵcmp = e.ɵɵdefineComponent({
          type: E,
          selectors: [["tb-contact"]],
          inputs: { parentForm: "parentForm", isEdit: "isEdit" },
          decls: 37,
          vars: 11,
          consts: [
            [3, "formGroup"],
            [1, "mat-block"],
            ["translate", ""],
            ["formControlName", "country"],
            [3, "value", 4, "ngFor", "ngForOf"],
            ["fxLayout.gt-sm", "row", "fxLayoutGap.gt-sm", "10px"],
            ["matInput", "", "formControlName", "city"],
            [4, "ngIf"],
            ["matInput", "", "formControlName", "state"],
            ["matInput", "", "formControlName", "zip"],
            ["matInput", "", "formControlName", "address"],
            ["matInput", "", "formControlName", "address2"],
            [
              "formControlName",
              "phone",
              3,
              "required",
              "label",
              "enableFlagsSelect",
            ],
            ["matInput", "", "formControlName", "email"],
            [3, "value"],
          ],
          template: function (v, I) {
            1 & v &&
              (e.ɵɵelementStart(0, "section", 0),
              e.ɵɵelementStart(1, "mat-form-field", 1),
              e.ɵɵelementStart(2, "mat-label", 2),
              e.ɵɵtext(3, "contact.country"),
              e.ɵɵelementEnd(),
              e.ɵɵelementStart(4, "mat-select", 3),
              e.ɵɵtemplate(5, m, 2, 2, "mat-option", 4),
              e.ɵɵelementEnd(),
              e.ɵɵelementEnd(),
              e.ɵɵelementStart(6, "div", 5),
              e.ɵɵelementStart(7, "mat-form-field", 1),
              e.ɵɵelementStart(8, "mat-label", 2),
              e.ɵɵtext(9, "contact.city"),
              e.ɵɵelementEnd(),
              e.ɵɵelement(10, "input", 6),
              e.ɵɵtemplate(11, r, 3, 3, "mat-error", 7),
              e.ɵɵelementEnd(),
              e.ɵɵelementStart(12, "mat-form-field", 1),
              e.ɵɵelementStart(13, "mat-label", 2),
              e.ɵɵtext(14, "contact.state"),
              e.ɵɵelementEnd(),
              e.ɵɵelement(15, "input", 8),
              e.ɵɵtemplate(16, h, 3, 3, "mat-error", 7),
              e.ɵɵelementEnd(),
              e.ɵɵelementStart(17, "mat-form-field", 1),
              e.ɵɵelementStart(18, "mat-label", 2),
              e.ɵɵtext(19, "contact.postal-code"),
              e.ɵɵelementEnd(),
              e.ɵɵelement(20, "input", 9),
              e.ɵɵtemplate(21, p, 3, 3, "mat-error", 7),
              e.ɵɵelementEnd(),
              e.ɵɵelementEnd(),
              e.ɵɵelementStart(22, "mat-form-field", 1),
              e.ɵɵelementStart(23, "mat-label", 2),
              e.ɵɵtext(24, "contact.address"),
              e.ɵɵelementEnd(),
              e.ɵɵelement(25, "input", 10),
              e.ɵɵelementEnd(),
              e.ɵɵelementStart(26, "mat-form-field", 1),
              e.ɵɵelementStart(27, "mat-label", 2),
              e.ɵɵtext(28, "contact.address2"),
              e.ɵɵelementEnd(),
              e.ɵɵelement(29, "input", 11),
              e.ɵɵelementEnd(),
              e.ɵɵelement(30, "tb-phone-input", 12),
              e.ɵɵpipe(31, "translate"),
              e.ɵɵelementStart(32, "mat-form-field", 1),
              e.ɵɵelementStart(33, "mat-label", 2),
              e.ɵɵtext(34, "contact.email"),
              e.ɵɵelementEnd(),
              e.ɵɵelement(35, "input", 13),
              e.ɵɵtemplate(36, _, 3, 3, "mat-error", 7),
              e.ɵɵelementEnd(),
              e.ɵɵelementEnd()),
              2 & v &&
                (e.ɵɵproperty("formGroup", I.parentForm),
                e.ɵɵadvance(5),
                e.ɵɵproperty("ngForOf", I.countries),
                e.ɵɵadvance(6),
                e.ɵɵproperty(
                  "ngIf",
                  I.parentForm.get("city").hasError("maxlength")
                ),
                e.ɵɵadvance(5),
                e.ɵɵproperty(
                  "ngIf",
                  I.parentForm.get("state").hasError("maxlength")
                ),
                e.ɵɵadvance(5),
                e.ɵɵproperty(
                  "ngIf",
                  I.parentForm.get("zip").hasError("pattern")
                ),
                e.ɵɵadvance(9),
                e.ɵɵpropertyInterpolate(
                  "label",
                  e.ɵɵpipeBind1(31, 9, "contact.phone")
                ),
                e.ɵɵproperty("required", !1)("enableFlagsSelect", !0),
                e.ɵɵadvance(6),
                e.ɵɵproperty(
                  "ngIf",
                  I.parentForm.get("email").hasError("email")
                ));
          },
          directives: [
            a.NgControlStatusGroup,
            a.FormGroupDirective,
            C.MatFormField,
            C.MatLabel,
            s.TranslateDirective,
            d.MatSelect,
            a.NgControlStatus,
            a.FormControlName,
            o.NgForOf,
            i.DefaultLayoutDirective,
            i.DefaultLayoutGapDirective,
            g.MatInput,
            a.DefaultValueAccessor,
            o.NgIf,
            D.T,
            a.RequiredValidator,
            y.MatOption,
            C.MatError,
          ],
          pipes: [s.TranslatePipe],
          encapsulation: 2,
        }));
    },
    71529: (ee, R, t) => {
      "use strict";
      t.d(R, { j: () => O });
      var e = t(37716),
        n = t(3679),
        a = t(72145),
        C = t(39490),
        s = t(1361),
        d = t(25280),
        o = t(30290),
        i = t(30013),
        g = t(29790),
        D = t(86710),
        y = t(46743),
        m = t(35618),
        r = t(38583),
        h = t(88030),
        p = t(11436),
        _ = t(51095),
        E = t(76627);
      const c = ["cssEditor"];
      function v(w, b) {
        if (1 & w) {
          const S = e.ɵɵgetCurrentView();
          e.ɵɵelementStart(0, "button", 12),
            e.ɵɵlistener("click", function () {
              return e.ɵɵrestoreView(S), e.ɵɵnextContext().beautifyCss();
            }),
            e.ɵɵtext(1),
            e.ɵɵpipe(2, "translate"),
            e.ɵɵelementEnd();
        }
        2 & w &&
          (e.ɵɵadvance(1),
          e.ɵɵtextInterpolate1(" ", e.ɵɵpipeBind1(2, 1, "js-func.tidy"), " "));
      }
      const I = function (w, b) {
          return { "tb-disabled": w, "fill-height": b };
        },
        l = function (w, b) {
          return { "tb-error": w, "tb-required": b };
        },
        T = function (w) {
          return { "fill-height": w };
        };
      class O {
        constructor(b, S, u, f, M, L) {
          (this.elementRef = b),
            (this.utils = S),
            (this.translate = u),
            (this.store = f),
            (this.raf = M),
            (this.cd = L),
            (this.ignoreChange = !1),
            (this.fullscreen = !1),
            (this.hasErrors = !1),
            (this.propagateChange = null);
        }
        get required() {
          return this.requiredValue;
        }
        set required(b) {
          this.requiredValue = (0, C.coerceBooleanProperty)(b);
        }
        ngOnInit() {
          const b = this.cssEditorElmRef.nativeElement;
          let S = {
            mode: "ace/mode/css",
            showGutter: !0,
            showPrintMargin: !0,
            readOnly: this.disabled,
          };
          (S = Object.assign(Object.assign({}, S), {
            enableSnippets: !0,
            enableBasicAutocompletion: !0,
            enableLiveAutocompletion: !0,
          })),
            (0, a.Ln)().subscribe((f) => {
              (this.cssEditor = f.edit(b, S)),
                this.cssEditor.session.setUseWrapMode(!0),
                this.cssEditor.setValue(
                  this.modelValue ? this.modelValue : "",
                  -1
                ),
                this.cssEditor.setReadOnly(this.disabled),
                this.cssEditor.on("change", () => {
                  this.ignoreChange || this.updateView();
                }),
                this.cssEditor.session.on("changeAnnotation", () => {
                  const L =
                    this.cssEditor.session
                      .getAnnotations()
                      .filter((k) => "error" === k.type).length > 0;
                  this.hasErrors !== L &&
                    ((this.hasErrors = L),
                    this.propagateChange(this.modelValue),
                    this.cd.markForCheck());
                }),
                (this.editorResize$ = new o.do(() => {
                  this.onAceEditorResize();
                })),
                this.editorResize$.observe(b);
            });
        }
        ngOnDestroy() {
          this.editorResize$ && this.editorResize$.disconnect(),
            this.cssEditor && this.cssEditor.destroy();
        }
        onAceEditorResize() {
          this.editorsResizeCaf &&
            (this.editorsResizeCaf(), (this.editorsResizeCaf = null)),
            (this.editorsResizeCaf = this.raf.raf(() => {
              this.cssEditor.resize(), this.cssEditor.renderer.updateFull();
            }));
        }
        registerOnChange(b) {
          this.propagateChange = b;
        }
        registerOnTouched(b) {}
        setDisabledState(b) {
          (this.disabled = b),
            this.cssEditor && this.cssEditor.setReadOnly(this.disabled);
        }
        validate(b) {
          return this.hasErrors ? { css: { valid: !1 } } : null;
        }
        beautifyCss() {
          (0, i.RF)(this.modelValue, { indent_size: 4 }).subscribe((b) => {
            this.modelValue !== b &&
              (this.cssEditor.setValue(b || "", -1), this.updateView());
          });
        }
        writeValue(b) {
          (this.modelValue = b),
            this.cssEditor &&
              ((this.ignoreChange = !0),
              this.cssEditor.setValue(
                this.modelValue ? this.modelValue : "",
                -1
              ),
              (this.ignoreChange = !1));
        }
        updateView() {
          const b = this.cssEditor.getValue();
          this.modelValue !== b &&
            ((this.modelValue = b),
            this.propagateChange(this.modelValue),
            this.cd.markForCheck());
        }
      }
      (O.ɵfac = function (b) {
        return new (b || O)(
          e.ɵɵdirectiveInject(e.ElementRef),
          e.ɵɵdirectiveInject(s.F),
          e.ɵɵdirectiveInject(g.TranslateService),
          e.ɵɵdirectiveInject(D.Store),
          e.ɵɵdirectiveInject(d.i),
          e.ɵɵdirectiveInject(e.ChangeDetectorRef)
        );
      }),
        (O.ɵcmp = e.ɵɵdefineComponent({
          type: O,
          selectors: [["tb-css"]],
          viewQuery: function (b, S) {
            if ((1 & b && e.ɵɵviewQuery(c, 7), 2 & b)) {
              let u;
              e.ɵɵqueryRefresh((u = e.ɵɵloadQuery())) &&
                (S.cssEditorElmRef = u.first);
            }
          },
          inputs: {
            label: "label",
            disabled: "disabled",
            fillHeight: "fillHeight",
            required: "required",
          },
          features: [
            e.ɵɵProvidersFeature([
              {
                provide: n.NG_VALUE_ACCESSOR,
                useExisting: (0, e.forwardRef)(() => O),
                multi: !0,
              },
              {
                provide: n.NG_VALIDATORS,
                useExisting: (0, e.forwardRef)(() => O),
                multi: !0,
              },
            ]),
          ],
          decls: 15,
          vars: 18,
          consts: [
            [
              "tb-fullscreen",
              "",
              "fxLayout",
              "column",
              1,
              "tb-css",
              2,
              "background",
              "#fff",
              3,
              "ngClass",
              "fullscreen",
            ],
            [
              "fxLayout",
              "row",
              "fxLayoutAlign",
              "start center",
              1,
              "tb-css-toolbar",
              2,
              "height",
              "40px",
            ],
            [1, "tb-title", "no-padding", 3, "ngClass"],
            ["fxFlex", ""],
            [
              "type",
              "button",
              "mat-button",
              "",
              "class",
              "tidy",
              3,
              "click",
              4,
              "ngIf",
            ],
            [2, "width", "initial"],
            [
              "matTooltipPosition",
              "above",
              2,
              "border-radius",
              "50%",
              3,
              "matTooltip",
              "click",
            ],
            [
              "type",
              "button",
              "mat-button",
              "",
              "mat-icon-button",
              "",
              1,
              "tb-mat-32",
            ],
            [1, "material-icons"],
            [
              "id",
              "tb-css-panel",
              "fxLayout",
              "column",
              1,
              "tb-css-content-panel",
            ],
            ["id", "tb-css-input", 3, "ngClass"],
            ["cssEditor", ""],
            ["type", "button", "mat-button", "", 1, "tidy", 3, "click"],
          ],
          template: function (b, S) {
            1 & b &&
              (e.ɵɵelementStart(0, "div", 0),
              e.ɵɵelementStart(1, "div", 1),
              e.ɵɵelementStart(2, "label", 2),
              e.ɵɵtext(3),
              e.ɵɵelementEnd(),
              e.ɵɵelement(4, "span", 3),
              e.ɵɵtemplate(5, v, 3, 3, "button", 4),
              e.ɵɵelementStart(6, "fieldset", 5),
              e.ɵɵelementStart(7, "div", 6),
              e.ɵɵlistener("click", function () {
                return (S.fullscreen = !S.fullscreen);
              }),
              e.ɵɵpipe(8, "translate"),
              e.ɵɵelementStart(9, "button", 7),
              e.ɵɵelementStart(10, "mat-icon", 8),
              e.ɵɵtext(11),
              e.ɵɵelementEnd(),
              e.ɵɵelementEnd(),
              e.ɵɵelementEnd(),
              e.ɵɵelementEnd(),
              e.ɵɵelementEnd(),
              e.ɵɵelementStart(12, "div", 9),
              e.ɵɵelement(13, "div", 10, 11),
              e.ɵɵelementEnd(),
              e.ɵɵelementEnd()),
              2 & b &&
                (e.ɵɵproperty(
                  "ngClass",
                  e.ɵɵpureFunction2(10, I, S.disabled, S.fillHeight)
                )("fullscreen", S.fullscreen),
                e.ɵɵadvance(2),
                e.ɵɵproperty(
                  "ngClass",
                  e.ɵɵpureFunction2(
                    13,
                    l,
                    !S.disabled &&
                      (S.hasErrors || (S.required && !S.modelValue)),
                    !S.disabled && S.required
                  )
                ),
                e.ɵɵadvance(1),
                e.ɵɵtextInterpolate(S.label),
                e.ɵɵadvance(2),
                e.ɵɵproperty("ngIf", !S.disabled),
                e.ɵɵadvance(2),
                e.ɵɵpropertyInterpolate(
                  "matTooltip",
                  e.ɵɵpipeBind1(
                    8,
                    8,
                    S.fullscreen ? "fullscreen.exit" : "fullscreen.expand"
                  )
                ),
                e.ɵɵadvance(4),
                e.ɵɵtextInterpolate(
                  S.fullscreen ? "fullscreen_exit" : "fullscreen"
                ),
                e.ɵɵadvance(2),
                e.ɵɵproperty(
                  "ngClass",
                  e.ɵɵpureFunction1(16, T, S.fillHeight)
                ));
          },
          directives: [
            y.FullscreenDirective,
            m.DefaultLayoutDirective,
            r.NgClass,
            h.DefaultClassDirective,
            m.DefaultLayoutAlignDirective,
            m.DefaultFlexDirective,
            r.NgIf,
            p.MatTooltip,
            _.MatButton,
            E.MatIcon,
          ],
          pipes: [g.TranslatePipe],
          styles: [
            '@charset "UTF-8";.tb-css{position:relative}.tb-css.tb-disabled{color:#00000061}.tb-css.fill-height{height:100%}.tb-css .tb-css-content-panel{height:calc(100% - 40px);border:1px solid #c0c0c0}.tb-css .tb-css-content-panel #tb-css-input{width:100%;min-width:200px;height:100%}.tb-css .tb-css-content-panel #tb-css-input:not(.fill-height){min-height:200px}.tb-css .tb-css-toolbar>*:not(:last-child){margin-right:4px}.tb-css .tb-css-toolbar button.mat-button,.tb-css .tb-css-toolbar button.mat-icon-button,.tb-css .tb-css-toolbar button.mat-icon-button.tb-mat-32{background:rgba(220,220,220,.35);align-items:center;vertical-align:middle;min-width:32px;min-height:15px;padding:4px;font-size:.8rem;line-height:15px}.tb-css .tb-css-toolbar button.mat-button:not(.tb-help-popup-button),.tb-css .tb-css-toolbar button.mat-icon-button:not(.tb-help-popup-button),.tb-css .tb-css-toolbar button.mat-icon-button.tb-mat-32:not(.tb-help-popup-button){color:#7b7b7b}.tb-css .tb-css-toolbar .tb-help-popup-button-loading{background:#f3f3f3}\n',
          ],
          encapsulation: 2,
        }));
    },
    24997: (ee, R, t) => {
      "use strict";
      t.r(R), t.d(R, { DashboardAutocompleteComponent: () => F });
      var e = t(37716),
        n = t(3679),
        a = t(25917),
        C = t(39774),
        s = t(23360),
        d = t(54395),
        o = t(68307),
        i = t(88002),
        g = t(87519),
        D = t(43190),
        y = t(78345),
        m = t(5304),
        r = t(58187),
        h = t(50377),
        p = t(54787),
        _ = t(26311),
        E = t(39490),
        c = t(86710),
        v = t(29790),
        I = t(98295),
        l = t(83166),
        T = t(21554),
        O = t(38583),
        w = t(51095),
        b = t(76627),
        S = t(72458),
        u = t(53883);
      const f = ["dashboardInput"];
      function M(V, P) {
        if (1 & V) {
          const A = e.ɵɵgetCurrentView();
          e.ɵɵelementStart(0, "button", 8),
            e.ɵɵlistener("click", function () {
              return e.ɵɵrestoreView(A), e.ɵɵnextContext().clear();
            }),
            e.ɵɵelementStart(1, "mat-icon", 9),
            e.ɵɵtext(2, "close"),
            e.ɵɵelementEnd(),
            e.ɵɵelementEnd();
        }
      }
      function L(V, P) {
        if (
          (1 & V &&
            (e.ɵɵelementStart(0, "mat-option", 10),
            e.ɵɵelement(1, "span", 11),
            e.ɵɵpipe(2, "highlight"),
            e.ɵɵelementEnd()),
          2 & V)
        ) {
          const A = P.$implicit,
            U = e.ɵɵnextContext();
          e.ɵɵproperty("value", A),
            e.ɵɵadvance(1),
            e.ɵɵproperty(
              "innerHTML",
              e.ɵɵpipeBind2(2, 2, A.title, U.searchText),
              e.ɵɵsanitizeHtml
            );
        }
      }
      const k = function (V) {
        return { entity: V };
      };
      function N(V, P) {
        if (
          (1 & V &&
            (e.ɵɵelementStart(0, "mat-option", 10),
            e.ɵɵelementStart(1, "span"),
            e.ɵɵtext(2),
            e.ɵɵpipe(3, "async"),
            e.ɵɵelementEnd(),
            e.ɵɵelementEnd()),
          2 & V)
        ) {
          const A = e.ɵɵnextContext();
          e.ɵɵproperty("value", null),
            e.ɵɵadvance(2),
            e.ɵɵtextInterpolate1(
              " ",
              e.ɵɵpipeBind1(
                3,
                2,
                A.translate.get(
                  "dashboard.no-dashboards-matching",
                  e.ɵɵpureFunction1(4, k, A.searchText)
                )
              ),
              " "
            );
        }
      }
      const B = [[["", "tb-error", ""]], [["", "tb-hint", ""]]];
      class F {
        constructor(P, A, U, G) {
          (this.store = P),
            (this.translate = A),
            (this.dashboardService = U),
            (this.fb = G),
            (this.dirty = !1),
            (this.useIdValue = !0),
            (this.selectFirstDashboard = !1),
            (this.floatLabel = "auto"),
            (this.searchText = ""),
            (this.propagateChange = (Z) => {}),
            (this.selectDashboardFormGroup = this.fb.group({
              dashboard: [null],
            }));
        }
        get required() {
          return this.requiredValue;
        }
        set required(P) {
          this.requiredValue = (0, E.coerceBooleanProperty)(P);
        }
        registerOnChange(P) {
          this.propagateChange = P;
        }
        registerOnTouched(P) {}
        ngOnInit() {
          this.filteredDashboards = this.selectDashboardFormGroup
            .get("dashboard")
            .valueChanges.pipe(
              (0, d.b)(150),
              (0, o.b)((P) => {
                let A;
                (A =
                  "string" != typeof P && P
                    ? this.useIdValue
                      ? P.id.id
                      : P
                    : null),
                  this.updateView(A);
              }),
              (0, i.U)((P) => (P ? ("string" == typeof P ? P : P.name) : "")),
              (0, g.x)(),
              (0, D.w)((P) => this.fetchDashboards(P)),
              (0, y.B)()
            );
        }
        ngAfterViewInit() {}
        selectFirstDashboardIfNeeded() {
          this.selectFirstDashboard &&
            !this.modelValue &&
            this.getDashboards(new C.H_(1)).subscribe((P) => {
              if (P.data.length) {
                const A = P.data[0];
                (this.modelValue = this.useIdValue ? A.id.id : A),
                  this.selectDashboardFormGroup
                    .get("dashboard")
                    .patchValue(A, { emitEvent: !1 }),
                  this.propagateChange(this.modelValue);
              }
            });
        }
        setDisabledState(P) {
          (this.disabled = P),
            this.disabled
              ? this.selectDashboardFormGroup.disable({ emitEvent: !1 })
              : this.selectDashboardFormGroup.enable({ emitEvent: !1 });
        }
        writeValue(P) {
          (this.searchText = ""),
            null != P
              ? "string" == typeof P
                ? this.dashboardService.getDashboardInfo(P).subscribe((A) => {
                    (this.modelValue = this.useIdValue ? A.id.id : A),
                      this.selectDashboardFormGroup
                        .get("dashboard")
                        .patchValue(A, { emitEvent: !1 });
                  })
                : ((this.modelValue = this.useIdValue ? P.id.id : P),
                  this.selectDashboardFormGroup
                    .get("dashboard")
                    .patchValue(P, { emitEvent: !1 }))
              : ((this.modelValue = null),
                this.selectDashboardFormGroup
                  .get("dashboard")
                  .patchValue("", { emitEvent: !1 }),
                this.selectFirstDashboardIfNeeded()),
            (this.dirty = !0);
        }
        updateView(P) {
          this.modelValue !== P &&
            ((this.modelValue = P), this.propagateChange(this.modelValue));
        }
        displayDashboardFn(P) {
          return P ? P.title : void 0;
        }
        fetchDashboards(P) {
          this.searchText = P;
          const A = new C.H_(10, 0, P, {
            property: "title",
            direction: s.N.ASC,
          });
          return this.getDashboards(A).pipe(
            (0, m.K)(() => (0, a.of)((0, r.n)())),
            (0, i.U)((U) => U.data)
          );
        }
        getDashboards(P) {
          let A;
          const U = (0, p.fP)(this.store);
          return (
            (A =
              "customer" === this.dashboardsScope ||
              U.authority === _.W.CUSTOMER_USER
                ? this.customerId
                  ? this.dashboardService.getCustomerDashboards(
                      this.customerId,
                      P,
                      { ignoreLoading: !0 }
                    )
                  : (0, a.of)((0, r.n)())
                : U.authority === _.W.SYS_ADMIN
                ? this.tenantId
                  ? this.dashboardService.getTenantDashboardsByTenantId(
                      this.tenantId,
                      P,
                      { ignoreLoading: !0 }
                    )
                  : (0, a.of)((0, r.n)())
                : this.dashboardService.getTenantDashboards(P, {
                    ignoreLoading: !0,
                  })),
            A
          );
        }
        onFocus() {
          this.dirty &&
            (this.selectDashboardFormGroup
              .get("dashboard")
              .updateValueAndValidity({ onlySelf: !0 }),
            (this.dirty = !1));
        }
        clear() {
          this.selectDashboardFormGroup.get("dashboard").patchValue(""),
            setTimeout(() => {
              this.dashboardInput.nativeElement.blur(),
                this.dashboardInput.nativeElement.focus();
            }, 0);
        }
      }
      (F.ɵfac = function (P) {
        return new (P || F)(
          e.ɵɵdirectiveInject(c.Store),
          e.ɵɵdirectiveInject(v.TranslateService),
          e.ɵɵdirectiveInject(h.s),
          e.ɵɵdirectiveInject(n.FormBuilder)
        );
      }),
        (F.ɵcmp = e.ɵɵdefineComponent({
          type: F,
          selectors: [["tb-dashboard-autocomplete"]],
          viewQuery: function (P, A) {
            if ((1 & P && e.ɵɵviewQuery(f, 7), 2 & P)) {
              let U;
              e.ɵɵqueryRefresh((U = e.ɵɵloadQuery())) &&
                (A.dashboardInput = U.first);
            }
          },
          inputs: {
            useIdValue: "useIdValue",
            selectFirstDashboard: "selectFirstDashboard",
            placeholder: "placeholder",
            dashboardsScope: "dashboardsScope",
            tenantId: "tenantId",
            customerId: "customerId",
            floatLabel: "floatLabel",
            required: "required",
            disabled: "disabled",
          },
          features: [
            e.ɵɵProvidersFeature([
              {
                provide: n.NG_VALUE_ACCESSOR,
                useExisting: (0, e.forwardRef)(() => F),
                multi: !0,
              },
            ]),
          ],
          ngContentSelectors: ["[tb-error]", "[tb-hint]"],
          decls: 15,
          vars: 15,
          consts: [
            [1, "mat-block", 3, "formGroup", "floatLabel"],
            [
              "matInput",
              "",
              "type",
              "text",
              "formControlName",
              "dashboard",
              3,
              "placeholder",
              "required",
              "matAutocomplete",
              "focusin",
            ],
            ["dashboardInput", ""],
            [
              "type",
              "button",
              "matSuffix",
              "",
              "mat-button",
              "",
              "mat-icon-button",
              "",
              "aria-label",
              "Clear",
              3,
              "click",
              4,
              "ngIf",
            ],
            [1, "tb-autocomplete", 3, "displayWith"],
            ["dashboardAutocomplete", "matAutocomplete"],
            [3, "value", 4, "ngFor", "ngForOf"],
            [3, "value", 4, "ngIf"],
            [
              "type",
              "button",
              "matSuffix",
              "",
              "mat-button",
              "",
              "mat-icon-button",
              "",
              "aria-label",
              "Clear",
              3,
              "click",
            ],
            [1, "material-icons"],
            [3, "value"],
            [3, "innerHTML"],
          ],
          template: function (P, A) {
            if (
              (1 & P &&
                (e.ɵɵprojectionDef(B),
                e.ɵɵelementStart(0, "mat-form-field", 0),
                e.ɵɵelementStart(1, "input", 1, 2),
                e.ɵɵlistener("focusin", function () {
                  return A.onFocus();
                }),
                e.ɵɵpipe(3, "translate"),
                e.ɵɵelementEnd(),
                e.ɵɵtemplate(4, M, 3, 0, "button", 3),
                e.ɵɵelementStart(5, "mat-autocomplete", 4, 5),
                e.ɵɵtemplate(7, L, 3, 5, "mat-option", 6),
                e.ɵɵpipe(8, "async"),
                e.ɵɵtemplate(9, N, 4, 6, "mat-option", 7),
                e.ɵɵpipe(10, "async"),
                e.ɵɵelementEnd(),
                e.ɵɵelementStart(11, "mat-error"),
                e.ɵɵprojection(12),
                e.ɵɵelementEnd(),
                e.ɵɵelementStart(13, "mat-hint"),
                e.ɵɵprojection(14, 1),
                e.ɵɵelementEnd(),
                e.ɵɵelementEnd()),
              2 & P)
            ) {
              const U = e.ɵɵreference(6);
              let G;
              e.ɵɵproperty("formGroup", A.selectDashboardFormGroup)(
                "floatLabel",
                A.floatLabel
              ),
                e.ɵɵadvance(1),
                e.ɵɵpropertyInterpolate(
                  "placeholder",
                  A.placeholder || e.ɵɵpipeBind1(3, 9, "dashboard.dashboard")
                ),
                e.ɵɵproperty("required", A.required)("matAutocomplete", U),
                e.ɵɵadvance(3),
                e.ɵɵproperty(
                  "ngIf",
                  A.selectDashboardFormGroup.get("dashboard").value &&
                    !A.disabled
                ),
                e.ɵɵadvance(1),
                e.ɵɵproperty("displayWith", A.displayDashboardFn),
                e.ɵɵadvance(2),
                e.ɵɵproperty(
                  "ngForOf",
                  e.ɵɵpipeBind1(8, 11, A.filteredDashboards)
                ),
                e.ɵɵadvance(2),
                e.ɵɵproperty(
                  "ngIf",
                  !(
                    null != (G = e.ɵɵpipeBind1(10, 13, A.filteredDashboards)) &&
                    G.length
                  )
                );
            }
          },
          directives: [
            I.MatFormField,
            n.NgControlStatusGroup,
            n.FormGroupDirective,
            l.MatInput,
            n.DefaultValueAccessor,
            T.MatAutocompleteTrigger,
            n.NgControlStatus,
            n.FormControlName,
            n.RequiredValidator,
            O.NgIf,
            T.MatAutocomplete,
            O.NgForOf,
            I.MatError,
            I.MatHint,
            w.MatButton,
            I.MatSuffix,
            b.MatIcon,
            S.MatOption,
          ],
          pipes: [v.TranslatePipe, O.AsyncPipe, u.HighlightPipe],
          encapsulation: 2,
        }));
    },
    11007: (ee, R, t) => {
      "use strict";
      t.r(R),
        t.d(R, {
          DASHBOARD_SELECT_PANEL_DATA: () => D,
          DashboardSelectPanelComponent: () => y,
        });
      var e = t(37716),
        n = t(35618),
        a = t(98295),
        C = t(67441),
        s = t(3679),
        d = t(38583),
        o = t(72458),
        i = t(29790);
      function g(m, r) {
        if (
          (1 & m &&
            (e.ɵɵelementStart(0, "mat-option", 3),
            e.ɵɵtext(1),
            e.ɵɵelementEnd()),
          2 & m)
        ) {
          const h = r.$implicit;
          e.ɵɵproperty("value", h.id.id),
            e.ɵɵadvance(1),
            e.ɵɵtextInterpolate1(" ", h.title, " ");
        }
      }
      const D = new e.InjectionToken("DashboardSelectPanelData");
      class y {
        constructor(r) {
          (this.data = r),
            (this.dashboards$ = this.data.dashboards$),
            (this.dashboardId = this.data.dashboardId);
        }
        dashboardSelected(r) {
          this.data.onDashboardSelected(r);
        }
      }
      (y.ɵfac = function (r) {
        return new (r || y)(e.ɵɵdirectiveInject(D));
      }),
        (y.ɵcmp = e.ɵɵdefineComponent({
          type: y,
          selectors: [["tb-dashboard-select-panel"]],
          decls: 8,
          vars: 7,
          consts: [
            ["fxLayout", "column", 1, "mat-content", "mat-padding"],
            ["matInput", "", 3, "ngModel", "ngModelChange"],
            [3, "value", 4, "ngFor", "ngForOf"],
            [3, "value"],
          ],
          template: function (r, h) {
            1 & r &&
              (e.ɵɵelementStart(0, "div", 0),
              e.ɵɵelementStart(1, "mat-form-field"),
              e.ɵɵelementStart(2, "mat-label"),
              e.ɵɵtext(3),
              e.ɵɵpipe(4, "translate"),
              e.ɵɵelementEnd(),
              e.ɵɵelementStart(5, "mat-select", 1),
              e.ɵɵlistener("ngModelChange", function (_) {
                return (h.dashboardId = _);
              })("ngModelChange", function () {
                return h.dashboardSelected(h.dashboardId);
              }),
              e.ɵɵtemplate(6, g, 2, 2, "mat-option", 2),
              e.ɵɵpipe(7, "async"),
              e.ɵɵelementEnd(),
              e.ɵɵelementEnd(),
              e.ɵɵelementEnd()),
              2 & r &&
                (e.ɵɵadvance(3),
                e.ɵɵtextInterpolate(
                  e.ɵɵpipeBind1(4, 3, "dashboard.select-dashboard")
                ),
                e.ɵɵadvance(2),
                e.ɵɵproperty("ngModel", h.dashboardId),
                e.ɵɵadvance(1),
                e.ɵɵproperty("ngForOf", e.ɵɵpipeBind1(7, 5, h.dashboards$)));
          },
          directives: [
            n.DefaultLayoutDirective,
            a.MatFormField,
            a.MatLabel,
            C.MatSelect,
            s.NgControlStatus,
            s.NgModel,
            d.NgForOf,
            o.MatOption,
          ],
          pipes: [i.TranslatePipe, d.AsyncPipe],
          styles: [
            '@charset "UTF-8";[_nghost-%COMP%]{min-width:300px;max-width:320px;max-height:150px;overflow-x:hidden;overflow-y:auto;background:#fff;border-radius:4px;box-shadow:0 7px 8px -4px #0003,0 13px 19px 2px #00000024,0 5px 24px 4px #0000001f}@media (min-height: 350px){[_nghost-%COMP%]{max-height:250px}}[_nghost-%COMP%]   .mat-content[_ngcontent-%COMP%]{background-color:#fff}[_nghost-%COMP%]     mat-form-field .mat-form-field-infix{width:100%}[_nghost-%COMP%]     mat-form-field .mat-form-field-infix mat-select .mat-select-value{max-width:100%}',
          ],
        }));
    },
    26145: (ee, R, t) => {
      "use strict";
      t.r(R), t.d(R, { DashboardSelectComponent: () => M });
      var e = t(37716),
        n = t(3679),
        a = t(25917),
        C = t(39774),
        s = t(88002),
        d = t(78345),
        o = t(58187),
        i = t(50377),
        g = t(54787),
        D = t(26311),
        y = t(39490),
        m = t(58203),
        r = t(38583),
        h = t(11877),
        p = t(87636),
        _ = t(11007),
        E = t(86057),
        c = t(86710),
        v = t(65072),
        I = t(67441),
        l = t(88030),
        T = t(51095),
        O = t(11436),
        w = t(76627),
        b = t(72458),
        S = t(29790);
      const u = ["dashboardSelectPanelOrigin"];
      function f(L, k) {
        if (
          (1 & L &&
            (e.ɵɵelementStart(0, "mat-option", 5),
            e.ɵɵtext(1),
            e.ɵɵelementEnd()),
          2 & L)
        ) {
          const N = k.$implicit;
          e.ɵɵproperty("value", N.id.id),
            e.ɵɵadvance(1),
            e.ɵɵtextInterpolate1(" ", N.title, " ");
        }
      }
      class M {
        constructor(k, N, B, j, F, V, P) {
          (this.store = k),
            (this.dashboardService = N),
            (this.overlay = B),
            (this.breakpointObserver = j),
            (this.viewContainerRef = F),
            (this.document = V),
            (this.window = P),
            (this.tooltipPosition = "above"),
            (this.propagateChange = (A) => {});
        }
        get required() {
          return this.requiredValue;
        }
        set required(k) {
          this.requiredValue = (0, y.coerceBooleanProperty)(k);
        }
        registerOnChange(k) {
          this.propagateChange = k;
        }
        registerOnTouched(k) {}
        ngOnInit() {
          const k = new C.H_(100);
          this.dashboards$ = this.getDashboards(k).pipe(
            (0, s.U)((N) => N.data),
            (0, d.B)()
          );
        }
        setDisabledState(k) {
          this.disabled = k;
        }
        writeValue(k) {
          this.dashboardId = k;
        }
        dashboardIdChanged() {
          this.updateView();
        }
        openDashboardSelectPanel() {
          if (this.disabled) return;
          const k = this.breakpointObserver.isMatched("min-height: 350px")
              ? 250
              : 150,
            B = this.overlay.position(),
            j = new m.OverlayConfig({
              panelClass: "tb-dashboard-select-panel",
              backdropClass: "cdk-overlay-transparent-backdrop",
              hasBackdrop: !0,
            }),
            V =
              this.dashboardSelectPanelOrigin.elementRef.nativeElement.getBoundingClientRect(),
            P =
              this.window.pageYOffset ||
              this.document.documentElement.scrollTop ||
              this.document.body.scrollTop ||
              0,
            A =
              this.window.pageXOffset ||
              this.document.documentElement.scrollLeft ||
              this.document.body.scrollLeft ||
              0,
            U = V.bottom - P,
            G = V.left - A;
          let Z, le, X, se;
          U + k > this.document.documentElement.clientHeight
            ? ((le = "top"), (se = "bottom"))
            : ((le = "bottom"), (se = "top")),
            G + 300 > this.document.documentElement.clientWidth
              ? ((Z = "end"), (X = "end"))
              : ((Z = "start"), (X = "start"));
          const de = { originX: Z, originY: le, overlayX: X, overlayY: se };
          j.positionStrategy = B.flexibleConnectedTo(
            this.dashboardSelectPanelOrigin.elementRef
          ).withPositions([de]);
          const pe = this.overlay.create(j);
          pe.backdropClick().subscribe(() => {
            pe.dispose();
          });
          const Q = this._createDashboardSelectPanelInjector(pe, {
            dashboards$: this.dashboards$,
            dashboardId: this.dashboardId,
            onDashboardSelected: (K) => {
              pe.dispose(), (this.dashboardId = K), this.updateView();
            },
          });
          pe.attach(
            new p.ComponentPortal(
              _.DashboardSelectPanelComponent,
              this.viewContainerRef,
              Q
            )
          );
        }
        _createDashboardSelectPanelInjector(k, N) {
          const B = [
            { provide: _.DASHBOARD_SELECT_PANEL_DATA, useValue: N },
            { provide: m.OverlayRef, useValue: k },
          ];
          return e.Injector.create({
            parent: this.viewContainerRef.injector,
            providers: B,
          });
        }
        updateView() {
          this.propagateChange(this.dashboardId);
        }
        getDashboards(k) {
          let N;
          const B = (0, g.fP)(this.store);
          return (
            (N =
              "customer" === this.dashboardsScope ||
              B.authority === D.W.CUSTOMER_USER
                ? this.customerId && this.customerId !== E._
                  ? this.dashboardService.getCustomerDashboards(
                      this.customerId,
                      k,
                      { ignoreLoading: !0 }
                    )
                  : (0, a.of)((0, o.n)())
                : this.dashboardService.getTenantDashboards(k, {
                    ignoreLoading: !0,
                  })),
            N
          );
        }
      }
      (M.ɵfac = function (k) {
        return new (k || M)(
          e.ɵɵdirectiveInject(c.Store),
          e.ɵɵdirectiveInject(i.s),
          e.ɵɵdirectiveInject(m.Overlay),
          e.ɵɵdirectiveInject(v.BreakpointObserver),
          e.ɵɵdirectiveInject(e.ViewContainerRef),
          e.ɵɵdirectiveInject(r.DOCUMENT),
          e.ɵɵdirectiveInject(h.m9)
        );
      }),
        (M.ɵcmp = e.ɵɵdefineComponent({
          type: M,
          selectors: [["tb-dashboard-select"]],
          viewQuery: function (k, N) {
            if ((1 & k && e.ɵɵviewQuery(u, 5), 2 & k)) {
              let B;
              e.ɵɵqueryRefresh((B = e.ɵɵloadQuery())) &&
                (N.dashboardSelectPanelOrigin = B.first);
            }
          },
          inputs: {
            dashboardsScope: "dashboardsScope",
            customerId: "customerId",
            tooltipPosition: "tooltipPosition",
            required: "required",
            disabled: "disabled",
          },
          features: [
            e.ɵɵProvidersFeature([
              {
                provide: n.NG_VALUE_ACCESSOR,
                useExisting: (0, e.forwardRef)(() => M),
                multi: !0,
              },
            ]),
          ],
          decls: 9,
          vars: 10,
          consts: [
            [
              "fxHide.lt-lg",
              "",
              3,
              "required",
              "disabled",
              "ngModel",
              "ngModelChange",
            ],
            [3, "value", 4, "ngFor", "ngForOf"],
            ["fxHide.gt-md", "", 1, "tb-dashboard-select"],
            [
              "mat-button",
              "",
              "mat-icon-button",
              "",
              "cdkOverlayOrigin",
              "",
              3,
              "matTooltip",
              "matTooltipPosition",
              "click",
            ],
            ["dashboardSelectPanelOrigin", "cdkOverlayOrigin"],
            [3, "value"],
          ],
          template: function (k, N) {
            1 & k &&
              (e.ɵɵelementStart(0, "mat-select", 0),
              e.ɵɵlistener("ngModelChange", function (j) {
                return (N.dashboardId = j);
              })("ngModelChange", function () {
                return N.dashboardIdChanged();
              }),
              e.ɵɵtemplate(1, f, 2, 2, "mat-option", 1),
              e.ɵɵpipe(2, "async"),
              e.ɵɵelementEnd(),
              e.ɵɵelementStart(3, "section", 2),
              e.ɵɵelementStart(4, "button", 3, 4),
              e.ɵɵlistener("click", function () {
                return N.openDashboardSelectPanel();
              }),
              e.ɵɵpipe(6, "translate"),
              e.ɵɵelementStart(7, "mat-icon"),
              e.ɵɵtext(8, "dashboards"),
              e.ɵɵelementEnd(),
              e.ɵɵelementEnd(),
              e.ɵɵelementEnd()),
              2 & k &&
                (e.ɵɵproperty("required", N.required)("disabled", N.disabled)(
                  "ngModel",
                  N.dashboardId
                ),
                e.ɵɵadvance(1),
                e.ɵɵproperty("ngForOf", e.ɵɵpipeBind1(2, 6, N.dashboards$)),
                e.ɵɵadvance(3),
                e.ɵɵpropertyInterpolate(
                  "matTooltip",
                  e.ɵɵpipeBind1(6, 8, "dashboard.select-dashboard")
                ),
                e.ɵɵproperty("matTooltipPosition", N.tooltipPosition));
          },
          directives: [
            I.MatSelect,
            l.DefaultShowHideDirective,
            n.RequiredValidator,
            n.NgControlStatus,
            n.NgModel,
            r.NgForOf,
            T.MatButton,
            m.CdkOverlayOrigin,
            O.MatTooltip,
            w.MatIcon,
            b.MatOption,
          ],
          pipes: [r.AsyncPipe, S.TranslatePipe],
          styles: [
            '@charset "UTF-8";[_nghost-%COMP%]{width:min-content;min-width:52px}[_nghost-%COMP%]   mat-select[_ngcontent-%COMP%]{max-width:300px;pointer-events:all}[_nghost-%COMP%]   .tb-dashboard-select[_ngcontent-%COMP%]{min-height:32px}[_nghost-%COMP%]   .tb-dashboard-select[_ngcontent-%COMP%]   span[_ngcontent-%COMP%]{pointer-events:all;cursor:pointer}[_nghost-%COMP%]     mat-select .mat-select-value{max-width:282px}',
          ],
        }));
    },
    93869: (ee, R, t) => {
      "use strict";
      t.d(R, { a: () => o });
      var e = t(37716),
        n = t(75362),
        a = t(39895),
        C = t(45435),
        s = t(86710),
        d = t(22238);
      class o extends n.I {
        constructor(g, D, y) {
          super(g),
            (this.store = g),
            (this.router = D),
            (this.dialogRef = y),
            (this.routerSubscription = this.router.events
              .pipe(
                (0, C.h)((m) => m instanceof a.NavigationStart),
                (0, C.h)(() => !!this.dialogRef)
              )
              .subscribe(() => {
                this.dialogRef.close();
              }));
        }
        ngOnDestroy() {
          super.ngOnDestroy(),
            this.routerSubscription && this.routerSubscription.unsubscribe();
        }
      }
      (o.ɵfac = function (g) {
        return new (g || o)(
          e.ɵɵdirectiveInject(s.Store),
          e.ɵɵdirectiveInject(a.Router),
          e.ɵɵdirectiveInject(d.MatDialogRef)
        );
      }),
        (o.ɵdir = e.ɵɵdefineDirective({
          type: o,
          features: [e.ɵɵInheritDefinitionFeature],
        }));
    },
    87602: (ee, R, t) => {
      "use strict";
      t.r(R), t.d(R, { AlertDialogComponent: () => s });
      var e = t(37716),
        n = t(22238),
        a = t(35618),
        C = t(51095);
      class s {
        constructor(o, i) {
          (this.dialogRef = o), (this.data = i);
        }
      }
      (s.ɵfac = function (o) {
        return new (o || s)(
          e.ɵɵdirectiveInject(n.MatDialogRef),
          e.ɵɵdirectiveInject(n.MAT_DIALOG_DATA)
        );
      }),
        (s.ɵcmp = e.ɵɵdefineComponent({
          type: s,
          selectors: [["tb-alert-dialog"]],
          decls: 6,
          vars: 4,
          consts: [
            ["mat-dialog-title", ""],
            ["mat-dialog-content", "", 3, "innerHTML"],
            ["mat-dialog-actions", "", "fxLayoutAlign", "end center"],
            [
              "mat-button",
              "",
              "color",
              "primary",
              "cdkFocusInitial",
              "",
              3,
              "mat-dialog-close",
            ],
          ],
          template: function (o, i) {
            1 & o &&
              (e.ɵɵelementStart(0, "h2", 0),
              e.ɵɵtext(1),
              e.ɵɵelementEnd(),
              e.ɵɵelement(2, "div", 1),
              e.ɵɵelementStart(3, "div", 2),
              e.ɵɵelementStart(4, "button", 3),
              e.ɵɵtext(5),
              e.ɵɵelementEnd(),
              e.ɵɵelementEnd()),
              2 & o &&
                (e.ɵɵadvance(1),
                e.ɵɵtextInterpolate(i.data.title),
                e.ɵɵadvance(1),
                e.ɵɵproperty("innerHTML", i.data.message, e.ɵɵsanitizeHtml),
                e.ɵɵadvance(2),
                e.ɵɵproperty("mat-dialog-close", !0),
                e.ɵɵadvance(1),
                e.ɵɵtextInterpolate(i.data.ok));
          },
          directives: [
            n.MatDialogTitle,
            n.MatDialogContent,
            n.MatDialogActions,
            a.DefaultLayoutAlignDirective,
            C.MatButton,
            n.MatDialogClose,
          ],
          styles: [
            '@charset "UTF-8";[_nghost-%COMP%]   .mat-dialog-content[_ngcontent-%COMP%]{padding:0 24px 24px}',
          ],
        }));
    },
    50035: (ee, R, t) => {
      "use strict";
      t.r(R), t.d(R, { ColorPickerDialogComponent: () => r });
      var e = t(37716),
        n = t(72458),
        a = t(22238),
        C = t(3679),
        s = t(93869),
        d = t(86710),
        o = t(39895),
        i = t(35618),
        g = t(61922),
        D = t(51095),
        y = t(38583),
        m = t(29790);
      class r extends s.a {
        constructor(p, _, E, c, v, I) {
          super(p, _, v),
            (this.store = p),
            (this.router = _),
            (this.data = E),
            (this.errorStateMatcher = c),
            (this.dialogRef = v),
            (this.fb = I),
            (this.submitted = !1);
        }
        ngOnInit() {
          this.colorPickerFormGroup = this.fb.group({
            color: [this.data.color, [C.Validators.required]],
          });
        }
        isErrorState(p, _) {
          const E = this.errorStateMatcher.isErrorState(p, _),
            c = !!(p && p.invalid && this.submitted);
          return E || c;
        }
        onColorChange(p) {
          this.colorPickerFormGroup.get("color").setValue(p),
            this.colorPickerFormGroup.markAsDirty();
        }
        cancel() {
          this.dialogRef.close(null);
        }
        select() {
          this.submitted = !0;
          const p = this.colorPickerFormGroup.get("color").value;
          this.dialogRef.close(p);
        }
      }
      (r.ɵfac = function (p) {
        return new (p || r)(
          e.ɵɵdirectiveInject(d.Store),
          e.ɵɵdirectiveInject(o.Router),
          e.ɵɵdirectiveInject(a.MAT_DIALOG_DATA),
          e.ɵɵdirectiveInject(n.ErrorStateMatcher, 4),
          e.ɵɵdirectiveInject(a.MatDialogRef),
          e.ɵɵdirectiveInject(C.FormBuilder)
        );
      }),
        (r.ɵcmp = e.ɵɵdefineComponent({
          type: r,
          selectors: [["tb-color-picker-dialog"]],
          features: [
            e.ɵɵProvidersFeature([
              { provide: n.ErrorStateMatcher, useExisting: r },
            ]),
            e.ɵɵInheritDefinitionFeature,
          ],
          decls: 13,
          vars: 18,
          consts: [
            [3, "formGroup", "ngSubmit"],
            [
              "mat-dialog-content",
              "",
              "fxLayout",
              "row",
              "fxLayoutAlign",
              "center",
            ],
            [
              3,
              "cpToggle",
              "cpDialogDisplay",
              "colorPicker",
              "colorPickerChange",
            ],
            ["mat-dialog-actions", "", "fxLayout", "row"],
            ["fxFlex", ""],
            ["mat-button", "", "type", "button", 3, "disabled", "click"],
            ["mat-button", "", "type", "submit", 3, "disabled"],
          ],
          template: function (p, _) {
            1 & p &&
              (e.ɵɵelementStart(0, "form", 0),
              e.ɵɵlistener("ngSubmit", function () {
                return _.select();
              }),
              e.ɵɵelementStart(1, "div", 1),
              e.ɵɵelementStart(2, "span", 2),
              e.ɵɵlistener("colorPickerChange", function (c) {
                return _.onColorChange(c);
              }),
              e.ɵɵelementEnd(),
              e.ɵɵelementEnd(),
              e.ɵɵelementStart(3, "div", 3),
              e.ɵɵelement(4, "span", 4),
              e.ɵɵelementStart(5, "button", 5),
              e.ɵɵlistener("click", function () {
                return _.cancel();
              }),
              e.ɵɵpipe(6, "async"),
              e.ɵɵtext(7),
              e.ɵɵpipe(8, "translate"),
              e.ɵɵelementEnd(),
              e.ɵɵelementStart(9, "button", 6),
              e.ɵɵpipe(10, "async"),
              e.ɵɵtext(11),
              e.ɵɵpipe(12, "translate"),
              e.ɵɵelementEnd(),
              e.ɵɵelementEnd(),
              e.ɵɵelementEnd()),
              2 & p &&
                (e.ɵɵproperty("formGroup", _.colorPickerFormGroup),
                e.ɵɵadvance(2),
                e.ɵɵstyleProp(
                  "background",
                  _.colorPickerFormGroup.get("color").value
                ),
                e.ɵɵproperty("cpToggle", !0)("cpDialogDisplay", "inline")(
                  "colorPicker",
                  _.colorPickerFormGroup.get("color").value
                ),
                e.ɵɵadvance(3),
                e.ɵɵproperty("disabled", e.ɵɵpipeBind1(6, 10, _.isLoading$)),
                e.ɵɵadvance(2),
                e.ɵɵtextInterpolate1(
                  " ",
                  e.ɵɵpipeBind1(8, 12, "action.cancel"),
                  " "
                ),
                e.ɵɵadvance(2),
                e.ɵɵproperty(
                  "disabled",
                  e.ɵɵpipeBind1(10, 14, _.isLoading$) ||
                    _.colorPickerFormGroup.invalid ||
                    !_.colorPickerFormGroup.dirty
                ),
                e.ɵɵadvance(2),
                e.ɵɵtextInterpolate1(
                  " ",
                  e.ɵɵpipeBind1(12, 16, "action.select"),
                  " "
                ));
          },
          directives: [
            C.ɵNgNoValidate,
            C.NgControlStatusGroup,
            C.FormGroupDirective,
            a.MatDialogContent,
            i.DefaultLayoutDirective,
            i.DefaultLayoutAlignDirective,
            g.Kk,
            a.MatDialogActions,
            i.DefaultFlexDirective,
            D.MatButton,
          ],
          pipes: [y.AsyncPipe, m.TranslatePipe],
          encapsulation: 2,
        }));
    },
    57921: (ee, R, t) => {
      "use strict";
      t.r(R), t.d(R, { ConfirmDialogComponent: () => d });
      var e = t(37716),
        n = t(22238),
        a = t(35618),
        C = t(51095),
        s = t(992);
      class d {
        constructor(i, g) {
          (this.dialogRef = i), (this.data = g);
        }
      }
      (d.ɵfac = function (i) {
        return new (i || d)(
          e.ɵɵdirectiveInject(n.MatDialogRef),
          e.ɵɵdirectiveInject(n.MAT_DIALOG_DATA)
        );
      }),
        (d.ɵcmp = e.ɵɵdefineComponent({
          type: d,
          selectors: [["tb-confirm-dialog"]],
          decls: 9,
          vars: 9,
          consts: [
            ["mat-dialog-title", ""],
            ["mat-dialog-content", "", 3, "innerHTML"],
            ["mat-dialog-actions", "", "fxLayoutAlign", "end center"],
            ["mat-button", "", "color", "primary", 3, "mat-dialog-close"],
            [
              "mat-button",
              "",
              "color",
              "primary",
              "cdkFocusInitial",
              "",
              3,
              "mat-dialog-close",
            ],
          ],
          template: function (i, g) {
            1 & i &&
              (e.ɵɵelementStart(0, "h2", 0),
              e.ɵɵtext(1),
              e.ɵɵelementEnd(),
              e.ɵɵelement(2, "div", 1),
              e.ɵɵpipe(3, "safe"),
              e.ɵɵelementStart(4, "div", 2),
              e.ɵɵelementStart(5, "button", 3),
              e.ɵɵtext(6),
              e.ɵɵelementEnd(),
              e.ɵɵelementStart(7, "button", 4),
              e.ɵɵtext(8),
              e.ɵɵelementEnd(),
              e.ɵɵelementEnd()),
              2 & i &&
                (e.ɵɵadvance(1),
                e.ɵɵtextInterpolate(g.data.title),
                e.ɵɵadvance(1),
                e.ɵɵproperty(
                  "innerHTML",
                  e.ɵɵpipeBind2(3, 6, g.data.message, "html"),
                  e.ɵɵsanitizeHtml
                ),
                e.ɵɵadvance(3),
                e.ɵɵproperty("mat-dialog-close", !1),
                e.ɵɵadvance(1),
                e.ɵɵtextInterpolate(g.data.cancel),
                e.ɵɵadvance(1),
                e.ɵɵproperty("mat-dialog-close", !0),
                e.ɵɵadvance(1),
                e.ɵɵtextInterpolate(g.data.ok));
          },
          directives: [
            n.MatDialogTitle,
            n.MatDialogContent,
            n.MatDialogActions,
            a.DefaultLayoutAlignDirective,
            C.MatButton,
            n.MatDialogClose,
          ],
          pipes: [s.y],
          styles: [
            '@charset "UTF-8";[_nghost-%COMP%]   .mat-dialog-content[_ngcontent-%COMP%]{padding:0 24px 24px}',
          ],
        }));
    },
    50540: (ee, R, t) => {
      "use strict";
      t.r(R), t.d(R, { JsonObjectEditDialogComponent: () => D });
      var e = t(37716),
        n = t(93869),
        a = t(22238),
        C = t(86710),
        s = t(39895),
        d = t(3679),
        o = t(29790);
      function i(y, m) {
        1 & y && e.ɵɵelement(0, "mat-progress-bar", 13);
      }
      function g(y, m) {
        1 & y && e.ɵɵelement(0, "div", 14);
      }
      class D extends n.a {
        constructor(m, r, h, p, _, E) {
          super(m, r, p),
            (this.store = m),
            (this.router = r),
            (this.data = h),
            (this.dialogRef = p),
            (this.fb = _),
            (this.translate = E),
            (this.submitted = !1);
        }
        ngOnInit() {
          (this.title = this.data.title
            ? this.data.title
            : this.translate.instant("details.edit-json")),
            (this.jsonFormGroup = this.fb.group({
              json: [this.data.jsonValue, []],
            }));
        }
        cancel() {
          this.dialogRef.close(void 0);
        }
        add() {
          this.dialogRef.close(this.jsonFormGroup.get("json").value);
        }
      }
      (D.ɵfac = function (m) {
        return new (m || D)(
          e.ɵɵdirectiveInject(C.Store),
          e.ɵɵdirectiveInject(s.Router),
          e.ɵɵdirectiveInject(a.MAT_DIALOG_DATA),
          e.ɵɵdirectiveInject(a.MatDialogRef),
          e.ɵɵdirectiveInject(d.FormBuilder),
          e.ɵɵdirectiveInject(o.TranslateService)
        );
      }),
        (D.ɵcmp = e.ɵɵdefineComponent({
          type: D,
          selectors: [["tb-object-edit-dialog"]],
          features: [e.ɵɵInheritDefinitionFeature],
          decls: 27,
          vars: 28,
          consts: [
            [2, "min-width", "400px", 3, "formGroup", "ngSubmit"],
            ["fxLayout", "row", "color", "primary"],
            ["fxFlex", ""],
            [
              "mat-button",
              "",
              "mat-icon-button",
              "",
              "type",
              "button",
              3,
              "click",
            ],
            [1, "material-icons"],
            ["color", "warn", "mode", "indeterminate", 4, "ngIf"],
            ["style", "height: 4px;", 4, "ngIf"],
            ["mat-dialog-content", ""],
            [3, "disabled"],
            [
              "formControlName",
              "json",
              "validateContent",
              "true",
              3,
              "label",
              "required",
              "fillHeight",
            ],
            [
              "mat-dialog-actions",
              "",
              "fxLayout",
              "row",
              "fxLayoutAlign",
              "end center",
            ],
            [
              "mat-button",
              "",
              "color",
              "primary",
              "type",
              "button",
              "cdkFocusInitial",
              "",
              3,
              "disabled",
              "click",
            ],
            [
              "mat-button",
              "",
              "mat-raised-button",
              "",
              "color",
              "primary",
              "type",
              "submit",
              3,
              "disabled",
            ],
            ["color", "warn", "mode", "indeterminate"],
            [2, "height", "4px"],
          ],
          template: function (m, r) {
            1 & m &&
              (e.ɵɵelementStart(0, "form", 0),
              e.ɵɵlistener("ngSubmit", function () {
                return r.add();
              }),
              e.ɵɵelementStart(1, "mat-toolbar", 1),
              e.ɵɵelementStart(2, "h2"),
              e.ɵɵtext(3),
              e.ɵɵelementEnd(),
              e.ɵɵelement(4, "span", 2),
              e.ɵɵelementStart(5, "button", 3),
              e.ɵɵlistener("click", function () {
                return r.cancel();
              }),
              e.ɵɵelementStart(6, "mat-icon", 4),
              e.ɵɵtext(7, "close"),
              e.ɵɵelementEnd(),
              e.ɵɵelementEnd(),
              e.ɵɵelementEnd(),
              e.ɵɵtemplate(8, i, 1, 0, "mat-progress-bar", 5),
              e.ɵɵpipe(9, "async"),
              e.ɵɵtemplate(10, g, 1, 0, "div", 6),
              e.ɵɵpipe(11, "async"),
              e.ɵɵelementStart(12, "div", 7),
              e.ɵɵelementStart(13, "fieldset", 8),
              e.ɵɵpipe(14, "async"),
              e.ɵɵelement(15, "tb-json-object-edit", 9),
              e.ɵɵpipe(16, "translate"),
              e.ɵɵelementEnd(),
              e.ɵɵelementEnd(),
              e.ɵɵelementStart(17, "div", 10),
              e.ɵɵelement(18, "span", 2),
              e.ɵɵelementStart(19, "button", 11),
              e.ɵɵlistener("click", function () {
                return r.cancel();
              }),
              e.ɵɵpipe(20, "async"),
              e.ɵɵtext(21),
              e.ɵɵpipe(22, "translate"),
              e.ɵɵelementEnd(),
              e.ɵɵelementStart(23, "button", 12),
              e.ɵɵpipe(24, "async"),
              e.ɵɵtext(25),
              e.ɵɵpipe(26, "translate"),
              e.ɵɵelementEnd(),
              e.ɵɵelementEnd(),
              e.ɵɵelementEnd()),
              2 & m &&
                (e.ɵɵproperty("formGroup", r.jsonFormGroup),
                e.ɵɵadvance(3),
                e.ɵɵtextInterpolate(r.title),
                e.ɵɵadvance(5),
                e.ɵɵproperty("ngIf", e.ɵɵpipeBind1(9, 12, r.isLoading$)),
                e.ɵɵadvance(2),
                e.ɵɵproperty("ngIf", !e.ɵɵpipeBind1(11, 14, r.isLoading$)),
                e.ɵɵadvance(3),
                e.ɵɵproperty("disabled", e.ɵɵpipeBind1(14, 16, r.isLoading$)),
                e.ɵɵadvance(2),
                e.ɵɵpropertyInterpolate(
                  "label",
                  e.ɵɵpipeBind1(16, 18, "value.json-value")
                ),
                e.ɵɵproperty("required", !0)("fillHeight", !1),
                e.ɵɵadvance(4),
                e.ɵɵproperty("disabled", e.ɵɵpipeBind1(20, 20, r.isLoading$)),
                e.ɵɵadvance(2),
                e.ɵɵtextInterpolate1(
                  " ",
                  e.ɵɵpipeBind1(22, 22, "action.cancel"),
                  " "
                ),
                e.ɵɵadvance(2),
                e.ɵɵproperty(
                  "disabled",
                  e.ɵɵpipeBind1(24, 24, r.isLoading$) ||
                    r.jsonFormGroup.invalid ||
                    !r.jsonFormGroup.dirty
                ),
                e.ɵɵadvance(2),
                e.ɵɵtextInterpolate1(
                  " ",
                  e.ɵɵpipeBind1(26, 26, "action.save"),
                  " "
                ));
          },
          encapsulation: 2,
        }));
    },
    2496: (ee, R, t) => {
      "use strict";
      t.r(R), t.d(R, { MaterialIconsDialogComponent: () => j });
      var e = t(37716),
        n = t(22238),
        a = t(93869),
        C = t(1361),
        s = t(3679),
        d = t(25917),
        o = t(66682),
        i = t(88002),
        g = t(39761),
        D = t(19773),
        y = t(65792),
        m = t(78345),
        r = t(96736),
        h = t(68307),
        p = t(86710),
        _ = t(39895),
        E = t(12522),
        c = t(35618),
        v = t(45396),
        I = t(29790),
        l = t(51095),
        T = t(76627),
        O = t(38583),
        w = t(12178),
        b = t(4885),
        S = t(11436);
      const u = ["iconButtons"];
      function f(F, V) {
        1 & F && e.ɵɵelement(0, "mat-progress-bar", 17);
      }
      function M(F, V) {
        1 & F && e.ɵɵelement(0, "div", 18);
      }
      function L(F, V) {
        1 & F &&
          (e.ɵɵelementStart(0, "div", 19),
          e.ɵɵelement(1, "mat-spinner", 20),
          e.ɵɵelementEnd());
      }
      function k(F, V) {
        if (1 & F) {
          const P = e.ɵɵgetCurrentView();
          e.ɵɵelementStart(0, "button", 24),
            e.ɵɵlistener("click", function () {
              e.ɵɵrestoreView(P);
              const U = e.ɵɵnextContext().$implicit;
              return e.ɵɵnextContext().selectIcon(U);
            }),
            e.ɵɵelementStart(1, "mat-icon"),
            e.ɵɵtext(2),
            e.ɵɵelementEnd(),
            e.ɵɵelementEnd();
        }
        if (2 & F) {
          const P = e.ɵɵnextContext().$implicit;
          e.ɵɵpropertyInterpolate("matTooltip", P),
            e.ɵɵadvance(2),
            e.ɵɵtextInterpolate(P);
        }
      }
      function N(F, V) {
        if (1 & F) {
          const P = e.ɵɵgetCurrentView();
          e.ɵɵelementStart(0, "button", 25),
            e.ɵɵlistener("click", function () {
              e.ɵɵrestoreView(P);
              const U = e.ɵɵnextContext().$implicit;
              return e.ɵɵnextContext().selectIcon(U);
            }),
            e.ɵɵelementStart(1, "mat-icon"),
            e.ɵɵtext(2),
            e.ɵɵelementEnd(),
            e.ɵɵelementEnd();
        }
        if (2 & F) {
          const P = e.ɵɵnextContext().$implicit;
          e.ɵɵpropertyInterpolate("matTooltip", P),
            e.ɵɵadvance(2),
            e.ɵɵtextInterpolate(P);
        }
      }
      function B(F, V) {
        if (
          (1 & F &&
            (e.ɵɵelementContainerStart(0, null, 21),
            e.ɵɵtemplate(2, k, 3, 2, "button", 22),
            e.ɵɵtemplate(3, N, 3, 2, "button", 23),
            e.ɵɵelementContainerEnd()),
          2 & F)
        ) {
          const P = V.$implicit,
            A = e.ɵɵnextContext();
          e.ɵɵadvance(2),
            e.ɵɵproperty("ngIf", P === A.selectedIcon),
            e.ɵɵadvance(1),
            e.ɵɵproperty("ngIf", P !== A.selectedIcon);
        }
      }
      class j extends a.a {
        constructor(V, P, A, U, G) {
          super(V, P, G),
            (this.store = V),
            (this.router = P),
            (this.data = A),
            (this.utils = U),
            (this.dialogRef = G),
            (this.selectedIcon = A.icon),
            (this.showAllControl = new s.FormControl(!1));
        }
        ngOnInit() {
          this.icons$ = this.showAllControl.valueChanges.pipe(
            (0, i.U)((V) => ({ firstTime: !1, showAll: V })),
            (0, g.O)({ firstTime: !0, showAll: !1 }),
            (0, D.zg)((V) => {
              if (V.showAll)
                return this.utils.getMaterialIcons().pipe((0, y.g)(100));
              {
                const P = (0, d.of)(this.utils.getCommonMaterialIcons());
                return V.firstTime ? P : P.pipe((0, y.g)(50));
              }
            }),
            (0, m.B)()
          );
        }
        ngAfterViewInit() {
          this.loadingIcons$ = (0, o.T)(
            this.showAllControl.valueChanges.pipe((0, r.h)(!0)),
            this.iconButtons.changes.pipe((0, y.g)(100), (0, r.h)(!1))
          ).pipe(
            (0, h.b)((V) => {
              V
                ? this.showAllControl.disable({ emitEvent: !1 })
                : this.showAllControl.enable({ emitEvent: !1 });
            }),
            (0, m.B)()
          );
        }
        selectIcon(V) {
          this.dialogRef.close(V);
        }
        cancel() {
          this.dialogRef.close(null);
        }
      }
      (j.ɵfac = function (V) {
        return new (V || j)(
          e.ɵɵdirectiveInject(p.Store),
          e.ɵɵdirectiveInject(_.Router),
          e.ɵɵdirectiveInject(n.MAT_DIALOG_DATA),
          e.ɵɵdirectiveInject(C.F),
          e.ɵɵdirectiveInject(n.MatDialogRef)
        );
      }),
        (j.ɵcmp = e.ɵɵdefineComponent({
          type: j,
          selectors: [["tb-material-icons-dialog"]],
          viewQuery: function (V, P) {
            if ((1 & V && e.ɵɵviewQuery(u, 5), 2 & V)) {
              let A;
              e.ɵɵqueryRefresh((A = e.ɵɵloadQuery())) && (P.iconButtons = A);
            }
          },
          features: [e.ɵɵProvidersFeature([]), e.ɵɵInheritDefinitionFeature],
          decls: 31,
          vars: 25,
          consts: [
            [1, "tb-material-icons-dialog", 2, "min-width", "600px"],
            ["fxLayout", "row", "color", "primary"],
            ["fxFlex", ""],
            [
              "fxLayout",
              "row",
              "fxLayoutAlign",
              "start center",
              "fxLayoutGap",
              "8px",
            ],
            [3, "formControl"],
            ["translate", ""],
            [
              "mat-button",
              "",
              "mat-icon-button",
              "",
              "type",
              "button",
              3,
              "click",
            ],
            [1, "material-icons"],
            ["color", "warn", "mode", "indeterminate", 4, "ngIf"],
            ["style", "height: 4px;", 4, "ngIf"],
            [
              "class",
              "tb-absolute-fill tb-icons-load",
              "fxLayout",
              "column",
              "fxLayoutAlign",
              "center center",
              4,
              "ngIf",
            ],
            ["mat-dialog-content", ""],
            ["fxLayout", "column", 1, "mat-content", "mat-padding"],
            [3, "disabled"],
            ["ngFor", "", 3, "ngForOf"],
            ["mat-dialog-actions", "", "fxLayout", "row"],
            ["mat-button", "", "type", "button", 3, "disabled", "click"],
            ["color", "warn", "mode", "indeterminate"],
            [2, "height", "4px"],
            [
              "fxLayout",
              "column",
              "fxLayoutAlign",
              "center center",
              1,
              "tb-absolute-fill",
              "tb-icons-load",
            ],
            ["color", "accent", "mode", "indeterminate", "diameter", "40"],
            ["iconButtons", ""],
            [
              "class",
              "tb-select-icon-button",
              "mat-button",
              "",
              "mat-icon-button",
              "",
              "mat-raised-button",
              "",
              "color",
              "primary",
              "matTooltipPosition",
              "above",
              "type",
              "button",
              3,
              "matTooltip",
              "click",
              4,
              "ngIf",
            ],
            [
              "class",
              "tb-select-icon-button",
              "mat-button",
              "",
              "mat-icon-button",
              "",
              "matTooltipPosition",
              "above",
              "type",
              "button",
              3,
              "matTooltip",
              "click",
              4,
              "ngIf",
            ],
            [
              "mat-button",
              "",
              "mat-icon-button",
              "",
              "mat-raised-button",
              "",
              "color",
              "primary",
              "matTooltipPosition",
              "above",
              "type",
              "button",
              1,
              "tb-select-icon-button",
              3,
              "matTooltip",
              "click",
            ],
            [
              "mat-button",
              "",
              "mat-icon-button",
              "",
              "matTooltipPosition",
              "above",
              "type",
              "button",
              1,
              "tb-select-icon-button",
              3,
              "matTooltip",
              "click",
            ],
          ],
          template: function (V, P) {
            1 & V &&
              (e.ɵɵelementStart(0, "form", 0),
              e.ɵɵelementStart(1, "mat-toolbar", 1),
              e.ɵɵelementStart(2, "h2"),
              e.ɵɵtext(3),
              e.ɵɵpipe(4, "translate"),
              e.ɵɵelementEnd(),
              e.ɵɵelement(5, "span", 2),
              e.ɵɵelementStart(6, "section", 3),
              e.ɵɵelement(7, "mat-slide-toggle", 4),
              e.ɵɵelementStart(8, "label", 5),
              e.ɵɵtext(9, "icon.show-all"),
              e.ɵɵelementEnd(),
              e.ɵɵelementEnd(),
              e.ɵɵelementStart(10, "button", 6),
              e.ɵɵlistener("click", function () {
                return P.cancel();
              }),
              e.ɵɵelementStart(11, "mat-icon", 7),
              e.ɵɵtext(12, "close"),
              e.ɵɵelementEnd(),
              e.ɵɵelementEnd(),
              e.ɵɵelementEnd(),
              e.ɵɵtemplate(13, f, 1, 0, "mat-progress-bar", 8),
              e.ɵɵpipe(14, "async"),
              e.ɵɵtemplate(15, M, 1, 0, "div", 9),
              e.ɵɵpipe(16, "async"),
              e.ɵɵtemplate(17, L, 2, 0, "div", 10),
              e.ɵɵpipe(18, "async"),
              e.ɵɵelementStart(19, "div", 11),
              e.ɵɵelementStart(20, "div", 12),
              e.ɵɵelementStart(21, "fieldset", 13),
              e.ɵɵpipe(22, "async"),
              e.ɵɵtemplate(23, B, 4, 2, "ng-template", 14),
              e.ɵɵpipe(24, "async"),
              e.ɵɵelementEnd(),
              e.ɵɵelementEnd(),
              e.ɵɵelementEnd(),
              e.ɵɵelementStart(25, "div", 15),
              e.ɵɵelement(26, "span", 2),
              e.ɵɵelementStart(27, "button", 16),
              e.ɵɵlistener("click", function () {
                return P.cancel();
              }),
              e.ɵɵpipe(28, "async"),
              e.ɵɵtext(29),
              e.ɵɵpipe(30, "translate"),
              e.ɵɵelementEnd(),
              e.ɵɵelementEnd(),
              e.ɵɵelementEnd()),
              2 & V &&
                (e.ɵɵadvance(3),
                e.ɵɵtextInterpolate(e.ɵɵpipeBind1(4, 9, "icon.select-icon")),
                e.ɵɵadvance(4),
                e.ɵɵproperty("formControl", P.showAllControl),
                e.ɵɵadvance(6),
                e.ɵɵproperty("ngIf", e.ɵɵpipeBind1(14, 11, P.isLoading$)),
                e.ɵɵadvance(2),
                e.ɵɵproperty("ngIf", !e.ɵɵpipeBind1(16, 13, P.isLoading$)),
                e.ɵɵadvance(2),
                e.ɵɵproperty("ngIf", e.ɵɵpipeBind1(18, 15, P.loadingIcons$)),
                e.ɵɵadvance(4),
                e.ɵɵproperty("disabled", e.ɵɵpipeBind1(22, 17, P.isLoading$)),
                e.ɵɵadvance(2),
                e.ɵɵproperty("ngForOf", e.ɵɵpipeBind1(24, 19, P.icons$)),
                e.ɵɵadvance(4),
                e.ɵɵproperty("disabled", e.ɵɵpipeBind1(28, 21, P.isLoading$)),
                e.ɵɵadvance(2),
                e.ɵɵtextInterpolate1(
                  " ",
                  e.ɵɵpipeBind1(30, 23, "action.cancel"),
                  " "
                ));
          },
          directives: [
            s.ɵNgNoValidate,
            s.NgControlStatusGroup,
            s.NgForm,
            E.MatToolbar,
            c.DefaultLayoutDirective,
            c.DefaultFlexDirective,
            c.DefaultLayoutAlignDirective,
            c.DefaultLayoutGapDirective,
            v.MatSlideToggle,
            s.NgControlStatus,
            s.FormControlDirective,
            I.TranslateDirective,
            l.MatButton,
            T.MatIcon,
            O.NgIf,
            n.MatDialogContent,
            O.NgForOf,
            n.MatDialogActions,
            w.MatProgressBar,
            b.MatSpinner,
            S.MatTooltip,
          ],
          pipes: [I.TranslatePipe, O.AsyncPipe],
          styles: [
            '@charset "UTF-8";[_nghost-%COMP%]   .tb-material-icons-dialog[_ngcontent-%COMP%]{position:relative}[_nghost-%COMP%]   .tb-icons-load[_ngcontent-%COMP%]{top:64px;z-index:3;background:rgba(255,255,255,.75)}[_nghost-%COMP%]     .tb-material-icons-dialog button.mat-icon-button.tb-select-icon-button{width:56px;height:56px;padding:16px;margin:10px;border:solid 1px #ffa500;border-radius:0;line-height:0}',
          ],
        }));
    },
    45426: (ee, R, t) => {
      "use strict";
      t.r(R), t.d(R, { NodeScriptTestDialogComponent: () => S });
      var e = t(37716),
        n = t(72458),
        a = t(22238),
        C = t(3679),
        s = t(17757),
        d = t(25917),
        o = t(93869),
        i = t(82068),
        D = (t(26424), t(41429)),
        y = t(40940),
        m = t(19773),
        r = t(65264),
        h = t(30013),
        p = t(86710),
        _ = t(39895);
      const E = ["payloadContent"],
        c = ["topPanel"],
        v = ["topLeftPanel"],
        I = ["topRightPanel"],
        l = ["bottomPanel"],
        T = ["bottomLeftPanel"],
        O = ["bottomRightPanel"],
        w = function (u) {
          return { "tb-js-function-help": u };
        },
        b = function (u, f, M) {
          return [u, f, M];
        };
      class S extends o.a {
        constructor(f, M, L, k, N, B, j) {
          super(f, M, N),
            (this.store = f),
            (this.router = M),
            (this.data = L),
            (this.errorStateMatcher = k),
            (this.dialogRef = N),
            (this.fb = B),
            (this.ruleChainService = j),
            (this.width = "100%"),
            (this.height = "100%"),
            (this.submitted = !1),
            (this.contentTypes = i.zc),
            (this.scriptLanguage = D.tS),
            (this.scriptLang = this.data.scriptLang
              ? this.data.scriptLang
              : D.tS.JS),
            (this.functionTitle = this.data.functionTitle);
        }
        ngOnInit() {
          (this.nodeScriptTestFormGroup = this.fb.group({
            payload: this.fb.group({
              msgType: [this.data.msgType, [C.Validators.required]],
              msg: [null, []],
            }),
            metadata: [this.data.metadata, [C.Validators.required]],
            script: [this.data.script, []],
            output: ["", []],
          })),
            (0, h.Jx)(JSON.stringify(this.data.msg), {
              indent_size: 4,
            }).subscribe((f) => {
              this.nodeScriptTestFormGroup
                .get("payload")
                .get("msg")
                .patchValue(f, { emitEvent: !1 });
            });
        }
        ngAfterViewInit() {
          this.initSplitLayout(
            this.topPanelElmRef.first.nativeElement,
            this.topLeftPanelElmRef.first.nativeElement,
            this.topRightPanelElmRef.first.nativeElement,
            this.bottomPanelElmRef.first.nativeElement,
            this.bottomLeftPanelElmRef.first.nativeElement,
            this.bottomRightPanelElmRef.first.nativeElement
          );
        }
        initSplitLayout(f, M, L, k, N, B) {
          Split([f, k], {
            sizes: [35, 65],
            gutterSize: 8,
            cursor: "row-resize",
            direction: "vertical",
          }),
            Split([M, L], {
              sizes: [50, 50],
              gutterSize: 8,
              cursor: "col-resize",
            }),
            Split([N, B], {
              sizes: [50, 50],
              gutterSize: 8,
              cursor: "col-resize",
            });
        }
        isErrorState(f, M) {
          const L = this.errorStateMatcher.isErrorState(f, M),
            k = !!(f && f.invalid && this.submitted);
          return L || k;
        }
        cancel() {
          this.dialogRef.close(null);
        }
        test() {
          this.testNodeScript().subscribe((f) => {
            (0, h.Jx)(f, { indent_size: 4 }).subscribe((M) => {
              this.nodeScriptTestFormGroup.get("output").setValue(M);
            });
          });
        }
        testNodeScript() {
          if (this.checkInputParamErrors()) {
            const f = {
              argNames: this.data.argNames,
              scriptType: this.data.scriptType,
              msgType:
                this.nodeScriptTestFormGroup.get("payload.msgType").value,
              msg: this.nodeScriptTestFormGroup.get("payload.msg").value,
              metadata: this.nodeScriptTestFormGroup.get("metadata").value,
              script: this.nodeScriptTestFormGroup.get("script").value,
            };
            return this.ruleChainService
              .testScript(f, this.scriptLang)
              .pipe(
                (0, m.zg)((M) =>
                  M.error
                    ? (this.store.dispatch(
                        new r.zi({ message: M.error, type: "error" })
                      ),
                      s.C)
                    : (0, d.of)(M.output)
                )
              );
          }
          return s.C;
        }
        checkInputParamErrors() {
          return (
            this.payloadContent.validateOnSubmit(),
            !!this.nodeScriptTestFormGroup.get("payload").valid
          );
        }
        save() {
          (this.submitted = !0),
            this.testNodeScript().subscribe(() => {
              this.nodeScriptTestFormGroup.get("script").markAsPristine(),
                this.dialogRef.close(
                  this.nodeScriptTestFormGroup.get("script").value
                );
            });
        }
      }
      (S.ɵfac = function (f) {
        return new (f || S)(
          e.ɵɵdirectiveInject(p.Store),
          e.ɵɵdirectiveInject(_.Router),
          e.ɵɵdirectiveInject(a.MAT_DIALOG_DATA),
          e.ɵɵdirectiveInject(n.ErrorStateMatcher, 4),
          e.ɵɵdirectiveInject(a.MatDialogRef),
          e.ɵɵdirectiveInject(C.FormBuilder),
          e.ɵɵdirectiveInject(y.U)
        );
      }),
        (S.ɵcmp = e.ɵɵdefineComponent({
          type: S,
          selectors: [["tb-node-script-test-dialog"]],
          viewQuery: function (f, M) {
            if (
              (1 & f &&
                (e.ɵɵviewQuery(E, 7),
                e.ɵɵviewQuery(c, 5),
                e.ɵɵviewQuery(v, 5),
                e.ɵɵviewQuery(I, 5),
                e.ɵɵviewQuery(l, 5),
                e.ɵɵviewQuery(T, 5),
                e.ɵɵviewQuery(O, 5)),
              2 & f)
            ) {
              let L;
              e.ɵɵqueryRefresh((L = e.ɵɵloadQuery())) &&
                (M.payloadContent = L.first),
                e.ɵɵqueryRefresh((L = e.ɵɵloadQuery())) &&
                  (M.topPanelElmRef = L),
                e.ɵɵqueryRefresh((L = e.ɵɵloadQuery())) &&
                  (M.topLeftPanelElmRef = L),
                e.ɵɵqueryRefresh((L = e.ɵɵloadQuery())) &&
                  (M.topRightPanelElmRef = L),
                e.ɵɵqueryRefresh((L = e.ɵɵloadQuery())) &&
                  (M.bottomPanelElmRef = L),
                e.ɵɵqueryRefresh((L = e.ɵɵloadQuery())) &&
                  (M.bottomLeftPanelElmRef = L),
                e.ɵɵqueryRefresh((L = e.ɵɵloadQuery())) &&
                  (M.bottomRightPanelElmRef = L);
            }
          },
          hostVars: 4,
          hostBindings: function (f, M) {
            2 & f && e.ɵɵstyleProp("width", M.width)("height", M.height);
          },
          features: [
            e.ɵɵProvidersFeature([
              { provide: n.ErrorStateMatcher, useExisting: S },
            ]),
            e.ɵɵInheritDefinitionFeature,
          ],
          decls: 64,
          vars: 49,
          consts: [
            [1, "tb-node-script-test-dialog", 3, "formGroup", "ngSubmit"],
            ["fxLayout", "row", "color", "primary"],
            ["fxFlex", ""],
            [
              "mat-button",
              "",
              "mat-icon-button",
              "",
              "type",
              "button",
              3,
              "click",
            ],
            [1, "material-icons"],
            ["mat-dialog-content", "", "fxFlex", "", 2, "position", "relative"],
            [1, "tb-absolute-fill"],
            [1, "tb-split", "tb-split-vertical"],
            ["topPanel", ""],
            [1, "tb-split", "tb-content"],
            ["topLeftPanel", ""],
            [1, "tb-resize-container"],
            [1, "tb-editor-area-title-panel"],
            ["translate", ""],
            [
              "formGroupName",
              "payload",
              "fxLayout",
              "column",
              2,
              "height",
              "100%",
            ],
            ["fxLayout", "row"],
            [
              "formControlName",
              "msgType",
              "required",
              "",
              2,
              "margin-bottom",
              "0",
              "min-width",
              "300px",
            ],
            [
              "fxFlex",
              "",
              "formControlName",
              "msg",
              "validateContent",
              "",
              3,
              "label",
              "contentType",
              "fillHeight",
            ],
            ["payloadContent", ""],
            ["topRightPanel", ""],
            [
              "tb-toast",
              "",
              "toastTarget",
              "metadataPanel",
              1,
              "tb-resize-container",
            ],
            ["formControlName", "metadata", "titleText", "rulenode.metadata"],
            ["bottomPanel", ""],
            ["bottomLeftPanel", ""],
            [1, "tb-editor-area-title-panel", "tb-js-function", 3, "ngClass"],
            [
              "formControlName",
              "script",
              "resultType",
              "object",
              3,
              "functionName",
              "functionArgs",
              "validationArgs",
              "disableUndefinedCheck",
              "helpId",
              "fillHeight",
            ],
            ["bottomRightPanel", ""],
            [
              "fxFlex",
              "",
              "formControlName",
              "output",
              "validateContent",
              "false",
              "readonly",
              "true",
              3,
              "label",
              "contentType",
              "fillHeight",
            ],
            ["mat-dialog-actions", "", "fxLayout", "row"],
            [
              "mat-button",
              "",
              "mat-raised-button",
              "",
              "color",
              "primary",
              "type",
              "button",
              3,
              "disabled",
              "click",
            ],
            [
              "mat-button",
              "",
              "color",
              "primary",
              "type",
              "button",
              "cdkFocusInitial",
              "",
              3,
              "disabled",
              "click",
            ],
            [
              "mat-button",
              "",
              "mat-raised-button",
              "",
              "color",
              "primary",
              "type",
              "submit",
              3,
              "disabled",
            ],
          ],
          template: function (f, M) {
            1 & f &&
              (e.ɵɵelementStart(0, "form", 0),
              e.ɵɵlistener("ngSubmit", function () {
                return M.save();
              }),
              e.ɵɵelementStart(1, "mat-toolbar", 1),
              e.ɵɵelementStart(2, "h2"),
              e.ɵɵtext(3),
              e.ɵɵpipe(4, "translate"),
              e.ɵɵpipe(5, "translate"),
              e.ɵɵelementEnd(),
              e.ɵɵelement(6, "span", 2),
              e.ɵɵelementStart(7, "button", 3),
              e.ɵɵlistener("click", function () {
                return M.cancel();
              }),
              e.ɵɵelementStart(8, "mat-icon", 4),
              e.ɵɵtext(9, "close"),
              e.ɵɵelementEnd(),
              e.ɵɵelementEnd(),
              e.ɵɵelementEnd(),
              e.ɵɵelementStart(10, "div", 5),
              e.ɵɵelementStart(11, "div", 6),
              e.ɵɵelementStart(12, "div", 7, 8),
              e.ɵɵelementStart(14, "div", 9, 10),
              e.ɵɵelementStart(16, "div", 11),
              e.ɵɵelementStart(17, "div", 12),
              e.ɵɵelementStart(18, "label", 13),
              e.ɵɵtext(19, "rulenode.message"),
              e.ɵɵelementEnd(),
              e.ɵɵelementEnd(),
              e.ɵɵelementStart(20, "div", 14),
              e.ɵɵelementStart(21, "div", 15),
              e.ɵɵelement(22, "tb-message-type-autocomplete", 16),
              e.ɵɵelementEnd(),
              e.ɵɵelement(23, "tb-json-content", 17, 18),
              e.ɵɵpipe(25, "translate"),
              e.ɵɵelementEnd(),
              e.ɵɵelementEnd(),
              e.ɵɵelementEnd(),
              e.ɵɵelementStart(26, "div", 9, 19),
              e.ɵɵelementStart(28, "div", 20),
              e.ɵɵelementStart(29, "div", 12),
              e.ɵɵelementStart(30, "label", 13),
              e.ɵɵtext(31, "rulenode.metadata"),
              e.ɵɵelementEnd(),
              e.ɵɵelementEnd(),
              e.ɵɵelement(32, "tb-key-val-map", 21),
              e.ɵɵelementEnd(),
              e.ɵɵelementEnd(),
              e.ɵɵelementEnd(),
              e.ɵɵelementStart(33, "div", 7, 22),
              e.ɵɵelementStart(35, "div", 9, 23),
              e.ɵɵelementStart(37, "div", 11),
              e.ɵɵelementStart(38, "div", 24),
              e.ɵɵelementStart(39, "label"),
              e.ɵɵtext(40),
              e.ɵɵelementEnd(),
              e.ɵɵelementEnd(),
              e.ɵɵelement(41, "tb-js-func", 25),
              e.ɵɵelementEnd(),
              e.ɵɵelementEnd(),
              e.ɵɵelementStart(42, "div", 9, 26),
              e.ɵɵelementStart(44, "div", 11),
              e.ɵɵelementStart(45, "div", 12),
              e.ɵɵelementStart(46, "label", 13),
              e.ɵɵtext(47, "rulenode.output"),
              e.ɵɵelementEnd(),
              e.ɵɵelementEnd(),
              e.ɵɵelement(48, "tb-json-content", 27),
              e.ɵɵpipe(49, "translate"),
              e.ɵɵelementEnd(),
              e.ɵɵelementEnd(),
              e.ɵɵelementEnd(),
              e.ɵɵelementEnd(),
              e.ɵɵelementEnd(),
              e.ɵɵelementStart(50, "div", 28),
              e.ɵɵelementStart(51, "button", 29),
              e.ɵɵlistener("click", function () {
                return M.test();
              }),
              e.ɵɵpipe(52, "async"),
              e.ɵɵtext(53),
              e.ɵɵpipe(54, "translate"),
              e.ɵɵelementEnd(),
              e.ɵɵelement(55, "span", 2),
              e.ɵɵelementStart(56, "button", 30),
              e.ɵɵlistener("click", function () {
                return M.cancel();
              }),
              e.ɵɵpipe(57, "async"),
              e.ɵɵtext(58),
              e.ɵɵpipe(59, "translate"),
              e.ɵɵelementEnd(),
              e.ɵɵelementStart(60, "button", 31),
              e.ɵɵpipe(61, "async"),
              e.ɵɵtext(62),
              e.ɵɵpipe(63, "translate"),
              e.ɵɵelementEnd(),
              e.ɵɵelementEnd(),
              e.ɵɵelementEnd()),
              2 & f &&
                (e.ɵɵproperty("formGroup", M.nodeScriptTestFormGroup),
                e.ɵɵadvance(3),
                e.ɵɵtextInterpolate2(
                  "",
                  e.ɵɵpipeBind1(4, 23, "rulenode.test-script-function"),
                  " (",
                  e.ɵɵpipeBind1(
                    5,
                    25,
                    M.scriptLang === M.scriptLanguage.JS
                      ? "rulenode.script-lang-java-script"
                      : "rulenode.script-lang-tbel"
                  ),
                  ")"
                ),
                e.ɵɵadvance(20),
                e.ɵɵpropertyInterpolate(
                  "label",
                  e.ɵɵpipeBind1(25, 27, "rulenode.message")
                ),
                e.ɵɵproperty("contentType", M.contentTypes.JSON)(
                  "fillHeight",
                  !0
                ),
                e.ɵɵadvance(15),
                e.ɵɵproperty(
                  "ngClass",
                  e.ɵɵpureFunction1(43, w, M.data.helpId)
                ),
                e.ɵɵadvance(2),
                e.ɵɵtextInterpolate(M.functionTitle),
                e.ɵɵadvance(1),
                e.ɵɵpropertyInterpolate("functionName", M.data.functionName),
                e.ɵɵproperty("functionArgs", M.data.argNames)(
                  "validationArgs",
                  e.ɵɵpureFunction3(
                    45,
                    b,
                    M.data.msg,
                    M.data.metadata,
                    M.data.msgType
                  )
                )(
                  "disableUndefinedCheck",
                  M.scriptLang === M.scriptLanguage.TBEL
                )("helpId", M.data.helpId)("fillHeight", !0),
                e.ɵɵadvance(7),
                e.ɵɵpropertyInterpolate(
                  "label",
                  e.ɵɵpipeBind1(49, 29, "rulenode.output")
                ),
                e.ɵɵproperty("contentType", M.contentTypes.JSON)(
                  "fillHeight",
                  !0
                ),
                e.ɵɵadvance(3),
                e.ɵɵproperty(
                  "disabled",
                  e.ɵɵpipeBind1(52, 31, M.isLoading$) ||
                    M.nodeScriptTestFormGroup.invalid
                ),
                e.ɵɵadvance(2),
                e.ɵɵtextInterpolate1(
                  " ",
                  e.ɵɵpipeBind1(54, 33, "rulenode.test"),
                  " "
                ),
                e.ɵɵadvance(3),
                e.ɵɵproperty("disabled", e.ɵɵpipeBind1(57, 35, M.isLoading$)),
                e.ɵɵadvance(2),
                e.ɵɵtextInterpolate1(
                  " ",
                  e.ɵɵpipeBind1(59, 37, "action.cancel"),
                  " "
                ),
                e.ɵɵadvance(2),
                e.ɵɵproperty(
                  "disabled",
                  e.ɵɵpipeBind1(61, 39, M.isLoading$) ||
                    M.nodeScriptTestFormGroup.get("script").invalid ||
                    !M.nodeScriptTestFormGroup.get("script").dirty
                ),
                e.ɵɵadvance(2),
                e.ɵɵtextInterpolate1(
                  " ",
                  e.ɵɵpipeBind1(63, 41, "action.save"),
                  " "
                ));
          },
          styles: [
            '@charset "UTF-8";.tb-node-script-test-dialog{width:100%;height:100%}.tb-node-script-test-dialog .tb-split{box-sizing:border-box;overflow-x:hidden;overflow-y:auto}.tb-node-script-test-dialog .ace_editor{font-size:14px!important}.tb-node-script-test-dialog .tb-content{padding-top:5px;padding-left:5px;border:1px solid #c0c0c0}.tb-node-script-test-dialog .gutter{background-color:#eee;background-repeat:no-repeat;background-position:50%}.tb-node-script-test-dialog .gutter.gutter-horizontal{cursor:col-resize;background-image:url(vertical.5e6d1df402c3bc10ecc6.png)}.tb-node-script-test-dialog .gutter.gutter-vertical{cursor:row-resize;background-image:url(horizontal.98604ef1a5065a065f35.png)}.tb-node-script-test-dialog .tb-split.tb-split-horizontal,.tb-node-script-test-dialog .gutter.gutter-horizontal{float:left;height:100%}.tb-node-script-test-dialog .tb-split.tb-split-vertical{display:flex}.tb-node-script-test-dialog .tb-split.tb-split-vertical .tb-split.tb-content{height:100%}.tb-node-script-test-dialog div.tb-editor-area-title-panel{position:absolute;top:13px;right:40px;z-index:5;font-size:.8rem;font-weight:500}.tb-node-script-test-dialog div.tb-editor-area-title-panel.tb-js-function{right:80px}.tb-node-script-test-dialog div.tb-editor-area-title-panel.tb-js-function.tb-js-function-help{right:116px}.tb-node-script-test-dialog div.tb-editor-area-title-panel label{padding:4px;color:#00acc1;background:rgba(220,220,220,.35);border-radius:5px}.tb-node-script-test-dialog div.tb-editor-area-title-panel .mat-button{min-width:32px;min-height:15px;padding:4px;margin:0;font-size:.8rem;line-height:15px;color:#7b7b7b;background:rgba(220,220,220,.35)}.tb-node-script-test-dialog .tb-resize-container{position:relative;width:100%;height:100%;overflow-y:auto}.tb-node-script-test-dialog .tb-resize-container .ace_editor{height:100%}\n',
          ],
          encapsulation: 2,
        }));
    },
    72062: (ee, R, t) => {
      "use strict";
      t.r(R), t.d(R, { TodoDialogComponent: () => s });
      var e = t(37716),
        n = t(22238),
        a = t(35618),
        C = t(51095);
      class s {
        constructor(o) {
          this.dialogRef = o;
        }
      }
      (s.ɵfac = function (o) {
        return new (o || s)(e.ɵɵdirectiveInject(n.MatDialogRef));
      }),
        (s.ɵcmp = e.ɵɵdefineComponent({
          type: s,
          selectors: [["tb-todo-dialog"]],
          decls: 8,
          vars: 1,
          consts: [
            ["mat-dialog-title", ""],
            ["mat-dialog-content", ""],
            [
              "mat-dialog-actions",
              "",
              "fxLayout",
              "row",
              "fxLayoutAlign",
              "end center",
            ],
            [
              "mat-button",
              "",
              "color",
              "primary",
              "cdkFocusInitial",
              "",
              3,
              "mat-dialog-close",
            ],
          ],
          template: function (o, i) {
            1 & o &&
              (e.ɵɵelementStart(0, "h2", 0),
              e.ɵɵtext(1, "Coming soon!"),
              e.ɵɵelementEnd(),
              e.ɵɵelementStart(2, "div", 1),
              e.ɵɵelementStart(3, "h1"),
              e.ɵɵtext(4, "COMING SOON!"),
              e.ɵɵelementEnd(),
              e.ɵɵelementEnd(),
              e.ɵɵelementStart(5, "div", 2),
              e.ɵɵelementStart(6, "button", 3),
              e.ɵɵtext(7, "Ok"),
              e.ɵɵelementEnd(),
              e.ɵɵelementEnd()),
              2 & o && (e.ɵɵadvance(6), e.ɵɵproperty("mat-dialog-close", !0));
          },
          directives: [
            n.MatDialogTitle,
            n.MatDialogContent,
            n.MatDialogActions,
            a.DefaultLayoutDirective,
            a.DefaultLayoutAlignDirective,
            C.MatButton,
            n.MatDialogClose,
          ],
          styles: [
            '@charset "UTF-8";[_nghost-%COMP%]   .mat-dialog-content[_ngcontent-%COMP%]{padding:0 24px 24px}[_nghost-%COMP%]   .mat-dialog-content[_ngcontent-%COMP%]   img[_ngcontent-%COMP%]{max-width:500px}',
          ],
        }));
    },
    73100: (ee, R, t) => {
      "use strict";
      t.r(R),
        t.d(R, {
          TbComponentOutletDirective: () => n,
          TbComponentOutletContext: () => a,
        });
      var e = t(37716);
      class n {
        constructor(s, d) {
          (this.viewContainer = s),
            (this.renderer = d),
            (this.componentRef = null),
            (this.context = new a()),
            (this.tbComponentOutletContext = null),
            (this.tbComponentStyle = null),
            (this.tbComponentInjector = null),
            (this.tbComponentOutlet = null),
            (this.componentChange = new e.EventEmitter());
        }
        static ngTemplateContextGuard(s, d) {
          return !0;
        }
        recreateComponent() {
          if (
            (this.viewContainer.clear(),
            (this.componentRef = this.viewContainer.createComponent(
              this.tbComponentOutlet,
              0,
              this.tbComponentInjector
            )),
            this.componentChange.next(this.componentRef),
            this.tbComponentOutletContext)
          )
            for (const s of Object.keys(this.tbComponentOutletContext))
              this.componentRef.instance[s] = this.tbComponentOutletContext[s];
          if (this.tbComponentStyle)
            for (const s of Object.keys(this.tbComponentStyle))
              this.renderer.setStyle(
                this.componentRef.location.nativeElement,
                s,
                this.tbComponentStyle[s]
              );
        }
        updateContext() {
          const s = this.tbComponentOutletContext,
            d = this.componentRef.instance;
          if (s) for (const o of Object.keys(s)) d[o] = s[o];
        }
        ngOnChanges(s) {
          const { tbComponentOutletContext: d, tbComponentOutlet: o } = s;
          o && (this.context.$implicit = o.currentValue),
            (() => {
              let D = !1;
              if (o)
                if (o.firstChange) D = !0;
                else {
                  const r = o.previousValue instanceof e.ComponentFactory,
                    h = o.currentValue instanceof e.ComponentFactory;
                  D = r || h;
                }
              return (
                (d &&
                  ((r) => {
                    const h = Object.keys(r.previousValue || {}),
                      p = Object.keys(r.currentValue || {});
                    if (h.length === p.length) {
                      for (const _ of p) if (-1 === h.indexOf(_)) return !0;
                      return !1;
                    }
                    return !0;
                  })(d)) ||
                D
              );
            })()
              ? this.recreateComponent()
              : this.updateContext();
        }
      }
      (n.ɵfac = function (s) {
        return new (s || n)(
          e.ɵɵdirectiveInject(e.ViewContainerRef),
          e.ɵɵdirectiveInject(e.Renderer2)
        );
      }),
        (n.ɵdir = e.ɵɵdefineDirective({
          type: n,
          selectors: [["", "tbComponentOutlet", ""]],
          inputs: {
            tbComponentOutletContext: "tbComponentOutletContext",
            tbComponentStyle: "tbComponentStyle",
            tbComponentInjector: "tbComponentInjector",
            tbComponentOutlet: "tbComponentOutlet",
          },
          outputs: { componentChange: "componentChange" },
          exportAs: ["tbComponentOutlet"],
          features: [e.ɵɵNgOnChangesFeature],
        }));
      class a {}
    },
    69629: (ee, R, t) => {
      "use strict";
      t.r(R),
        t.d(R, {
          TbStringTemplateOutletDirective: () => n,
          TbStringTemplateOutletContext: () => a,
        });
      var e = t(37716);
      class n {
        constructor(s, d) {
          (this.viewContainer = s),
            (this.templateRef = d),
            (this.embeddedViewRef = null),
            (this.context = new a()),
            (this.tbStringTemplateOutletContext = null),
            (this.tbStringTemplateOutlet = null);
        }
        static ngTemplateContextGuard(s, d) {
          return !0;
        }
        recreateView() {
          this.viewContainer.clear();
          const s = this.tbStringTemplateOutlet instanceof e.TemplateRef,
            d = s ? this.tbStringTemplateOutlet : this.templateRef;
          this.embeddedViewRef = this.viewContainer.createEmbeddedView(
            d,
            s ? this.tbStringTemplateOutletContext : this.context
          );
        }
        updateContext() {
          const d =
              this.tbStringTemplateOutlet instanceof e.TemplateRef
                ? this.tbStringTemplateOutletContext
                : this.context,
            o = this.embeddedViewRef.context;
          if (d) for (const i of Object.keys(d)) o[i] = d[i];
        }
        ngOnChanges(s) {
          const {
            tbStringTemplateOutletContext: d,
            tbStringTemplateOutlet: o,
          } = s;
          o && (this.context.$implicit = o.currentValue),
            (() => {
              let D = !1;
              if (o)
                if (o.firstChange) D = !0;
                else {
                  const r = o.previousValue instanceof e.TemplateRef,
                    h = o.currentValue instanceof e.TemplateRef;
                  D = r || h;
                }
              return (
                (d &&
                  ((r) => {
                    const h = Object.keys(r.previousValue || {}),
                      p = Object.keys(r.currentValue || {});
                    if (h.length === p.length) {
                      for (const _ of p) if (-1 === h.indexOf(_)) return !0;
                      return !1;
                    }
                    return !0;
                  })(d)) ||
                D
              );
            })()
              ? this.recreateView()
              : this.updateContext();
        }
      }
      (n.ɵfac = function (s) {
        return new (s || n)(
          e.ɵɵdirectiveInject(e.ViewContainerRef),
          e.ɵɵdirectiveInject(e.TemplateRef)
        );
      }),
        (n.ɵdir = e.ɵɵdefineDirective({
          type: n,
          selectors: [["", "tbStringTemplateOutlet", ""]],
          inputs: {
            tbStringTemplateOutletContext: "tbStringTemplateOutletContext",
            tbStringTemplateOutlet: "tbStringTemplateOutlet",
          },
          exportAs: ["tbStringTemplateOutlet"],
          features: [e.ɵɵNgOnChangesFeature],
        }));
      class a {}
    },
    39746: (ee, R, t) => {
      "use strict";
      t.r(R), t.d(R, { TbJsonToStringDirective: () => s });
      var e = t(37716),
        n = t(3679),
        a = t(72458),
        C = t(41960);
      class s {
        constructor(o, i, g) {
          (this.render = o),
            (this.element = i),
            (this.errorStateMatcher = g),
            (this.propagateChange = null);
        }
        input(o) {
          try {
            (this.data = JSON.parse(o)),
              (0, C.Kn)(this.data)
                ? (this.parseError = !1)
                : (this.parseError = !0);
          } catch (i) {
            this.parseError = !0;
          }
          this.propagateChange(this.data);
        }
        isErrorState(o, i) {
          const g = this.errorStateMatcher.isErrorState(o, i),
            D = !!(o && o.invalid && this.parseError);
          return g || D;
        }
        validate(o) {
          return this.parseError ? { invalidJSON: { valid: !1 } } : null;
        }
        writeValue(o) {
          o &&
            ((this.data = o),
            (this.parseError = !1),
            this.render.setProperty(
              this.element.nativeElement,
              "value",
              JSON.stringify(o)
            ));
        }
        registerOnChange(o) {
          this.propagateChange = o;
        }
        registerOnTouched(o) {}
      }
      (s.ɵfac = function (o) {
        return new (o || s)(
          e.ɵɵdirectiveInject(e.Renderer2),
          e.ɵɵdirectiveInject(e.ElementRef),
          e.ɵɵdirectiveInject(a.ErrorStateMatcher, 4)
        );
      }),
        (s.ɵdir = e.ɵɵdefineDirective({
          type: s,
          selectors: [["", "tb-json-to-string", ""]],
          hostBindings: function (o, i) {
            1 & o &&
              e.ɵɵlistener("input", function (D) {
                return i.input(D.target.value);
              });
          },
          features: [
            e.ɵɵProvidersFeature([
              {
                provide: n.NG_VALUE_ACCESSOR,
                useExisting: (0, e.forwardRef)(() => s),
                multi: !0,
              },
              {
                provide: n.NG_VALIDATORS,
                useExisting: (0, e.forwardRef)(() => s),
                multi: !0,
              },
              { provide: a.ErrorStateMatcher, useExisting: s },
            ]),
          ],
        }));
    },
    41387: (ee, R, t) => {
      "use strict";
      t.r(R), t.d(R, { EntityAutocompleteComponent: () => F });
      var e = t(34553),
        n = t(37716),
        a = t(3679),
        C = t(79765),
        s = t(66682),
        d = t(25917),
        o = t(54395),
        i = t(68307),
        g = t(88002),
        D = t(43190),
        y = t(78345),
        m = t(5304),
        r = t(52042),
        h = t(23914),
        p = t(39490),
        _ = t(54787),
        E = t(26311),
        c = t(41960),
        v = t(86710),
        I = t(29790),
        l = t(98295),
        T = t(83166),
        O = t(21554),
        w = t(38583),
        b = t(51095),
        S = t(76627),
        u = t(72458),
        f = t(53883);
      const M = ["entityInput"];
      function L(V, P) {
        if (1 & V) {
          const A = n.ɵɵgetCurrentView();
          n.ɵɵelementStart(0, "button", 9),
            n.ɵɵlistener("click", function () {
              return n.ɵɵrestoreView(A), n.ɵɵnextContext().clear();
            }),
            n.ɵɵelementStart(1, "mat-icon", 10),
            n.ɵɵtext(2, "close"),
            n.ɵɵelementEnd(),
            n.ɵɵelementEnd();
        }
      }
      function k(V, P) {
        if (
          (1 & V &&
            (n.ɵɵelementStart(0, "mat-option", 11),
            n.ɵɵelement(1, "span", 12),
            n.ɵɵpipe(2, "highlight"),
            n.ɵɵelementEnd()),
          2 & V)
        ) {
          const A = P.$implicit,
            U = n.ɵɵnextContext();
          n.ɵɵproperty("value", A),
            n.ɵɵadvance(1),
            n.ɵɵproperty(
              "innerHTML",
              n.ɵɵpipeBind2(2, 2, A.name, U.searchText),
              n.ɵɵsanitizeHtml
            );
        }
      }
      const N = function (V) {
        return { entity: V };
      };
      function B(V, P) {
        if (
          (1 & V &&
            (n.ɵɵelementStart(0, "mat-option", 11),
            n.ɵɵelementStart(1, "span"),
            n.ɵɵtext(2),
            n.ɵɵpipe(3, "async"),
            n.ɵɵelementEnd(),
            n.ɵɵelementEnd()),
          2 & V)
        ) {
          const A = n.ɵɵnextContext();
          n.ɵɵproperty("value", null),
            n.ɵɵadvance(2),
            n.ɵɵtextInterpolate1(
              " ",
              n.ɵɵpipeBind1(
                3,
                2,
                A.translate.get(
                  A.noEntitiesMatchingText,
                  n.ɵɵpureFunction1(4, N, A.searchText)
                )
              ),
              " "
            );
        }
      }
      function j(V, P) {
        if (
          (1 & V &&
            (n.ɵɵelementStart(0, "mat-error"),
            n.ɵɵtext(1),
            n.ɵɵpipe(2, "translate"),
            n.ɵɵelementEnd()),
          2 & V)
        ) {
          const A = n.ɵɵnextContext();
          n.ɵɵadvance(1),
            n.ɵɵtextInterpolate1(
              " ",
              n.ɵɵpipeBind1(2, 1, A.entityRequiredText),
              " "
            );
        }
      }
      class F {
        constructor(P, A, U, G) {
          (this.store = P),
            (this.translate = A),
            (this.entityService = U),
            (this.fb = G),
            (this.appearance = "legacy"),
            (this.entityChanged = new n.EventEmitter()),
            (this.searchText = ""),
            (this.dirty = !1),
            (this.refresh$ = new C.xQ()),
            (this.propagateChange = (Z) => {}),
            (this.selectEntityFormGroup = this.fb.group({ entity: [null] }));
        }
        set entityType(P) {
          this.entityTypeValue !== P &&
            ((this.entityTypeValue = P),
            this.load(),
            this.reset(),
            this.refresh$.next([]),
            (this.dirty = !0));
        }
        set entitySubtype(P) {
          if (this.entitySubtypeValue !== P) {
            this.entitySubtypeValue = P;
            const A = this.getCurrentEntity();
            A &&
              A.type !== this.entitySubtypeValue &&
              (this.reset(), this.refresh$.next([]), (this.dirty = !0)),
              this.selectEntityFormGroup.get("entity").updateValueAndValidity();
          }
        }
        get required() {
          return this.requiredValue;
        }
        set required(P) {
          this.requiredValue = (0, p.coerceBooleanProperty)(P);
        }
        registerOnChange(P) {
          this.propagateChange = P;
        }
        registerOnTouched(P) {}
        ngOnInit() {
          this.filteredEntities = (0, s.T)(
            this.refresh$.asObservable(),
            this.selectEntityFormGroup.get("entity").valueChanges.pipe(
              (0, o.b)(150),
              (0, i.b)((P) => {
                let A;
                (A = "string" != typeof P && P ? P.id.id : null),
                  this.updateView(A, P),
                  null === P && this.clear();
              }),
              (0, g.U)((P) => (P ? ("string" == typeof P ? P : P.name) : "")),
              (0, D.w)((P) => this.fetchEntities(P)),
              (0, y.B)()
            )
          );
        }
        ngAfterViewInit() {}
        load() {
          if (this.entityTypeValue)
            switch (this.entityTypeValue) {
              case r.py.ASSET:
                (this.entityText = "asset.asset"),
                  (this.noEntitiesMatchingText = "asset.no-assets-matching"),
                  (this.entityRequiredText = "asset.asset-required");
                break;
              case r.py.DEVICE:
                (this.entityText = "device.device"),
                  (this.noEntitiesMatchingText = "device.no-devices-matching"),
                  (this.entityRequiredText = "device.device-required");
                break;
              case r.py.EDGE:
                (this.entityText = "edge.edge"),
                  (this.noEntitiesMatchingText = "edge.no-edges-matching"),
                  (this.entityRequiredText = "edge.edge-required");
                break;
              case r.py.ENTITY_VIEW:
                (this.entityText = "entity-view.entity-view"),
                  (this.noEntitiesMatchingText =
                    "entity-view.no-entity-views-matching"),
                  (this.entityRequiredText =
                    "entity-view.entity-view-required");
                break;
              case r.py.RULE_CHAIN:
                (this.entityText = "rulechain.rulechain"),
                  (this.noEntitiesMatchingText =
                    "rulechain.no-rulechains-matching"),
                  (this.entityRequiredText = "rulechain.rulechain-required");
                break;
              case r.py.TENANT:
              case r.Ul.CURRENT_TENANT:
                (this.entityText = "tenant.tenant"),
                  (this.noEntitiesMatchingText = "tenant.no-tenants-matching"),
                  (this.entityRequiredText = "tenant.tenant-required");
                break;
              case r.py.CUSTOMER:
                (this.entityText = "customer.customer"),
                  (this.noEntitiesMatchingText =
                    "customer.no-customers-matching"),
                  (this.entityRequiredText = "customer.customer-required");
                break;
              case r.py.USER:
              case r.Ul.CURRENT_USER:
                (this.entityText = "user.user"),
                  (this.noEntitiesMatchingText = "user.no-users-matching"),
                  (this.entityRequiredText = "user.user-required");
                break;
              case r.py.DASHBOARD:
                (this.entityText = "dashboard.dashboard"),
                  (this.noEntitiesMatchingText =
                    "dashboard.no-dashboards-matching"),
                  (this.entityRequiredText = "dashboard.dashboard-required");
                break;
              case r.py.ALARM:
                (this.entityText = "alarm.alarm"),
                  (this.noEntitiesMatchingText = "alarm.no-alarms-matching"),
                  (this.entityRequiredText = "alarm.alarm-required");
                break;
              case r.Ul.CURRENT_CUSTOMER:
                (this.entityText = "customer.default-customer"),
                  (this.noEntitiesMatchingText =
                    "customer.no-customers-matching"),
                  (this.entityRequiredText =
                    "customer.default-customer-required");
                break;
              case r.Ul.CURRENT_USER_OWNER:
                (0, _.fP)(this.store).authority === E.W.TENANT_ADMIN
                  ? ((this.entityText = "tenant.tenant"),
                    (this.noEntitiesMatchingText =
                      "tenant.no-tenants-matching"),
                    (this.entityRequiredText = "tenant.tenant-required"))
                  : ((this.entityText = "customer.customer"),
                    (this.noEntitiesMatchingText =
                      "customer.no-customers-matching"),
                    (this.entityRequiredText = "customer.customer-required"));
            }
          this.labelText &&
            this.labelText.length &&
            (this.entityText = this.labelText),
            this.requiredText &&
              this.requiredText.length &&
              (this.entityRequiredText = this.requiredText);
          const P = this.getCurrentEntity();
          if (P) {
            const A = P.id.entityType;
            this.entityTypeValue && A !== this.entityTypeValue && this.reset();
          }
        }
        getCurrentEntity() {
          const P = this.selectEntityFormGroup.get("entity").value;
          return P && "string" != typeof P ? P : null;
        }
        setDisabledState(P) {
          (this.disabled = P),
            this.disabled
              ? this.selectEntityFormGroup.disable({ emitEvent: !1 })
              : this.selectEntityFormGroup.enable({ emitEvent: !1 });
        }
        writeValue(P) {
          var A = this;
          return (0, e.Z)(function* () {
            if (
              ((A.searchText = ""),
              null !== P && ("string" == typeof P || (P.entityType && P.id)))
            ) {
              let U, G;
              "string" == typeof P
                ? ((U = A.checkEntityType(A.entityTypeValue)), (G = P))
                : ((U = A.checkEntityType(P.entityType)), (G = P.id));
              let Z = null;
              try {
                Z = yield A.entityService
                  .getEntity(U, G, { ignoreLoading: !0, ignoreErrors: !0 })
                  .toPromise();
              } catch (le) {
                A.propagateChange(null);
              }
              (A.modelValue = null !== Z ? Z.id.id : null),
                A.selectEntityFormGroup
                  .get("entity")
                  .patchValue(null !== Z ? Z : "", { emitEvent: !1 }),
                A.entityChanged.emit(Z);
            } else (A.modelValue = null), A.selectEntityFormGroup.get("entity").patchValue("", { emitEvent: !1 });
            A.dirty = !0;
          })();
        }
        onFocus() {
          this.dirty &&
            (this.selectEntityFormGroup
              .get("entity")
              .updateValueAndValidity({ onlySelf: !0, emitEvent: !0 }),
            (this.dirty = !1));
        }
        reset() {
          this.selectEntityFormGroup
            .get("entity")
            .patchValue("", { emitEvent: !1 });
        }
        updateView(P, A) {
          (0, c.Xy)(this.modelValue, P) ||
            ((this.modelValue = P),
            this.propagateChange(this.modelValue),
            this.entityChanged.emit(A));
        }
        displayEntityFn(P) {
          return P ? P.name : void 0;
        }
        fetchEntities(P) {
          this.searchText = P;
          const A = this.checkEntityType(this.entityTypeValue);
          return this.entityService
            .getEntitiesByNameFilter(A, P, 50, this.entitySubtypeValue, {
              ignoreLoading: !0,
            })
            .pipe(
              (0, m.K)(() => (0, d.of)(null)),
              (0, g.U)((U) => {
                if (U) {
                  if (this.excludeEntityIds && this.excludeEntityIds.length) {
                    const G = [];
                    return (
                      U.forEach((Z) => {
                        -1 === this.excludeEntityIds.indexOf(Z.id.id) &&
                          G.push(Z);
                      }),
                      G
                    );
                  }
                  return U;
                }
                return [];
              })
            );
        }
        clear() {
          this.selectEntityFormGroup
            .get("entity")
            .patchValue("", { emitEvent: !0 }),
            setTimeout(() => {
              this.entityInput.nativeElement.blur(),
                this.entityInput.nativeElement.focus();
            }, 0);
        }
        checkEntityType(P) {
          return P === r.Ul.CURRENT_CUSTOMER
            ? r.py.CUSTOMER
            : P === r.Ul.CURRENT_TENANT
            ? r.py.TENANT
            : P === r.Ul.CURRENT_USER
            ? r.py.USER
            : P === r.Ul.CURRENT_USER_OWNER
            ? (0, _.fP)(this.store).authority === E.W.TENANT_ADMIN
              ? r.py.TENANT
              : r.py.CUSTOMER
            : P;
        }
      }
      (F.ɵfac = function (P) {
        return new (P || F)(
          n.ɵɵdirectiveInject(v.Store),
          n.ɵɵdirectiveInject(I.TranslateService),
          n.ɵɵdirectiveInject(h.c),
          n.ɵɵdirectiveInject(a.FormBuilder)
        );
      }),
        (F.ɵcmp = n.ɵɵdefineComponent({
          type: F,
          selectors: [["tb-entity-autocomplete"]],
          viewQuery: function (P, A) {
            if ((1 & P && n.ɵɵviewQuery(M, 7), 2 & P)) {
              let U;
              n.ɵɵqueryRefresh((U = n.ɵɵloadQuery())) &&
                (A.entityInput = U.first);
            }
          },
          inputs: {
            entityType: "entityType",
            entitySubtype: "entitySubtype",
            excludeEntityIds: "excludeEntityIds",
            labelText: "labelText",
            requiredText: "requiredText",
            appearance: "appearance",
            required: "required",
            disabled: "disabled",
          },
          outputs: { entityChanged: "entityChanged" },
          features: [
            n.ɵɵProvidersFeature([
              {
                provide: a.NG_VALUE_ACCESSOR,
                useExisting: (0, n.forwardRef)(() => F),
                multi: !0,
              },
            ]),
          ],
          decls: 12,
          vars: 16,
          consts: [
            [1, "mat-block", 3, "formGroup", "appearance"],
            [
              "matInput",
              "",
              "type",
              "text",
              "formControlName",
              "entity",
              3,
              "placeholder",
              "required",
              "matAutocomplete",
              "focusin",
            ],
            ["entityInput", ""],
            [
              "type",
              "button",
              "matSuffix",
              "",
              "mat-button",
              "",
              "mat-icon-button",
              "",
              "aria-label",
              "Clear",
              3,
              "click",
              4,
              "ngIf",
            ],
            [1, "tb-autocomplete", 3, "displayWith"],
            ["entityAutocomplete", "matAutocomplete"],
            [3, "value", 4, "ngFor", "ngForOf"],
            [3, "value", 4, "ngIf"],
            [4, "ngIf"],
            [
              "type",
              "button",
              "matSuffix",
              "",
              "mat-button",
              "",
              "mat-icon-button",
              "",
              "aria-label",
              "Clear",
              3,
              "click",
            ],
            [1, "material-icons"],
            [3, "value"],
            [3, "innerHTML"],
          ],
          template: function (P, A) {
            if (
              (1 & P &&
                (n.ɵɵelementStart(0, "mat-form-field", 0),
                n.ɵɵelementStart(1, "input", 1, 2),
                n.ɵɵlistener("focusin", function () {
                  return A.onFocus();
                }),
                n.ɵɵpipe(3, "translate"),
                n.ɵɵelementEnd(),
                n.ɵɵtemplate(4, L, 3, 0, "button", 3),
                n.ɵɵelementStart(5, "mat-autocomplete", 4, 5),
                n.ɵɵtemplate(7, k, 3, 5, "mat-option", 6),
                n.ɵɵpipe(8, "async"),
                n.ɵɵtemplate(9, B, 4, 6, "mat-option", 7),
                n.ɵɵpipe(10, "async"),
                n.ɵɵelementEnd(),
                n.ɵɵtemplate(11, j, 3, 3, "mat-error", 8),
                n.ɵɵelementEnd()),
              2 & P)
            ) {
              const U = n.ɵɵreference(6);
              let G;
              n.ɵɵproperty("formGroup", A.selectEntityFormGroup)(
                "appearance",
                A.appearance
              ),
                n.ɵɵadvance(1),
                n.ɵɵpropertyInterpolate(
                  "placeholder",
                  n.ɵɵpipeBind1(3, 10, A.entityText)
                ),
                n.ɵɵproperty("required", A.required)("matAutocomplete", U),
                n.ɵɵadvance(3),
                n.ɵɵproperty(
                  "ngIf",
                  A.selectEntityFormGroup.get("entity").value && !A.disabled
                ),
                n.ɵɵadvance(1),
                n.ɵɵproperty("displayWith", A.displayEntityFn),
                n.ɵɵadvance(2),
                n.ɵɵproperty(
                  "ngForOf",
                  n.ɵɵpipeBind1(8, 12, A.filteredEntities)
                ),
                n.ɵɵadvance(2),
                n.ɵɵproperty(
                  "ngIf",
                  !(
                    null != (G = n.ɵɵpipeBind1(10, 14, A.filteredEntities)) &&
                    G.length
                  )
                ),
                n.ɵɵadvance(2),
                n.ɵɵproperty(
                  "ngIf",
                  A.selectEntityFormGroup.get("entity").hasError("required")
                );
            }
          },
          directives: [
            l.MatFormField,
            a.NgControlStatusGroup,
            a.FormGroupDirective,
            T.MatInput,
            a.DefaultValueAccessor,
            O.MatAutocompleteTrigger,
            a.NgControlStatus,
            a.FormControlName,
            a.RequiredValidator,
            w.NgIf,
            O.MatAutocomplete,
            w.NgForOf,
            b.MatButton,
            l.MatSuffix,
            S.MatIcon,
            u.MatOption,
            l.MatError,
          ],
          pipes: [I.TranslatePipe, w.AsyncPipe, f.HighlightPipe],
          styles: [
            '@charset "UTF-8";[_nghost-%COMP%]     .mat-form-field-infix{width:auto;min-width:100px}',
          ],
        }));
    },
    2900: (ee, R, t) => {
      "use strict";
      t.r(R), t.d(R, { EntityGatewaySelectComponent: () => S });
      var e = t(37716),
        n = t(3679),
        a = t(39490),
        C = t(36461),
        s = t(25917),
        d = t(68307),
        o = t(88002),
        i = t(19773),
        g = t(78345),
        D = t(23914),
        y = t(52042),
        m = t(16797),
        r = t(33441),
        h = t(54787),
        p = t(26311),
        _ = t(86710),
        E = t(29790);
      const c = ["deviceGatewayInput"];
      function v(u, f) {
        if (1 & u) {
          const M = e.ɵɵgetCurrentView();
          e.ɵɵelementStart(0, "button", 9),
            e.ɵɵlistener("click", function () {
              return e.ɵɵrestoreView(M), e.ɵɵnextContext().clear();
            }),
            e.ɵɵelementStart(1, "mat-icon", 10),
            e.ɵɵtext(2, "close"),
            e.ɵɵelementEnd(),
            e.ɵɵelementEnd();
        }
      }
      function I(u, f) {
        if (
          (1 & u &&
            (e.ɵɵelementStart(0, "mat-option", 11),
            e.ɵɵelement(1, "span", 12),
            e.ɵɵpipe(2, "highlight"),
            e.ɵɵelementEnd()),
          2 & u)
        ) {
          const M = f.$implicit,
            L = e.ɵɵnextContext();
          e.ɵɵproperty("value", M),
            e.ɵɵadvance(1),
            e.ɵɵproperty(
              "innerHTML",
              e.ɵɵpipeBind2(2, 2, M.name, L.searchText),
              e.ɵɵsanitizeHtml
            );
        }
      }
      function l(u, f) {
        1 & u &&
          (e.ɵɵelementStart(0, "div"),
          e.ɵɵelementStart(1, "span", 18),
          e.ɵɵtext(2, "gateway.no-gateway-found"),
          e.ɵɵelementEnd(),
          e.ɵɵelementEnd());
      }
      const T = function (u) {
        return { item: u };
      };
      function O(u, f) {
        if (
          (1 & u &&
            (e.ɵɵelementStart(0, "span", 19),
            e.ɵɵpipe(1, "truncate"),
            e.ɵɵtext(2, " gateway.no-gateway-matching "),
            e.ɵɵelementEnd()),
          2 & u)
        ) {
          const M = e.ɵɵnextContext(2);
          e.ɵɵproperty(
            "translateParams",
            e.ɵɵpureFunction1(
              6,
              T,
              e.ɵɵpipeBind4(1, 1, M.searchText, !0, 6, "...")
            )
          );
        }
      }
      function w(u, f) {
        if (1 & u) {
          const M = e.ɵɵgetCurrentView();
          e.ɵɵelementStart(0, "mat-option", 13),
            e.ɵɵelementStart(1, "div", 14),
            e.ɵɵlistener("click", function (k) {
              return k.stopPropagation();
            }),
            e.ɵɵtemplate(2, l, 3, 0, "div", 15),
            e.ɵɵtemplate(
              3,
              O,
              3,
              8,
              "ng-template",
              null,
              16,
              e.ɵɵtemplateRefExtractor
            ),
            e.ɵɵelementStart(5, "span"),
            e.ɵɵelementStart(6, "a", 17),
            e.ɵɵlistener("click", function (k) {
              e.ɵɵrestoreView(M);
              const N = e.ɵɵnextContext();
              return N.createGateway(k, N.searchText);
            }),
            e.ɵɵtext(7, "gateway.create-new-gateway"),
            e.ɵɵelementEnd(),
            e.ɵɵelementEnd(),
            e.ɵɵelementEnd(),
            e.ɵɵelementEnd();
        }
        if (2 & u) {
          const M = e.ɵɵreference(4),
            L = e.ɵɵnextContext();
          e.ɵɵproperty("value", null),
            e.ɵɵadvance(2),
            e.ɵɵproperty("ngIf", !L.textIsNotEmpty(L.searchText))(
              "ngIfElse",
              M
            );
        }
      }
      function b(u, f) {
        1 & u &&
          (e.ɵɵelementStart(0, "mat-error"),
          e.ɵɵtext(1),
          e.ɵɵpipe(2, "translate"),
          e.ɵɵelementEnd()),
          2 & u &&
            (e.ɵɵadvance(1),
            e.ɵɵtextInterpolate1(
              " ",
              e.ɵɵpipeBind1(2, 1, "gateway.gateway-name-required"),
              " "
            ));
      }
      class S {
        constructor(f, M, L, k, N, B) {
          (this.store = f),
            (this.entityService = M),
            (this.dialogService = L),
            (this.deviceService = k),
            (this.translate = N),
            (this.fb = B),
            (this.gatewayNameExist = new e.EventEmitter()),
            (this.gatewayType = "Gateway"),
            (this.searchText = ""),
            (this.propagateChange = (j) => {});
        }
        get required() {
          return this.requiredValue;
        }
        set required(f) {
          this.requiredValue = (0, a.coerceBooleanProperty)(f);
        }
        set newGatewayType(f) {
          this.gatewayType = f;
        }
        registerOnChange(f) {
          this.propagateChange = f;
        }
        registerOnTouched(f) {}
        ngOnInit() {
          (this.selectDeviceGatewayFormGroup = this.fb.group({
            gateway: this.fb.control({
              value: null,
              disabled: this.isStateForm,
            }),
          })),
            this.loadGatewayList(),
            (this.filteredGateways = this.selectDeviceGatewayFormGroup
              .get("gateway")
              .valueChanges.pipe(
                (0, d.b)((f) => {
                  let M;
                  (M = "string" != typeof f && f ? f.id.id : null),
                    this.updateView(M),
                    null === f && this.clear();
                }),
                (0, o.U)((f) => (f ? ("string" == typeof f ? f : f.name) : "")),
                (0, i.zg)((f) => this.fetchGateway(f)),
                (0, g.B)()
              ));
        }
        fetchGateway(f) {
          this.searchText = f;
          let M = [];
          return (
            (M =
              f && f.length
                ? this.gatewayList.filter((L) =>
                    L.name.toLowerCase().includes(f.toLowerCase())
                  )
                : this.gatewayList),
            (0, s.of)(M)
          );
        }
        onFocus() {
          this.dirty &&
            (this.selectDeviceGatewayFormGroup
              .get("gateway")
              .updateValueAndValidity({ onlySelf: !0, emitEvent: !0 }),
            (this.dirty = !1));
        }
        displayGatewayFn(f) {
          return f ? f.name : void 0;
        }
        setDisabledState(f) {}
        writeValue(f) {
          null === f &&
            ((this.searchText = ""),
            this.selectDeviceGatewayFormGroup
              .get("gateway")
              .patchValue("", { emitEvent: !1 }),
            (this.dirty = !0));
        }
        clear(f = "", M) {
          (this.searchText = f),
            this.selectDeviceGatewayFormGroup
              .get("gateway")
              .patchValue(f, { emitEvent: !0 }),
            M ||
              setTimeout(() => {
                this.deviceGatewayInput.nativeElement.blur(),
                  this.deviceGatewayInput.nativeElement.focus();
              }, 0);
        }
        textIsNotEmpty(f) {
          return !!f && f.length > 0;
        }
        gatewayNameEnter(f) {
          f.keyCode === C.ENTER &&
            (this.modelValue || this.createGateway(f, this.searchText));
        }
        createGateway(f, M) {
          f.preventDefault(), f.stopPropagation();
          const L = this.translate.instant("gateway.create-new-gateway"),
            k = this.translate.instant("gateway.create-new-gateway-text", {
              gatewayName: M,
            });
          this.dialogService.confirm(L, k, null, null, !0).subscribe((N) => {
            N ? this.createDeviceGateway(M) : this.clear("", !0);
          });
        }
        createDeviceGateway(f) {
          this.deviceService.findByName(f, { ignoreErrors: !0 }).subscribe(
            (M) => {
              this.gatewayNameExist.emit(f);
            },
            () => {
              const M = {
                name: f,
                label: null,
                type: this.gatewayType,
                additionalInfo: { gateway: !0 },
              };
              this.deviceService.saveDevice(M).subscribe((L) => {
                (this.searchText = ""),
                  this.gatewayList.push(L),
                  this.selectDeviceGatewayFormGroup
                    .get("gateway")
                    .patchValue(L, { emitEvent: !0 });
              });
            }
          );
        }
        loadGatewayList() {
          let f;
          if ((0, h.fP)(this.store).authority === p.W.SYS_ADMIN)
            f = (0, s.of)([]);
          else {
            const M =
              this.isStateForm && this.deviceName ? this.deviceName : "";
            f = this.entityService.getEntitiesByNameFilter(
              y.py.DEVICE,
              M,
              -1,
              "",
              { ignoreLoading: !0 }
            );
          }
          f.pipe(
            (0, o.U)((M) =>
              M
                ? M.filter((L) => {
                    var k, N;
                    return null ===
                      (N =
                        null === (k = L) || void 0 === k
                          ? void 0
                          : k.additionalInfo) || void 0 === N
                      ? void 0
                      : N.gateway;
                  })
                : []
            )
          ).subscribe((M) => {
            if (
              ((this.gatewayList = M),
              !this.searchText && this.gatewayList.length)
            ) {
              let L = null;
              this.deviceName &&
                (L = this.gatewayList.find((k) => k.name === this.deviceName)),
                L || (L = this.gatewayList[0]),
                L &&
                  this.selectDeviceGatewayFormGroup
                    .get("gateway")
                    .patchValue(L, { emitEvent: !0 });
            }
          });
        }
        updateView(f) {
          this.propagateChange(f);
        }
      }
      (S.ɵfac = function (f) {
        return new (f || S)(
          e.ɵɵdirectiveInject(_.Store),
          e.ɵɵdirectiveInject(D.c),
          e.ɵɵdirectiveInject(m.x),
          e.ɵɵdirectiveInject(r.U),
          e.ɵɵdirectiveInject(E.TranslateService),
          e.ɵɵdirectiveInject(n.FormBuilder)
        );
      }),
        (S.ɵcmp = e.ɵɵdefineComponent({
          type: S,
          selectors: [["tb-entity-gateway-select"]],
          viewQuery: function (f, M) {
            if ((1 & f && e.ɵɵviewQuery(c, 7), 2 & f)) {
              let L;
              e.ɵɵqueryRefresh((L = e.ɵɵloadQuery())) &&
                (M.deviceGatewayInput = L.first);
            }
          },
          inputs: {
            required: "required",
            newGatewayType: "newGatewayType",
            deviceName: "deviceName",
            isStateForm: "isStateForm",
          },
          outputs: { gatewayNameExist: "gatewayNameExist" },
          features: [
            e.ɵɵProvidersFeature([
              {
                provide: n.NG_VALUE_ACCESSOR,
                useExisting: (0, e.forwardRef)(() => S),
                multi: !0,
              },
            ]),
          ],
          decls: 12,
          vars: 15,
          consts: [
            [1, "mat-block", 3, "formGroup"],
            [
              "matInput",
              "",
              "type",
              "text",
              "formControlName",
              "gateway",
              3,
              "placeholder",
              "required",
              "matAutocomplete",
              "focusin",
              "keydown",
              "keypress",
            ],
            ["deviceGatewayInput", ""],
            [
              "type",
              "button",
              "matSuffix",
              "",
              "mat-icon-button",
              "",
              "aria-label",
              "Clear",
              3,
              "click",
              4,
              "ngIf",
            ],
            [1, "tb-autocomplete", 3, "displayWith"],
            ["gatewayAutocomplete", "matAutocomplete"],
            [3, "value", 4, "ngFor", "ngForOf"],
            ["class", "tb-not-found", 3, "value", 4, "ngIf"],
            [4, "ngIf"],
            [
              "type",
              "button",
              "matSuffix",
              "",
              "mat-icon-button",
              "",
              "aria-label",
              "Clear",
              3,
              "click",
            ],
            [1, "material-icons"],
            [3, "value"],
            [3, "innerHTML"],
            [1, "tb-not-found", 3, "value"],
            [1, "tb-not-found-content", 3, "click"],
            [4, "ngIf", "ngIfElse"],
            ["searchNotEmpty", ""],
            ["translate", "", 3, "click"],
            ["translate", ""],
            ["translate", "", 3, "translateParams"],
          ],
          template: function (f, M) {
            if (
              (1 & f &&
                (e.ɵɵelementStart(0, "mat-form-field", 0),
                e.ɵɵelementStart(1, "input", 1, 2),
                e.ɵɵlistener("focusin", function () {
                  return M.onFocus();
                })("keydown", function (k) {
                  return M.gatewayNameEnter(k);
                })("keypress", function (k) {
                  return M.gatewayNameEnter(k);
                }),
                e.ɵɵpipe(3, "translate"),
                e.ɵɵelementEnd(),
                e.ɵɵtemplate(4, v, 3, 0, "button", 3),
                e.ɵɵelementStart(5, "mat-autocomplete", 4, 5),
                e.ɵɵtemplate(7, I, 3, 5, "mat-option", 6),
                e.ɵɵpipe(8, "async"),
                e.ɵɵtemplate(9, w, 8, 3, "mat-option", 7),
                e.ɵɵpipe(10, "async"),
                e.ɵɵelementEnd(),
                e.ɵɵtemplate(11, b, 3, 3, "mat-error", 8),
                e.ɵɵelementEnd()),
              2 & f)
            ) {
              const L = e.ɵɵreference(6);
              let k;
              e.ɵɵproperty("formGroup", M.selectDeviceGatewayFormGroup),
                e.ɵɵadvance(1),
                e.ɵɵpropertyInterpolate(
                  "placeholder",
                  e.ɵɵpipeBind1(3, 9, "gateway.gateway-name")
                ),
                e.ɵɵproperty("required", M.required)("matAutocomplete", L),
                e.ɵɵadvance(3),
                e.ɵɵproperty(
                  "ngIf",
                  M.selectDeviceGatewayFormGroup.get("gateway").value &&
                    !M.isStateForm
                ),
                e.ɵɵadvance(1),
                e.ɵɵproperty("displayWith", M.displayGatewayFn),
                e.ɵɵadvance(2),
                e.ɵɵproperty(
                  "ngForOf",
                  e.ɵɵpipeBind1(8, 11, M.filteredGateways)
                ),
                e.ɵɵadvance(2),
                e.ɵɵproperty(
                  "ngIf",
                  !(
                    null != (k = e.ɵɵpipeBind1(10, 13, M.filteredGateways)) &&
                    k.length
                  )
                ),
                e.ɵɵadvance(2),
                e.ɵɵproperty(
                  "ngIf",
                  M.selectDeviceGatewayFormGroup
                    .get("gateway")
                    .hasError("required")
                );
            }
          },
          encapsulation: 2,
        }));
    },
    99608: (ee, R, t) => {
      "use strict";
      t.r(R), t.d(R, { EntityKeysListComponent: () => f });
      var e = t(36461),
        n = t(37716),
        a = t(3679),
        C = t(25917),
        s = t(88002),
        d = t(19773),
        o = t(78345),
        i = t(23914),
        g = t(39490),
        y = (t(69331), t(41960)),
        m = t(86710),
        r = t(29790),
        h = t(98295),
        p = t(58341),
        _ = t(38583),
        E = t(83166),
        c = t(21554),
        v = t(76627),
        I = t(72458),
        l = t(53883);
      const T = ["keyInput"],
        O = ["keyAutocomplete"],
        w = ["chipList"];
      function b(M, L) {
        1 & M &&
          (n.ɵɵelementStart(0, "mat-icon", 10),
          n.ɵɵtext(1, "close"),
          n.ɵɵelementEnd());
      }
      function S(M, L) {
        if (1 & M) {
          const k = n.ɵɵgetCurrentView();
          n.ɵɵelementStart(0, "mat-chip", 8),
            n.ɵɵlistener("removed", function () {
              const j = n.ɵɵrestoreView(k).$implicit;
              return n.ɵɵnextContext().remove(j);
            }),
            n.ɵɵtext(1),
            n.ɵɵtemplate(2, b, 2, 0, "mat-icon", 9),
            n.ɵɵelementEnd();
        }
        if (2 & M) {
          const k = L.$implicit,
            N = n.ɵɵnextContext();
          n.ɵɵproperty("selectable", !N.disabled)("removable", !N.disabled),
            n.ɵɵadvance(1),
            n.ɵɵtextInterpolate1(" ", k, " "),
            n.ɵɵadvance(1),
            n.ɵɵproperty("ngIf", !N.disabled);
        }
      }
      function u(M, L) {
        if (
          (1 & M &&
            (n.ɵɵelementStart(0, "mat-option", 11),
            n.ɵɵelement(1, "span", 12),
            n.ɵɵpipe(2, "highlight"),
            n.ɵɵelementEnd()),
          2 & M)
        ) {
          const k = L.$implicit,
            N = n.ɵɵnextContext();
          n.ɵɵproperty("value", k),
            n.ɵɵadvance(1),
            n.ɵɵproperty(
              "innerHTML",
              n.ɵɵpipeBind2(2, 2, k, N.searchText),
              n.ɵɵsanitizeHtml
            );
        }
      }
      class f {
        constructor(L, k, N, B) {
          (this.store = L),
            (this.translate = k),
            (this.entityService = N),
            (this.fb = B),
            (this.separatorKeysCodes = [e.ENTER, e.COMMA, e.SEMICOLON]),
            (this.searchText = ""),
            (this.dirty = !1),
            (this.propagateChange = (j) => {}),
            (this.keysListFormGroup = this.fb.group({ key: [null] }));
        }
        set entityId(L) {
          (0, y.Xy)(this.entityIdValue, L) ||
            ((this.entityIdValue = L), (this.dirty = !0));
        }
        get required() {
          return this.requiredValue;
        }
        set required(L) {
          this.requiredValue = (0, g.coerceBooleanProperty)(L);
        }
        registerOnChange(L) {
          this.propagateChange = L;
        }
        registerOnTouched(L) {}
        ngOnInit() {
          this.filteredKeys = this.keysListFormGroup
            .get("key")
            .valueChanges.pipe(
              (0, s.U)((L) => L || ""),
              (0, d.zg)((L) => this.fetchKeys(L)),
              (0, o.B)()
            );
        }
        ngAfterViewInit() {}
        setDisabledState(L) {
          (this.disabled = L),
            this.disabled
              ? this.keysListFormGroup.disable({ emitEvent: !1 })
              : this.keysListFormGroup.enable({ emitEvent: !1 });
        }
        writeValue(L) {
          (this.searchText = ""), (this.modelValue = null != L ? [...L] : []);
        }
        onFocus() {
          this.dirty &&
            (this.keysListFormGroup
              .get("key")
              .updateValueAndValidity({ onlySelf: !0, emitEvent: !0 }),
            (this.dirty = !1));
        }
        addKey(L) {
          (!this.modelValue || -1 === this.modelValue.indexOf(L)) &&
            (this.modelValue || (this.modelValue = []),
            this.modelValue.push(L),
            this.required && (this.chipList.errorState = !1)),
            this.propagateChange(this.modelValue);
        }
        add(L) {
          if (!this.matAutocomplete.isOpen) {
            const k = (L.value || "").trim();
            k && this.addKey(k),
              this.clear(
                "",
                document.activeElement === this.keyInput.nativeElement
              );
          }
        }
        remove(L) {
          const k = this.modelValue.indexOf(L);
          k >= 0 &&
            (this.modelValue.splice(k, 1),
            this.modelValue.length ||
              (this.required && (this.chipList.errorState = !0)),
            this.propagateChange(
              this.modelValue.length ? this.modelValue : null
            ));
        }
        selected(L) {
          this.addKey(L.option.viewValue), this.clear("");
        }
        displayKeyFn(L) {
          return L || void 0;
        }
        fetchKeys(L) {
          return (
            (this.searchText = L),
            this.entityIdValue
              ? this.entityService
                  .getEntityKeys(this.entityIdValue, L, this.dataKeyType, {
                    ignoreLoading: !0,
                  })
                  .pipe((0, s.U)((k) => k || []))
              : (0, C.of)([])
          );
        }
        clear(L = "", k = !0) {
          (this.keyInput.nativeElement.value = L),
            this.keysListFormGroup
              .get("key")
              .patchValue(null, { emitEvent: k }),
            k &&
              setTimeout(() => {
                this.keyInput.nativeElement.blur(),
                  this.keyInput.nativeElement.focus();
              }, 0);
        }
      }
      (f.ɵfac = function (L) {
        return new (L || f)(
          n.ɵɵdirectiveInject(m.Store),
          n.ɵɵdirectiveInject(r.TranslateService),
          n.ɵɵdirectiveInject(i.c),
          n.ɵɵdirectiveInject(a.FormBuilder)
        );
      }),
        (f.ɵcmp = n.ɵɵdefineComponent({
          type: f,
          selectors: [["tb-entity-keys-list"]],
          viewQuery: function (L, k) {
            if (
              (1 & L &&
                (n.ɵɵviewQuery(T, 5), n.ɵɵviewQuery(O, 5), n.ɵɵviewQuery(w, 5)),
              2 & L)
            ) {
              let N;
              n.ɵɵqueryRefresh((N = n.ɵɵloadQuery())) && (k.keyInput = N.first),
                n.ɵɵqueryRefresh((N = n.ɵɵloadQuery())) &&
                  (k.matAutocomplete = N.first),
                n.ɵɵqueryRefresh((N = n.ɵɵloadQuery())) &&
                  (k.chipList = N.first);
            }
          },
          inputs: {
            entityId: "entityId",
            keysText: "keysText",
            dataKeyType: "dataKeyType",
            required: "required",
            disabled: "disabled",
          },
          features: [
            n.ɵɵProvidersFeature([
              {
                provide: a.NG_VALUE_ACCESSOR,
                useExisting: (0, n.forwardRef)(() => f),
                multi: !0,
              },
            ]),
          ],
          decls: 12,
          vars: 13,
          consts: [
            ["appearance", "standard", 1, "mat-block", 3, "formGroup"],
            ["chipList", ""],
            [3, "selectable", "removable", "removed", 4, "ngFor", "ngForOf"],
            [
              "matInput",
              "",
              "type",
              "text",
              "formControlName",
              "key",
              "matAutocompleteOrigin",
              "",
              "matChipInputAddOnBlur",
              "",
              2,
              "max-width",
              "200px",
              3,
              "placeholder",
              "matAutocompleteConnectedTo",
              "matAutocomplete",
              "matChipInputFor",
              "matChipInputSeparatorKeyCodes",
              "focusin",
              "matChipInputTokenEnd",
            ],
            ["keyInput", "", "origin", "matAutocompleteOrigin"],
            [1, "tb-autocomplete", 3, "displayWith", "optionSelected"],
            ["keyAutocomplete", "matAutocomplete"],
            [3, "value", 4, "ngFor", "ngForOf"],
            [3, "selectable", "removable", "removed"],
            ["matChipRemove", "", 4, "ngIf"],
            ["matChipRemove", ""],
            [3, "value"],
            [3, "innerHTML"],
          ],
          template: function (L, k) {
            if (
              (1 & L &&
                (n.ɵɵelementStart(0, "mat-form-field", 0),
                n.ɵɵelementStart(1, "mat-chip-list", null, 1),
                n.ɵɵtemplate(3, S, 3, 4, "mat-chip", 2),
                n.ɵɵelementStart(4, "input", 3, 4),
                n.ɵɵlistener("focusin", function () {
                  return k.onFocus();
                })("matChipInputTokenEnd", function (B) {
                  return k.add(B);
                }),
                n.ɵɵpipe(7, "translate"),
                n.ɵɵelementEnd(),
                n.ɵɵelementEnd(),
                n.ɵɵelementStart(8, "mat-autocomplete", 5, 6),
                n.ɵɵlistener("optionSelected", function (B) {
                  return k.selected(B);
                }),
                n.ɵɵtemplate(10, u, 3, 5, "mat-option", 7),
                n.ɵɵpipe(11, "async"),
                n.ɵɵelementEnd(),
                n.ɵɵelementEnd()),
              2 & L)
            ) {
              const N = n.ɵɵreference(2),
                B = n.ɵɵreference(6),
                j = n.ɵɵreference(9);
              n.ɵɵproperty("formGroup", k.keysListFormGroup),
                n.ɵɵadvance(3),
                n.ɵɵproperty("ngForOf", k.modelValue),
                n.ɵɵadvance(1),
                n.ɵɵpropertyInterpolate(
                  "placeholder",
                  k.disabled ? "" : n.ɵɵpipeBind1(7, 9, k.keysText)
                ),
                n.ɵɵproperty("matAutocompleteConnectedTo", B)(
                  "matAutocomplete",
                  j
                )("matChipInputFor", N)(
                  "matChipInputSeparatorKeyCodes",
                  k.separatorKeysCodes
                ),
                n.ɵɵadvance(4),
                n.ɵɵproperty("displayWith", k.displayKeyFn),
                n.ɵɵadvance(2),
                n.ɵɵproperty("ngForOf", n.ɵɵpipeBind1(11, 11, k.filteredKeys));
            }
          },
          directives: [
            h.MatFormField,
            a.NgControlStatusGroup,
            a.FormGroupDirective,
            p.MatChipList,
            _.NgForOf,
            E.MatInput,
            a.DefaultValueAccessor,
            c.MatAutocompleteTrigger,
            p.MatChipInput,
            a.NgControlStatus,
            a.FormControlName,
            c.MatAutocompleteOrigin,
            c.MatAutocomplete,
            p.MatChip,
            _.NgIf,
            v.MatIcon,
            p.MatChipRemove,
            I.MatOption,
          ],
          pipes: [r.TranslatePipe, _.AsyncPipe, l.HighlightPipe],
          styles: [
            '@charset "UTF-8";[_nghost-%COMP%]     .mat-form-field-flex{padding-top:0}[_nghost-%COMP%]     .mat-form-field-flex .mat-form-field-infix{border-top:0}',
          ],
        }));
    },
    76630: (ee, R, t) => {
      "use strict";
      t.r(R), t.d(R, { EntityListSelectComponent: () => D });
      var e = t(37716),
        n = t(3679),
        a = t(23914),
        C = t(39490),
        s = t(86710),
        d = t(29790);
      function o(y, m) {
        if ((1 & y && e.ɵɵelement(0, "tb-entity-type-select", 3), 2 & y)) {
          const r = e.ɵɵnextContext();
          e.ɵɵproperty("showLabel", !0)("required", r.required)(
            "useAliasEntityTypes",
            r.useAliasEntityTypes
          )("allowedEntityTypes", r.allowedEntityTypes);
        }
      }
      const i = function (y) {
        return { "tb-not-empty": y };
      };
      function g(y, m) {
        if ((1 & y && e.ɵɵelement(0, "tb-entity-list", 4), 2 & y)) {
          const r = e.ɵɵnextContext();
          e.ɵɵproperty(
            "ngClass",
            e.ɵɵpureFunction1(
              3,
              i,
              (null == r.modelValue.ids ? null : r.modelValue.ids.length) > 0
            )
          )("required", r.required)("entityType", r.modelValue.entityType);
        }
      }
      class D {
        constructor(m, r, h, p) {
          (this.store = m),
            (this.entityService = r),
            (this.translate = h),
            (this.fb = p),
            (this.modelValue = { entityType: null, ids: [] }),
            (this.defaultEntityType = null),
            (this.propagateChange = (E) => {});
          const _ = this.entityService.prepareAllowedEntityTypesList(
            this.allowedEntityTypes,
            this.useAliasEntityTypes
          );
          1 === _.length
            ? ((this.displayEntityTypeSelect = !1),
              (this.defaultEntityType = _[0]))
            : (this.displayEntityTypeSelect = !0),
            (this.entityListSelectFormGroup = this.fb.group({
              entityType: [this.defaultEntityType],
              entityIds: [[]],
            }));
        }
        get required() {
          return this.requiredValue;
        }
        set required(m) {
          this.requiredValue = (0, C.coerceBooleanProperty)(m);
        }
        registerOnChange(m) {
          this.propagateChange = m;
        }
        registerOnTouched(m) {}
        ngOnInit() {
          this.entityListSelectFormGroup
            .get("entityType")
            .valueChanges.subscribe((m) => {
              this.updateView(m, this.modelValue.ids);
            }),
            this.entityListSelectFormGroup
              .get("entityIds")
              .valueChanges.subscribe((m) => {
                this.updateView(this.modelValue.entityType, m);
              });
        }
        ngAfterViewInit() {}
        setDisabledState(m) {
          (this.disabled = m),
            this.disabled
              ? this.entityListSelectFormGroup.disable()
              : this.entityListSelectFormGroup.enable();
        }
        writeValue(m) {
          if (null != m && m.length > 0) {
            const r = m[0];
            this.modelValue = {
              entityType: r.entityType,
              ids: m.map((h) => h.id),
            };
          } else
            this.modelValue = { entityType: this.defaultEntityType, ids: [] };
          this.entityListSelectFormGroup
            .get("entityType")
            .patchValue(this.modelValue.entityType, { emitEvent: !0 }),
            this.entityListSelectFormGroup
              .get("entityIds")
              .patchValue([...this.modelValue.ids], { emitEvent: !0 });
        }
        updateView(m, r) {
          (this.modelValue.entityType !== m ||
            !this.compareIds(this.modelValue.ids, r)) &&
            ((this.modelValue = {
              entityType: m,
              ids: this.modelValue.entityType === m && r ? [...r] : [],
            }),
            this.propagateChange(this.toEntityIds(this.modelValue)));
        }
        compareIds(m, r) {
          return null !== m && null !== r
            ? JSON.stringify(m) === JSON.stringify(r)
            : m === r;
        }
        toEntityIds(m) {
          if (null !== m && m.entityType && m.ids && m.ids.length > 0) {
            const r = m.entityType;
            return m.ids.map((h) => ({ entityType: r, id: h }));
          }
          return null;
        }
      }
      (D.ɵfac = function (m) {
        return new (m || D)(
          e.ɵɵdirectiveInject(s.Store),
          e.ɵɵdirectiveInject(a.c),
          e.ɵɵdirectiveInject(d.TranslateService),
          e.ɵɵdirectiveInject(n.FormBuilder)
        );
      }),
        (D.ɵcmp = e.ɵɵdefineComponent({
          type: D,
          selectors: [["tb-entity-list-select"]],
          inputs: {
            allowedEntityTypes: "allowedEntityTypes",
            useAliasEntityTypes: "useAliasEntityTypes",
            required: "required",
            disabled: "disabled",
          },
          features: [
            e.ɵɵProvidersFeature([
              {
                provide: n.NG_VALUE_ACCESSOR,
                useExisting: (0, e.forwardRef)(() => D),
                multi: !0,
              },
            ]),
          ],
          decls: 3,
          vars: 3,
          consts: [
            ["fxLayout", "row", 1, "tb-entity-list-select", 3, "formGroup"],
            [
              "style",
              "min-width: 100px; padding-right: 8px;",
              "formControlName",
              "entityType",
              3,
              "showLabel",
              "required",
              "useAliasEntityTypes",
              "allowedEntityTypes",
              4,
              "ngIf",
            ],
            [
              "fxFlex",
              "",
              "formControlName",
              "entityIds",
              3,
              "ngClass",
              "required",
              "entityType",
              4,
              "ngIf",
            ],
            [
              "formControlName",
              "entityType",
              2,
              "min-width",
              "100px",
              "padding-right",
              "8px",
              3,
              "showLabel",
              "required",
              "useAliasEntityTypes",
              "allowedEntityTypes",
            ],
            [
              "fxFlex",
              "",
              "formControlName",
              "entityIds",
              3,
              "ngClass",
              "required",
              "entityType",
            ],
          ],
          template: function (m, r) {
            1 & m &&
              (e.ɵɵelementStart(0, "div", 0),
              e.ɵɵtemplate(1, o, 1, 4, "tb-entity-type-select", 1),
              e.ɵɵtemplate(2, g, 1, 5, "tb-entity-list", 2),
              e.ɵɵelementEnd()),
              2 & m &&
                (e.ɵɵproperty("formGroup", r.entityListSelectFormGroup),
                e.ɵɵadvance(1),
                e.ɵɵproperty("ngIf", r.displayEntityTypeSelect),
                e.ɵɵadvance(1),
                e.ɵɵproperty("ngIf", r.modelValue.entityType));
          },
          styles: [
            '@charset "UTF-8";[_nghost-%COMP%]     tb-entity-list.tb-not-empty .mat-form-field-flex{padding-top:0}',
          ],
        }));
    },
    97889: (ee, R, t) => {
      "use strict";
      t.r(R), t.d(R, { EntityListComponent: () => L });
      var e = t(37716),
        n = t(3679),
        a = t(68307),
        C = t(45435),
        s = t(88002),
        d = t(19773),
        o = t(78345),
        g = (t(52042), t(23914)),
        D = t(39490),
        y = t(86710),
        m = t(29790),
        r = t(98295),
        h = t(58341),
        p = t(38583),
        _ = t(83166),
        E = t(21554),
        c = t(76627),
        v = t(72458),
        I = t(53883);
      const l = ["entityInput"],
        T = ["entityAutocomplete"],
        O = ["chipList"];
      function w(k, N) {
        1 & k &&
          (e.ɵɵelementStart(0, "mat-icon", 13),
          e.ɵɵtext(1, "close"),
          e.ɵɵelementEnd());
      }
      function b(k, N) {
        if (1 & k) {
          const B = e.ɵɵgetCurrentView();
          e.ɵɵelementStart(0, "mat-chip", 11),
            e.ɵɵlistener("removed", function () {
              const V = e.ɵɵrestoreView(B).$implicit;
              return e.ɵɵnextContext().remove(V);
            }),
            e.ɵɵtext(1),
            e.ɵɵtemplate(2, w, 2, 0, "mat-icon", 12),
            e.ɵɵelementEnd();
        }
        if (2 & k) {
          const B = N.$implicit,
            j = e.ɵɵnextContext();
          e.ɵɵproperty("selectable", !j.disabled)("removable", !j.disabled),
            e.ɵɵadvance(1),
            e.ɵɵtextInterpolate1(" ", B.name, " "),
            e.ɵɵadvance(1),
            e.ɵɵproperty("ngIf", !j.disabled);
        }
      }
      function S(k, N) {
        if (
          (1 & k &&
            (e.ɵɵelementStart(0, "mat-option", 14),
            e.ɵɵelement(1, "span", 15),
            e.ɵɵpipe(2, "highlight"),
            e.ɵɵelementEnd()),
          2 & k)
        ) {
          const B = N.$implicit,
            j = e.ɵɵnextContext();
          e.ɵɵproperty("value", B),
            e.ɵɵadvance(1),
            e.ɵɵproperty(
              "innerHTML",
              e.ɵɵpipeBind2(2, 2, B.name, j.searchText),
              e.ɵɵsanitizeHtml
            );
        }
      }
      const u = function (k) {
        return { entity: k };
      };
      function f(k, N) {
        if (
          (1 & k &&
            (e.ɵɵelementStart(0, "mat-option", 14),
            e.ɵɵelementStart(1, "span"),
            e.ɵɵtext(2),
            e.ɵɵpipe(3, "async"),
            e.ɵɵelementEnd(),
            e.ɵɵelementEnd()),
          2 & k)
        ) {
          const B = e.ɵɵnextContext();
          e.ɵɵproperty("value", null),
            e.ɵɵadvance(2),
            e.ɵɵtextInterpolate1(
              " ",
              e.ɵɵpipeBind1(
                3,
                2,
                B.translate.get(
                  "entity.no-entities-matching",
                  e.ɵɵpureFunction1(4, u, B.searchText)
                )
              ),
              " "
            );
        }
      }
      function M(k, N) {
        1 & k &&
          (e.ɵɵelementStart(0, "mat-error"),
          e.ɵɵtext(1),
          e.ɵɵpipe(2, "translate"),
          e.ɵɵelementEnd()),
          2 & k &&
            (e.ɵɵadvance(1),
            e.ɵɵtextInterpolate1(
              " ",
              e.ɵɵpipeBind1(2, 1, "entity.entity-list-empty"),
              " "
            ));
      }
      class L {
        constructor(N, B, j, F) {
          (this.store = N),
            (this.translate = B),
            (this.entityService = j),
            (this.fb = F),
            (this.entities = []),
            (this.searchText = ""),
            (this.dirty = !1),
            (this.propagateChange = (V) => {}),
            (this.entityListFormGroup = this.fb.group({
              entities: [
                this.entities,
                this.required ? [n.Validators.required] : [],
              ],
              entity: [null],
            }));
        }
        get required() {
          return this.requiredValue;
        }
        set required(N) {
          const B = (0, D.coerceBooleanProperty)(N);
          this.requiredValue !== B &&
            ((this.requiredValue = B), this.updateValidators());
        }
        updateValidators() {
          this.entityListFormGroup
            .get("entities")
            .setValidators(this.required ? [n.Validators.required] : []),
            this.entityListFormGroup.get("entities").updateValueAndValidity();
        }
        registerOnChange(N) {
          this.propagateChange = N;
        }
        registerOnTouched(N) {}
        ngOnInit() {
          this.filteredEntities = this.entityListFormGroup
            .get("entity")
            .valueChanges.pipe(
              (0, a.b)((N) => {
                N && "string" != typeof N
                  ? this.add(N)
                  : null === N &&
                    this.clear(this.entityInput.nativeElement.value);
              }),
              (0, C.h)((N) => "string" == typeof N),
              (0, s.U)((N) => (N ? ("string" == typeof N ? N : N.name) : "")),
              (0, d.zg)((N) => this.fetchEntities(N)),
              (0, o.B)()
            );
        }
        ngOnChanges(N) {
          for (const B of Object.keys(N)) {
            const j = N[B];
            !j.firstChange &&
              j.currentValue !== j.previousValue &&
              "entityType" === B &&
              this.reset();
          }
        }
        ngAfterViewInit() {}
        setDisabledState(N) {
          (this.disabled = N),
            N
              ? this.entityListFormGroup.disable({ emitEvent: !1 })
              : this.entityListFormGroup.enable({ emitEvent: !1 });
        }
        writeValue(N) {
          (this.searchText = ""),
            null != N && N.length > 0
              ? ((this.modelValue = [...N]),
                this.entityService
                  .getEntities(this.entityType, N)
                  .subscribe((B) => {
                    (this.entities = B),
                      this.entityListFormGroup
                        .get("entities")
                        .setValue(this.entities);
                  }))
              : ((this.entities = []),
                this.entityListFormGroup
                  .get("entities")
                  .setValue(this.entities),
                (this.modelValue = null)),
            (this.dirty = !0);
        }
        reset() {
          (this.entities = []),
            this.entityListFormGroup.get("entities").setValue(this.entities),
            (this.modelValue = null),
            this.entityInput && (this.entityInput.nativeElement.value = ""),
            this.entityListFormGroup
              .get("entity")
              .patchValue("", { emitEvent: !1 }),
            this.propagateChange(this.modelValue),
            (this.dirty = !0);
        }
        add(N) {
          (!this.modelValue || -1 === this.modelValue.indexOf(N.id.id)) &&
            (this.modelValue || (this.modelValue = []),
            this.modelValue.push(N.id.id),
            this.entities.push(N),
            this.entityListFormGroup.get("entities").setValue(this.entities)),
            this.propagateChange(this.modelValue),
            this.clear();
        }
        remove(N) {
          let B = this.entities.indexOf(N);
          B >= 0 &&
            (this.entities.splice(B, 1),
            this.entityListFormGroup.get("entities").setValue(this.entities),
            (B = this.modelValue.indexOf(N.id.id)),
            this.modelValue.splice(B, 1),
            this.modelValue.length || (this.modelValue = null),
            this.propagateChange(this.modelValue),
            this.clear());
        }
        displayEntityFn(N) {
          return N ? N.name : void 0;
        }
        fetchEntities(N) {
          return (
            (this.searchText = N),
            this.entityService
              .getEntitiesByNameFilter(
                this.entityType,
                N,
                50,
                this.subType ? this.subType : "",
                { ignoreLoading: !0 }
              )
              .pipe((0, s.U)((B) => B || []))
          );
        }
        onFocus() {
          this.dirty &&
            (this.entityListFormGroup
              .get("entity")
              .updateValueAndValidity({ onlySelf: !0, emitEvent: !0 }),
            (this.dirty = !1));
        }
        clear(N = "") {
          (this.entityInput.nativeElement.value = N),
            this.entityListFormGroup
              .get("entity")
              .patchValue(N, { emitEvent: !0 }),
            setTimeout(() => {
              this.entityInput.nativeElement.blur(),
                this.entityInput.nativeElement.focus();
            }, 0);
        }
      }
      (L.ɵfac = function (N) {
        return new (N || L)(
          e.ɵɵdirectiveInject(y.Store),
          e.ɵɵdirectiveInject(m.TranslateService),
          e.ɵɵdirectiveInject(g.c),
          e.ɵɵdirectiveInject(n.FormBuilder)
        );
      }),
        (L.ɵcmp = e.ɵɵdefineComponent({
          type: L,
          selectors: [["tb-entity-list"]],
          viewQuery: function (N, B) {
            if (
              (1 & N &&
                (e.ɵɵviewQuery(l, 5), e.ɵɵviewQuery(T, 5), e.ɵɵviewQuery(O, 7)),
              2 & N)
            ) {
              let j;
              e.ɵɵqueryRefresh((j = e.ɵɵloadQuery())) &&
                (B.entityInput = j.first),
                e.ɵɵqueryRefresh((j = e.ɵɵloadQuery())) &&
                  (B.matAutocomplete = j.first),
                e.ɵɵqueryRefresh((j = e.ɵɵloadQuery())) &&
                  (B.chipList = j.first);
            }
          },
          inputs: {
            entityType: "entityType",
            subType: "subType",
            required: "required",
            disabled: "disabled",
          },
          features: [
            e.ɵɵProvidersFeature([
              {
                provide: n.NG_VALUE_ACCESSOR,
                useExisting: (0, e.forwardRef)(() => L),
                multi: !0,
              },
            ]),
            e.ɵɵNgOnChangesFeature,
          ],
          decls: 15,
          vars: 16,
          consts: [
            ["appearance", "standard", 1, "mat-block", 3, "formGroup"],
            ["formControlName", "entities"],
            ["chipList", ""],
            [3, "selectable", "removable", "removed", 4, "ngFor", "ngForOf"],
            [
              "matInput",
              "",
              "type",
              "text",
              "formControlName",
              "entity",
              "matAutocompleteOrigin",
              "",
              2,
              "max-width",
              "200px",
              3,
              "placeholder",
              "matAutocompleteConnectedTo",
              "matAutocomplete",
              "matChipInputFor",
              "focusin",
            ],
            ["entityInput", "", "origin", "matAutocompleteOrigin"],
            [1, "tb-autocomplete", 3, "displayWith"],
            ["entityAutocomplete", "matAutocomplete"],
            [3, "value", 4, "ngFor", "ngForOf"],
            [3, "value", 4, "ngIf"],
            [4, "ngIf"],
            [3, "selectable", "removable", "removed"],
            ["matChipRemove", "", 4, "ngIf"],
            ["matChipRemove", ""],
            [3, "value"],
            [3, "innerHTML"],
          ],
          template: function (N, B) {
            if (
              (1 & N &&
                (e.ɵɵelementStart(0, "mat-form-field", 0),
                e.ɵɵelementStart(1, "mat-chip-list", 1, 2),
                e.ɵɵtemplate(3, b, 3, 4, "mat-chip", 3),
                e.ɵɵelementStart(4, "input", 4, 5),
                e.ɵɵlistener("focusin", function () {
                  return B.onFocus();
                }),
                e.ɵɵpipe(7, "translate"),
                e.ɵɵelementEnd(),
                e.ɵɵelementEnd(),
                e.ɵɵelementStart(8, "mat-autocomplete", 6, 7),
                e.ɵɵtemplate(10, S, 3, 5, "mat-option", 8),
                e.ɵɵpipe(11, "async"),
                e.ɵɵtemplate(12, f, 4, 6, "mat-option", 9),
                e.ɵɵpipe(13, "async"),
                e.ɵɵelementEnd(),
                e.ɵɵtemplate(14, M, 3, 3, "mat-error", 10),
                e.ɵɵelementEnd()),
              2 & N)
            ) {
              const j = e.ɵɵreference(2),
                F = e.ɵɵreference(6),
                V = e.ɵɵreference(9);
              let P;
              e.ɵɵproperty("formGroup", B.entityListFormGroup),
                e.ɵɵadvance(3),
                e.ɵɵproperty("ngForOf", B.entities),
                e.ɵɵadvance(1),
                e.ɵɵpropertyInterpolate(
                  "placeholder",
                  B.disabled ? "" : e.ɵɵpipeBind1(7, 10, "entity.entity-list")
                ),
                e.ɵɵproperty("matAutocompleteConnectedTo", F)(
                  "matAutocomplete",
                  V
                )("matChipInputFor", j),
                e.ɵɵadvance(4),
                e.ɵɵproperty("displayWith", B.displayEntityFn),
                e.ɵɵadvance(2),
                e.ɵɵproperty(
                  "ngForOf",
                  e.ɵɵpipeBind1(11, 12, B.filteredEntities)
                ),
                e.ɵɵadvance(2),
                e.ɵɵproperty(
                  "ngIf",
                  !(
                    null != (P = e.ɵɵpipeBind1(13, 14, B.filteredEntities)) &&
                    P.length
                  )
                ),
                e.ɵɵadvance(2),
                e.ɵɵproperty(
                  "ngIf",
                  B.entityListFormGroup.get("entities").hasError("required")
                );
            }
          },
          directives: [
            r.MatFormField,
            n.NgControlStatusGroup,
            n.FormGroupDirective,
            h.MatChipList,
            n.NgControlStatus,
            n.FormControlName,
            p.NgForOf,
            _.MatInput,
            n.DefaultValueAccessor,
            E.MatAutocompleteTrigger,
            h.MatChipInput,
            E.MatAutocompleteOrigin,
            E.MatAutocomplete,
            p.NgIf,
            h.MatChip,
            c.MatIcon,
            h.MatChipRemove,
            v.MatOption,
            r.MatError,
          ],
          pipes: [m.TranslatePipe, p.AsyncPipe, I.HighlightPipe],
          styles: [
            '@charset "UTF-8";[_nghost-%COMP%]     .mat-form-field .mat-form-field-infix{border-top:none}',
          ],
        }));
    },
    44150: (ee, R, t) => {
      "use strict";
      t.r(R), t.d(R, { EntitySelectComponent: () => y });
      var e = t(37716),
        n = t(3679),
        a = t(52042),
        C = t(23914),
        s = t(39490),
        d = t(86057),
        o = t(86710),
        i = t(29790);
      function g(m, r) {
        if ((1 & m && e.ɵɵelement(0, "tb-entity-type-select", 3), 2 & m)) {
          const h = e.ɵɵnextContext();
          e.ɵɵproperty("showLabel", !0)("required", h.required)(
            "useAliasEntityTypes",
            h.useAliasEntityTypes
          )("allowedEntityTypes", h.allowedEntityTypes);
        }
      }
      function D(m, r) {
        if ((1 & m && e.ɵɵelement(0, "tb-entity-autocomplete", 4), 2 & m)) {
          const h = e.ɵɵnextContext();
          e.ɵɵproperty("required", h.required)(
            "entityType",
            h.modelValue.entityType
          );
        }
      }
      class y {
        constructor(r, h, p, _) {
          (this.store = r),
            (this.entityService = h),
            (this.translate = p),
            (this.fb = _),
            (this.modelValue = { entityType: null, id: null }),
            (this.AliasEntityType = a.Ul),
            (this.defaultEntityType = null),
            (this.propagateChange = (c) => {});
          const E = this.entityService.prepareAllowedEntityTypesList(
            this.allowedEntityTypes,
            this.useAliasEntityTypes
          );
          1 === E.length
            ? ((this.displayEntityTypeSelect = !1),
              (this.defaultEntityType = E[0]))
            : (this.displayEntityTypeSelect = !0),
            (this.entitySelectFormGroup = this.fb.group({
              entityType: [this.defaultEntityType],
              entityId: [null],
            }));
        }
        get required() {
          return this.requiredValue;
        }
        set required(r) {
          this.requiredValue = (0, s.coerceBooleanProperty)(r);
        }
        registerOnChange(r) {
          this.propagateChange = r;
        }
        registerOnTouched(r) {}
        ngOnInit() {
          this.entitySelectFormGroup
            .get("entityType")
            .valueChanges.subscribe((r) => {
              this.updateView(r, this.modelValue.id);
            }),
            this.entitySelectFormGroup
              .get("entityId")
              .valueChanges.subscribe((r) => {
                const h = r ? ("string" == typeof r ? r : r.id) : null;
                this.updateView(this.modelValue.entityType, h);
              });
        }
        ngAfterViewInit() {}
        setDisabledState(r) {
          (this.disabled = r),
            this.disabled
              ? this.entitySelectFormGroup.disable()
              : this.entitySelectFormGroup.enable();
        }
        writeValue(r) {
          null != r
            ? (r.id === d._ && (r.id = null),
              (this.modelValue = r),
              this.entitySelectFormGroup
                .get("entityType")
                .patchValue(r.entityType, { emitEvent: !0 }),
              this.entitySelectFormGroup
                .get("entityId")
                .patchValue(r, { emitEvent: !0 }))
            : ((this.modelValue = {
                entityType: this.defaultEntityType,
                id: null,
              }),
              this.entitySelectFormGroup
                .get("entityType")
                .patchValue(this.defaultEntityType, { emitEvent: !0 }),
              this.entitySelectFormGroup
                .get("entityId")
                .patchValue(null, { emitEvent: !0 }));
        }
        updateView(r, h) {
          (this.modelValue.entityType !== r || this.modelValue.id !== h) &&
            ((this.modelValue = {
              entityType: r,
              id: this.modelValue.entityType !== r ? null : h,
            }),
            (this.modelValue.entityType === a.Ul.CURRENT_TENANT ||
              this.modelValue.entityType === a.Ul.CURRENT_USER ||
              this.modelValue.entityType === a.Ul.CURRENT_USER_OWNER ||
              (this.modelValue.entityType === a.Ul.CURRENT_CUSTOMER &&
                !this.modelValue.id)) &&
              (this.modelValue.id = d._),
            this.modelValue.entityType && this.modelValue.id
              ? this.propagateChange(this.modelValue)
              : this.propagateChange(null));
        }
      }
      (y.ɵfac = function (r) {
        return new (r || y)(
          e.ɵɵdirectiveInject(o.Store),
          e.ɵɵdirectiveInject(C.c),
          e.ɵɵdirectiveInject(i.TranslateService),
          e.ɵɵdirectiveInject(n.FormBuilder)
        );
      }),
        (y.ɵcmp = e.ɵɵdefineComponent({
          type: y,
          selectors: [["tb-entity-select"]],
          inputs: {
            allowedEntityTypes: "allowedEntityTypes",
            useAliasEntityTypes: "useAliasEntityTypes",
            required: "required",
            disabled: "disabled",
          },
          features: [
            e.ɵɵProvidersFeature([
              {
                provide: n.NG_VALUE_ACCESSOR,
                useExisting: (0, e.forwardRef)(() => y),
                multi: !0,
              },
            ]),
          ],
          decls: 3,
          vars: 3,
          consts: [
            ["fxLayout", "row", 1, "tb-entity-select", 3, "formGroup"],
            [
              "style",
              "min-width: 100px; padding-right: 8px;",
              "formControlName",
              "entityType",
              3,
              "showLabel",
              "required",
              "useAliasEntityTypes",
              "allowedEntityTypes",
              4,
              "ngIf",
            ],
            [
              "fxFlex",
              "",
              "formControlName",
              "entityId",
              3,
              "required",
              "entityType",
              4,
              "ngIf",
            ],
            [
              "formControlName",
              "entityType",
              2,
              "min-width",
              "100px",
              "padding-right",
              "8px",
              3,
              "showLabel",
              "required",
              "useAliasEntityTypes",
              "allowedEntityTypes",
            ],
            [
              "fxFlex",
              "",
              "formControlName",
              "entityId",
              3,
              "required",
              "entityType",
            ],
          ],
          template: function (r, h) {
            1 & r &&
              (e.ɵɵelementStart(0, "div", 0),
              e.ɵɵtemplate(1, g, 1, 4, "tb-entity-type-select", 1),
              e.ɵɵtemplate(2, D, 1, 2, "tb-entity-autocomplete", 2),
              e.ɵɵelementEnd()),
              2 & r &&
                (e.ɵɵproperty("formGroup", h.entitySelectFormGroup),
                e.ɵɵadvance(1),
                e.ɵɵproperty("ngIf", h.displayEntityTypeSelect),
                e.ɵɵadvance(1),
                e.ɵɵproperty(
                  "ngIf",
                  h.modelValue.entityType &&
                    h.modelValue.entityType !==
                      h.AliasEntityType.CURRENT_TENANT &&
                    h.modelValue.entityType !==
                      h.AliasEntityType.CURRENT_USER &&
                    h.modelValue.entityType !==
                      h.AliasEntityType.CURRENT_USER_OWNER
                ));
          },
          styles: ['@charset "UTF-8";'],
        }));
    },
    66470: (ee, R, t) => {
      "use strict";
      t.r(R), t.d(R, { EntitySubTypeAutocompleteComponent: () => F });
      var e = t(37716),
        n = t(3679),
        a = t(25917),
        C = t(40205),
        s = t(54395),
        d = t(87519),
        o = t(68307),
        i = t(88002),
        g = t(43190),
        D = t(5304),
        y = t(35226),
        m = t(51307),
        r = t(33441),
        h = t(52042),
        p = t(14866),
        _ = t(39490),
        E = t(68677),
        c = t(6744),
        v = t(80140),
        I = t(86710),
        l = t(29790),
        T = t(98295),
        O = t(83166),
        w = t(21554),
        b = t(38583),
        S = t(51095),
        u = t(76627),
        f = t(72458),
        M = t(53883);
      const L = ["subTypeInput"];
      function k(V, P) {
        if (1 & V) {
          const A = e.ɵɵgetCurrentView();
          e.ɵɵelementStart(0, "button", 8),
            e.ɵɵlistener("click", function () {
              return e.ɵɵrestoreView(A), e.ɵɵnextContext().clear();
            }),
            e.ɵɵelementStart(1, "mat-icon", 9),
            e.ɵɵtext(2, "close"),
            e.ɵɵelementEnd(),
            e.ɵɵelementEnd();
        }
      }
      function N(V, P) {
        if (
          (1 & V &&
            (e.ɵɵelementStart(0, "mat-option", 10),
            e.ɵɵelement(1, "span", 11),
            e.ɵɵpipe(2, "highlight"),
            e.ɵɵelementEnd()),
          2 & V)
        ) {
          const A = P.$implicit,
            U = e.ɵɵnextContext();
          e.ɵɵproperty("value", A),
            e.ɵɵadvance(1),
            e.ɵɵproperty(
              "innerHTML",
              e.ɵɵpipeBind2(2, 2, A, U.searchText),
              e.ɵɵsanitizeHtml
            );
        }
      }
      function B(V, P) {
        if (
          (1 & V &&
            (e.ɵɵelementStart(0, "mat-error"),
            e.ɵɵtext(1),
            e.ɵɵpipe(2, "translate"),
            e.ɵɵelementEnd()),
          2 & V)
        ) {
          const A = e.ɵɵnextContext();
          e.ɵɵadvance(1),
            e.ɵɵtextInterpolate1(
              " ",
              e.ɵɵpipeBind1(2, 1, A.entitySubtypeRequiredText),
              " "
            );
        }
      }
      function j(V, P) {
        if (
          (1 & V &&
            (e.ɵɵelementStart(0, "mat-error"),
            e.ɵɵtext(1),
            e.ɵɵpipe(2, "translate"),
            e.ɵɵelementEnd()),
          2 & V)
        ) {
          const A = e.ɵɵnextContext();
          e.ɵɵadvance(1),
            e.ɵɵtextInterpolate1(
              " ",
              e.ɵɵpipeBind1(2, 1, A.entitySubtypeMaxLength),
              " "
            );
        }
      }
      class F {
        constructor(P, A, U, G, Z, le, X, se) {
          (this.store = P),
            (this.broadcast = A),
            (this.translate = U),
            (this.deviceService = G),
            (this.assetService = Z),
            (this.edgeService = le),
            (this.entityViewService = X),
            (this.fb = se),
            (this.searchText = ""),
            (this.dirty = !1),
            (this.propagateChange = (ne) => {}),
            (this.subTypeFormGroup = this.fb.group({
              subType: [null, n.Validators.maxLength(255)],
            }));
        }
        get required() {
          return this.requiredValue;
        }
        set required(P) {
          this.requiredValue = (0, _.coerceBooleanProperty)(P);
        }
        registerOnChange(P) {
          this.propagateChange = P;
        }
        registerOnTouched(P) {}
        ngOnInit() {
          switch (this.entityType) {
            case h.py.ASSET:
              (this.selectEntitySubtypeText = "asset.select-asset-type"),
                (this.entitySubtypeText = "asset.asset-type"),
                (this.entitySubtypeRequiredText = "asset.asset-type-required"),
                (this.entitySubtypeMaxLength = "asset.asset-type-max-length"),
                (this.broadcastSubscription = this.broadcast.on(
                  "assetSaved",
                  () => {
                    this.subTypes = null;
                  }
                ));
              break;
            case h.py.DEVICE:
              (this.selectEntitySubtypeText = "device.select-device-type"),
                (this.entitySubtypeText = "device.device-type"),
                (this.entitySubtypeRequiredText =
                  "device.device-type-required"),
                (this.entitySubtypeMaxLength = "device.device-type-max-length"),
                (this.broadcastSubscription = this.broadcast.on(
                  "deviceSaved",
                  () => {
                    this.subTypes = null;
                  }
                ));
              break;
            case h.py.EDGE:
              (this.selectEntitySubtypeText = "edge.select-edge-type"),
                (this.entitySubtypeText = "edge.edge-type"),
                (this.entitySubtypeRequiredText = "edge.edge-type-required"),
                (this.entitySubtypeMaxLength = "edge.type-max-length"),
                (this.broadcastSubscription = this.broadcast.on(
                  "edgeSaved",
                  () => {
                    this.subTypes = null;
                  }
                ));
              break;
            case h.py.ENTITY_VIEW:
              (this.selectEntitySubtypeText =
                "entity-view.select-entity-view-type"),
                (this.entitySubtypeText = "entity-view.entity-view-type"),
                (this.entitySubtypeRequiredText =
                  "entity-view.entity-view-type-required"),
                (this.entitySubtypeMaxLength = "entity-view.type-max-length"),
                (this.broadcastSubscription = this.broadcast.on(
                  "entityViewSaved",
                  () => {
                    this.subTypes = null;
                  }
                ));
          }
          this.filteredSubTypes = this.subTypeFormGroup
            .get("subType")
            .valueChanges.pipe(
              (0, s.b)(150),
              (0, d.x)(),
              (0, o.b)((P) => {
                this.updateView(P);
              }),
              (0, i.U)((P) => P || ""),
              (0, g.w)((P) => this.fetchSubTypes(P))
            );
        }
        ngAfterViewInit() {}
        ngOnDestroy() {
          this.broadcastSubscription &&
            this.broadcastSubscription.unsubscribe();
        }
        setDisabledState(P) {
          (this.disabled = P),
            this.disabled
              ? this.subTypeFormGroup.disable({ emitEvent: !1 })
              : this.subTypeFormGroup.enable({ emitEvent: !1 });
        }
        writeValue(P) {
          (this.searchText = ""),
            (this.modelValue = P),
            this.subTypeFormGroup
              .get("subType")
              .patchValue(P, { emitEvent: !1 }),
            (this.dirty = !0);
        }
        onFocus() {
          this.dirty &&
            (this.subTypeFormGroup
              .get("subType")
              .updateValueAndValidity({ onlySelf: !0, emitEvent: !0 }),
            (this.dirty = !1));
        }
        updateView(P) {
          this.modelValue !== P &&
            ((this.modelValue = P), this.propagateChange(this.modelValue));
        }
        displaySubTypeFn(P) {
          return P || void 0;
        }
        fetchSubTypes(P, A = !1) {
          return (
            (this.searchText = P),
            this.getSubTypes().pipe(
              (0, i.U)((U) =>
                U.filter((G) =>
                  A
                    ? !!P && G === P
                    : !P || G.toUpperCase().startsWith(P.toUpperCase())
                )
              )
            )
          );
        }
        getSubTypes() {
          if (!this.subTypes) {
            let P;
            switch (this.entityType) {
              case h.py.ASSET:
                P = this.assetService.getAssetTypes({ ignoreLoading: !0 });
                break;
              case h.py.DEVICE:
                P = this.deviceService.getDeviceTypes({ ignoreLoading: !0 });
                break;
              case h.py.EDGE:
                P = this.edgeService.getEdgeTypes({ ignoreLoading: !0 });
                break;
              case h.py.ENTITY_VIEW:
                P = this.entityViewService.getEntityViewTypes({
                  ignoreLoading: !0,
                });
            }
            if (!P) return (0, C._)(null);
            this.subTypes = P.pipe(
              (0, D.K)(() => (0, a.of)([])),
              (0, i.U)((A) => A.map((U) => U.type)),
              (0, y._)(1),
              (0, m.x)()
            );
          }
          return this.subTypes;
        }
        clear() {
          this.subTypeFormGroup
            .get("subType")
            .patchValue(null, { emitEvent: !0 }),
            setTimeout(() => {
              this.subTypeInput.nativeElement.blur(),
                this.subTypeInput.nativeElement.focus();
            }, 0);
        }
      }
      (F.ɵfac = function (P) {
        return new (P || F)(
          e.ɵɵdirectiveInject(I.Store),
          e.ɵɵdirectiveInject(p.M),
          e.ɵɵdirectiveInject(l.TranslateService),
          e.ɵɵdirectiveInject(r.U),
          e.ɵɵdirectiveInject(E.d),
          e.ɵɵdirectiveInject(v.A),
          e.ɵɵdirectiveInject(c.l),
          e.ɵɵdirectiveInject(n.FormBuilder)
        );
      }),
        (F.ɵcmp = e.ɵɵdefineComponent({
          type: F,
          selectors: [["tb-entity-subtype-autocomplete"]],
          viewQuery: function (P, A) {
            if ((1 & P && e.ɵɵviewQuery(L, 7), 2 & P)) {
              let U;
              e.ɵɵqueryRefresh((U = e.ɵɵloadQuery())) &&
                (A.subTypeInput = U.first);
            }
          },
          inputs: {
            entityType: "entityType",
            required: "required",
            disabled: "disabled",
          },
          features: [
            e.ɵɵProvidersFeature([
              {
                provide: n.NG_VALUE_ACCESSOR,
                useExisting: (0, e.forwardRef)(() => F),
                multi: !0,
              },
            ]),
          ],
          decls: 14,
          vars: 16,
          consts: [
            [1, "mat-block", 3, "formGroup"],
            [
              "matInput",
              "",
              "type",
              "text",
              "formControlName",
              "subType",
              3,
              "placeholder",
              "required",
              "matAutocomplete",
              "focusin",
            ],
            ["subTypeInput", ""],
            [
              "type",
              "button",
              "matSuffix",
              "",
              "mat-button",
              "",
              "mat-icon-button",
              "",
              "aria-label",
              "Clear",
              3,
              "click",
              4,
              "ngIf",
            ],
            [1, "tb-autocomplete", 3, "displayWith"],
            ["subTypeAutocomplete", "matAutocomplete"],
            [3, "value", 4, "ngFor", "ngForOf"],
            [4, "ngIf"],
            [
              "type",
              "button",
              "matSuffix",
              "",
              "mat-button",
              "",
              "mat-icon-button",
              "",
              "aria-label",
              "Clear",
              3,
              "click",
            ],
            [1, "material-icons"],
            [3, "value"],
            [3, "innerHTML"],
          ],
          template: function (P, A) {
            if (
              (1 & P &&
                (e.ɵɵelementStart(0, "mat-form-field", 0),
                e.ɵɵelementStart(1, "mat-label"),
                e.ɵɵtext(2),
                e.ɵɵpipe(3, "translate"),
                e.ɵɵelementEnd(),
                e.ɵɵelementStart(4, "input", 1, 2),
                e.ɵɵlistener("focusin", function () {
                  return A.onFocus();
                }),
                e.ɵɵpipe(6, "translate"),
                e.ɵɵelementEnd(),
                e.ɵɵtemplate(7, k, 3, 0, "button", 3),
                e.ɵɵelementStart(8, "mat-autocomplete", 4, 5),
                e.ɵɵtemplate(10, N, 3, 5, "mat-option", 6),
                e.ɵɵpipe(11, "async"),
                e.ɵɵelementEnd(),
                e.ɵɵtemplate(12, B, 3, 3, "mat-error", 7),
                e.ɵɵtemplate(13, j, 3, 3, "mat-error", 7),
                e.ɵɵelementEnd()),
              2 & P)
            ) {
              const U = e.ɵɵreference(9);
              e.ɵɵproperty("formGroup", A.subTypeFormGroup),
                e.ɵɵadvance(2),
                e.ɵɵtextInterpolate(e.ɵɵpipeBind1(3, 10, A.entitySubtypeText)),
                e.ɵɵadvance(2),
                e.ɵɵpropertyInterpolate(
                  "placeholder",
                  e.ɵɵpipeBind1(6, 12, A.selectEntitySubtypeText)
                ),
                e.ɵɵproperty("required", A.required)("matAutocomplete", U),
                e.ɵɵadvance(3),
                e.ɵɵproperty(
                  "ngIf",
                  A.subTypeFormGroup.get("subType").value && !A.disabled
                ),
                e.ɵɵadvance(1),
                e.ɵɵproperty("displayWith", A.displaySubTypeFn),
                e.ɵɵadvance(2),
                e.ɵɵproperty(
                  "ngForOf",
                  e.ɵɵpipeBind1(11, 14, A.filteredSubTypes)
                ),
                e.ɵɵadvance(2),
                e.ɵɵproperty(
                  "ngIf",
                  A.subTypeFormGroup.get("subType").hasError("required")
                ),
                e.ɵɵadvance(1),
                e.ɵɵproperty(
                  "ngIf",
                  A.subTypeFormGroup.get("subType").hasError("maxlength")
                );
            }
          },
          directives: [
            T.MatFormField,
            n.NgControlStatusGroup,
            n.FormGroupDirective,
            T.MatLabel,
            O.MatInput,
            n.DefaultValueAccessor,
            w.MatAutocompleteTrigger,
            n.NgControlStatus,
            n.FormControlName,
            n.RequiredValidator,
            b.NgIf,
            w.MatAutocomplete,
            b.NgForOf,
            S.MatButton,
            T.MatSuffix,
            u.MatIcon,
            f.MatOption,
            T.MatError,
          ],
          pipes: [l.TranslatePipe, b.AsyncPipe, M.HighlightPipe],
          encapsulation: 2,
        }));
    },
    4155: (ee, R, t) => {
      "use strict";
      t.r(R), t.d(R, { EntitySubTypeListComponent: () => V });
      var e = t(37716),
        n = t(3679),
        a = t(40205),
        C = t(88002),
        s = t(19773),
        d = t(78345),
        o = t(35226),
        i = t(51307),
        g = t(52042),
        D = t(39490),
        y = t(68677),
        m = t(33441),
        r = t(80140),
        h = t(6744),
        p = t(14866),
        _ = t(36461),
        E = t(86710),
        c = t(29790),
        v = t(98295),
        I = t(58341),
        l = t(38583),
        T = t(83166),
        O = t(21554),
        w = t(76627),
        b = t(72458),
        S = t(53883);
      const u = ["entitySubtypeInput"],
        f = ["entitySubtypeAutocomplete"],
        M = ["chipList"];
      function L(P, A) {
        1 & P &&
          (e.ɵɵelementStart(0, "mat-icon", 13),
          e.ɵɵtext(1, "close"),
          e.ɵɵelementEnd());
      }
      function k(P, A) {
        if (1 & P) {
          const U = e.ɵɵgetCurrentView();
          e.ɵɵelementStart(0, "mat-chip", 11),
            e.ɵɵlistener("removed", function () {
              const le = e.ɵɵrestoreView(U).$implicit;
              return e.ɵɵnextContext().remove(le);
            }),
            e.ɵɵtext(1),
            e.ɵɵtemplate(2, L, 2, 0, "mat-icon", 12),
            e.ɵɵelementEnd();
        }
        if (2 & P) {
          const U = A.$implicit,
            G = e.ɵɵnextContext();
          e.ɵɵproperty("selectable", !G.disabled)("removable", !G.disabled),
            e.ɵɵadvance(1),
            e.ɵɵtextInterpolate1(" ", U, " "),
            e.ɵɵadvance(1),
            e.ɵɵproperty("ngIf", !G.disabled);
        }
      }
      function N(P, A) {
        if (
          (1 & P &&
            (e.ɵɵelementStart(0, "mat-option", 14),
            e.ɵɵelement(1, "span", 15),
            e.ɵɵpipe(2, "highlight"),
            e.ɵɵelementEnd()),
          2 & P)
        ) {
          const U = A.$implicit,
            G = e.ɵɵnextContext();
          e.ɵɵproperty("value", U),
            e.ɵɵadvance(1),
            e.ɵɵproperty(
              "innerHTML",
              e.ɵɵpipeBind2(2, 2, U, G.searchText),
              e.ɵɵsanitizeHtml
            );
        }
      }
      const B = function (P) {
        return { entitySubtype: P };
      };
      function j(P, A) {
        if (
          (1 & P &&
            (e.ɵɵelementStart(0, "mat-option", 14),
            e.ɵɵelementStart(1, "span"),
            e.ɵɵtext(2),
            e.ɵɵpipe(3, "async"),
            e.ɵɵelementEnd(),
            e.ɵɵelementEnd()),
          2 & P)
        ) {
          const U = e.ɵɵnextContext();
          e.ɵɵproperty("value", null),
            e.ɵɵadvance(2),
            e.ɵɵtextInterpolate1(
              " ",
              e.ɵɵpipeBind1(
                3,
                2,
                U.translate.get(
                  U.noSubtypesMathingText,
                  e.ɵɵpureFunction1(4, B, U.searchText)
                )
              ),
              " "
            );
        }
      }
      function F(P, A) {
        if (
          (1 & P &&
            (e.ɵɵelementStart(0, "mat-error"),
            e.ɵɵtext(1),
            e.ɵɵpipe(2, "translate"),
            e.ɵɵelementEnd()),
          2 & P)
        ) {
          const U = e.ɵɵnextContext();
          e.ɵɵadvance(1),
            e.ɵɵtextInterpolate1(
              " ",
              e.ɵɵpipeBind1(2, 1, U.subtypeListEmptyText),
              " "
            );
        }
      }
      class V {
        constructor(A, U, G, Z, le, X, se, ne) {
          (this.store = A),
            (this.broadcast = U),
            (this.translate = G),
            (this.assetService = Z),
            (this.deviceService = le),
            (this.edgeService = X),
            (this.entityViewService = se),
            (this.fb = ne),
            (this.entitySubtypeList = []),
            (this.separatorKeysCodes = [_.ENTER, _.COMMA, _.SEMICOLON]),
            (this.searchText = ""),
            (this.dirty = !1),
            (this.propagateChange = (re) => {}),
            (this.entitySubtypeListFormGroup = this.fb.group({
              entitySubtypeList: [
                this.entitySubtypeList,
                this.required ? [n.Validators.required] : [],
              ],
              entitySubtype: [null],
            }));
        }
        get required() {
          return this.requiredValue;
        }
        set required(A) {
          const U = (0, D.coerceBooleanProperty)(A);
          this.requiredValue !== U &&
            ((this.requiredValue = U), this.updateValidators());
        }
        updateValidators() {
          this.entitySubtypeListFormGroup
            .get("entitySubtypeList")
            .setValidators(this.required ? [n.Validators.required] : []),
            this.entitySubtypeListFormGroup
              .get("entitySubtypeList")
              .updateValueAndValidity();
        }
        registerOnChange(A) {
          this.propagateChange = A;
        }
        registerOnTouched(A) {}
        ngOnInit() {
          switch (this.entityType) {
            case g.py.ASSET:
              (this.placeholder = this.required
                ? this.translate.instant("asset.enter-asset-type")
                : this.translate.instant("asset.any-asset")),
                (this.secondaryPlaceholder =
                  "+" + this.translate.instant("asset.asset-type")),
                (this.noSubtypesMathingText = "asset.no-asset-types-matching"),
                (this.subtypeListEmptyText = "asset.asset-type-list-empty"),
                (this.broadcastSubscription = this.broadcast.on(
                  "assetSaved",
                  () => {
                    this.entitySubtypes = null;
                  }
                ));
              break;
            case g.py.DEVICE:
              (this.placeholder = this.required
                ? this.translate.instant("device.enter-device-type")
                : this.translate.instant("device.any-device")),
                (this.secondaryPlaceholder =
                  "+" + this.translate.instant("device.device-type")),
                (this.noSubtypesMathingText =
                  "device.no-device-types-matching"),
                (this.subtypeListEmptyText = "device.device-type-list-empty"),
                (this.broadcastSubscription = this.broadcast.on(
                  "deviceSaved",
                  () => {
                    this.entitySubtypes = null;
                  }
                ));
              break;
            case g.py.EDGE:
              (this.placeholder = this.required
                ? this.translate.instant("edge.enter-edge-type")
                : this.translate.instant("edge.any-edge")),
                (this.secondaryPlaceholder =
                  "+" + this.translate.instant("edge.edge-type")),
                (this.noSubtypesMathingText = "edge.no-edge-types-matching"),
                (this.subtypeListEmptyText = "edge.edge-type-list-empty"),
                (this.broadcastSubscription = this.broadcast.on(
                  "edgeSaved",
                  () => {
                    this.entitySubtypes = null;
                  }
                ));
              break;
            case g.py.ENTITY_VIEW:
              (this.placeholder = this.required
                ? this.translate.instant("entity-view.enter-entity-view-type")
                : this.translate.instant("entity-view.any-entity-view")),
                (this.secondaryPlaceholder =
                  "+" + this.translate.instant("entity-view.entity-view-type")),
                (this.noSubtypesMathingText =
                  "entity-view.no-entity-view-types-matching"),
                (this.subtypeListEmptyText =
                  "entity-view.entity-view-type-list-empty"),
                (this.broadcastSubscription = this.broadcast.on(
                  "entityViewSaved",
                  () => {
                    this.entitySubtypes = null;
                  }
                ));
          }
          this.filteredEntitySubtypeList = this.entitySubtypeListFormGroup
            .get("entitySubtype")
            .valueChanges.pipe(
              (0, C.U)((A) => A || ""),
              (0, s.zg)((A) => this.fetchEntitySubtypes(A)),
              (0, d.B)()
            );
        }
        ngAfterViewInit() {}
        ngOnDestroy() {
          this.broadcastSubscription &&
            this.broadcastSubscription.unsubscribe();
        }
        setDisabledState(A) {
          (this.disabled = A),
            A
              ? this.entitySubtypeListFormGroup.disable({ emitEvent: !1 })
              : this.entitySubtypeListFormGroup.enable({ emitEvent: !1 });
        }
        writeValue(A) {
          (this.searchText = ""),
            null != A && A.length > 0
              ? ((this.modelValue = [...A]),
                (this.entitySubtypeList = [...A]),
                this.entitySubtypeListFormGroup
                  .get("entitySubtypeList")
                  .setValue(this.entitySubtypeList))
              : ((this.entitySubtypeList = []),
                this.entitySubtypeListFormGroup
                  .get("entitySubtypeList")
                  .setValue(this.entitySubtypeList),
                (this.modelValue = null)),
            (this.dirty = !0);
        }
        add(A) {
          (!this.modelValue || -1 === this.modelValue.indexOf(A)) &&
            (this.modelValue || (this.modelValue = []),
            this.modelValue.push(A),
            this.entitySubtypeList.push(A),
            this.entitySubtypeListFormGroup
              .get("entitySubtypeList")
              .setValue(this.entitySubtypeList)),
            this.propagateChange(this.modelValue);
        }
        chipAdd(A) {
          const U = (A.value || "").trim();
          U && this.add(U), this.clear("");
        }
        remove(A) {
          const U = this.entitySubtypeList.indexOf(A);
          U >= 0 &&
            (this.entitySubtypeList.splice(U, 1),
            this.entitySubtypeListFormGroup
              .get("entitySubtypeList")
              .setValue(this.entitySubtypeList),
            this.modelValue.splice(U, 1),
            this.modelValue.length || (this.modelValue = null),
            this.propagateChange(this.modelValue));
        }
        selected(A) {
          this.add(A.option.viewValue), this.clear("");
        }
        displayEntitySubtypeFn(A) {
          return A || void 0;
        }
        fetchEntitySubtypes(A) {
          return (
            (this.searchText = A),
            this.getEntitySubtypes().pipe(
              (0, C.U)((U) => {
                let G = U.filter(
                  (Z) => !A || Z.toUpperCase().startsWith(A.toUpperCase())
                );
                return G.length || (G = [A]), G;
              })
            )
          );
        }
        getEntitySubtypes() {
          if (!this.entitySubtypes) {
            let A;
            switch (this.entityType) {
              case g.py.ASSET:
                A = this.assetService.getAssetTypes({ ignoreLoading: !0 });
                break;
              case g.py.DEVICE:
                A = this.deviceService.getDeviceTypes({ ignoreLoading: !0 });
                break;
              case g.py.EDGE:
                A = this.edgeService.getEdgeTypes({ ignoreLoading: !0 });
                break;
              case g.py.ENTITY_VIEW:
                A = this.entityViewService.getEntityViewTypes({
                  ignoreLoading: !0,
                });
            }
            if (!A) return (0, a._)(null);
            this.entitySubtypes = A.pipe(
              (0, C.U)((U) => U.map((G) => G.type)),
              (0, o._)(1),
              (0, i.x)()
            );
          }
          return this.entitySubtypes;
        }
        onFocus() {
          this.dirty &&
            (this.entitySubtypeListFormGroup
              .get("entitySubtype")
              .updateValueAndValidity({ onlySelf: !0, emitEvent: !0 }),
            (this.dirty = !1));
        }
        clear(A = "") {
          (this.entitySubtypeInput.nativeElement.value = A),
            this.entitySubtypeListFormGroup
              .get("entitySubtype")
              .patchValue(A, { emitEvent: !0 }),
            setTimeout(() => {
              this.entitySubtypeInput.nativeElement.blur(),
                this.entitySubtypeInput.nativeElement.focus();
            }, 0);
        }
      }
      (V.ɵfac = function (A) {
        return new (A || V)(
          e.ɵɵdirectiveInject(E.Store),
          e.ɵɵdirectiveInject(p.M),
          e.ɵɵdirectiveInject(c.TranslateService),
          e.ɵɵdirectiveInject(y.d),
          e.ɵɵdirectiveInject(m.U),
          e.ɵɵdirectiveInject(r.A),
          e.ɵɵdirectiveInject(h.l),
          e.ɵɵdirectiveInject(n.FormBuilder)
        );
      }),
        (V.ɵcmp = e.ɵɵdefineComponent({
          type: V,
          selectors: [["tb-entity-subtype-list"]],
          viewQuery: function (A, U) {
            if (
              (1 & A &&
                (e.ɵɵviewQuery(u, 5), e.ɵɵviewQuery(f, 5), e.ɵɵviewQuery(M, 7)),
              2 & A)
            ) {
              let G;
              e.ɵɵqueryRefresh((G = e.ɵɵloadQuery())) &&
                (U.entitySubtypeInput = G.first),
                e.ɵɵqueryRefresh((G = e.ɵɵloadQuery())) &&
                  (U.entitySubtypeAutocomplete = G.first),
                e.ɵɵqueryRefresh((G = e.ɵɵloadQuery())) &&
                  (U.chipList = G.first);
            }
          },
          inputs: {
            required: "required",
            disabled: "disabled",
            entityType: "entityType",
          },
          features: [
            e.ɵɵProvidersFeature([
              {
                provide: n.NG_VALUE_ACCESSOR,
                useExisting: (0, e.forwardRef)(() => V),
                multi: !0,
              },
            ]),
          ],
          decls: 14,
          vars: 15,
          consts: [
            ["appearance", "standard", 1, "mat-block", 3, "formGroup"],
            ["formControlName", "entitySubtypeList"],
            ["chipList", ""],
            [3, "selectable", "removable", "removed", 4, "ngFor", "ngForOf"],
            [
              "matInput",
              "",
              "type",
              "text",
              "formControlName",
              "entitySubtype",
              "matAutocompleteOrigin",
              "",
              2,
              "max-width",
              "200px",
              3,
              "placeholder",
              "matAutocompleteConnectedTo",
              "matAutocomplete",
              "matChipInputFor",
              "matChipInputSeparatorKeyCodes",
              "focusin",
              "matChipInputTokenEnd",
            ],
            ["entitySubtypeInput", "", "origin", "matAutocompleteOrigin"],
            [1, "tb-autocomplete", 3, "displayWith", "optionSelected"],
            ["entitySubtypeAutocomplete", "matAutocomplete"],
            [3, "value", 4, "ngFor", "ngForOf"],
            [3, "value", 4, "ngIf"],
            [4, "ngIf"],
            [3, "selectable", "removable", "removed"],
            ["matChipRemove", "", 4, "ngIf"],
            ["matChipRemove", ""],
            [3, "value"],
            [3, "innerHTML"],
          ],
          template: function (A, U) {
            if (
              (1 & A &&
                (e.ɵɵelementStart(0, "mat-form-field", 0),
                e.ɵɵelementStart(1, "mat-chip-list", 1, 2),
                e.ɵɵtemplate(3, k, 3, 4, "mat-chip", 3),
                e.ɵɵelementStart(4, "input", 4, 5),
                e.ɵɵlistener("focusin", function () {
                  return U.onFocus();
                })("matChipInputTokenEnd", function (Z) {
                  return U.chipAdd(Z);
                }),
                e.ɵɵelementEnd(),
                e.ɵɵelementEnd(),
                e.ɵɵelementStart(7, "mat-autocomplete", 6, 7),
                e.ɵɵlistener("optionSelected", function (Z) {
                  return U.selected(Z);
                }),
                e.ɵɵtemplate(9, N, 3, 5, "mat-option", 8),
                e.ɵɵpipe(10, "async"),
                e.ɵɵtemplate(11, j, 4, 6, "mat-option", 9),
                e.ɵɵpipe(12, "async"),
                e.ɵɵelementEnd(),
                e.ɵɵtemplate(13, F, 3, 3, "mat-error", 10),
                e.ɵɵelementEnd()),
              2 & A)
            ) {
              const G = e.ɵɵreference(2),
                Z = e.ɵɵreference(6),
                le = e.ɵɵreference(8);
              let X;
              e.ɵɵproperty("formGroup", U.entitySubtypeListFormGroup),
                e.ɵɵadvance(3),
                e.ɵɵproperty("ngForOf", U.entitySubtypeList),
                e.ɵɵadvance(1),
                e.ɵɵpropertyInterpolate(
                  "placeholder",
                  U.disabled
                    ? ""
                    : U.entitySubtypeList && U.entitySubtypeList.length
                    ? U.secondaryPlaceholder
                    : U.placeholder
                ),
                e.ɵɵproperty("matAutocompleteConnectedTo", Z)(
                  "matAutocomplete",
                  le
                )("matChipInputFor", G)(
                  "matChipInputSeparatorKeyCodes",
                  U.separatorKeysCodes
                ),
                e.ɵɵadvance(3),
                e.ɵɵproperty("displayWith", U.displayEntitySubtypeFn),
                e.ɵɵadvance(2),
                e.ɵɵproperty(
                  "ngForOf",
                  e.ɵɵpipeBind1(10, 11, U.filteredEntitySubtypeList)
                ),
                e.ɵɵadvance(2),
                e.ɵɵproperty(
                  "ngIf",
                  !(
                    null !=
                      (X = e.ɵɵpipeBind1(
                        12,
                        13,
                        U.filteredEntitySubtypeList
                      )) && X.length
                  )
                ),
                e.ɵɵadvance(2),
                e.ɵɵproperty(
                  "ngIf",
                  U.entitySubtypeListFormGroup
                    .get("entitySubtypeList")
                    .hasError("required")
                );
            }
          },
          directives: [
            v.MatFormField,
            n.NgControlStatusGroup,
            n.FormGroupDirective,
            I.MatChipList,
            n.NgControlStatus,
            n.FormControlName,
            l.NgForOf,
            T.MatInput,
            n.DefaultValueAccessor,
            O.MatAutocompleteTrigger,
            I.MatChipInput,
            O.MatAutocompleteOrigin,
            O.MatAutocomplete,
            l.NgIf,
            I.MatChip,
            w.MatIcon,
            I.MatChipRemove,
            b.MatOption,
            v.MatError,
          ],
          pipes: [l.AsyncPipe, S.HighlightPipe, c.TranslatePipe],
          styles: [
            '@charset "UTF-8";[_nghost-%COMP%]     .mat-form-field .mat-form-field-infix{border-top:none}',
          ],
        }));
    },
    32053: (ee, R, t) => {
      "use strict";
      t.r(R), t.d(R, { EntitySubTypeSelectComponent: () => u });
      var e = t(37716),
        n = t(3679),
        a = t(79765),
        C = t(40205),
        s = t(39761),
        d = t(19773),
        o = t(88002),
        i = t(68307),
        g = t(35226),
        D = t(51307),
        y = t(33441),
        m = t(52042),
        r = t(14866),
        h = t(68677),
        p = t(80140),
        _ = t(6744),
        E = t(86710),
        c = t(29790),
        v = t(98295),
        I = t(38583),
        l = t(67441),
        T = t(88030),
        O = t(72458);
      function w(f, M) {
        if (
          (1 & f &&
            (e.ɵɵelementStart(0, "mat-label"),
            e.ɵɵtext(1),
            e.ɵɵpipe(2, "translate"),
            e.ɵɵelementEnd()),
          2 & f)
        ) {
          const L = e.ɵɵnextContext();
          e.ɵɵadvance(1),
            e.ɵɵtextInterpolate(e.ɵɵpipeBind1(2, 1, L.entitySubtypeTitle));
        }
      }
      function b(f, M) {
        if (
          (1 & f &&
            (e.ɵɵelementStart(0, "mat-option", 4),
            e.ɵɵtext(1),
            e.ɵɵelementEnd()),
          2 & f)
        ) {
          const L = M.$implicit,
            k = e.ɵɵnextContext();
          e.ɵɵproperty("value", L),
            e.ɵɵadvance(1),
            e.ɵɵtextInterpolate1(" ", k.displaySubTypeFn(L), " ");
        }
      }
      function S(f, M) {
        if (
          (1 & f &&
            (e.ɵɵelementStart(0, "mat-error"),
            e.ɵɵtext(1),
            e.ɵɵpipe(2, "translate"),
            e.ɵɵelementEnd()),
          2 & f)
        ) {
          const L = e.ɵɵnextContext();
          e.ɵɵadvance(1),
            e.ɵɵtextInterpolate1(
              " ",
              e.ɵɵpipeBind1(2, 1, L.entitySubtypeRequiredText),
              " "
            );
        }
      }
      class u {
        constructor(M, L, k, N, B, j, F, V) {
          (this.store = M),
            (this.broadcast = L),
            (this.translate = k),
            (this.deviceService = N),
            (this.assetService = B),
            (this.edgeService = j),
            (this.entityViewService = F),
            (this.fb = V),
            (this.modelValue = ""),
            (this.subTypesOptionsSubject = new a.xQ()),
            (this.subTypesLoaded = !1),
            (this.propagateChange = (P) => {}),
            (this.subTypeFormGroup = this.fb.group({ subType: [""] }));
        }
        registerOnChange(M) {
          this.propagateChange = M;
        }
        registerOnTouched(M) {}
        ngOnInit() {
          switch (this.entityType) {
            case m.py.ASSET:
              (this.entitySubtypeTitle = "asset.asset-type"),
                (this.entitySubtypeRequiredText = "asset.asset-type-required"),
                (this.broadcastSubscription = this.broadcast.on(
                  "assetSaved",
                  () => {
                    (this.subTypes = null),
                      this.subTypesOptionsSubject.next("");
                  }
                ));
              break;
            case m.py.DEVICE:
              (this.entitySubtypeTitle = "device.device-type"),
                (this.entitySubtypeRequiredText =
                  "device.device-type-required"),
                (this.broadcastSubscription = this.broadcast.on(
                  "deviceSaved",
                  () => {
                    (this.subTypes = null),
                      this.subTypesOptionsSubject.next("");
                  }
                ));
              break;
            case m.py.EDGE:
              (this.entitySubtypeTitle = "edge.edge-type"),
                (this.entitySubtypeRequiredText = "edge.edge-type-required"),
                (this.broadcastSubscription = this.broadcast.on(
                  "edgeSaved",
                  () => {
                    (this.subTypes = null),
                      this.subTypesOptionsSubject.next("");
                  }
                ));
              break;
            case m.py.ENTITY_VIEW:
              (this.entitySubtypeTitle = "entity-view.entity-view-type"),
                (this.entitySubtypeRequiredText =
                  "entity-view.entity-view-type-required"),
                (this.broadcastSubscription = this.broadcast.on(
                  "entityViewSaved",
                  () => {
                    (this.subTypes = null),
                      this.subTypesOptionsSubject.next("");
                  }
                ));
          }
          (this.subTypesOptions = this.subTypesOptionsSubject
            .asObservable()
            .pipe(
              (0, s.O)(""),
              (0, d.zg)(() => this.getSubTypes())
            )),
            this.subTypeFormGroup.get("subType").valueChanges.subscribe((M) => {
              let L;
              (L = M && "" !== M ? M.type : ""), this.updateView(L);
            });
        }
        ngAfterViewInit() {}
        ngOnDestroy() {
          this.broadcastSubscription &&
            this.broadcastSubscription.unsubscribe();
        }
        setDisabledState(M) {
          (this.disabled = M),
            this.disabled
              ? this.subTypeFormGroup.disable()
              : this.subTypeFormGroup.enable();
        }
        writeValue(M) {
          null != M && "" !== M
            ? ((this.modelValue = M),
              this.findSubTypes(M).subscribe((L) => {
                const k = L && 1 === L.length ? L[0] : "";
                this.subTypeFormGroup
                  .get("subType")
                  .patchValue(k, { emitEvent: !0 });
              }))
            : ((this.modelValue = ""),
              this.subTypeFormGroup
                .get("subType")
                .patchValue("", { emitEvent: !0 }));
        }
        updateView(M) {
          this.modelValue !== M &&
            ((this.modelValue = M), this.propagateChange(this.modelValue));
        }
        displaySubTypeFn(M) {
          return M && "string" != typeof M
            ? this.typeTranslatePrefix
              ? this.translate.instant(this.typeTranslatePrefix + "." + M.type)
              : M.type
            : this.translate.instant("entity.all-subtypes");
        }
        findSubTypes(M) {
          return this.getSubTypes().pipe(
            (0, o.U)((L) =>
              L.filter((k) => !!M && "string" != typeof k && k.type === M)
            )
          );
        }
        getSubTypes() {
          if (!this.subTypes) {
            switch (this.entityType) {
              case m.py.ASSET:
                this.subTypes = this.assetService.getAssetTypes({
                  ignoreLoading: !0,
                });
                break;
              case m.py.DEVICE:
                this.subTypes = this.deviceService.getDeviceTypes({
                  ignoreLoading: !0,
                });
                break;
              case m.py.EDGE:
                this.subTypes = this.edgeService.getEdgeTypes({
                  ignoreLoading: !0,
                });
                break;
              case m.py.ENTITY_VIEW:
                this.subTypes = this.entityViewService.getEntityViewTypes({
                  ignoreLoading: !0,
                });
            }
            if (!this.subTypes) return (0, C._)(null);
            this.subTypes = this.subTypes.pipe(
              (0, o.U)((M) => (M.unshift(""), (this.subTypesLoaded = !0), M)),
              (0, i.b)((M) => {
                const L = this.subTypeFormGroup.get("subType").value,
                  k = "string" == typeof L ? L : L.type,
                  N = M.find((B) =>
                    "string" == typeof B ? B === L : B.type === k
                  );
                N && this.subTypeFormGroup.get("subType").patchValue(N);
              }),
              (0, g._)(1),
              (0, D.x)()
            );
          }
          return this.subTypes;
        }
      }
      (u.ɵfac = function (M) {
        return new (M || u)(
          e.ɵɵdirectiveInject(E.Store),
          e.ɵɵdirectiveInject(r.M),
          e.ɵɵdirectiveInject(c.TranslateService),
          e.ɵɵdirectiveInject(y.U),
          e.ɵɵdirectiveInject(h.d),
          e.ɵɵdirectiveInject(p.A),
          e.ɵɵdirectiveInject(_.l),
          e.ɵɵdirectiveInject(n.FormBuilder)
        );
      }),
        (u.ɵcmp = e.ɵɵdefineComponent({
          type: u,
          selectors: [["tb-entity-subtype-select"]],
          inputs: {
            entityType: "entityType",
            showLabel: "showLabel",
            required: "required",
            disabled: "disabled",
            typeTranslatePrefix: "typeTranslatePrefix",
          },
          features: [
            e.ɵɵProvidersFeature([
              {
                provide: n.NG_VALUE_ACCESSOR,
                useExisting: (0, e.forwardRef)(() => u),
                multi: !0,
              },
            ]),
          ],
          decls: 6,
          vars: 7,
          consts: [
            [1, "mat-block", 3, "formGroup"],
            [4, "ngIf"],
            [
              "formControlName",
              "subType",
              1,
              "tb-entity-subtype-select",
              3,
              "fxShow",
            ],
            [3, "value", 4, "ngFor", "ngForOf"],
            [3, "value"],
          ],
          template: function (M, L) {
            1 & M &&
              (e.ɵɵelementStart(0, "mat-form-field", 0),
              e.ɵɵtemplate(1, w, 3, 3, "mat-label", 1),
              e.ɵɵelementStart(2, "mat-select", 2),
              e.ɵɵtemplate(3, b, 2, 2, "mat-option", 3),
              e.ɵɵpipe(4, "async"),
              e.ɵɵelementEnd(),
              e.ɵɵtemplate(5, S, 3, 3, "mat-error", 1),
              e.ɵɵelementEnd()),
              2 & M &&
                (e.ɵɵproperty("formGroup", L.subTypeFormGroup),
                e.ɵɵadvance(1),
                e.ɵɵproperty("ngIf", L.showLabel),
                e.ɵɵadvance(1),
                e.ɵɵproperty("fxShow", L.subTypesLoaded),
                e.ɵɵadvance(1),
                e.ɵɵproperty("ngForOf", e.ɵɵpipeBind1(4, 5, L.subTypesOptions)),
                e.ɵɵadvance(2),
                e.ɵɵproperty(
                  "ngIf",
                  L.subTypeFormGroup.get("subType").hasError("required")
                ));
          },
          directives: [
            v.MatFormField,
            n.NgControlStatusGroup,
            n.FormGroupDirective,
            I.NgIf,
            l.MatSelect,
            n.NgControlStatus,
            n.FormControlName,
            T.DefaultShowHideDirective,
            I.NgForOf,
            v.MatLabel,
            O.MatOption,
            v.MatError,
          ],
          pipes: [I.AsyncPipe, c.TranslatePipe],
          styles: ['@charset "UTF-8";'],
        }));
    },
    18233: (ee, R, t) => {
      "use strict";
      t.r(R), t.d(R, { EntityTypeListComponent: () => k });
      var e = t(37716),
        n = t(3679),
        a = t(25917),
        C = t(68307),
        s = t(45435),
        d = t(88002),
        o = t(19773),
        i = t(78345),
        g = t(52042),
        D = t(23914),
        y = t(39490),
        m = t(86710),
        r = t(29790),
        h = t(98295),
        p = t(58341),
        _ = t(38583),
        E = t(83166),
        c = t(21554),
        v = t(76627),
        I = t(72458),
        l = t(53883);
      const T = ["entityTypeInput"],
        O = ["entityTypeAutocomplete"],
        w = ["chipList"];
      function b(N, B) {
        1 & N &&
          (e.ɵɵelementStart(0, "mat-icon", 13),
          e.ɵɵtext(1, "close"),
          e.ɵɵelementEnd());
      }
      function S(N, B) {
        if (1 & N) {
          const j = e.ɵɵgetCurrentView();
          e.ɵɵelementStart(0, "mat-chip", 11),
            e.ɵɵlistener("removed", function () {
              const P = e.ɵɵrestoreView(j).$implicit;
              return e.ɵɵnextContext().remove(P);
            }),
            e.ɵɵtext(1),
            e.ɵɵtemplate(2, b, 2, 0, "mat-icon", 12),
            e.ɵɵelementEnd();
        }
        if (2 & N) {
          const j = B.$implicit,
            F = e.ɵɵnextContext();
          e.ɵɵproperty("selectable", !F.disabled)("removable", !F.disabled),
            e.ɵɵadvance(1),
            e.ɵɵtextInterpolate1(" ", j.name, " "),
            e.ɵɵadvance(1),
            e.ɵɵproperty("ngIf", !F.disabled);
        }
      }
      function u(N, B) {
        if (
          (1 & N &&
            (e.ɵɵelementStart(0, "mat-option", 14),
            e.ɵɵelement(1, "span", 15),
            e.ɵɵpipe(2, "highlight"),
            e.ɵɵelementEnd()),
          2 & N)
        ) {
          const j = B.$implicit,
            F = e.ɵɵnextContext();
          e.ɵɵproperty("value", j),
            e.ɵɵadvance(1),
            e.ɵɵproperty(
              "innerHTML",
              e.ɵɵpipeBind2(2, 2, j.name, F.searchText),
              e.ɵɵsanitizeHtml
            );
        }
      }
      const f = function (N) {
        return { entityType: N };
      };
      function M(N, B) {
        if (
          (1 & N &&
            (e.ɵɵelementStart(0, "mat-option", 14),
            e.ɵɵelementStart(1, "span"),
            e.ɵɵtext(2),
            e.ɵɵpipe(3, "async"),
            e.ɵɵelementEnd(),
            e.ɵɵelementEnd()),
          2 & N)
        ) {
          const j = e.ɵɵnextContext();
          e.ɵɵproperty("value", null),
            e.ɵɵadvance(2),
            e.ɵɵtextInterpolate1(
              " ",
              e.ɵɵpipeBind1(
                3,
                2,
                j.translate.get(
                  "entity.no-entity-types-matching",
                  e.ɵɵpureFunction1(4, f, j.searchText)
                )
              ),
              " "
            );
        }
      }
      function L(N, B) {
        1 & N &&
          (e.ɵɵelementStart(0, "mat-error"),
          e.ɵɵtext(1),
          e.ɵɵpipe(2, "translate"),
          e.ɵɵelementEnd()),
          2 & N &&
            (e.ɵɵadvance(1),
            e.ɵɵtextInterpolate1(
              " ",
              e.ɵɵpipeBind1(2, 1, "entity.entity-type-list-empty"),
              " "
            ));
      }
      class k {
        constructor(B, j, F, V) {
          (this.store = B),
            (this.translate = j),
            (this.entityService = F),
            (this.fb = V),
            (this.allEntityTypeList = []),
            (this.entityTypeList = []),
            (this.searchText = ""),
            (this.dirty = !1),
            (this.propagateChange = (P) => {}),
            (this.entityTypeListFormGroup = this.fb.group({
              entityTypeList: [
                this.entityTypeList,
                this.required ? [n.Validators.required] : [],
              ],
              entityType: [null],
            }));
        }
        get required() {
          return this.requiredValue;
        }
        set required(B) {
          const j = (0, y.coerceBooleanProperty)(B);
          this.requiredValue !== j &&
            ((this.requiredValue = j), this.updateValidators());
        }
        updateValidators() {
          this.entityTypeListFormGroup
            .get("entityTypeList")
            .setValidators(this.required ? [n.Validators.required] : []),
            this.entityTypeListFormGroup
              .get("entityTypeList")
              .updateValueAndValidity();
        }
        registerOnChange(B) {
          this.propagateChange = B;
        }
        registerOnTouched(B) {}
        ngOnInit() {
          let B;
          (this.placeholder = this.required
            ? this.translate.instant("entity.enter-entity-type")
            : this.translate.instant("entity.any-entity")),
            (this.secondaryPlaceholder =
              "+" + this.translate.instant("entity.entity-type")),
            this.ignoreAuthorityFilter &&
            this.allowedEntityTypes &&
            this.allowedEntityTypes.length
              ? ((B = []),
                this.allowedEntityTypes.forEach((j) => {
                  B.push(j);
                }))
              : (B = this.entityService.prepareAllowedEntityTypesList(
                  this.allowedEntityTypes
                )),
            B.forEach((j) => {
              this.allEntityTypeList.push({
                name: this.translate.instant(g.Jr.get(j).type),
                value: j,
              });
            }),
            (this.filteredEntityTypeList = this.entityTypeListFormGroup
              .get("entityType")
              .valueChanges.pipe(
                (0, C.b)((j) => {
                  j && "string" != typeof j
                    ? this.add(j)
                    : null === j &&
                      this.clear(this.entityTypeInput.nativeElement.value);
                }),
                (0, s.h)((j) => "string" == typeof j),
                (0, d.U)((j) => (j ? ("string" == typeof j ? j : j.name) : "")),
                (0, o.zg)((j) => this.fetchEntityTypes(j)),
                (0, i.B)()
              ));
        }
        ngAfterViewInit() {}
        setDisabledState(B) {
          (this.disabled = B),
            B
              ? this.entityTypeListFormGroup.disable({ emitEvent: !1 })
              : this.entityTypeListFormGroup.enable({ emitEvent: !1 });
        }
        writeValue(B) {
          (this.searchText = ""),
            null != B && B.length > 0
              ? ((this.modelValue = [...B]),
                (this.entityTypeList = []),
                B.forEach((j) => {
                  this.entityTypeList.push({
                    name: g.Jr.has(j)
                      ? this.translate.instant(g.Jr.get(j).type)
                      : "Unknown",
                    value: j,
                  });
                }),
                this.entityTypeListFormGroup
                  .get("entityTypeList")
                  .setValue(this.entityTypeList))
              : ((this.entityTypeList = []),
                this.entityTypeListFormGroup
                  .get("entityTypeList")
                  .setValue(this.entityTypeList),
                (this.modelValue = null)),
            (this.dirty = !0);
        }
        add(B) {
          (!this.modelValue || -1 === this.modelValue.indexOf(B.value)) &&
            (this.modelValue || (this.modelValue = []),
            this.modelValue.push(B.value),
            this.entityTypeList.push(B),
            this.entityTypeListFormGroup
              .get("entityTypeList")
              .setValue(this.entityTypeList)),
            this.propagateChange(this.modelValue),
            this.clear();
        }
        remove(B) {
          const j = this.entityTypeList.indexOf(B);
          j >= 0 &&
            (this.entityTypeList.splice(j, 1),
            this.entityTypeListFormGroup
              .get("entityTypeList")
              .setValue(this.entityTypeList),
            this.modelValue.splice(j, 1),
            this.modelValue.length || (this.modelValue = null),
            this.propagateChange(this.modelValue),
            this.clear());
        }
        displayEntityTypeFn(B) {
          return B ? B.name : void 0;
        }
        fetchEntityTypes(B) {
          this.searchText = B;
          let j = this.allEntityTypeList;
          return (
            B &&
              B.length &&
              (j = this.allEntityTypeList.filter((F) =>
                F.name.toLowerCase().includes(B.toLowerCase())
              )),
            (0, a.of)(j)
          );
        }
        onFocus() {
          this.dirty &&
            (this.entityTypeListFormGroup
              .get("entityType")
              .updateValueAndValidity({ onlySelf: !0, emitEvent: !0 }),
            (this.dirty = !1));
        }
        clear(B = "") {
          (this.entityTypeInput.nativeElement.value = B),
            this.entityTypeListFormGroup
              .get("entityType")
              .patchValue(B, { emitEvent: !0 }),
            setTimeout(() => {
              this.entityTypeInput.nativeElement.blur(),
                this.entityTypeInput.nativeElement.focus();
            }, 0);
        }
      }
      (k.ɵfac = function (B) {
        return new (B || k)(
          e.ɵɵdirectiveInject(m.Store),
          e.ɵɵdirectiveInject(r.TranslateService),
          e.ɵɵdirectiveInject(D.c),
          e.ɵɵdirectiveInject(n.FormBuilder)
        );
      }),
        (k.ɵcmp = e.ɵɵdefineComponent({
          type: k,
          selectors: [["tb-entity-type-list"]],
          viewQuery: function (B, j) {
            if (
              (1 & B &&
                (e.ɵɵviewQuery(T, 5), e.ɵɵviewQuery(O, 5), e.ɵɵviewQuery(w, 7)),
              2 & B)
            ) {
              let F;
              e.ɵɵqueryRefresh((F = e.ɵɵloadQuery())) &&
                (j.entityTypeInput = F.first),
                e.ɵɵqueryRefresh((F = e.ɵɵloadQuery())) &&
                  (j.entityTypeAutocomplete = F.first),
                e.ɵɵqueryRefresh((F = e.ɵɵloadQuery())) &&
                  (j.chipList = F.first);
            }
          },
          inputs: {
            required: "required",
            disabled: "disabled",
            allowedEntityTypes: "allowedEntityTypes",
            ignoreAuthorityFilter: "ignoreAuthorityFilter",
          },
          features: [
            e.ɵɵProvidersFeature([
              {
                provide: n.NG_VALUE_ACCESSOR,
                useExisting: (0, e.forwardRef)(() => k),
                multi: !0,
              },
            ]),
          ],
          decls: 14,
          vars: 14,
          consts: [
            ["appearance", "standard", 1, "mat-block", 3, "formGroup"],
            ["formControlName", "entityTypeList"],
            ["chipList", ""],
            [3, "selectable", "removable", "removed", 4, "ngFor", "ngForOf"],
            [
              "matInput",
              "",
              "type",
              "text",
              "formControlName",
              "entityType",
              "matAutocompleteOrigin",
              "",
              2,
              "max-width",
              "200px",
              3,
              "placeholder",
              "matAutocompleteConnectedTo",
              "matAutocomplete",
              "matChipInputFor",
              "focusin",
            ],
            ["entityTypeInput", "", "origin", "matAutocompleteOrigin"],
            [1, "tb-autocomplete", 3, "displayWith"],
            ["entityTypeAutocomplete", "matAutocomplete"],
            [3, "value", 4, "ngFor", "ngForOf"],
            [3, "value", 4, "ngIf"],
            [4, "ngIf"],
            [3, "selectable", "removable", "removed"],
            ["matChipRemove", "", 4, "ngIf"],
            ["matChipRemove", ""],
            [3, "value"],
            [3, "innerHTML"],
          ],
          template: function (B, j) {
            if (
              (1 & B &&
                (e.ɵɵelementStart(0, "mat-form-field", 0),
                e.ɵɵelementStart(1, "mat-chip-list", 1, 2),
                e.ɵɵtemplate(3, S, 3, 4, "mat-chip", 3),
                e.ɵɵelementStart(4, "input", 4, 5),
                e.ɵɵlistener("focusin", function () {
                  return j.onFocus();
                }),
                e.ɵɵelementEnd(),
                e.ɵɵelementEnd(),
                e.ɵɵelementStart(7, "mat-autocomplete", 6, 7),
                e.ɵɵtemplate(9, u, 3, 5, "mat-option", 8),
                e.ɵɵpipe(10, "async"),
                e.ɵɵtemplate(11, M, 4, 6, "mat-option", 9),
                e.ɵɵpipe(12, "async"),
                e.ɵɵelementEnd(),
                e.ɵɵtemplate(13, L, 3, 3, "mat-error", 10),
                e.ɵɵelementEnd()),
              2 & B)
            ) {
              const F = e.ɵɵreference(2),
                V = e.ɵɵreference(6),
                P = e.ɵɵreference(8);
              let A;
              e.ɵɵproperty("formGroup", j.entityTypeListFormGroup),
                e.ɵɵadvance(3),
                e.ɵɵproperty("ngForOf", j.entityTypeList),
                e.ɵɵadvance(1),
                e.ɵɵpropertyInterpolate(
                  "placeholder",
                  j.disabled
                    ? ""
                    : j.entityTypeList && j.entityTypeList.length
                    ? j.secondaryPlaceholder
                    : j.placeholder
                ),
                e.ɵɵproperty("matAutocompleteConnectedTo", V)(
                  "matAutocomplete",
                  P
                )("matChipInputFor", F),
                e.ɵɵadvance(3),
                e.ɵɵproperty("displayWith", j.displayEntityTypeFn),
                e.ɵɵadvance(2),
                e.ɵɵproperty(
                  "ngForOf",
                  e.ɵɵpipeBind1(10, 10, j.filteredEntityTypeList)
                ),
                e.ɵɵadvance(2),
                e.ɵɵproperty(
                  "ngIf",
                  !(
                    null !=
                      (A = e.ɵɵpipeBind1(12, 12, j.filteredEntityTypeList)) &&
                    A.length
                  )
                ),
                e.ɵɵadvance(2),
                e.ɵɵproperty(
                  "ngIf",
                  j.entityTypeListFormGroup
                    .get("entityTypeList")
                    .hasError("required")
                );
            }
          },
          directives: [
            h.MatFormField,
            n.NgControlStatusGroup,
            n.FormGroupDirective,
            p.MatChipList,
            n.NgControlStatus,
            n.FormControlName,
            _.NgForOf,
            E.MatInput,
            n.DefaultValueAccessor,
            c.MatAutocompleteTrigger,
            p.MatChipInput,
            c.MatAutocompleteOrigin,
            c.MatAutocomplete,
            _.NgIf,
            p.MatChip,
            v.MatIcon,
            p.MatChipRemove,
            I.MatOption,
            h.MatError,
          ],
          pipes: [_.AsyncPipe, l.HighlightPipe, r.TranslatePipe],
          encapsulation: 2,
        }));
    },
    58512: (ee, R, t) => {
      "use strict";
      t.r(R), t.d(R, { EntityTypeSelectComponent: () => p });
      var e = t(37716),
        n = t(3679),
        a = t(52042),
        C = t(23914),
        s = t(39490),
        d = t(86710),
        o = t(29790),
        i = t(98295),
        g = t(38583),
        D = t(67441),
        y = t(72458);
      function m(_, E) {
        1 & _ &&
          (e.ɵɵelementStart(0, "mat-label"),
          e.ɵɵtext(1),
          e.ɵɵpipe(2, "translate"),
          e.ɵɵelementEnd()),
          2 & _ &&
            (e.ɵɵadvance(1),
            e.ɵɵtextInterpolate(e.ɵɵpipeBind1(2, 1, "entity.type")));
      }
      function r(_, E) {
        if (
          (1 & _ &&
            (e.ɵɵelementStart(0, "mat-option", 4),
            e.ɵɵtext(1),
            e.ɵɵelementEnd()),
          2 & _)
        ) {
          const c = E.$implicit,
            v = e.ɵɵnextContext();
          e.ɵɵproperty("value", c),
            e.ɵɵadvance(1),
            e.ɵɵtextInterpolate1(" ", v.displayEntityTypeFn(c), " ");
        }
      }
      function h(_, E) {
        1 & _ &&
          (e.ɵɵelementStart(0, "mat-error"),
          e.ɵɵtext(1),
          e.ɵɵpipe(2, "translate"),
          e.ɵɵelementEnd()),
          2 & _ &&
            (e.ɵɵadvance(1),
            e.ɵɵtextInterpolate1(
              " ",
              e.ɵɵpipeBind1(2, 1, "entity.type-required"),
              " "
            ));
      }
      class p {
        constructor(E, c, v, I) {
          (this.store = E),
            (this.entityService = c),
            (this.translate = v),
            (this.fb = I),
            (this.filterAllowedEntityTypes = !0),
            (this.propagateChange = (l) => {}),
            (this.entityTypeFormGroup = this.fb.group({ entityType: [null] }));
        }
        get showLabel() {
          return this.showLabelValue;
        }
        set showLabel(E) {
          this.showLabelValue = (0, s.coerceBooleanProperty)(E);
        }
        get required() {
          return this.requiredValue;
        }
        set required(E) {
          this.requiredValue = (0, s.coerceBooleanProperty)(E);
        }
        registerOnChange(E) {
          this.propagateChange = E;
        }
        registerOnTouched(E) {}
        ngOnInit() {
          (this.entityTypes = this.filterAllowedEntityTypes
            ? this.entityService.prepareAllowedEntityTypesList(
                this.allowedEntityTypes,
                this.useAliasEntityTypes
              )
            : this.allowedEntityTypes),
            this.entityTypeFormGroup
              .get("entityType")
              .valueChanges.subscribe((E) => {
                let c;
                (c = E && "" !== E ? E : null), this.updateView(c);
              });
        }
        ngOnChanges(E) {
          for (const c of Object.keys(E)) {
            const v = E[c];
            if (
              !v.firstChange &&
              v.currentValue !== v.previousValue &&
              "allowedEntityTypes" === c
            ) {
              this.entityTypes = this.filterAllowedEntityTypes
                ? this.entityService.prepareAllowedEntityTypesList(
                    this.allowedEntityTypes,
                    this.useAliasEntityTypes
                  )
                : this.allowedEntityTypes;
              const I = this.entityTypeFormGroup.get("entityType").value;
              I &&
                !this.entityTypes.includes(I) &&
                this.entityTypeFormGroup
                  .get("entityType")
                  .patchValue(null, { emitEvent: !0 });
            }
          }
        }
        ngAfterViewInit() {}
        setDisabledState(E) {
          (this.disabled = E),
            this.disabled
              ? this.entityTypeFormGroup.disable()
              : this.entityTypeFormGroup.enable();
        }
        writeValue(E) {
          null != E
            ? ((this.modelValue = E),
              this.entityTypeFormGroup
                .get("entityType")
                .patchValue(E, { emitEvent: !0 }))
            : ((this.modelValue = null),
              this.entityTypeFormGroup
                .get("entityType")
                .patchValue(null, { emitEvent: !0 }));
        }
        updateView(E) {
          this.modelValue !== E &&
            ((this.modelValue = E), this.propagateChange(this.modelValue));
        }
        displayEntityTypeFn(E) {
          return E ? this.translate.instant(a.Jr.get(E).type) : "";
        }
      }
      (p.ɵfac = function (E) {
        return new (E || p)(
          e.ɵɵdirectiveInject(d.Store),
          e.ɵɵdirectiveInject(C.c),
          e.ɵɵdirectiveInject(o.TranslateService),
          e.ɵɵdirectiveInject(n.FormBuilder)
        );
      }),
        (p.ɵcmp = e.ɵɵdefineComponent({
          type: p,
          selectors: [["tb-entity-type-select"]],
          inputs: {
            allowedEntityTypes: "allowedEntityTypes",
            useAliasEntityTypes: "useAliasEntityTypes",
            filterAllowedEntityTypes: "filterAllowedEntityTypes",
            showLabel: "showLabel",
            required: "required",
            disabled: "disabled",
          },
          features: [
            e.ɵɵProvidersFeature([
              {
                provide: n.NG_VALUE_ACCESSOR,
                useExisting: (0, e.forwardRef)(() => p),
                multi: !0,
              },
            ]),
            e.ɵɵNgOnChangesFeature,
          ],
          decls: 5,
          vars: 5,
          consts: [
            [3, "formGroup"],
            [4, "ngIf"],
            [
              "matInput",
              "",
              "formControlName",
              "entityType",
              1,
              "tb-entity-type-select",
              3,
              "required",
            ],
            [3, "value", 4, "ngFor", "ngForOf"],
            [3, "value"],
          ],
          template: function (E, c) {
            1 & E &&
              (e.ɵɵelementStart(0, "mat-form-field", 0),
              e.ɵɵtemplate(1, m, 3, 3, "mat-label", 1),
              e.ɵɵelementStart(2, "mat-select", 2),
              e.ɵɵtemplate(3, r, 2, 2, "mat-option", 3),
              e.ɵɵelementEnd(),
              e.ɵɵtemplate(4, h, 3, 3, "mat-error", 1),
              e.ɵɵelementEnd()),
              2 & E &&
                (e.ɵɵproperty("formGroup", c.entityTypeFormGroup),
                e.ɵɵadvance(1),
                e.ɵɵproperty("ngIf", c.showLabel),
                e.ɵɵadvance(1),
                e.ɵɵproperty("required", c.required),
                e.ɵɵadvance(1),
                e.ɵɵproperty("ngForOf", c.entityTypes),
                e.ɵɵadvance(1),
                e.ɵɵproperty(
                  "ngIf",
                  c.entityTypeFormGroup.get("entityType").hasError("required")
                ));
          },
          directives: [
            i.MatFormField,
            n.NgControlStatusGroup,
            n.FormGroupDirective,
            g.NgIf,
            D.MatSelect,
            n.NgControlStatus,
            n.FormControlName,
            n.RequiredValidator,
            g.NgForOf,
            i.MatLabel,
            y.MatOption,
            i.MatError,
          ],
          pipes: [o.TranslatePipe],
          styles: [
            '@charset "UTF-8";[_nghost-%COMP%]   .mat-form-field[_ngcontent-%COMP%]{width:100%}[_nghost-%COMP%]     .mat-form-field-infix{width:100%}[_nghost-%COMP%]     .mat-select-value{max-width:200px;min-width:100px}',
          ],
        }));
    },
    11585: (ee, R, t) => {
      "use strict";
      t.r(R),
        t.d(R, {
          FabTriggerDirective: () => g,
          FabActionsDirective: () => D,
          FabToolbarComponent: () => y,
        });
      var e = t(37716),
        n = t(11877),
        a = t(72458),
        C = t(30290),
        s = t(5609);
      const i = (0, a.mixinColor)(
        class {
          constructor(r) {
            this._elementRef = r;
          }
        }
      );
      class g {
        constructor(r) {
          this.el = r;
        }
      }
      (g.ɵfac = function (r) {
        return new (r || g)(e.ɵɵdirectiveInject(e.ElementRef));
      }),
        (g.ɵdir = e.ɵɵdefineDirective({
          type: g,
          selectors: [["mat-fab-trigger"]],
        }));
      class D {
        constructor(r) {
          this.el = r;
        }
        ngOnInit() {
          s(this.el.nativeElement)
            .children()
            .wrap('<div class="mat-fab-action-item">');
        }
      }
      (D.ɵfac = function (r) {
        return new (r || D)(e.ɵɵdirectiveInject(e.ElementRef));
      }),
        (D.ɵdir = e.ɵɵdefineDirective({
          type: D,
          selectors: [["mat-fab-actions"]],
        }));
      class y extends i {
        constructor(r, h) {
          super(r), (this.el = r), (this.window = h);
        }
        ngOnInit() {
          const r = s(this.el.nativeElement);
          r.addClass("mat-fab-toolbar"),
            r
              .find("mat-fab-trigger")
              .find("button")
              .prepend('<div class="mat-fab-toolbar-background"></div>'),
            r.addClass(`mat-${this.direction}`),
            (this.fabToolbarResize$ = new C.do(() => {
              this.onFabToolbarResize();
            })),
            this.fabToolbarResize$.observe(this.el.nativeElement);
        }
        ngOnDestroy() {
          this.fabToolbarResize$.disconnect();
        }
        ngAfterViewInit() {
          this.triggerOpenClose(!0);
        }
        ngOnChanges(r) {
          for (const h of Object.keys(r)) {
            const p = r[h];
            !p.firstChange &&
              p.currentValue !== p.previousValue &&
              "isOpen" === h &&
              this.triggerOpenClose();
          }
        }
        onFabToolbarResize() {
          this.isOpen && this.triggerOpenClose(!0);
        }
        triggerOpenClose(r) {
          const h = this.el.nativeElement,
            p = s(this.el.nativeElement);
          r ? p.removeClass("mat-animation") : p.addClass("mat-animation");
          const _ = h.querySelector(".mat-fab-toolbar-background"),
            E = h.querySelector("mat-fab-trigger button"),
            c = h.querySelector("mat-toolbar"),
            v = h.querySelector("mat-fab-trigger button mat-icon"),
            I = p.find("mat-fab-actions").children();
          if (E && _) {
            const l = h.offsetWidth,
              T = (l / E.offsetWidth) * 2;
            (_.style.borderRadius = l + "px"),
              this.isOpen
                ? (p.addClass("mat-is-open"),
                  (c.style.pointerEvents = "inherit"),
                  (_.style.width = E.offsetWidth + "px"),
                  (_.style.height = E.offsetHeight + "px"),
                  (_.style.transform = "scale(" + T + ")"),
                  (_.style.transitionDelay = "0ms"),
                  v && (v.style.transitionDelay = r ? "0ms" : ".3s"),
                  I.each((O, w) => {
                    w.style.transitionDelay = r
                      ? "0ms"
                      : 25 * (I.length - O) + "ms";
                  }))
                : (p.removeClass("mat-is-open"),
                  (c.style.pointerEvents = "none"),
                  (_.style.transform = "scale(1)"),
                  (_.style.top = "0"),
                  p.hasClass("mat-right") &&
                    ((_.style.left = "0"), (_.style.right = null)),
                  p.hasClass("mat-left") &&
                    ((_.style.right = "0"), (_.style.left = null)),
                  (_.style.transitionDelay = r ? "0ms" : "200ms"),
                  I.each((O, w) => {
                    w.style.transitionDelay = (r ? 0 : 200) + 25 * O + "ms";
                  }));
          }
        }
      }
      (y.ɵfac = function (r) {
        return new (r || y)(
          e.ɵɵdirectiveInject(e.ElementRef),
          e.ɵɵdirectiveInject(n.m9)
        );
      }),
        (y.ɵcmp = e.ɵɵdefineComponent({
          type: y,
          selectors: [["mat-fab-toolbar"]],
          inputs: { color: "color", isOpen: "isOpen", direction: "direction" },
          features: [e.ɵɵInheritDefinitionFeature, e.ɵɵNgOnChangesFeature],
          ngContentSelectors: ["*"],
          decls: 3,
          vars: 0,
          consts: [
            [1, "mat-fab-toolbar-wrapper"],
            [1, "mat-fab-toolbar-content"],
          ],
          template: function (r, h) {
            1 & r &&
              (e.ɵɵprojectionDef(),
              e.ɵɵelementStart(0, "div", 0),
              e.ɵɵelementStart(1, "div", 1),
              e.ɵɵprojection(2),
              e.ɵɵelementEnd(),
              e.ɵɵelementEnd());
          },
          styles: [
            '@charset "UTF-8";mat-fab-toolbar{display:block}mat-fab-toolbar.mat-fab-bottom-right{top:auto;right:20px;bottom:20px;left:auto;position:absolute}mat-fab-toolbar.mat-fab-bottom-left{top:auto;right:auto;bottom:20px;left:20px;position:absolute}mat-fab-toolbar.mat-fab-top-right{top:20px;right:20px;bottom:auto;left:auto;position:absolute}mat-fab-toolbar.mat-fab-top-left{top:20px;right:auto;bottom:auto;left:20px;position:absolute}mat-fab-toolbar .mat-fab-toolbar-wrapper{display:block;position:relative;overflow:hidden;height:68px}mat-fab-toolbar mat-fab-trigger{position:absolute;z-index:20}mat-fab-toolbar mat-fab-trigger button{overflow:visible!important;opacity:.5}mat-fab-toolbar mat-fab-trigger .mat-fab-toolbar-background{display:block;position:absolute;z-index:21;opacity:1}mat-fab-toolbar mat-fab-trigger mat-icon{position:relative;z-index:22;opacity:1}mat-fab-toolbar.mat-left mat-fab-trigger{right:0}[dir=rtl] mat-fab-toolbar.mat-left mat-fab-trigger{right:auto;left:0}mat-fab-toolbar.mat-left .mat-toolbar-tools{flex-direction:row-reverse}mat-fab-toolbar.mat-left .mat-toolbar-tools>.mat-button:first-child{margin-right:.6rem}[dir=rtl] mat-fab-toolbar.mat-left .mat-toolbar-tools>.mat-button:first-child{margin-right:auto;margin-left:.6rem}mat-fab-toolbar.mat-left .mat-toolbar-tools>.mat-button:first-child{margin-left:-.8rem}[dir=rtl] mat-fab-toolbar.mat-left .mat-toolbar-tools>.mat-button:first-child{margin-left:auto;margin-right:-.8rem}mat-fab-toolbar.mat-left .mat-toolbar-tools>.mat-button:last-child{margin-right:8px}[dir=rtl] mat-fab-toolbar.mat-left .mat-toolbar-tools>.mat-button:last-child{margin-right:auto;margin-left:8px}mat-fab-toolbar.mat-right mat-fab-trigger{left:0}[dir=rtl] mat-fab-toolbar.mat-right mat-fab-trigger{left:auto;right:0}mat-fab-toolbar.mat-right .mat-toolbar-tools{flex-direction:row}mat-fab-toolbar mat-toolbar{padding:0!important;background-color:transparent!important;pointer-events:none;position:relative;z-index:23}mat-fab-toolbar mat-toolbar .mat-toolbar-tools{padding:0 20px!important;margin-top:3px}mat-fab-toolbar mat-toolbar .mat-fab-action-item{opacity:0;transform:scale(0)}mat-fab-toolbar.mat-is-open mat-fab-trigger>button{box-shadow:none;opacity:1}mat-fab-toolbar.mat-is-open mat-fab-trigger>button mat-icon{opacity:0}mat-fab-toolbar.mat-is-open .mat-fab-action-item{opacity:1;transform:scale(1)}mat-fab-toolbar.mat-animation mat-fab-trigger button{transition:opacity .3s cubic-bezier(.55,0,.55,.2) .2s}mat-fab-toolbar.mat-animation mat-fab-trigger .mat-fab-toolbar-background{transition:all .3s cubic-bezier(.55,0,.55,.2)}mat-fab-toolbar.mat-animation mat-fab-trigger mat-icon{transition:all .2s ease-in}mat-fab-toolbar.mat-animation mat-toolbar .mat-fab-action-item{transition:all .3s cubic-bezier(.55,0,.55,.2);transition-duration:.15s}mat-fab-toolbar.mat-animation.mat-is-open mat-fab-trigger>button{transition:opacity .3s cubic-bezier(.55,0,.55,.2)}\n',
          ],
          encapsulation: 2,
        }));
    },
    11099: (ee, R, t) => {
      "use strict";
      t.r(R), t.d(R, { FileInputComponent: () => O });
      var e = t(37716),
        n = t(75362),
        a = t(3679),
        C = t(39490),
        s = t(1361),
        d = t(86710),
        o = t(29790),
        i = t(38583),
        g = t(88030),
        D = t(17414),
        y = t(51095),
        m = t(11436),
        r = t(76627),
        h = t(18500);
      const p = ["flow"],
        _ = ["flowInput"];
      function E(w, b) {
        if (
          (1 & w && (e.ɵɵelement(0, "tb-error", 16), e.ɵɵpipe(1, "translate")),
          2 & w)
        ) {
          const S = e.ɵɵnextContext();
          e.ɵɵpropertyInterpolate("error", e.ɵɵpipeBind1(1, 1, S.noFileText));
        }
      }
      function c(w, b) {
        if (
          (1 & w &&
            (e.ɵɵelementStart(0, "div", 17), e.ɵɵtext(1), e.ɵɵelementEnd()),
          2 & w)
        ) {
          const S = e.ɵɵnextContext();
          e.ɵɵadvance(1), e.ɵɵtextInterpolate(S.noFileText);
        }
      }
      function v(w, b) {
        if (
          (1 & w && (e.ɵɵelementStart(0, "div"), e.ɵɵtext(1), e.ɵɵelementEnd()),
          2 & w)
        ) {
          const S = e.ɵɵnextContext();
          e.ɵɵadvance(1), e.ɵɵtextInterpolate(S.fileName);
        }
      }
      const I = function (w) {
          return { "tb-required": w };
        },
        l = function () {
          return { allowDuplicateUploads: !0 };
        },
        T = function (w) {
          return { accept: w };
        };
      class O extends n.I {
        constructor(b, S, u) {
          super(b),
            (this.store = b),
            (this.utils = S),
            (this.translate = u),
            (this.accept = "*/*"),
            (this.noFileText = "import.no-file"),
            (this.inputId = this.utils.guid()),
            (this.readAsBinary = !1),
            (this.workFromFileObj = !1),
            (this.multipleFileValue = !1),
            (this.fileNameChanged = new e.EventEmitter()),
            (this.propagateChange = null);
        }
        get required() {
          return this.requiredValue;
        }
        set required(b) {
          const S = (0, C.coerceBooleanProperty)(b);
          this.requiredValue !== S && (this.requiredValue = S);
        }
        get requiredAsError() {
          return this.requiredAsErrorValue;
        }
        set requiredAsError(b) {
          const S = (0, C.coerceBooleanProperty)(b);
          this.requiredAsErrorValue !== S && (this.requiredAsErrorValue = S);
        }
        set multipleFile(b) {
          var S;
          (this.multipleFileValue = b),
            (null === (S = this.flow) || void 0 === S ? void 0 : S.flowJs) &&
              this.updateMultipleFileMode(this.multipleFile);
        }
        get multipleFile() {
          return this.multipleFileValue;
        }
        ngAfterViewInit() {
          (this.autoUploadSubscription = this.flow.events$.subscribe((b) => {
            if ("filesAdded" === b.type) {
              const S = [];
              b.event[0].forEach((u) => {
                this.filterFile(u) && S.push(this.readerAsFile(u));
              }),
                S.length &&
                  Promise.all(S).then((u) => {
                    1 ===
                    (u = u.filter(
                      (f) => null != f.fileContent || null != f.files
                    )).length
                      ? ((this.fileContent = u[0].fileContent),
                        (this.fileName = u[0].fileName),
                        (this.files = u[0].files),
                        this.updateModel())
                      : u.length > 1 &&
                        ((this.fileContent = u.map((f) => f.fileContent)),
                        (this.fileName = u.map((f) => f.fileName)),
                        (this.files = u.map((f) => f.files)),
                        this.updateModel());
                  });
            }
          })),
            this.multipleFile || this.updateMultipleFileMode(this.multipleFile);
        }
        readerAsFile(b) {
          return new Promise((S) => {
            const u = new FileReader();
            (u.onload = () => {
              let f = null,
                M = null,
                L = null;
              u.readyState === u.DONE &&
                (this.workFromFileObj
                  ? (b.name || b.file) && ((L = b.file), (f = b.name))
                  : ((M = u.result),
                    M &&
                      M.length > 0 &&
                      (this.contentConvertFunction &&
                        (M = this.contentConvertFunction(M)),
                      (f = M ? b.name : null)))),
                S({ fileContent: M, fileName: f, files: L });
            }),
              (u.onerror = () => {
                S({ fileContent: null, fileName: null, files: null });
              }),
              this.readAsBinary
                ? u.readAsBinaryString(b.file)
                : u.readAsText(b.file);
          });
        }
        filterFile(b) {
          return (
            !this.allowedExtensions ||
            this.allowedExtensions.split(",").indexOf(b.getExtension()) > -1
          );
        }
        ngOnDestroy() {
          this.autoUploadSubscription &&
            this.autoUploadSubscription.unsubscribe();
        }
        registerOnChange(b) {
          this.propagateChange = b;
        }
        registerOnTouched(b) {}
        setDisabledState(b) {
          this.disabled = b;
        }
        writeValue(b) {
          let S = null;
          this.workFromFileObj &&
            b instanceof File &&
            (S = Array.isArray(b) ? b.map((u) => u.name) : b.name),
            (this.fileName = this.existingFileName || S);
        }
        ngOnChanges(b) {
          for (const S of Object.keys(b)) {
            const u = b[S];
            u.currentValue !== u.previousValue &&
              "existingFileName" === S &&
              (this.fileName = this.existingFileName || null);
          }
        }
        updateModel() {
          this.workFromFileObj
            ? this.propagateChange(this.files)
            : (this.propagateChange(this.fileContent),
              this.fileNameChanged.emit(this.fileName));
        }
        clearFile() {
          (this.fileName = null),
            (this.fileContent = null),
            (this.files = null),
            this.updateModel();
        }
        updateMultipleFileMode(b) {
          (this.flow.flowJs.opts.singleFile = !b),
            b || this.flowInput.nativeElement.removeAttribute("multiple");
        }
      }
      (O.ɵfac = function (b) {
        return new (b || O)(
          e.ɵɵdirectiveInject(d.Store),
          e.ɵɵdirectiveInject(s.F),
          e.ɵɵdirectiveInject(o.TranslateService)
        );
      }),
        (O.ɵcmp = e.ɵɵdefineComponent({
          type: O,
          selectors: [["tb-file-input"]],
          viewQuery: function (b, S) {
            if ((1 & b && (e.ɵɵviewQuery(p, 7), e.ɵɵviewQuery(_, 7)), 2 & b)) {
              let u;
              e.ɵɵqueryRefresh((u = e.ɵɵloadQuery())) && (S.flow = u.first),
                e.ɵɵqueryRefresh((u = e.ɵɵloadQuery())) &&
                  (S.flowInput = u.first);
            }
          },
          inputs: {
            label: "label",
            accept: "accept",
            noFileText: "noFileText",
            inputId: "inputId",
            allowedExtensions: "allowedExtensions",
            dropLabel: "dropLabel",
            contentConvertFunction: "contentConvertFunction",
            required: "required",
            requiredAsError: "requiredAsError",
            disabled: "disabled",
            existingFileName: "existingFileName",
            readAsBinary: "readAsBinary",
            workFromFileObj: "workFromFileObj",
            multipleFile: "multipleFile",
          },
          outputs: { fileNameChanged: "fileNameChanged" },
          features: [
            e.ɵɵProvidersFeature([
              {
                provide: a.NG_VALUE_ACCESSOR,
                useExisting: (0, e.forwardRef)(() => O),
                multi: !0,
              },
            ]),
            e.ɵɵInheritDefinitionFeature,
            e.ɵɵNgOnChangesFeature,
          ],
          decls: 27,
          vars: 23,
          consts: [
            [1, "tb-container"],
            [1, "tb-title", 3, "ngClass"],
            [3, "flowConfig"],
            ["flow", "flow"],
            [1, "tb-file-select-container"],
            [1, "tb-file-clear-container"],
            [
              "mat-button",
              "",
              "mat-icon-button",
              "",
              "color",
              "primary",
              "type",
              "button",
              "matTooltipPosition",
              "above",
              1,
              "tb-file-clear-btn",
              3,
              "matTooltip",
              "click",
            ],
            ["flowDrop", "", 1, "drop-area", "tb-flow-drop", 3, "flow"],
            [1, "upload-label"],
            [
              "type",
              "button",
              "mat-button",
              "",
              "color",
              "primary",
              1,
              "browse-file",
            ],
            [3, "for"],
            [
              "flowButton",
              "",
              "type",
              "file",
              1,
              "file-input",
              3,
              "flow",
              "flowAttributes",
              "id",
            ],
            ["flowInput", ""],
            [3, "error", 4, "ngIf"],
            ["translate", "", 4, "ngIf"],
            [4, "ngIf"],
            [3, "error"],
            ["translate", ""],
          ],
          template: function (b, S) {
            if (
              (1 & b &&
                (e.ɵɵelementStart(0, "div", 0),
                e.ɵɵelementStart(1, "label", 1),
                e.ɵɵtext(2),
                e.ɵɵelementEnd(),
                e.ɵɵelementContainerStart(3, 2, 3),
                e.ɵɵelementStart(5, "div", 4),
                e.ɵɵelementStart(6, "div", 5),
                e.ɵɵelementStart(7, "button", 6),
                e.ɵɵlistener("click", function () {
                  return S.clearFile();
                }),
                e.ɵɵpipe(8, "translate"),
                e.ɵɵelementStart(9, "mat-icon"),
                e.ɵɵtext(10, "close"),
                e.ɵɵelementEnd(),
                e.ɵɵelementEnd(),
                e.ɵɵelementEnd(),
                e.ɵɵelementStart(11, "div", 7),
                e.ɵɵelementStart(12, "div", 8),
                e.ɵɵelementStart(13, "mat-icon"),
                e.ɵɵtext(14, "cloud_upload"),
                e.ɵɵelementEnd(),
                e.ɵɵelementStart(15, "span"),
                e.ɵɵtext(16),
                e.ɵɵelementEnd(),
                e.ɵɵelementStart(17, "button", 9),
                e.ɵɵelementStart(18, "label", 10),
                e.ɵɵtext(19),
                e.ɵɵpipe(20, "translate"),
                e.ɵɵelementEnd(),
                e.ɵɵelementEnd(),
                e.ɵɵelement(21, "input", 11, 12),
                e.ɵɵelementEnd(),
                e.ɵɵelementEnd(),
                e.ɵɵelementEnd(),
                e.ɵɵelementContainerEnd(),
                e.ɵɵelementEnd(),
                e.ɵɵelementStart(23, "div"),
                e.ɵɵtemplate(24, E, 2, 3, "tb-error", 13),
                e.ɵɵtemplate(25, c, 2, 1, "div", 14),
                e.ɵɵtemplate(26, v, 2, 1, "div", 15),
                e.ɵɵelementEnd()),
              2 & b)
            ) {
              const u = e.ɵɵreference(4);
              e.ɵɵadvance(1),
                e.ɵɵproperty(
                  "ngClass",
                  e.ɵɵpureFunction1(18, I, !S.disabled && S.required)
                ),
                e.ɵɵadvance(1),
                e.ɵɵtextInterpolate(S.label),
                e.ɵɵadvance(1),
                e.ɵɵproperty("flowConfig", e.ɵɵpureFunction0(20, l)),
                e.ɵɵadvance(4),
                e.ɵɵpropertyInterpolate(
                  "matTooltip",
                  e.ɵɵpipeBind1(8, 14, "action.remove")
                ),
                e.ɵɵadvance(4),
                e.ɵɵproperty("flow", u.flowJs),
                e.ɵɵadvance(5),
                e.ɵɵtextInterpolate(S.dropLabel),
                e.ɵɵadvance(2),
                e.ɵɵpropertyInterpolate("for", S.inputId),
                e.ɵɵadvance(1),
                e.ɵɵtextInterpolate(
                  e.ɵɵpipeBind1(
                    20,
                    16,
                    S.multipleFile
                      ? "file-input.browse-files"
                      : "file-input.browse-file"
                  )
                ),
                e.ɵɵadvance(2),
                e.ɵɵpropertyInterpolate("id", S.inputId),
                e.ɵɵproperty("flow", u.flowJs)(
                  "flowAttributes",
                  e.ɵɵpureFunction1(21, T, S.accept)
                ),
                e.ɵɵadvance(3),
                e.ɵɵproperty(
                  "ngIf",
                  !S.fileName && S.required && S.requiredAsError
                ),
                e.ɵɵadvance(1),
                e.ɵɵproperty("ngIf", !S.fileName && !S.requiredAsError),
                e.ɵɵadvance(1),
                e.ɵɵproperty("ngIf", S.fileName);
            }
          },
          directives: [
            i.NgClass,
            g.DefaultClassDirective,
            D.be,
            y.MatButton,
            m.MatTooltip,
            r.MatIcon,
            D.W,
            D.Hq,
            i.NgIf,
            h.TbErrorComponent,
            o.TranslateDirective,
          ],
          pipes: [o.TranslatePipe],
          styles: [
            '@charset "UTF-8";[_nghost-%COMP%]   .tb-container[_ngcontent-%COMP%]{margin-top:0}[_nghost-%COMP%]   .tb-container[_ngcontent-%COMP%]   label.tb-title[_ngcontent-%COMP%]{display:block;padding-bottom:8px}[_nghost-%COMP%]   .tb-file-select-container[_ngcontent-%COMP%]{position:relative;width:100%;height:100px}[_nghost-%COMP%]   .tb-file-preview[_ngcontent-%COMP%]{width:auto;max-width:100px;height:auto;max-height:100px}[_nghost-%COMP%]   .tb-file-clear-container[_ngcontent-%COMP%]{position:relative;float:right;width:48px;height:100px}[_nghost-%COMP%]   .tb-file-clear-btn[_ngcontent-%COMP%]{position:absolute!important;top:50%;transform:translateY(-50%)!important}[_nghost-%COMP%]   .file-input[_ngcontent-%COMP%]{display:none}[_nghost-%COMP%]   .tb-flow-drop[_ngcontent-%COMP%]{position:relative;height:100px;overflow:hidden;border:2px dashed rgba(0,0,0,.2);border-radius:4px;box-sizing:border-box}[_nghost-%COMP%]   .tb-flow-drop[_ngcontent-%COMP%]   .upload-label[_ngcontent-%COMP%]{width:100%;height:100%;padding:0 16px;display:flex;flex-direction:row;justify-content:center;align-items:center;font-size:16px;color:#0000008a;text-align:center}[_nghost-%COMP%]   .tb-flow-drop[_ngcontent-%COMP%]   .upload-label[_ngcontent-%COMP%]   .mat-icon[_ngcontent-%COMP%]{margin-right:17px}[_nghost-%COMP%]     button.browse-file{padding:0;font-size:16px}[_nghost-%COMP%]     button.browse-file span.mat-button-wrapper{display:block}[_nghost-%COMP%]     button.browse-file span.mat-button-wrapper label{display:block;cursor:pointer;padding:0 16px}',
          ],
        }));
    },
    45165: (ee, R, t) => {
      "use strict";
      t.r(R), t.d(R, { FooterFabButtonsComponent: () => E });
      var e = t(37716),
        n = t(75362),
        a = t(17238);
      const C = [
        (0, a.trigger)("fabToggler", [
          (0, a.state)("inactive", (0, a.style)({ transform: "rotate(0deg)" })),
          (0, a.state)("active", (0, a.style)({ transform: "rotate(225deg)" })),
          (0, a.transition)(
            "* <=> *",
            (0, a.animate)("200ms cubic-bezier(0.4, 0.0, 0.2, 1)")
          ),
        ]),
        (0, a.trigger)("speedDialStagger", [
          (0, a.transition)("* => *", [
            (0, a.query)(":enter", (0, a.style)({ opacity: 0 }), {
              optional: !0,
            }),
            (0, a.query)(
              ":enter",
              (0, a.stagger)("40ms", [
                (0, a.animate)(
                  "200ms cubic-bezier(0.4, 0.0, 0.2, 1)",
                  (0, a.keyframes)([
                    (0, a.style)({ opacity: 0, transform: "translateY(10px)" }),
                    (0, a.style)({ opacity: 1, transform: "translateY(0)" }),
                  ])
                ),
              ]),
              { optional: !0 }
            ),
            (0, a.query)(
              ":leave",
              (0, a.animate)(
                "200ms cubic-bezier(0.4, 0.0, 0.2, 1)",
                (0, a.keyframes)([
                  (0, a.style)({ opacity: 1 }),
                  (0, a.style)({ opacity: 0 }),
                ])
              ),
              { optional: !0 }
            ),
          ]),
        ]),
      ];
      var s = t(39490),
        d = t(86710),
        o = t(35618),
        i = t(38583),
        g = t(88030),
        D = t(51095),
        y = t(11436),
        m = t(76627),
        r = t(29790);
      function h(c, v) {
        if (1 & c) {
          const I = e.ɵɵgetCurrentView();
          e.ɵɵelementStart(0, "button", 4),
            e.ɵɵlistener("click", function (T) {
              return e.ɵɵrestoreView(I).$implicit.onAction(T);
            }),
            e.ɵɵpipe(1, "translate"),
            e.ɵɵelementStart(2, "mat-icon"),
            e.ɵɵtext(3),
            e.ɵɵelementEnd(),
            e.ɵɵelementEnd();
        }
        if (2 & c) {
          const I = v.$implicit;
          e.ɵɵpropertyInterpolate("matTooltip", e.ɵɵpipeBind1(1, 2, I.name)),
            e.ɵɵadvance(3),
            e.ɵɵtextInterpolate(I.icon);
        }
      }
      const p = function (c) {
          return { "relative-buttons": c };
        },
        _ = function (c) {
          return { value: c };
        };
      class E extends n.I {
        constructor(v) {
          super(v),
            (this.store = v),
            (this.buttons = []),
            (this.fabTogglerState = "inactive"),
            (this.closeTimeout = null);
        }
        get relative() {
          return this.relativeValue;
        }
        set relative(v) {
          this.relativeValue = (0, s.coerceBooleanProperty)(v);
        }
        onFocusOut(v) {
          this.closeTimeout ||
            (this.closeTimeout = setTimeout(() => {
              this.hideItems();
            }, 100));
        }
        onFocusIn(v) {
          this.closeTimeout &&
            (clearTimeout(this.closeTimeout), (this.closeTimeout = null));
        }
        showItems() {
          (this.fabTogglerState = "active"),
            (this.buttons = this.footerFabButtons.buttons);
        }
        hideItems() {
          (this.fabTogglerState = "inactive"), (this.buttons = []);
        }
        onToggleFab() {
          this.buttons.length ? this.hideItems() : this.showItems();
        }
      }
      (E.ɵfac = function (v) {
        return new (v || E)(e.ɵɵdirectiveInject(d.Store));
      }),
        (E.ɵcmp = e.ɵɵdefineComponent({
          type: E,
          selectors: [["tb-footer-fab-buttons"]],
          hostBindings: function (v, I) {
            1 & v &&
              e.ɵɵlistener("focusout", function (T) {
                return I.onFocusOut(T);
              })("focusin", function (T) {
                return I.onFocusIn(T);
              });
          },
          inputs: {
            footerFabButtons: "footerFabButtons",
            relative: "relative",
          },
          features: [e.ɵɵInheritDefinitionFeature],
          decls: 9,
          vars: 15,
          consts: [
            [
              "fxLayout",
              "row",
              1,
              "layout-wrap",
              "tb-footer-fab-buttons",
              3,
              "ngClass",
            ],
            [1, "fab-container"],
            [
              "mat-fab",
              "",
              "color",
              "accent",
              "matTooltipPosition",
              "above",
              1,
              "fab-toggler",
              "tb-btn-footer",
              3,
              "disabled",
              "matTooltip",
              "click",
            ],
            [
              "mat-fab",
              "",
              "color",
              "accent",
              "matTooltipPosition",
              "above",
              3,
              "matTooltip",
              "click",
              4,
              "ngFor",
              "ngForOf",
            ],
            [
              "mat-fab",
              "",
              "color",
              "accent",
              "matTooltipPosition",
              "above",
              3,
              "matTooltip",
              "click",
            ],
          ],
          template: function (v, I) {
            1 & v &&
              (e.ɵɵelementStart(0, "section", 0),
              e.ɵɵelementStart(1, "div", 1),
              e.ɵɵelementStart(2, "button", 2),
              e.ɵɵlistener("click", function () {
                return I.onToggleFab();
              }),
              e.ɵɵpipe(3, "async"),
              e.ɵɵpipe(4, "translate"),
              e.ɵɵelementStart(5, "mat-icon"),
              e.ɵɵtext(6),
              e.ɵɵelementEnd(),
              e.ɵɵelementEnd(),
              e.ɵɵelementStart(7, "div"),
              e.ɵɵtemplate(8, h, 4, 4, "button", 3),
              e.ɵɵelementEnd(),
              e.ɵɵelementEnd(),
              e.ɵɵelementEnd()),
              2 & v &&
                (e.ɵɵproperty("ngClass", e.ɵɵpureFunction1(11, p, I.relative)),
                e.ɵɵadvance(2),
                e.ɵɵpropertyInterpolate(
                  "matTooltip",
                  e.ɵɵpipeBind1(4, 9, I.footerFabButtons.fabTogglerName)
                ),
                e.ɵɵproperty("disabled", e.ɵɵpipeBind1(3, 7, I.isLoading$)),
                e.ɵɵadvance(3),
                e.ɵɵproperty(
                  "@fabToggler",
                  e.ɵɵpureFunction1(13, _, I.fabTogglerState)
                ),
                e.ɵɵadvance(1),
                e.ɵɵtextInterpolate(I.footerFabButtons.fabTogglerIcon),
                e.ɵɵadvance(1),
                e.ɵɵproperty("@speedDialStagger", I.buttons.length),
                e.ɵɵadvance(1),
                e.ɵɵproperty("ngForOf", I.buttons));
          },
          directives: [
            o.DefaultLayoutDirective,
            i.NgClass,
            g.DefaultClassDirective,
            D.MatButton,
            y.MatTooltip,
            m.MatIcon,
            i.NgForOf,
          ],
          pipes: [i.AsyncPipe, r.TranslatePipe],
          styles: [
            '@charset "UTF-8";[_nghost-%COMP%]   section.tb-footer-fab-buttons[_ngcontent-%COMP%]:not(.relative-buttons){position:fixed;right:20px;bottom:20px;z-index:30;pointer-events:none}[_nghost-%COMP%]   section.tb-footer-fab-buttons[_ngcontent-%COMP%]   .fab-container[_ngcontent-%COMP%]{display:flex;flex-direction:column-reverse;align-items:center}[_nghost-%COMP%]   section.tb-footer-fab-buttons[_ngcontent-%COMP%]   .fab-container[_ngcontent-%COMP%] > div[_ngcontent-%COMP%]{display:flex;flex-direction:column-reverse;align-items:center}[_nghost-%COMP%]   section.tb-footer-fab-buttons[_ngcontent-%COMP%]   .fab-container[_ngcontent-%COMP%] > div[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]{margin-bottom:17px}[_nghost-%COMP%]   section.tb-footer-fab-buttons[_ngcontent-%COMP%]   .tb-btn-footer[_ngcontent-%COMP%]{position:relative!important;display:inline-block!important;animation:tbMoveFromBottomFade .3s ease both}[_nghost-%COMP%]   section.tb-footer-fab-buttons[_ngcontent-%COMP%]   .tb-btn-footer.fab-toggler[_ngcontent-%COMP%]{margin-top:0}[_nghost-%COMP%]   section.tb-footer-fab-buttons[_ngcontent-%COMP%]   .tb-btn-footer.tb-hide[_ngcontent-%COMP%]{animation:tbMoveToBottomFade .3s ease both}',
          ],
          data: { animation: C },
        }));
    },
    15076: (ee, R, t) => {
      "use strict";
      t.r(R), t.d(R, { FooterComponent: () => n });
      var e = t(37716);
      class n {
        constructor() {
          this.year = new Date().getFullYear();
        }
      }
      (n.ɵfac = function (C) {
        return new (C || n)();
      }),
        (n.ɵcmp = e.ɵɵdefineComponent({
          type: n,
          selectors: [["tb-footer"]],
          decls: 3,
          vars: 1,
          consts: [[1, "footer-text"]],
          template: function (C, s) {
            1 & C &&
              (e.ɵɵelementStart(0, "section", 0),
              e.ɵɵelementStart(1, "small"),
              e.ɵɵtext(2),
              e.ɵɵelementEnd(),
              e.ɵɵelementEnd()),
              2 & C &&
                (e.ɵɵadvance(2),
                e.ɵɵtextInterpolate1(
                  "Copyright \xa9 ",
                  s.year,
                  " The ThingsBoard Authors"
                ));
          },
          styles: [
            '@charset "UTF-8";.footer-text[_ngcontent-%COMP%]{position:absolute;width:100%;bottom:20px;margin:0;left:0;line-height:20px;text-align:center}.footer-text[_ngcontent-%COMP%]   small[_ngcontent-%COMP%]{font-size:14px;color:#98a6ad}',
          ],
        }));
    },
    46743: (ee, R, t) => {
      "use strict";
      t.r(R), t.d(R, { FullscreenDirective: () => d });
      var e = t(37716),
        n = t(58203),
        a = t(87636),
        C = t(98847),
        s = t(39075);
      class d {
        constructor(g, D, y, m, r) {
          (this.elementRef = g),
            (this.renderer = D),
            (this.sanitizer = y),
            (this.viewContainerRef = m),
            (this.overlay = r),
            (this.fullscreenValue = !1),
            (this.fullscreenChanged = new e.EventEmitter());
        }
        ngOnChanges(g) {
          let D = !1;
          for (const y of Object.keys(g)) {
            const m = g[y];
            !m.firstChange &&
              m.currentValue !== m.previousValue &&
              "fullscreen" === y &&
              (D = !0);
          }
          D &&
            (this.fullscreen ? this.enterFullscreen() : this.exitFullscreen());
        }
        ngOnDestroy() {
          this.fullscreen && this.exitFullscreen();
        }
        enterFullscreen() {
          const g = this.fullscreenElement || this.elementRef.nativeElement;
          (this.parentElement = g.parentElement),
            this.parentElement.removeChild(g),
            g.classList.add("tb-fullscreen");
          const D = this.overlay.position(),
            y = new n.OverlayConfig({
              hasBackdrop: !1,
              panelClass: "tb-fullscreen-parent",
            });
          if (
            ((y.minWidth = "100%"),
            (y.minHeight = "100%"),
            (y.positionStrategy = D.global()
              .top("0%")
              .left("0%")
              .right("0%")
              .bottom("0%")),
            (this.overlayRef = this.overlay.create(y)),
            this.overlayRef.attach(new o()),
            this.fullscreenBackgroundStyle)
          )
            for (const m of Object.keys(this.fullscreenBackgroundStyle))
              this.setStyle(
                this.overlayRef.overlayElement,
                m,
                this.fullscreenBackgroundStyle[m]
              );
          this.fullscreenBackgroundImage &&
            this.setStyle(
              this.overlayRef.overlayElement,
              "backgroundImage",
              this.fullscreenBackgroundImage
            ),
            this.overlayRef.overlayElement.appendChild(g),
            this.fullscreenChanged.emit(!0);
        }
        setStyle(g, D, y) {
          const [m, r] = D.split(".");
          let h = this.sanitizer.sanitize(e.SecurityContext.STYLE, y);
          null != h && (h = h.toString()),
            (h = null != h && r ? `${h}${r}` : h),
            null != h
              ? this.renderer.setStyle(this.overlayRef.overlayElement, m, h)
              : this.renderer.removeStyle(this.overlayRef.overlayElement, m);
        }
        exitFullscreen() {
          const g = this.fullscreenElement || this.elementRef.nativeElement;
          this.parentElement &&
            (this.overlayRef.overlayElement.removeChild(g),
            this.parentElement.appendChild(g),
            (this.parentElement = null)),
            g.classList.remove("tb-fullscreen"),
            this.elementRef &&
              this.elementRef.nativeElement.classList.remove("tb-fullscreen"),
            this.overlayRef && this.overlayRef.dispose(),
            this.fullscreenChanged.emit(!1);
        }
      }
      (d.ɵfac = function (g) {
        return new (g || d)(
          e.ɵɵdirectiveInject(e.ElementRef),
          e.ɵɵdirectiveInject(e.Renderer2),
          e.ɵɵdirectiveInject(s.DomSanitizer),
          e.ɵɵdirectiveInject(e.ViewContainerRef),
          e.ɵɵdirectiveInject(n.Overlay)
        );
      }),
        (d.ɵdir = e.ɵɵdefineDirective({
          type: d,
          selectors: [["", "tb-fullscreen", ""]],
          inputs: {
            fullscreen: "fullscreen",
            fullscreenElement: "fullscreenElement",
            fullscreenBackgroundStyle: "fullscreenBackgroundStyle",
            fullscreenBackgroundImage: "fullscreenBackgroundImage",
          },
          outputs: { fullscreenChanged: "fullscreenChanged" },
          features: [e.ɵɵNgOnChangesFeature],
        }));
      class o extends a.ComponentPortal {
        constructor() {
          super(C.TbAnchorComponent);
        }
      }
    },
    3314: (ee, R, t) => {
      "use strict";
      t.r(R), t.d(R, { HelpMarkdownComponent: () => s });
      var e = t(37716),
        n = t(26215),
        a = t(78345),
        C = t(32534);
      class s {
        constructor(o) {
          (this.help = o),
            (this.style = {}),
            (this.markdownReady = new e.EventEmitter()),
            (this.markdownText = new n.X(null)),
            (this.markdownText$ = this.markdownText.pipe((0, a.B)())),
            (this.loadHelpPending = !1);
        }
        ngOnInit() {
          this.loadHelpWhenVisible();
        }
        ngOnDestroy() {
          this.markdownText.complete();
        }
        ngOnChanges(o) {
          for (const i of Object.keys(o)) {
            const g = o[i];
            !g.firstChange &&
              g.currentValue !== g.previousValue &&
              ("visible" === i &&
                this.loadHelpPending &&
                ((this.loadHelpPending = !1), this.loadHelp()),
              ("helpId" === i || "helpContent" === i) &&
                (this.markdownText.next(null), this.loadHelpWhenVisible()));
          }
        }
        loadHelpWhenVisible() {
          this.visible ? this.loadHelp() : (this.loadHelpPending = !0);
        }
        loadHelp() {
          this.helpId
            ? this.help.getHelpContent(this.helpId).subscribe((o) => {
                this.markdownText.next(o);
              })
            : this.helpContent && this.markdownText.next(this.helpContent);
        }
        onMarkdownReady() {
          this.markdownReady.next();
        }
        markdownClick(o) {}
      }
      (s.ɵfac = function (o) {
        return new (o || s)(e.ɵɵdirectiveInject(C.s));
      }),
        (s.ɵcmp = e.ɵɵdefineComponent({
          type: s,
          selectors: [["tb-help-markdown"]],
          inputs: {
            helpId: "helpId",
            helpContent: "helpContent",
            visible: "visible",
            style: "style",
          },
          outputs: { markdownReady: "markdownReady" },
          features: [e.ɵɵNgOnChangesFeature],
          decls: 2,
          vars: 5,
          consts: [
            [
              "lineNumbers",
              "",
              "markdownClass",
              "tb-help-markdown",
              3,
              "data",
              "ready",
              "click",
            ],
          ],
          template: function (o, i) {
            1 & o &&
              (e.ɵɵelementStart(0, "tb-markdown", 0),
              e.ɵɵlistener("ready", function () {
                return i.onMarkdownReady();
              })("click", function (D) {
                return i.markdownClick(D);
              }),
              e.ɵɵpipe(1, "async"),
              e.ɵɵelementEnd()),
              2 & o &&
                (e.ɵɵstyleMap(i.style),
                e.ɵɵproperty("data", e.ɵɵpipeBind1(1, 3, i.markdownText$)));
          },
          styles: [
            '@charset "UTF-8";[_nghost-%COMP%]     .tb-help-markdown{overflow:auto;max-width:80vw;max-height:80vh;margin-top:30px}[_nghost-%COMP%]     .tb-help-markdown.tb-markdown-view h1:first-child, [_nghost-%COMP%]     .tb-help-markdown.tb-markdown-view h2:first-child, [_nghost-%COMP%]     .tb-help-markdown.tb-markdown-view h3:first-child, [_nghost-%COMP%]     .tb-help-markdown.tb-markdown-view h4:first-child, [_nghost-%COMP%]     .tb-help-markdown.tb-markdown-view h5:first-child, [_nghost-%COMP%]     .tb-help-markdown.tb-markdown-view h6:first-child{padding-top:0}',
          ],
        }));
    },
    89584: (ee, R, t) => {
      "use strict";
      t.r(R), t.d(R, { HelpPopupComponent: () => T });
      var e = t(37716),
        n = t(45113),
        a = t(41960),
        C = t(39075),
        s = t(38583),
        d = t(11436),
        o = t(51095),
        i = t(76627),
        g = t(4885),
        D = t(88030),
        y = t(29790);
      const m = ["toggleHelpButton"],
        r = ["toggleHelpTextButton"];
      function p(O, w) {
        1 & O && e.ɵɵelement(0, "mat-spinner", 7);
      }
      function _(O, w) {
        if (1 & O) {
          const b = e.ɵɵgetCurrentView();
          e.ɵɵelementStart(0, "fieldset", 1),
            e.ɵɵelementStart(1, "div", 2, 3),
            e.ɵɵlistener("click", function () {
              return e.ɵɵrestoreView(b), e.ɵɵnextContext().toggleHelp();
            }),
            e.ɵɵpipe(3, "translate"),
            e.ɵɵelementStart(4, "button", 4),
            e.ɵɵelementStart(5, "mat-icon", 5),
            e.ɵɵtext(6),
            e.ɵɵelementEnd(),
            e.ɵɵtemplate(7, p, 1, 0, "mat-spinner", 6),
            e.ɵɵelementEnd(),
            e.ɵɵelementEnd(),
            e.ɵɵelementEnd();
        }
        if (2 & O) {
          const b = e.ɵɵnextContext();
          e.ɵɵadvance(1),
            e.ɵɵpropertyInterpolate(
              "matTooltip",
              e.ɵɵpipeBind1(3, 3, "help.show-help")
            ),
            e.ɵɵadvance(5),
            e.ɵɵtextInterpolate(b.popoverVisible ? "help" : "help_outline"),
            e.ɵɵadvance(1),
            e.ɵɵproperty("ngIf", b.popoverVisible && !b.popoverReady);
        }
      }
      function E(O, w) {
        if (
          (1 & O &&
            (e.ɵɵelementContainerStart(0),
            e.ɵɵelement(1, "span", 14),
            e.ɵɵelementContainerEnd()),
          2 & O)
        ) {
          const b = e.ɵɵnextContext(2);
          e.ɵɵadvance(1),
            e.ɵɵstyleMap(b.triggerStyle),
            e.ɵɵproperty("innerHTML", b.triggerSafeHtml, e.ɵɵsanitizeHtml);
        }
      }
      function c(O, w) {
        1 & O &&
          (e.ɵɵelementStart(0, "mat-icon", 15),
          e.ɵɵtext(1, "open_in_new"),
          e.ɵɵelementEnd());
      }
      function v(O, w) {
        1 & O && e.ɵɵelement(0, "mat-spinner", 16);
      }
      const I = function (O) {
        return { "mat-stroked-button": O };
      };
      function l(O, w) {
        if (1 & O) {
          const b = e.ɵɵgetCurrentView();
          e.ɵɵelementStart(0, "fieldset", 1),
            e.ɵɵelementStart(1, "div", 8, 9),
            e.ɵɵlistener("click", function () {
              return e.ɵɵrestoreView(b), e.ɵɵnextContext().toggleHelp();
            }),
            e.ɵɵelementStart(3, "button", 10),
            e.ɵɵtemplate(4, E, 2, 3, "ng-container", 11),
            e.ɵɵtemplate(5, c, 2, 0, "mat-icon", 12),
            e.ɵɵtemplate(6, v, 1, 0, "mat-spinner", 13),
            e.ɵɵelementEnd(),
            e.ɵɵelementEnd(),
            e.ɵɵelementEnd();
        }
        if (2 & O) {
          const b = e.ɵɵnextContext();
          e.ɵɵadvance(3),
            e.ɵɵproperty(
              "ngClass",
              e.ɵɵpureFunction1(4, I, b.popoverVisible && b.popoverReady)
            ),
            e.ɵɵadvance(1),
            e.ɵɵproperty("ngIf", b.triggerSafeHtml),
            e.ɵɵadvance(1),
            e.ɵɵproperty("ngIf", !b.popoverVisible || b.popoverReady),
            e.ɵɵadvance(1),
            e.ɵɵproperty("ngIf", b.popoverVisible && !b.popoverReady);
        }
      }
      class T {
        constructor(w, b, S, u, f) {
          (this.viewContainerRef = w),
            (this.element = b),
            (this.sanitizer = S),
            (this.renderer = u),
            (this.popoverService = f),
            (this.helpPopupStyle = {}),
            (this.popoverVisible = !1),
            (this.popoverReady = !0),
            (this.triggerSafeHtml = null),
            (this.textMode = !1);
        }
        ngOnChanges(w) {
          (0, a.nu)(this.triggerText)
            ? (this.triggerSafeHtml = this.sanitizer.bypassSecurityTrustHtml(
                this.triggerText
              ))
            : (this.triggerSafeHtml = null),
            (this.textMode = null != this.triggerSafeHtml);
        }
        toggleHelp() {
          const w = this.textMode
            ? this.toggleHelpTextButton.nativeElement
            : this.toggleHelpButton.nativeElement;
          this.popoverService.toggleHelpPopover(
            w,
            this.renderer,
            this.viewContainerRef,
            this.helpId,
            this.helpContent,
            (b) => {
              this.popoverVisible = b;
            },
            (b) => {
              this.popoverReady = b;
            },
            this.helpPopupPlacement,
            {},
            this.helpPopupStyle
          );
        }
        ngOnDestroy() {}
      }
      (T.ɵfac = function (w) {
        return new (w || T)(
          e.ɵɵdirectiveInject(e.ViewContainerRef),
          e.ɵɵdirectiveInject(e.ElementRef),
          e.ɵɵdirectiveInject(C.DomSanitizer),
          e.ɵɵdirectiveInject(e.Renderer2),
          e.ɵɵdirectiveInject(n.t)
        );
      }),
        (T.ɵcmp = e.ɵɵdefineComponent({
          type: T,
          selectors: [
            ["", "tb-help-popup", ""],
            ["", "tb-help-popup-content", ""],
          ],
          viewQuery: function (w, b) {
            if (
              (1 & w &&
                (e.ɵɵviewQuery(m, 5, e.ElementRef),
                e.ɵɵviewQuery(r, 5, e.ElementRef)),
              2 & w)
            ) {
              let S;
              e.ɵɵqueryRefresh((S = e.ɵɵloadQuery())) &&
                (b.toggleHelpButton = S.first),
                e.ɵɵqueryRefresh((S = e.ɵɵloadQuery())) &&
                  (b.toggleHelpTextButton = S.first);
            }
          },
          inputs: {
            helpId: ["tb-help-popup", "helpId"],
            helpContent: ["tb-help-popup-content", "helpContent"],
            triggerText: ["trigger-text", "triggerText"],
            triggerStyle: ["trigger-style", "triggerStyle"],
            helpPopupPlacement: [
              "tb-help-popup-placement",
              "helpPopupPlacement",
            ],
            helpPopupStyle: ["tb-help-popup-style", "helpPopupStyle"],
          },
          features: [e.ɵɵNgOnChangesFeature],
          attrs: ["tb-help-popup", ""],
          decls: 2,
          vars: 2,
          consts: [
            ["class", "tb-help-popup-button-container", 4, "ngIf"],
            [1, "tb-help-popup-button-container"],
            [
              "matTooltipPosition",
              "above",
              2,
              "border-radius",
              "50%",
              3,
              "matTooltip",
              "click",
            ],
            ["toggleHelpButton", ""],
            [
              "mat-icon-button",
              "",
              "color",
              "primary",
              "type",
              "button",
              1,
              "tb-help-popup-button",
              "tb-mat-32",
            ],
            [1, "material-icons"],
            [
              "class",
              "tb-help-popup-button-loading",
              "mode",
              "indeterminate",
              "diameter",
              "20",
              "strokeWidth",
              "2",
              4,
              "ngIf",
            ],
            [
              "mode",
              "indeterminate",
              "diameter",
              "20",
              "strokeWidth",
              "2",
              1,
              "tb-help-popup-button-loading",
            ],
            [3, "click"],
            ["toggleHelpTextButton", ""],
            [
              "mat-button",
              "",
              "color",
              "primary",
              1,
              "tb-help-popup-text-button",
              3,
              "ngClass",
            ],
            [4, "ngIf"],
            ["class", "tb-mat-16", 4, "ngIf"],
            [
              "mode",
              "indeterminate",
              "diameter",
              "16",
              "strokeWidth",
              "2",
              4,
              "ngIf",
            ],
            [3, "innerHTML"],
            [1, "tb-mat-16"],
            ["mode", "indeterminate", "diameter", "16", "strokeWidth", "2"],
          ],
          template: function (w, b) {
            1 & w &&
              (e.ɵɵtemplate(0, _, 8, 5, "fieldset", 0),
              e.ɵɵtemplate(1, l, 7, 6, "fieldset", 0)),
              2 & w &&
                (e.ɵɵproperty("ngIf", !b.textMode),
                e.ɵɵadvance(1),
                e.ɵɵproperty("ngIf", b.textMode));
          },
          directives: [
            s.NgIf,
            d.MatTooltip,
            o.MatButton,
            i.MatIcon,
            g.MatSpinner,
            s.NgClass,
            D.DefaultClassDirective,
          ],
          pipes: [y.TranslatePipe],
          styles: [
            '@charset "UTF-8";.tb-help-popup-button-container{width:initial;display:inline-block;vertical-align:middle}.tb-help-popup-button{position:relative}.tb-help-popup-button .mat-progress-spinner{position:absolute;top:0;left:0;background:#fff;border-radius:50%;width:32px!important;height:32px!important}.tb-help-popup-button .mat-progress-spinner svg{top:6px;left:6px}.tb-help-popup-text-button{position:relative;padding:0 2px 0 8px;line-height:28px}.tb-help-popup-text-button.mat-stroked-button{padding:0 1px 0 7px;line-height:26px}.tb-help-popup-text-button .mat-icon{padding-left:4px}.tb-help-popup-text-button .mat-progress-spinner{display:inline-block;margin-left:4px;margin-right:5px}\n',
          ],
          encapsulation: 2,
        }));
    },
    70543: (ee, R, t) => {
      "use strict";
      t.r(R), t.d(R, { HelpComponent: () => i });
      var e = t(37716),
        n = t(82068),
        a = t(51095),
        C = t(11436),
        s = t(76627),
        d = t(29790);
      class i {
        gotoHelpPage() {
          let D = n.e3.linksMap[this.helpLinkId];
          !D &&
            this.helpLinkId &&
            (this.helpLinkId.startsWith("http://") ||
              this.helpLinkId.startsWith("https://")) &&
            (D = this.helpLinkId),
            D && window.open(D, "_blank");
        }
      }
      (i.ɵfac = function (D) {
        return new (D || i)();
      }),
        (i.ɵcmp = e.ɵɵdefineComponent({
          type: i,
          selectors: [["", "tb-help", ""]],
          inputs: { helpLinkId: ["tb-help", "helpLinkId"] },
          attrs: ["tb-help", ""],
          decls: 4,
          vars: 3,
          consts: [
            [
              "color",
              "primary",
              "mat-button",
              "",
              "mat-icon-button",
              "",
              "type",
              "button",
              "matTooltipPosition",
              "above",
              3,
              "matTooltip",
              "click",
            ],
            [1, "material-icons"],
          ],
          template: function (D, y) {
            1 & D &&
              (e.ɵɵelementStart(0, "button", 0),
              e.ɵɵlistener("click", function () {
                return y.gotoHelpPage();
              }),
              e.ɵɵpipe(1, "translate"),
              e.ɵɵelementStart(2, "mat-icon", 1),
              e.ɵɵtext(3, "help"),
              e.ɵɵelementEnd(),
              e.ɵɵelementEnd()),
              2 & D &&
                e.ɵɵpropertyInterpolate(
                  "matTooltip",
                  e.ɵɵpipeBind1(1, 1, "help.goto-help-page")
                );
          },
          directives: [a.MatButton, C.MatTooltip, s.MatIcon],
          pipes: [d.TranslatePipe],
          encapsulation: 2,
        }));
    },
    93717: (ee, R, t) => {
      "use strict";
      t.r(R), t.d(R, { TbHotkeysDirective: () => d });
      var e = t(37716),
        n = t(74426),
        a = t(13544);
      t(74391);
      class d {
        constructor(i) {
          (this.elementRef = i),
            (this.hotkeys = []),
            (this.hotkeysList = []),
            (this.preventIn = ["INPUT", "SELECT", "TEXTAREA"]),
            (this.mousetrap = new a(this.elementRef.nativeElement)),
            (this.elementRef.nativeElement.tabIndex = -1),
            (this.elementRef.nativeElement.style.outline = "0");
        }
        ngOnInit() {
          for (const i of this.hotkeys)
            this.hotkeysList.push(i), this.bindEvent(i);
          if (this.cheatSheet) {
            const i = new n.qm(
              "?",
              (g) => (this.cheatSheet.toggleCheatSheet(), !1),
              [],
              "Show / hide this help menu"
            );
            this.hotkeysList.unshift(i),
              this.bindEvent(i),
              this.cheatSheet.setHotKeys(this.hotkeysList);
          }
        }
        bindEvent(i) {
          this.mousetrap.bind(i.combo, (g, D) => {
            let y = !0;
            if (g) {
              const m = g.target || g.srcElement,
                r = m.nodeName.toUpperCase();
              (" " + m.className + " ").indexOf(" mousetrap ") > -1
                ? (y = !0)
                : this.preventIn.indexOf(r) > -1 &&
                  -1 === i.allowIn.map((h) => h.toUpperCase()).indexOf(r) &&
                  (y = !1);
            }
            if (y) return i.callback.apply(this, [g, D]);
          });
        }
        ngOnDestroy() {
          for (const i of this.hotkeysList) this.mousetrap.unbind(i.combo);
        }
      }
      (d.ɵfac = function (i) {
        return new (i || d)(e.ɵɵdirectiveInject(e.ElementRef));
      }),
        (d.ɵdir = e.ɵɵdefineDirective({
          type: d,
          selectors: [["", "tb-hotkeys", ""]],
          inputs: { hotkeys: "hotkeys", cheatSheet: "cheatSheet" },
        }));
    },
    52792: (ee, R, t) => {
      "use strict";
      t.d(R, { X: () => b });
      var e = t(37716),
        n = t(3679),
        a = t(72145),
        C = t(39490),
        s = t(1361),
        d = t(25280),
        o = t(30290),
        i = t(30013),
        g = t(29790),
        D = t(86710),
        y = t(46743),
        m = t(35618),
        r = t(38583),
        h = t(88030),
        p = t(11436),
        _ = t(51095),
        E = t(76627);
      const c = ["htmlEditor"];
      function v(S, u) {
        if (1 & S) {
          const f = e.ɵɵgetCurrentView();
          e.ɵɵelementStart(0, "button", 12),
            e.ɵɵlistener("click", function () {
              return e.ɵɵrestoreView(f), e.ɵɵnextContext().beautifyHtml();
            }),
            e.ɵɵtext(1),
            e.ɵɵpipe(2, "translate"),
            e.ɵɵelementEnd();
        }
        2 & S &&
          (e.ɵɵadvance(1),
          e.ɵɵtextInterpolate1(" ", e.ɵɵpipeBind1(2, 1, "js-func.tidy"), " "));
      }
      const I = function (S, u) {
          return { "tb-disabled": S, "fill-height": u };
        },
        l = function (S, u) {
          return { "tb-error": S, "tb-required": u };
        },
        T = function () {
          return {};
        },
        O = function (S) {
          return { minHeight: S };
        },
        w = function (S) {
          return { "fill-height": S };
        };
      class b {
        constructor(u, f, M, L, k, N) {
          (this.elementRef = u),
            (this.utils = f),
            (this.translate = M),
            (this.store = L),
            (this.raf = k),
            (this.cd = N),
            (this.ignoreChange = !1),
            (this.minHeight = "200px"),
            (this.fullscreen = !1),
            (this.hasErrors = !1),
            (this.propagateChange = null);
        }
        get required() {
          return this.requiredValue;
        }
        set required(u) {
          this.requiredValue = (0, C.coerceBooleanProperty)(u);
        }
        ngOnInit() {
          const u = this.htmlEditorElmRef.nativeElement;
          let f = {
            mode: "ace/mode/html",
            showGutter: !0,
            showPrintMargin: !0,
            readOnly: this.disabled,
          };
          (f = Object.assign(Object.assign({}, f), {
            enableSnippets: !0,
            enableBasicAutocompletion: !0,
            enableLiveAutocompletion: !0,
          })),
            (0, a.Ln)().subscribe((L) => {
              (this.htmlEditor = L.edit(u, f)),
                this.htmlEditor.session.setUseWrapMode(!0),
                this.htmlEditor.setValue(
                  this.modelValue ? this.modelValue : "",
                  -1
                ),
                this.htmlEditor.setReadOnly(this.disabled),
                this.htmlEditor.on("change", () => {
                  this.ignoreChange || this.updateView();
                }),
                this.htmlEditor.session.on("changeAnnotation", () => {
                  const N =
                    this.htmlEditor.session
                      .getAnnotations()
                      .filter((B) => "error" === B.type).length > 0;
                  this.hasErrors !== N &&
                    ((this.hasErrors = N),
                    this.propagateChange(this.modelValue),
                    this.cd.markForCheck());
                }),
                (this.editorResize$ = new o.do(() => {
                  this.onAceEditorResize();
                })),
                this.editorResize$.observe(u);
            });
        }
        ngOnDestroy() {
          this.editorResize$ && this.editorResize$.disconnect(),
            this.htmlEditor && this.htmlEditor.destroy();
        }
        onAceEditorResize() {
          this.editorsResizeCaf &&
            (this.editorsResizeCaf(), (this.editorsResizeCaf = null)),
            (this.editorsResizeCaf = this.raf.raf(() => {
              this.htmlEditor.resize(), this.htmlEditor.renderer.updateFull();
            }));
        }
        registerOnChange(u) {
          this.propagateChange = u;
        }
        registerOnTouched(u) {}
        setDisabledState(u) {
          (this.disabled = u),
            this.htmlEditor && this.htmlEditor.setReadOnly(this.disabled);
        }
        validate(u) {
          return this.hasErrors ? { html: { valid: !1 } } : null;
        }
        beautifyHtml() {
          (0, i.S7)(this.modelValue, { indent_size: 4 }).subscribe((u) => {
            this.modelValue !== u &&
              (this.htmlEditor.setValue(u || "", -1), this.updateView());
          });
        }
        writeValue(u) {
          (this.modelValue = u),
            this.htmlEditor &&
              ((this.ignoreChange = !0),
              this.htmlEditor.setValue(
                this.modelValue ? this.modelValue : "",
                -1
              ),
              (this.ignoreChange = !1));
        }
        updateView() {
          const u = this.htmlEditor.getValue();
          this.modelValue !== u &&
            ((this.modelValue = u),
            this.propagateChange(this.modelValue),
            this.cd.markForCheck());
        }
      }
      (b.ɵfac = function (u) {
        return new (u || b)(
          e.ɵɵdirectiveInject(e.ElementRef),
          e.ɵɵdirectiveInject(s.F),
          e.ɵɵdirectiveInject(g.TranslateService),
          e.ɵɵdirectiveInject(D.Store),
          e.ɵɵdirectiveInject(d.i),
          e.ɵɵdirectiveInject(e.ChangeDetectorRef)
        );
      }),
        (b.ɵcmp = e.ɵɵdefineComponent({
          type: b,
          selectors: [["tb-html"]],
          viewQuery: function (u, f) {
            if ((1 & u && e.ɵɵviewQuery(c, 7), 2 & u)) {
              let M;
              e.ɵɵqueryRefresh((M = e.ɵɵloadQuery())) &&
                (f.htmlEditorElmRef = M.first);
            }
          },
          inputs: {
            label: "label",
            disabled: "disabled",
            fillHeight: "fillHeight",
            minHeight: "minHeight",
            required: "required",
          },
          features: [
            e.ɵɵProvidersFeature([
              {
                provide: n.NG_VALUE_ACCESSOR,
                useExisting: (0, e.forwardRef)(() => b),
                multi: !0,
              },
              {
                provide: n.NG_VALIDATORS,
                useExisting: (0, e.forwardRef)(() => b),
                multi: !0,
              },
            ]),
          ],
          decls: 15,
          vars: 22,
          consts: [
            [
              "tb-fullscreen",
              "",
              "fxLayout",
              "column",
              1,
              "tb-html",
              2,
              "background",
              "#fff",
              3,
              "ngClass",
              "fullscreen",
            ],
            [
              "fxLayout",
              "row",
              "fxLayoutAlign",
              "start center",
              1,
              "tb-html-toolbar",
              2,
              "height",
              "40px",
            ],
            [1, "tb-title", "no-padding", 3, "ngClass"],
            ["fxFlex", ""],
            [
              "type",
              "button",
              "mat-button",
              "",
              "class",
              "tidy",
              3,
              "click",
              4,
              "ngIf",
            ],
            [2, "width", "initial"],
            [
              "matTooltipPosition",
              "above",
              2,
              "border-radius",
              "50%",
              3,
              "matTooltip",
              "click",
            ],
            [
              "type",
              "button",
              "mat-button",
              "",
              "mat-icon-button",
              "",
              1,
              "tb-mat-32",
            ],
            [1, "material-icons"],
            [
              "id",
              "tb-html-panel",
              "fxLayout",
              "column",
              1,
              "tb-html-content-panel",
            ],
            ["id", "tb-html-input", 3, "ngStyle", "ngClass"],
            ["htmlEditor", ""],
            ["type", "button", "mat-button", "", 1, "tidy", 3, "click"],
          ],
          template: function (u, f) {
            1 & u &&
              (e.ɵɵelementStart(0, "div", 0),
              e.ɵɵelementStart(1, "div", 1),
              e.ɵɵelementStart(2, "label", 2),
              e.ɵɵtext(3),
              e.ɵɵelementEnd(),
              e.ɵɵelement(4, "span", 3),
              e.ɵɵtemplate(5, v, 3, 3, "button", 4),
              e.ɵɵelementStart(6, "fieldset", 5),
              e.ɵɵelementStart(7, "div", 6),
              e.ɵɵlistener("click", function () {
                return (f.fullscreen = !f.fullscreen);
              }),
              e.ɵɵpipe(8, "translate"),
              e.ɵɵelementStart(9, "button", 7),
              e.ɵɵelementStart(10, "mat-icon", 8),
              e.ɵɵtext(11),
              e.ɵɵelementEnd(),
              e.ɵɵelementEnd(),
              e.ɵɵelementEnd(),
              e.ɵɵelementEnd(),
              e.ɵɵelementEnd(),
              e.ɵɵelementStart(12, "div", 9),
              e.ɵɵelement(13, "div", 10, 11),
              e.ɵɵelementEnd(),
              e.ɵɵelementEnd()),
              2 & u &&
                (e.ɵɵproperty(
                  "ngClass",
                  e.ɵɵpureFunction2(11, I, f.disabled, f.fillHeight)
                )("fullscreen", f.fullscreen),
                e.ɵɵadvance(2),
                e.ɵɵproperty(
                  "ngClass",
                  e.ɵɵpureFunction2(
                    14,
                    l,
                    !f.disabled &&
                      (f.hasErrors || (f.required && !f.modelValue)),
                    !f.disabled && f.required
                  )
                ),
                e.ɵɵadvance(1),
                e.ɵɵtextInterpolate(f.label),
                e.ɵɵadvance(2),
                e.ɵɵproperty("ngIf", !f.disabled),
                e.ɵɵadvance(2),
                e.ɵɵpropertyInterpolate(
                  "matTooltip",
                  e.ɵɵpipeBind1(
                    8,
                    9,
                    f.fullscreen ? "fullscreen.exit" : "fullscreen.expand"
                  )
                ),
                e.ɵɵadvance(4),
                e.ɵɵtextInterpolate(
                  f.fullscreen ? "fullscreen_exit" : "fullscreen"
                ),
                e.ɵɵadvance(2),
                e.ɵɵproperty(
                  "ngStyle",
                  f.fillHeight
                    ? e.ɵɵpureFunction0(17, T)
                    : e.ɵɵpureFunction1(18, O, f.minHeight)
                )("ngClass", e.ɵɵpureFunction1(20, w, f.fillHeight)));
          },
          directives: [
            y.FullscreenDirective,
            m.DefaultLayoutDirective,
            r.NgClass,
            h.DefaultClassDirective,
            m.DefaultLayoutAlignDirective,
            m.DefaultFlexDirective,
            r.NgIf,
            p.MatTooltip,
            _.MatButton,
            E.MatIcon,
            r.NgStyle,
            h.DefaultStyleDirective,
          ],
          pipes: [g.TranslatePipe],
          styles: [
            '@charset "UTF-8";.tb-html{position:relative}.tb-html.tb-disabled{color:#00000061}.tb-html.fill-height{height:100%}.tb-html .tb-html-content-panel{height:calc(100% - 40px);border:1px solid #c0c0c0}.tb-html .tb-html-content-panel #tb-html-input{width:100%;min-width:200px;height:100%}.tb-html:not(.tb-fullscreen){padding-bottom:15px}.tb-html .tb-html-toolbar>*:not(:last-child){margin-right:4px}.tb-html .tb-html-toolbar button.mat-button,.tb-html .tb-html-toolbar button.mat-icon-button,.tb-html .tb-html-toolbar button.mat-icon-button.tb-mat-32{background:rgba(220,220,220,.35);align-items:center;vertical-align:middle;min-width:32px;min-height:15px;padding:4px;font-size:.8rem;line-height:15px}.tb-html .tb-html-toolbar button.mat-button:not(.tb-help-popup-button),.tb-html .tb-html-toolbar button.mat-icon-button:not(.tb-help-popup-button),.tb-html .tb-html-toolbar button.mat-icon-button.tb-mat-32:not(.tb-help-popup-button){color:#7b7b7b}.tb-html .tb-html-toolbar .tb-help-popup-button-loading{background:#f3f3f3}\n',
          ],
          encapsulation: 2,
        }));
    },
    23153: (ee, R, t) => {
      "use strict";
      t.r(R), t.d(R, { ImageInputComponent: () => N });
      var e = t(37716),
        n = t(75362),
        a = t(3679),
        C = t(39490),
        s = t(1361),
        d = t(16797),
        o = t(35223),
        i = t(86710),
        g = t(39075),
        D = t(29790),
        y = t(38583),
        m = t(17414),
        r = t(88030),
        h = t(51095),
        p = t(11436),
        _ = t(76627);
      const E = ["flow"],
        c = function (B, j) {
          return { "tb-error": B, "tb-required": j };
        };
      function v(B, j) {
        if (
          (1 & B &&
            (e.ɵɵelementStart(0, "label", 9), e.ɵɵtext(1), e.ɵɵelementEnd()),
          2 & B)
        ) {
          const F = e.ɵɵnextContext();
          e.ɵɵproperty(
            "ngClass",
            e.ɵɵpureFunction2(
              2,
              c,
              !F.disabled && F.required && !F.safeImageUrl,
              !F.disabled && F.required
            )
          ),
            e.ɵɵadvance(1),
            e.ɵɵtextInterpolate(F.label);
        }
      }
      function I(B, j) {
        if (
          (1 & B &&
            (e.ɵɵelementStart(0, "div"),
            e.ɵɵtext(1),
            e.ɵɵpipe(2, "translate"),
            e.ɵɵelementEnd()),
          2 & B)
        ) {
          const F = e.ɵɵnextContext(2);
          e.ɵɵadvance(1),
            e.ɵɵtextInterpolate(
              e.ɵɵpipeBind1(
                2,
                1,
                F.disabled ? "dashboard.empty-image" : "dashboard.no-image"
              )
            );
        }
      }
      function l(B, j) {
        if ((1 & B && e.ɵɵelement(0, "img", 16), 2 & B)) {
          const F = e.ɵɵnextContext(2);
          e.ɵɵproperty("src", F.safeImageUrl, e.ɵɵsanitizeUrl);
        }
      }
      function T(B, j) {
        if (1 & B) {
          const F = e.ɵɵgetCurrentView();
          e.ɵɵelementStart(0, "div", 17),
            e.ɵɵelementStart(1, "button", 18),
            e.ɵɵlistener("click", function () {
              return e.ɵɵrestoreView(F), e.ɵɵnextContext(2).clearImage();
            }),
            e.ɵɵpipe(2, "translate"),
            e.ɵɵelementStart(3, "mat-icon"),
            e.ɵɵtext(4, "close"),
            e.ɵɵelementEnd(),
            e.ɵɵelementEnd(),
            e.ɵɵelementEnd();
        }
        2 & B &&
          (e.ɵɵadvance(1),
          e.ɵɵpropertyInterpolate(
            "matTooltip",
            e.ɵɵpipeBind1(2, 1, "action.remove")
          ));
      }
      const O = function (B) {
        return { "no-padding": B };
      };
      function w(B, j) {
        if (
          (1 & B &&
            (e.ɵɵelementStart(0, "div", 10),
            e.ɵɵelementStart(1, "div", 11),
            e.ɵɵelementStart(2, "div", 12),
            e.ɵɵtemplate(3, I, 3, 3, "div", 13),
            e.ɵɵtemplate(
              4,
              l,
              1,
              1,
              "ng-template",
              null,
              14,
              e.ɵɵtemplateRefExtractor
            ),
            e.ɵɵelementEnd(),
            e.ɵɵtemplate(6, T, 5, 3, "div", 15),
            e.ɵɵelementEnd(),
            e.ɵɵelementEnd()),
          2 & B)
        ) {
          const F = e.ɵɵreference(5),
            V = e.ɵɵnextContext();
          e.ɵɵadvance(1),
            e.ɵɵproperty("ngClass", e.ɵɵpureFunction1(4, O, V.disabled)),
            e.ɵɵadvance(2),
            e.ɵɵproperty("ngIf", !V.safeImageUrl)("ngIfElse", F),
            e.ɵɵadvance(3),
            e.ɵɵproperty("ngIf", V.showClearButton && !V.disabled);
        }
      }
      const b = function (B) {
          return { "float-left": B };
        },
        S = function () {
          return { accept: "image/*" };
        };
      function u(B, j) {
        if (
          (1 & B &&
            (e.ɵɵelementStart(0, "div", 19),
            e.ɵɵelementStart(1, "div", 20),
            e.ɵɵelementStart(2, "mat-icon"),
            e.ɵɵtext(3, "cloud_upload"),
            e.ɵɵelementEnd(),
            e.ɵɵelementStart(4, "span", 21),
            e.ɵɵtext(5, "image-input.drop-image-or"),
            e.ɵɵelementEnd(),
            e.ɵɵelementStart(6, "button", 22),
            e.ɵɵelementStart(7, "label", 23),
            e.ɵɵtext(8),
            e.ɵɵpipe(9, "translate"),
            e.ɵɵelementEnd(),
            e.ɵɵelementEnd(),
            e.ɵɵelement(10, "input", 24),
            e.ɵɵelementEnd(),
            e.ɵɵelementEnd()),
          2 & B)
        ) {
          const F = e.ɵɵnextContext(),
            V = e.ɵɵreference(3);
          e.ɵɵproperty(
            "ngClass",
            e.ɵɵpureFunction1(9, b, !F.showPreview && F.showClearButton)
          )("flow", V.flowJs),
            e.ɵɵadvance(7),
            e.ɵɵpropertyInterpolate("for", F.inputId),
            e.ɵɵadvance(1),
            e.ɵɵtextInterpolate(e.ɵɵpipeBind1(9, 7, "file-input.browse-file")),
            e.ɵɵadvance(2),
            e.ɵɵpropertyInterpolate("id", F.inputId),
            e.ɵɵproperty("flow", V.flowJs)(
              "flowAttributes",
              e.ɵɵpureFunction0(11, S)
            );
        }
      }
      function f(B, j) {
        if (1 & B) {
          const F = e.ɵɵgetCurrentView();
          e.ɵɵelementStart(0, "div", 25),
            e.ɵɵelementStart(1, "button", 18),
            e.ɵɵlistener("click", function () {
              return e.ɵɵrestoreView(F), e.ɵɵnextContext().clearImage();
            }),
            e.ɵɵpipe(2, "translate"),
            e.ɵɵelementStart(3, "mat-icon"),
            e.ɵɵtext(4, "close"),
            e.ɵɵelementEnd(),
            e.ɵɵelementEnd(),
            e.ɵɵelementEnd();
        }
        2 & B &&
          (e.ɵɵadvance(1),
          e.ɵɵpropertyInterpolate(
            "matTooltip",
            e.ɵɵpipeBind1(2, 1, "action.remove")
          ));
      }
      const M = function (B) {
        return { size: B };
      };
      function L(B, j) {
        if (
          (1 & B &&
            (e.ɵɵelementStart(0, "div", 26),
            e.ɵɵpipe(1, "fileSize"),
            e.ɵɵtext(2, "dashboard.maximum-upload-file-size"),
            e.ɵɵelementEnd()),
          2 & B)
        ) {
          const F = e.ɵɵnextContext();
          e.ɵɵproperty(
            "translateParams",
            e.ɵɵpureFunction1(3, M, e.ɵɵpipeBind1(1, 1, F.maxSizeByte))
          );
        }
      }
      const k = function () {
        return { singleFile: !0, allowDuplicateUploads: !0 };
      };
      class N extends n.I {
        constructor(j, F, V, P, A, U, G) {
          super(j),
            (this.store = j),
            (this.utils = F),
            (this.sanitizer = V),
            (this.dialog = P),
            (this.translate = A),
            (this.fileSize = U),
            (this.cd = G),
            (this.showClearButton = !0),
            (this.showPreview = !0),
            (this.inputId = this.utils.guid()),
            (this.propagateChange = null);
        }
        get required() {
          return this.requiredValue;
        }
        set required(j) {
          const F = (0, C.coerceBooleanProperty)(j);
          this.requiredValue !== F && (this.requiredValue = F);
        }
        ngAfterViewInit() {
          this.autoUploadSubscription = this.flow.events$.subscribe((j) => {
            if ("fileAdded" === j.type) {
              const F = j.event[0].file;
              if (this.maxSizeByte && this.maxSizeByte < F.size)
                return (
                  this.dialog
                    .alert(
                      this.translate.instant("dashboard.cannot-upload-file"),
                      this.translate.instant(
                        "dashboard.maximum-upload-file-size",
                        { size: this.fileSize.transform(this.maxSizeByte) }
                      )
                    )
                    .subscribe(() => {}),
                  !1
                );
              const V = new FileReader();
              (V.onload = (P) => {
                "string" == typeof V.result &&
                  V.result.startsWith("data:image/") &&
                  ((this.imageUrl = V.result),
                  (this.safeImageUrl = this.sanitizer.bypassSecurityTrustUrl(
                    this.imageUrl
                  )),
                  this.updateModel());
              }),
                V.readAsDataURL(F);
            }
          });
        }
        ngOnDestroy() {
          this.autoUploadSubscription.unsubscribe();
        }
        registerOnChange(j) {
          this.propagateChange = j;
        }
        registerOnTouched(j) {}
        setDisabledState(j) {
          this.disabled = j;
        }
        writeValue(j) {
          (this.imageUrl = j),
            this.imageUrl
              ? (this.safeImageUrl = this.sanitizer.bypassSecurityTrustUrl(
                  this.imageUrl
                ))
              : (this.safeImageUrl = null);
        }
        updateModel() {
          this.cd.markForCheck(), this.propagateChange(this.imageUrl);
        }
        clearImage() {
          (this.imageUrl = null),
            (this.safeImageUrl = null),
            this.updateModel();
        }
      }
      (N.ɵfac = function (j) {
        return new (j || N)(
          e.ɵɵdirectiveInject(i.Store),
          e.ɵɵdirectiveInject(s.F),
          e.ɵɵdirectiveInject(g.DomSanitizer),
          e.ɵɵdirectiveInject(d.x),
          e.ɵɵdirectiveInject(D.TranslateService),
          e.ɵɵdirectiveInject(o.FileSizePipe),
          e.ɵɵdirectiveInject(e.ChangeDetectorRef)
        );
      }),
        (N.ɵcmp = e.ɵɵdefineComponent({
          type: N,
          selectors: [["tb-image-input"]],
          viewQuery: function (j, F) {
            if ((1 & j && e.ɵɵviewQuery(E, 7), 2 & j)) {
              let V;
              e.ɵɵqueryRefresh((V = e.ɵɵloadQuery())) && (F.flow = V.first);
            }
          },
          inputs: {
            label: "label",
            maxSizeByte: "maxSizeByte",
            required: "required",
            disabled: "disabled",
            showClearButton: "showClearButton",
            showPreview: "showPreview",
            inputId: "inputId",
          },
          features: [
            e.ɵɵProvidersFeature([
              {
                provide: a.NG_VALUE_ACCESSOR,
                useExisting: (0, e.forwardRef)(() => N),
                multi: !0,
              },
            ]),
            e.ɵɵInheritDefinitionFeature,
          ],
          decls: 9,
          vars: 7,
          consts: [
            [1, "tb-container"],
            ["class", "tb-title", 3, "ngClass", 4, "ngIf"],
            [3, "flowConfig"],
            ["flow", "flow"],
            [1, "tb-image-select-container"],
            ["class", "image-container", 4, "ngIf"],
            [
              "class",
              "drop-area tb-flow-drop",
              "flowDrop",
              "",
              3,
              "ngClass",
              "flow",
              4,
              "ngIf",
            ],
            ["class", "tb-image-clear-container full-height", 4, "ngIf"],
            [
              "class",
              "tb-hint",
              "translate",
              "",
              3,
              "translateParams",
              4,
              "ngIf",
            ],
            [1, "tb-title", 3, "ngClass"],
            [1, "image-container"],
            [1, "image-content-container", 3, "ngClass"],
            [1, "tb-image-preview-container"],
            [4, "ngIf", "ngIfElse"],
            ["elseBlock", ""],
            ["class", "tb-image-clear-container", 4, "ngIf"],
            [1, "tb-image-preview", 3, "src"],
            [1, "tb-image-clear-container"],
            [
              "mat-button",
              "",
              "mat-icon-button",
              "",
              "color",
              "primary",
              "type",
              "button",
              "matTooltipPosition",
              "above",
              3,
              "matTooltip",
              "click",
            ],
            [
              "flowDrop",
              "",
              1,
              "drop-area",
              "tb-flow-drop",
              3,
              "ngClass",
              "flow",
            ],
            [1, "upload-label"],
            ["translate", ""],
            [
              "type",
              "button",
              "mat-button",
              "",
              "color",
              "primary",
              1,
              "browse-file",
            ],
            [3, "for"],
            [
              "flowButton",
              "",
              "type",
              "file",
              1,
              "file-input",
              3,
              "flow",
              "flowAttributes",
              "id",
            ],
            [1, "tb-image-clear-container", "full-height"],
            ["translate", "", 1, "tb-hint", 3, "translateParams"],
          ],
          template: function (j, F) {
            1 & j &&
              (e.ɵɵelementStart(0, "div", 0),
              e.ɵɵtemplate(1, v, 2, 5, "label", 1),
              e.ɵɵelementContainerStart(2, 2, 3),
              e.ɵɵelementStart(4, "div", 4),
              e.ɵɵtemplate(5, w, 7, 6, "div", 5),
              e.ɵɵtemplate(6, u, 11, 12, "div", 6),
              e.ɵɵtemplate(7, f, 5, 3, "div", 7),
              e.ɵɵelementEnd(),
              e.ɵɵelementContainerEnd(),
              e.ɵɵtemplate(8, L, 3, 5, "div", 8),
              e.ɵɵelementEnd()),
              2 & j &&
                (e.ɵɵadvance(1),
                e.ɵɵproperty("ngIf", F.label),
                e.ɵɵadvance(1),
                e.ɵɵproperty("flowConfig", e.ɵɵpureFunction0(6, k)),
                e.ɵɵadvance(3),
                e.ɵɵproperty("ngIf", F.showPreview),
                e.ɵɵadvance(1),
                e.ɵɵproperty("ngIf", !F.disabled),
                e.ɵɵadvance(1),
                e.ɵɵproperty(
                  "ngIf",
                  !F.showPreview && F.showClearButton && !F.disabled
                ),
                e.ɵɵadvance(1),
                e.ɵɵproperty("ngIf", F.maxSizeByte && !F.disabled));
          },
          directives: [
            y.NgIf,
            m.be,
            y.NgClass,
            r.DefaultClassDirective,
            h.MatButton,
            p.MatTooltip,
            _.MatIcon,
            m.W,
            D.TranslateDirective,
            m.Hq,
          ],
          pipes: [D.TranslatePipe, o.FileSizePipe],
          styles: [
            '@charset "UTF-8";[_nghost-%COMP%]   .tb-container[_ngcontent-%COMP%]{margin-top:0}[_nghost-%COMP%]   .tb-container[_ngcontent-%COMP%]   label.tb-title[_ngcontent-%COMP%]{display:block;padding-bottom:8px}[_nghost-%COMP%]   .tb-image-select-container[_ngcontent-%COMP%]{position:relative;width:100%;height:120px}[_nghost-%COMP%]   .image-container[_ngcontent-%COMP%]{position:relative;float:left;height:120px;padding:12px;margin-right:8px;background:rgba(0,0,0,.03);border-radius:4px}[_nghost-%COMP%]   .image-content-container[_ngcontent-%COMP%]{background:#FFFFFF;border:1px solid rgba(0,0,0,.2);border-radius:4px;padding-left:8px;height:96px}[_nghost-%COMP%]   .image-content-container.no-padding[_ngcontent-%COMP%]{padding-left:0}[_nghost-%COMP%]   .tb-image-preview[_ngcontent-%COMP%]{width:auto;max-width:94px;height:auto;max-height:94px}[_nghost-%COMP%]   .tb-image-preview-container[_ngcontent-%COMP%]{position:relative;float:left;width:96px;height:96px;margin-top:-1px;margin-bottom:-1px;border:1px solid rgba(0,0,0,.54)}[_nghost-%COMP%]   .tb-image-preview-container[_ngcontent-%COMP%]   div[_ngcontent-%COMP%]{width:100%;font-size:18px;text-align:center}[_nghost-%COMP%]   .tb-image-preview-container[_ngcontent-%COMP%]   div[_ngcontent-%COMP%], [_nghost-%COMP%]   .tb-image-preview-container[_ngcontent-%COMP%]   .tb-image-preview[_ngcontent-%COMP%]{position:absolute;top:50%;left:50%;transform:translate(-50%,-50%)}[_nghost-%COMP%]   .tb-image-clear-container[_ngcontent-%COMP%]{position:relative;float:right;height:96px;display:flex;align-items:center}[_nghost-%COMP%]   .tb-image-clear-container.full-height[_ngcontent-%COMP%]{height:120px}[_nghost-%COMP%]   .file-input[_ngcontent-%COMP%]{display:none}[_nghost-%COMP%]   .tb-flow-drop[_ngcontent-%COMP%]{position:relative;height:120px;overflow:hidden;border:2px dashed rgba(0,0,0,.2);border-radius:4px;box-sizing:border-box}[_nghost-%COMP%]   .tb-flow-drop.float-left[_ngcontent-%COMP%]{float:left}[_nghost-%COMP%]   .tb-flow-drop[_ngcontent-%COMP%]   .upload-label[_ngcontent-%COMP%]{width:100%;height:100%;padding:0 16px;display:flex;flex-direction:row;justify-content:center;align-items:center;font-size:16px;color:#0000008a;text-align:center}[_nghost-%COMP%]   .tb-flow-drop[_ngcontent-%COMP%]   .upload-label[_ngcontent-%COMP%]   .mat-icon[_ngcontent-%COMP%]{margin-right:17px}[_nghost-%COMP%]   .tb-hint[_ngcontent-%COMP%]{margin-top:8px}[_nghost-%COMP%]     button.browse-file{padding:0;font-size:16px}[_nghost-%COMP%]     button.browse-file span.mat-button-wrapper{display:block}[_nghost-%COMP%]     button.browse-file span.mat-button-wrapper label{display:block;cursor:pointer;padding:0 16px}',
          ],
        }));
    },
    487: (ee, R, t) => {
      "use strict";
      t.r(R), t.d(R, { JsFuncComponent: () => b });
      var e = t(37716),
        n = t(3679),
        a = t(72145),
        C = t(39490),
        s = t(65264),
        d = t(1361),
        o = t(41960),
        i = t(25280),
        g = t(30290),
        D = t(30013),
        y = t(29790),
        m = t(86710);
      const r = ["javascriptEditor"],
        h = function (S, u) {
          return { "tb-error": S, "tb-required": u };
        };
      function p(S, u) {
        if (
          (1 & S &&
            (e.ɵɵelementStart(0, "label", 14), e.ɵɵtext(1), e.ɵɵelementEnd()),
          2 & S)
        ) {
          const f = e.ɵɵnextContext();
          e.ɵɵproperty(
            "ngClass",
            e.ɵɵpureFunction2(
              2,
              h,
              !f.disabled &&
                (f.hasErrors ||
                  !f.functionValid ||
                  (f.required && !f.modelValue)),
              !f.disabled && f.required
            )
          ),
            e.ɵɵadvance(1),
            e.ɵɵtextInterpolate(
              f.functionTitle + ": f(" + f.functionArgsString + ")"
            );
        }
      }
      function _(S, u) {
        if (
          (1 & S &&
            (e.ɵɵelementStart(0, "label", 14), e.ɵɵtext(1), e.ɵɵelementEnd()),
          2 & S)
        ) {
          const f = e.ɵɵnextContext();
          e.ɵɵproperty(
            "ngClass",
            e.ɵɵpureFunction2(
              2,
              h,
              !f.disabled &&
                (f.hasErrors ||
                  !f.functionValid ||
                  (f.required && !f.modelValue)),
              !f.disabled && f.required
            )
          ),
            e.ɵɵadvance(1),
            e.ɵɵtextInterpolate(
              "function " +
                (f.functionName ? f.functionName : "") +
                "(" +
                f.functionArgsString +
                ") {"
            );
        }
      }
      function E(S, u) {
        if (1 & S) {
          const f = e.ɵɵgetCurrentView();
          e.ɵɵelementStart(0, "button", 15),
            e.ɵɵlistener("click", function () {
              return e.ɵɵrestoreView(f), e.ɵɵnextContext().beautifyJs();
            }),
            e.ɵɵtext(1),
            e.ɵɵpipe(2, "translate"),
            e.ɵɵelementEnd();
        }
        2 & S &&
          (e.ɵɵadvance(1),
          e.ɵɵtextInterpolate1(" ", e.ɵɵpipeBind1(2, 1, "js-func.tidy"), " "));
      }
      function c(S, u) {
        if ((1 & S && e.ɵɵelement(0, "div", 16), 2 & S)) {
          const f = e.ɵɵnextContext();
          e.ɵɵproperty("tb-help-popup", f.helpId);
        }
      }
      const v = function (S) {
        return { "tb-error": S };
      };
      function I(S, u) {
        if (
          (1 & S &&
            (e.ɵɵelementStart(0, "div", 17),
            e.ɵɵelementStart(1, "label", 14),
            e.ɵɵtext(2, "}"),
            e.ɵɵelementEnd(),
            e.ɵɵelementEnd()),
          2 & S)
        ) {
          const f = e.ɵɵnextContext();
          e.ɵɵadvance(1),
            e.ɵɵproperty(
              "ngClass",
              e.ɵɵpureFunction1(
                1,
                v,
                f.hasErrors || !f.functionValid || (f.required && !f.modelValue)
              )
            );
        }
      }
      const l = function (S, u, f) {
          return { "tb-disabled": S, "fill-height": u, "tb-js-func-title": f };
        },
        T = function () {
          return {};
        },
        O = function (S) {
          return { minHeight: S };
        },
        w = function (S) {
          return { "fill-height": S };
        };
      class b {
        constructor(u, f, M, L, k, N) {
          (this.elementRef = u),
            (this.utils = f),
            (this.translate = M),
            (this.store = L),
            (this.raf = k),
            (this.cd = N),
            (this.ignoreChange = !1),
            (this.toastTargetId = `jsFuncEditor-${(0, o.M8)()}`),
            (this.minHeight = "200px"),
            (this.disableUndefinedCheck = !1),
            (this.functionArgsString = ""),
            (this.fullscreen = !1),
            (this.functionValid = !0),
            (this.errorShowed = !1),
            (this.errorMarkers = []),
            (this.errorAnnotationId = -1),
            (this.propagateChange = null),
            (this.hasErrors = !1);
        }
        get noValidate() {
          return this.noValidateValue;
        }
        set noValidate(u) {
          this.noValidateValue = (0, C.coerceBooleanProperty)(u);
        }
        get required() {
          return this.requiredValue;
        }
        set required(u) {
          this.requiredValue = (0, C.coerceBooleanProperty)(u);
        }
        ngOnInit() {
          (!this.resultType || 0 === this.resultType.length) &&
            (this.resultType = "nocheck"),
            this.functionArgs &&
              this.functionArgs.forEach((L) => {
                this.functionArgsString.length > 0 &&
                  (this.functionArgsString += ", "),
                  (this.functionArgsString += L);
              });
          const u = this.javascriptEditorElmRef.nativeElement;
          let f = {
            mode: "ace/mode/javascript",
            showGutter: !0,
            showPrintMargin: !0,
            readOnly: this.disabled,
          };
          (f = Object.assign(Object.assign({}, f), {
            enableSnippets: !0,
            enableBasicAutocompletion: !0,
            enableLiveAutocompletion: !0,
          })),
            (0, a.Ln)().subscribe((L) => {
              if (
                ((this.jsEditor = L.edit(u, f)),
                this.jsEditor.session.setUseWrapMode(!0),
                this.jsEditor.setValue(
                  this.modelValue ? this.modelValue : "",
                  -1
                ),
                this.jsEditor.setReadOnly(this.disabled),
                this.jsEditor.on("change", () => {
                  this.ignoreChange ||
                    (this.cleanupJsErrors(), this.updateView());
                }),
                this.disableUndefinedCheck ||
                  this.jsEditor.session.on("changeAnnotation", () => {
                    const k = this.jsEditor.session.getAnnotations();
                    k
                      .filter((B) => B.text.includes("is not defined"))
                      .forEach((B) => {
                        B.type = "error";
                      }),
                      this.jsEditor.renderer.setAnnotations(k);
                    const N = k.filter((B) => "error" === B.type).length > 0;
                    this.hasErrors !== N &&
                      ((this.hasErrors = N),
                      this.propagateChange(this.modelValue),
                      this.cd.markForCheck());
                  }),
                this.jsEditor.session.$worker)
              ) {
                const k = {
                  undef: !this.disableUndefinedCheck,
                  unused: !0,
                  globals: {},
                };
                !this.disableUndefinedCheck &&
                  this.functionArgs &&
                  this.functionArgs.forEach((N) => {
                    k.globals[N] = !1;
                  }),
                  !this.disableUndefinedCheck &&
                    this.globalVariables &&
                    this.globalVariables.forEach((N) => {
                      k.globals[N] = !1;
                    }),
                  this.jsEditor.session.$worker.send("changeOptions", [k]);
              }
              this.editorCompleter &&
                (this.jsEditor.completers = [
                  this.editorCompleter,
                  ...(this.jsEditor.completers || []),
                ]),
                (this.editorResize$ = new g.do(() => {
                  this.onAceEditorResize();
                })),
                this.editorResize$.observe(u);
            });
        }
        ngOnDestroy() {
          this.editorResize$ && this.editorResize$.disconnect(),
            this.jsEditor && this.jsEditor.destroy();
        }
        onAceEditorResize() {
          this.editorsResizeCaf &&
            (this.editorsResizeCaf(), (this.editorsResizeCaf = null)),
            (this.editorsResizeCaf = this.raf.raf(() => {
              this.jsEditor.resize(), this.jsEditor.renderer.updateFull();
            }));
        }
        registerOnChange(u) {
          this.propagateChange = u;
        }
        registerOnTouched(u) {}
        setDisabledState(u) {
          (this.disabled = u),
            this.jsEditor && this.jsEditor.setReadOnly(this.disabled);
        }
        validate(u) {
          return this.functionValid && !this.hasErrors
            ? null
            : { jsFunc: { valid: !1 } };
        }
        beautifyJs() {
          (0, D.Jx)(this.modelValue, {
            indent_size: 4,
            wrap_line_length: 60,
          }).subscribe((u) => {
            this.jsEditor.setValue(u || "", -1), this.updateView();
          });
        }
        validateOnSubmit() {
          this.disabled ||
            (this.cleanupJsErrors(),
            (this.functionValid = this.validateJsFunc()),
            this.functionValid ||
              (this.propagateChange(this.modelValue),
              this.cd.markForCheck(),
              this.store.dispatch(
                new s.zi({
                  message: this.validationError,
                  type: "error",
                  target: this.toastTargetId,
                  verticalPosition: "bottom",
                  horizontalPosition: "left",
                })
              ),
              (this.errorShowed = !0)));
        }
        validateJsFunc() {
          try {
            const u = new Function(this.functionArgsString, this.modelValue);
            if (this.noValidate) return !0;
            if (this.validationArgs) {
              let f, M;
              for (const L of this.validationArgs)
                try {
                  (f = u.apply(this, L)), (M = null);
                  break;
                } catch (k) {
                  M = k;
                }
              if (M) throw M;
              if ("nocheck" !== this.resultType)
                if ("any" === this.resultType) {
                  if ((0, o.o8)(f))
                    return (
                      (this.validationError = this.translate.instant(
                        "js-func.no-return-error"
                      )),
                      !1
                    );
                } else if (typeof f !== this.resultType)
                  return (
                    (this.validationError = this.translate.instant(
                      "js-func.return-type-mismatch",
                      { type: this.resultType }
                    )),
                    !1
                  );
              return !0;
            }
            return !0;
          } catch (u) {
            const f = this.utils.parseException(u);
            let M = "Error:";
            if (
              (f.name && (M += " " + f.name + ":"),
              f.message && (M += " " + f.message),
              f.lineNumber &&
                ((M += "<br>Line " + f.lineNumber),
                f.columnNumber && (M += " column " + f.columnNumber),
                (M += " of script.")),
              (this.validationError = M),
              f.lineNumber)
            ) {
              const L = f.lineNumber - 1;
              let k = 0;
              f.columnNumber && (k = f.columnNumber);
              const N = this.jsEditor.session.addMarker(
                new a.e6(L, 0, L, 1 / 0),
                "ace_active-line",
                "screenLine"
              );
              this.errorMarkers.push(N);
              const B = this.jsEditor.session.getAnnotations(),
                j = { row: L, column: k, text: f.message, type: "error" };
              (this.errorAnnotationId = B.push(j) - 1),
                this.jsEditor.session.setAnnotations(B);
            }
            return !1;
          }
        }
        cleanupJsErrors() {
          if (
            (this.errorShowed &&
              (this.store.dispatch(new s.VD({ target: this.toastTargetId })),
              (this.errorShowed = !1)),
            this.errorMarkers.forEach((u) => {
              this.jsEditor.session.removeMarker(u);
            }),
            (this.errorMarkers.length = 0),
            this.errorAnnotationId > -1)
          ) {
            const u = this.jsEditor.session.getAnnotations();
            u.splice(this.errorAnnotationId, 1),
              this.jsEditor.session.setAnnotations(u),
              (this.errorAnnotationId = -1);
          }
        }
        writeValue(u) {
          (this.modelValue = u),
            this.jsEditor &&
              ((this.ignoreChange = !0),
              this.jsEditor.setValue(
                this.modelValue ? this.modelValue : "",
                -1
              ),
              (this.ignoreChange = !1));
        }
        updateView() {
          const u = this.jsEditor.getValue();
          this.modelValue !== u &&
            ((this.modelValue = u),
            (this.functionValid = !0),
            this.propagateChange(this.modelValue),
            this.cd.markForCheck());
        }
      }
      (b.ɵfac = function (u) {
        return new (u || b)(
          e.ɵɵdirectiveInject(e.ElementRef),
          e.ɵɵdirectiveInject(d.F),
          e.ɵɵdirectiveInject(y.TranslateService),
          e.ɵɵdirectiveInject(m.Store),
          e.ɵɵdirectiveInject(i.i),
          e.ɵɵdirectiveInject(e.ChangeDetectorRef)
        );
      }),
        (b.ɵcmp = e.ɵɵdefineComponent({
          type: b,
          selectors: [["tb-js-func"]],
          viewQuery: function (u, f) {
            if ((1 & u && e.ɵɵviewQuery(r, 7), 2 & u)) {
              let M;
              e.ɵɵqueryRefresh((M = e.ɵɵloadQuery())) &&
                (f.javascriptEditorElmRef = M.first);
            }
          },
          inputs: {
            functionTitle: "functionTitle",
            functionName: "functionName",
            functionArgs: "functionArgs",
            validationArgs: "validationArgs",
            resultType: "resultType",
            disabled: "disabled",
            fillHeight: "fillHeight",
            minHeight: "minHeight",
            editorCompleter: "editorCompleter",
            globalVariables: "globalVariables",
            disableUndefinedCheck: "disableUndefinedCheck",
            helpId: "helpId",
            noValidate: "noValidate",
            required: "required",
          },
          features: [
            e.ɵɵProvidersFeature([
              {
                provide: n.NG_VALUE_ACCESSOR,
                useExisting: (0, e.forwardRef)(() => b),
                multi: !0,
              },
              {
                provide: n.NG_VALIDATORS,
                useExisting: (0, e.forwardRef)(() => b),
                multi: !0,
              },
            ]),
          ],
          decls: 17,
          vars: 23,
          consts: [
            [
              "tb-fullscreen",
              "",
              "fxLayout",
              "column",
              1,
              "tb-js-func",
              2,
              "background",
              "#fff",
              3,
              "ngClass",
              "fullscreen",
            ],
            [
              "fxLayout",
              "row",
              "fxLayoutAlign",
              "start center",
              1,
              "tb-js-func-toolbar",
              2,
              "height",
              "40px",
            ],
            ["class", "tb-title no-padding", 3, "ngClass", 4, "ngIf"],
            ["fxFlex", ""],
            [
              "type",
              "button",
              "mat-button",
              "",
              "class",
              "tidy",
              3,
              "click",
              4,
              "ngIf",
            ],
            [3, "tb-help-popup", 4, "ngIf"],
            [2, "width", "initial"],
            [
              "matTooltipPosition",
              "above",
              2,
              "border-radius",
              "50%",
              3,
              "matTooltip",
              "click",
            ],
            [
              "type",
              "button",
              "mat-button",
              "",
              "mat-icon-button",
              "",
              1,
              "tb-mat-32",
            ],
            [1, "material-icons"],
            [
              "id",
              "tb-javascript-panel",
              "fxLayout",
              "column",
              "tb-toast",
              "",
              1,
              "tb-js-func-panel",
              3,
              "toastTarget",
            ],
            ["id", "tb-javascript-input", 3, "ngStyle", "ngClass"],
            ["javascriptEditor", ""],
            [
              "fxLayout",
              "row",
              "fxLayoutAlign",
              "start center",
              "style",
              "height: 40px;",
              4,
              "ngIf",
            ],
            [1, "tb-title", "no-padding", 3, "ngClass"],
            ["type", "button", "mat-button", "", 1, "tidy", 3, "click"],
            [3, "tb-help-popup"],
            [
              "fxLayout",
              "row",
              "fxLayoutAlign",
              "start center",
              2,
              "height",
              "40px",
            ],
          ],
          template: function (u, f) {
            1 & u &&
              (e.ɵɵelementStart(0, "div", 0),
              e.ɵɵelementStart(1, "div", 1),
              e.ɵɵtemplate(2, p, 2, 5, "label", 2),
              e.ɵɵtemplate(3, _, 2, 5, "label", 2),
              e.ɵɵelement(4, "span", 3),
              e.ɵɵtemplate(5, E, 3, 3, "button", 4),
              e.ɵɵtemplate(6, c, 1, 1, "div", 5),
              e.ɵɵelementStart(7, "fieldset", 6),
              e.ɵɵelementStart(8, "div", 7),
              e.ɵɵlistener("click", function () {
                return (f.fullscreen = !f.fullscreen);
              }),
              e.ɵɵpipe(9, "translate"),
              e.ɵɵelementStart(10, "button", 8),
              e.ɵɵelementStart(11, "mat-icon", 9),
              e.ɵɵtext(12),
              e.ɵɵelementEnd(),
              e.ɵɵelementEnd(),
              e.ɵɵelementEnd(),
              e.ɵɵelementEnd(),
              e.ɵɵelementEnd(),
              e.ɵɵelementStart(13, "div", 10),
              e.ɵɵelement(14, "div", 11, 12),
              e.ɵɵelementEnd(),
              e.ɵɵtemplate(16, I, 3, 3, "div", 13),
              e.ɵɵelementEnd()),
              2 & u &&
                (e.ɵɵproperty(
                  "ngClass",
                  e.ɵɵpureFunction3(
                    14,
                    l,
                    f.disabled,
                    f.fillHeight,
                    f.functionTitle
                  )
                )("fullscreen", f.fullscreen),
                e.ɵɵadvance(2),
                e.ɵɵproperty("ngIf", f.functionTitle),
                e.ɵɵadvance(1),
                e.ɵɵproperty("ngIf", !f.functionTitle),
                e.ɵɵadvance(2),
                e.ɵɵproperty("ngIf", !f.disabled),
                e.ɵɵadvance(1),
                e.ɵɵproperty("ngIf", f.helpId),
                e.ɵɵadvance(2),
                e.ɵɵpropertyInterpolate(
                  "matTooltip",
                  e.ɵɵpipeBind1(
                    9,
                    12,
                    f.fullscreen ? "fullscreen.exit" : "fullscreen.expand"
                  )
                ),
                e.ɵɵadvance(4),
                e.ɵɵtextInterpolate(
                  f.fullscreen ? "fullscreen_exit" : "fullscreen"
                ),
                e.ɵɵadvance(1),
                e.ɵɵpropertyInterpolate("toastTarget", f.toastTargetId),
                e.ɵɵadvance(1),
                e.ɵɵproperty(
                  "ngStyle",
                  f.fillHeight
                    ? e.ɵɵpureFunction0(18, T)
                    : e.ɵɵpureFunction1(19, O, f.minHeight)
                )("ngClass", e.ɵɵpureFunction1(21, w, f.fillHeight)),
                e.ɵɵadvance(2),
                e.ɵɵproperty("ngIf", !f.functionTitle));
          },
          styles: [
            '@charset "UTF-8";.tb-js-func{position:relative}.tb-js-func.tb-disabled{color:#00000061}.tb-js-func.fill-height{height:100%}.tb-js-func:not(.tb-js-func-title) .tb-js-func-panel{margin-left:15px}.tb-js-func.tb-js-func-title .tb-js-func-panel{height:calc(100% - 40px)}.tb-js-func .tb-js-func-panel{height:calc(100% - 80px);border:1px solid #c0c0c0}.tb-js-func .tb-js-func-panel #tb-javascript-input{width:100%;min-width:200px;height:100%}.tb-js-func:not(.tb-fullscreen).tb-js-func-title{padding-bottom:15px}.tb-js-func .tb-js-func-toolbar>*:not(:last-child){margin-right:4px}.tb-js-func .tb-js-func-toolbar button.mat-button,.tb-js-func .tb-js-func-toolbar button.mat-icon-button,.tb-js-func .tb-js-func-toolbar button.mat-icon-button.tb-mat-32{background:rgba(220,220,220,.35);align-items:center;vertical-align:middle;min-width:32px;min-height:15px;padding:4px;font-size:.8rem;line-height:15px}.tb-js-func .tb-js-func-toolbar button.mat-button:not(.tb-help-popup-button),.tb-js-func .tb-js-func-toolbar button.mat-icon-button:not(.tb-help-popup-button),.tb-js-func .tb-js-func-toolbar button.mat-icon-button.tb-mat-32:not(.tb-help-popup-button){color:#7b7b7b}.tb-js-func .tb-js-func-toolbar .tb-help-popup-button-loading{background:#f3f3f3}\n',
          ],
          encapsulation: 2,
        }));
    },
    26424: (ee, R, t) => {
      "use strict";
      t.r(R), t.d(R, { JsonContentComponent: () => E });
      var e = t(37716),
        n = t(3679),
        a = t(39490),
        C = t(65264),
        s = t(82068),
        d = t(25280),
        o = t(41960),
        i = t(30290),
        g = t(72145),
        D = t(30013),
        y = t(86710);
      const m = ["jsonEditor"];
      function r(c, v) {
        if (1 & c) {
          const I = e.ɵɵgetCurrentView();
          e.ɵɵelementStart(0, "button", 12),
            e.ɵɵlistener("click", function () {
              return e.ɵɵrestoreView(I), e.ɵɵnextContext().beautifyJSON();
            }),
            e.ɵɵtext(1),
            e.ɵɵpipe(2, "translate"),
            e.ɵɵelementEnd();
        }
        2 & c &&
          (e.ɵɵadvance(1),
          e.ɵɵtextInterpolate1(" ", e.ɵɵpipeBind1(2, 1, "js-func.tidy"), " "));
      }
      function h(c, v) {
        if (1 & c) {
          const I = e.ɵɵgetCurrentView();
          e.ɵɵelementStart(0, "button", 12),
            e.ɵɵlistener("click", function () {
              return e.ɵɵrestoreView(I), e.ɵɵnextContext().minifyJSON();
            }),
            e.ɵɵtext(1),
            e.ɵɵpipe(2, "translate"),
            e.ɵɵelementEnd();
        }
        2 & c &&
          (e.ɵɵadvance(1),
          e.ɵɵtextInterpolate1(" ", e.ɵɵpipeBind1(2, 1, "js-func.mini"), " "));
      }
      const p = function (c) {
          return { "fill-height": c };
        },
        _ = function (c, v) {
          return { "tb-error": c, "tb-required": v };
        };
      class E {
        constructor(v, I, l, T) {
          (this.elementRef = v),
            (this.store = I),
            (this.raf = l),
            (this.cd = T),
            (this.ignoreChange = !1),
            (this.toastTargetId = `jsonContentEditor-${(0, o.M8)()}`),
            (this.fullscreen = !1),
            (this.errorShowed = !1),
            (this.propagateChange = null);
        }
        get readonly() {
          return this.readonlyValue;
        }
        set readonly(v) {
          this.readonlyValue = (0, a.coerceBooleanProperty)(v);
        }
        get validateContent() {
          return this.validateContentValue;
        }
        set validateContent(v) {
          this.validateContentValue = (0, a.coerceBooleanProperty)(v);
        }
        get validateOnChange() {
          return this.validateOnChangeValue;
        }
        set validateOnChange(v) {
          this.validateOnChangeValue = (0, a.coerceBooleanProperty)(v);
        }
        get required() {
          return this.requiredValue;
        }
        set required(v) {
          this.requiredValue = (0, a.coerceBooleanProperty)(v);
        }
        ngOnInit() {
          const v = this.jsonEditorElmRef.nativeElement;
          let I = "text";
          this.contentType && (I = s.ac.get(this.contentType).code);
          let l = {
            mode: `ace/mode/${I}`,
            showGutter: !0,
            showPrintMargin: !1,
            readOnly: this.disabled || this.readonly,
          };
          (l = Object.assign(Object.assign({}, l), {
            enableSnippets: !0,
            enableBasicAutocompletion: !0,
            enableLiveAutocompletion: !0,
          })),
            (0, g.Ln)().subscribe((O) => {
              (this.jsonEditor = O.edit(v, l)),
                this.jsonEditor.session.setUseWrapMode(!0),
                this.jsonEditor.setValue(
                  this.contentBody ? this.contentBody : "",
                  -1
                ),
                this.jsonEditor.setReadOnly(this.disabled || this.readonly),
                this.jsonEditor.on("change", () => {
                  this.ignoreChange ||
                    (this.cleanupJsonErrors(), this.updateView());
                }),
                this.validateContent &&
                  this.jsonEditor.on("blur", () => {
                    (this.contentValid = this.doValidate(!0)),
                      this.cd.markForCheck();
                  }),
                (this.editorResize$ = new i.do(() => {
                  this.onAceEditorResize();
                })),
                this.editorResize$.observe(v);
            });
        }
        ngOnDestroy() {
          this.editorResize$ && this.editorResize$.disconnect(),
            this.jsonEditor && this.jsonEditor.destroy();
        }
        onAceEditorResize() {
          this.editorsResizeCaf &&
            (this.editorsResizeCaf(), (this.editorsResizeCaf = null)),
            (this.editorsResizeCaf = this.raf.raf(() => {
              this.jsonEditor.resize(), this.jsonEditor.renderer.updateFull();
            }));
        }
        ngOnChanges(v) {
          for (const I of Object.keys(v)) {
            const l = v[I];
            if (
              !l.firstChange &&
              l.currentValue !== l.previousValue &&
              "contentType" === I &&
              this.jsonEditor
            ) {
              let T = "text";
              this.contentType && (T = s.ac.get(this.contentType).code),
                this.jsonEditor.session.setMode(`ace/mode/${T}`);
            }
          }
        }
        registerOnChange(v) {
          this.propagateChange = v;
        }
        registerOnTouched(v) {}
        setDisabledState(v) {
          (this.disabled = v),
            this.jsonEditor &&
              this.jsonEditor.setReadOnly(this.disabled || this.readonly);
        }
        validate(v) {
          return this.contentValid ? null : { contentBody: { valid: !1 } };
        }
        validateOnSubmit() {
          !this.disabled &&
            !this.readonly &&
            (this.cleanupJsonErrors(),
            (this.contentValid = !0),
            this.propagateChange(this.contentBody),
            (this.contentValid = this.doValidate(!0)),
            this.propagateChange(this.contentBody),
            this.cd.markForCheck());
        }
        doValidate(v = !1) {
          try {
            return (
              this.contentType === s.zc.JSON && JSON.parse(this.contentBody), !0
            );
          } catch (I) {
            if (v) {
              let l = "Error:";
              I.name && (l += " " + I.name + ":"),
                I.message && (l += " " + I.message),
                this.store.dispatch(
                  new C.zi({
                    message: l,
                    type: "error",
                    target: this.toastTargetId,
                    verticalPosition: "bottom",
                    horizontalPosition: "left",
                  })
                ),
                (this.errorShowed = !0);
            }
            return !1;
          }
        }
        cleanupJsonErrors() {
          this.errorShowed &&
            (this.store.dispatch(new C.VD({ target: this.toastTargetId })),
            (this.errorShowed = !1));
        }
        writeValue(v) {
          (this.contentBody = v),
            (this.contentValid = !0),
            this.jsonEditor &&
              ((this.ignoreChange = !0),
              this.jsonEditor.setValue(
                this.contentBody ? this.contentBody : "",
                -1
              ),
              (this.ignoreChange = !1));
        }
        updateView() {
          const v = this.jsonEditor.getValue();
          this.contentBody !== v &&
            ((this.contentBody = v),
            (this.contentValid = !this.validateOnChange || this.doValidate()),
            this.propagateChange(this.contentBody),
            this.cd.markForCheck());
        }
        beautifyJSON() {
          (0, D.Jx)(this.contentBody, {
            indent_size: 4,
            wrap_line_length: 60,
          }).subscribe((v) => {
            this.jsonEditor.setValue(v || "", -1), this.updateView();
          });
        }
        minifyJSON() {
          const v = JSON.stringify(this.contentBody);
          this.jsonEditor.setValue(v || "", -1), this.updateView();
        }
        onFullscreen() {
          this.jsonEditor &&
            setTimeout(() => {
              this.jsonEditor.resize();
            }, 0);
        }
      }
      (E.ɵfac = function (v) {
        return new (v || E)(
          e.ɵɵdirectiveInject(e.ElementRef),
          e.ɵɵdirectiveInject(y.Store),
          e.ɵɵdirectiveInject(d.i),
          e.ɵɵdirectiveInject(e.ChangeDetectorRef)
        );
      }),
        (E.ɵcmp = e.ɵɵdefineComponent({
          type: E,
          selectors: [["tb-json-content"]],
          viewQuery: function (v, I) {
            if ((1 & v && e.ɵɵviewQuery(m, 7), 2 & v)) {
              let l;
              e.ɵɵqueryRefresh((l = e.ɵɵloadQuery())) &&
                (I.jsonEditorElmRef = l.first);
            }
          },
          inputs: {
            label: "label",
            contentType: "contentType",
            disabled: "disabled",
            fillHeight: "fillHeight",
            editorStyle: "editorStyle",
            readonly: "readonly",
            validateContent: "validateContent",
            validateOnChange: "validateOnChange",
            required: "required",
          },
          features: [
            e.ɵɵProvidersFeature([
              {
                provide: n.NG_VALUE_ACCESSOR,
                useExisting: (0, e.forwardRef)(() => E),
                multi: !0,
              },
              {
                provide: n.NG_VALIDATORS,
                useExisting: (0, e.forwardRef)(() => E),
                multi: !0,
              },
            ]),
            e.ɵɵNgOnChangesFeature,
          ],
          decls: 16,
          vars: 20,
          consts: [
            [
              "tb-fullscreen",
              "",
              "fxLayout",
              "column",
              1,
              "tb-json-content",
              2,
              "background",
              "#fff",
              3,
              "ngClass",
              "fullscreen",
              "fullscreenChanged",
            ],
            [
              "fxLayout",
              "row",
              "fxLayoutAlign",
              "start center",
              1,
              "tb-json-content-toolbar",
              2,
              "height",
              "40px",
            ],
            [1, "tb-title", "no-padding", 3, "ngClass"],
            ["fxFlex", ""],
            [
              "type",
              "button",
              "mat-button",
              "",
              "class",
              "tidy",
              3,
              "click",
              4,
              "ngIf",
            ],
            [2, "width", "initial"],
            [
              "matTooltipPosition",
              "above",
              2,
              "border-radius",
              "50%",
              3,
              "matTooltip",
              "click",
            ],
            [
              "type",
              "button",
              "mat-button",
              "",
              "mat-icon-button",
              "",
              1,
              "tb-mat-32",
            ],
            [1, "material-icons"],
            [
              "id",
              "tb-json-panel",
              "tb-toast",
              "",
              "fxLayout",
              "column",
              1,
              "tb-json-content-panel",
              3,
              "toastTarget",
            ],
            ["id", "tb-json-input", 3, "ngStyle", "ngClass"],
            ["jsonEditor", ""],
            ["type", "button", "mat-button", "", 1, "tidy", 3, "click"],
          ],
          template: function (v, I) {
            1 & v &&
              (e.ɵɵelementStart(0, "div", 0),
              e.ɵɵlistener("fullscreenChanged", function () {
                return I.onFullscreen();
              }),
              e.ɵɵelementStart(1, "div", 1),
              e.ɵɵelementStart(2, "label", 2),
              e.ɵɵtext(3),
              e.ɵɵelementEnd(),
              e.ɵɵelement(4, "span", 3),
              e.ɵɵtemplate(5, r, 3, 3, "button", 4),
              e.ɵɵtemplate(6, h, 3, 3, "button", 4),
              e.ɵɵelementStart(7, "fieldset", 5),
              e.ɵɵelementStart(8, "div", 6),
              e.ɵɵlistener("click", function () {
                return (I.fullscreen = !I.fullscreen);
              }),
              e.ɵɵpipe(9, "translate"),
              e.ɵɵelementStart(10, "button", 7),
              e.ɵɵelementStart(11, "mat-icon", 8),
              e.ɵɵtext(12),
              e.ɵɵelementEnd(),
              e.ɵɵelementEnd(),
              e.ɵɵelementEnd(),
              e.ɵɵelementEnd(),
              e.ɵɵelementEnd(),
              e.ɵɵelementStart(13, "div", 9),
              e.ɵɵelement(14, "div", 10, 11),
              e.ɵɵelementEnd(),
              e.ɵɵelementEnd()),
              2 & v &&
                (e.ɵɵproperty(
                  "ngClass",
                  e.ɵɵpureFunction1(13, p, I.fillHeight)
                )("fullscreen", I.fullscreen),
                e.ɵɵadvance(2),
                e.ɵɵproperty(
                  "ngClass",
                  e.ɵɵpureFunction2(
                    15,
                    _,
                    !I.disabled &&
                      (!I.contentValid || (I.required && !I.contentBody)),
                    !I.disabled && I.required
                  )
                ),
                e.ɵɵadvance(1),
                e.ɵɵtextInterpolate(I.label),
                e.ɵɵadvance(2),
                e.ɵɵproperty("ngIf", !I.readonly && !I.disabled),
                e.ɵɵadvance(1),
                e.ɵɵproperty("ngIf", !I.readonly && !I.disabled),
                e.ɵɵadvance(2),
                e.ɵɵpropertyInterpolate(
                  "matTooltip",
                  e.ɵɵpipeBind1(
                    9,
                    11,
                    I.fullscreen ? "fullscreen.exit" : "fullscreen.expand"
                  )
                ),
                e.ɵɵadvance(4),
                e.ɵɵtextInterpolate(
                  I.fullscreen ? "fullscreen_exit" : "fullscreen"
                ),
                e.ɵɵadvance(1),
                e.ɵɵpropertyInterpolate("toastTarget", I.toastTargetId),
                e.ɵɵadvance(1),
                e.ɵɵproperty("ngStyle", I.editorStyle)(
                  "ngClass",
                  e.ɵɵpureFunction1(18, p, I.fillHeight)
                ));
          },
          styles: [
            '@charset "UTF-8";.tb-json-content{position:relative}.tb-json-content.fill-height{height:100%}.tb-json-content:not(.tb-fullscreen){padding-bottom:15px}.tb-json-content .tb-json-content-toolbar button.mat-button,.tb-json-content .tb-json-content-toolbar button.mat-icon-button,.tb-json-content .tb-json-content-toolbar button.mat-icon-button.tb-mat-32{align-items:center;vertical-align:middle;min-width:32px;min-height:15px;padding:4px;margin:0;font-size:.8rem;line-height:15px;color:#7b7b7b;background:rgba(220,220,220,.35)}.tb-json-content .tb-json-content-toolbar button.mat-button:not(:last-child),.tb-json-content .tb-json-content-toolbar button.mat-icon-button:not(:last-child),.tb-json-content .tb-json-content-toolbar button.mat-icon-button.tb-mat-32:not(:last-child){margin-right:4px}.tb-json-content .tb-json-content-panel{height:100%;border:1px solid #c0c0c0}.tb-json-content .tb-json-content-panel #tb-json-input{width:100%;min-width:200px;height:100%}.tb-json-content .tb-json-content-panel #tb-json-input:not(.fill-height){min-height:200px}\n',
          ],
          encapsulation: 2,
        }));
    },
    42998: (ee, R, t) => {
      "use strict";
      t.r(R), t.d(R, { JsonFormComponent: () => I });
      var e = t(37716),
        n = t(3679),
        a = t(39490),
        C = t(41960),
        s = t(23253),
        d = t.n(s),
        o = t(4902),
        g = t(16797),
        D = t(79731),
        y = t(69412),
        m = t(35758),
        r = t(45113),
        h = t(29790),
        p = t(86710),
        _ = t(46743);
      const E = ["reactRoot"],
        c = ["reactFullscreen"],
        v = o;
      class I {
        constructor(T, O, w, b, S, u, f, M) {
          (this.elementRef = T),
            (this.translate = O),
            (this.dialogs = w),
            (this.popoverService = b),
            (this.renderer = S),
            (this.viewContainerRef = u),
            (this.store = f),
            (this.cd = M),
            (this.formProps = {
              isFullscreen: !1,
              option: { formDefaults: { startEmpty: !0 } },
              onModelChange: this.onModelChange.bind(this),
              onColorClick: this.onColorClick.bind(this),
              onIconClick: this.onIconClick.bind(this),
              onToggleFullscreen: this.onToggleFullscreen.bind(this),
              onHelpClick: this.onHelpClick.bind(this),
            }),
            (this.isModelValid = !0),
            (this.isFullscreen = !1),
            (this.propagateChange = null),
            (this.propagateChangePending = !1),
            (this.writingValue = !1),
            (this.updateViewPending = !1);
        }
        get readonly() {
          return this.readonlyValue;
        }
        set required(T) {
          this.readonlyValue = (0, a.coerceBooleanProperty)(T);
        }
        ngOnInit() {}
        ngOnDestroy() {
          this.destroyReactSchemaForm();
        }
        registerOnChange(T) {
          (this.propagateChange = T),
            this.propagateChangePending &&
              ((this.propagateChangePending = !1),
              setTimeout(() => {
                this.propagateChange(this.data);
              }, 0));
        }
        registerOnTouched(T) {}
        setDisabledState(T) {}
        validate(T) {
          return this.isModelValid ? null : { modelValid: !1 };
        }
        writeValue(T) {
          (this.writingValue = !0),
            (this.data = T),
            (this.schema =
              this.data && this.data.schema
                ? (0, C.I8)(this.data.schema)
                : { type: "object" }),
            (this.schema.strict = !0),
            (this.form =
              this.data && this.data.form ? (0, C.I8)(this.data.form) : ["*"]),
            (this.groupInfoes =
              this.data && this.data.groupInfoes
                ? (0, C.I8)(this.data.groupInfoes)
                : []),
            (this.model = (this.data && this.data.model) || {}),
            (this.model = d().sanitize(this.schema, this.model).data),
            this.updateAndRender(),
            (this.isModelValid = this.validateModel()),
            (this.writingValue = !1),
            (!this.isModelValid || this.updateViewPending) && this.updateView();
        }
        updateView() {
          if (this.writingValue) this.updateViewPending = !0;
          else if (((this.updateViewPending = !1), this.data))
            if (((this.data.model = this.model), this.propagateChange))
              try {
                this.propagateChange(this.data);
              } catch (T) {
                this.propagateChangePending = !0;
              }
            else this.propagateChangePending = !0;
        }
        ngOnChanges(T) {
          for (const O of Object.keys(T)) {
            const w = T[O];
            !w.firstChange &&
              w.currentValue !== w.previousValue &&
              "readonly" === O &&
              this.updateAndRender();
          }
        }
        onModelChange(T, O, w = !1) {
          (0, C.HD)(O) && "" === O && (O = void 0),
            (D.Z.updateValue(T, this.model, O) || w) &&
              ((this.isModelValid = this.validateModel()), this.updateView());
        }
        onColorClick(T, O, w) {
          this.dialogs.colorPicker(v(O).toRgbString()).subscribe((b) => {
            b && w && w(v(b).toRgb());
          });
        }
        onIconClick(T, O, w) {
          this.dialogs.materialIconPicker(O).subscribe((b) => {
            b && w && w(b);
          });
        }
        onToggleFullscreen(T) {
          (this.isFullscreen = !this.isFullscreen),
            (this.fullscreenFinishFn = T),
            this.cd.markForCheck();
        }
        onFullscreenChanged(T) {
          (this.formProps.isFullscreen = T),
            this.renderReactSchemaForm(!1),
            this.fullscreenFinishFn &&
              (this.fullscreenFinishFn(
                this.reactFullscreenElmRef.nativeElement
              ),
              (this.fullscreenFinishFn = null));
        }
        onHelpClick(T, O, w, b) {
          const S = T.currentTarget;
          this.popoverService.toggleHelpPopover(
            S,
            this.renderer,
            this.viewContainerRef,
            O,
            "",
            w,
            b
          );
        }
        updateAndRender() {
          (this.formProps.option.formDefaults.readonly = this.readonly),
            (this.formProps.schema = this.schema),
            (this.formProps.form = this.form),
            (this.formProps.groupInfoes = this.groupInfoes),
            (this.formProps.model = this.model),
            this.renderReactSchemaForm();
        }
        renderReactSchemaForm(T = !0) {
          T && this.destroyReactSchemaForm();
          const O = [];
          O.push((0, y.D)(t.e(8139).then(t.t.bind(t, 78139, 19)))),
            O.push((0, y.D)(t.e(8768).then(t.t.bind(t, 88768, 19)))),
            O.push(
              (0, y.D)(
                Promise.all([t.e(8768), t.e(5507)]).then(t.bind(t, 85507))
              )
            ),
            (0, m.D)(O).subscribe((w) => {
              const b = w[0],
                S = w[1],
                u = w[2].default;
              S.render(
                b.createElement(u, this.formProps),
                this.reactRootElmRef.nativeElement
              );
            });
        }
        destroyReactSchemaForm() {
          t.e(8768)
            .then(t.t.bind(t, 88768, 19))
            .then((T) => {
              T.unmountComponentAtNode(this.reactRootElmRef.nativeElement);
            });
        }
        validateModel() {
          return (
            !this.schema ||
            !this.model ||
            D.Z.validateBySchema(this.schema, this.model).valid
          );
        }
      }
      (I.ɵfac = function (T) {
        return new (T || I)(
          e.ɵɵdirectiveInject(e.ElementRef),
          e.ɵɵdirectiveInject(h.TranslateService),
          e.ɵɵdirectiveInject(g.x),
          e.ɵɵdirectiveInject(r.t),
          e.ɵɵdirectiveInject(e.Renderer2),
          e.ɵɵdirectiveInject(e.ViewContainerRef),
          e.ɵɵdirectiveInject(p.Store),
          e.ɵɵdirectiveInject(e.ChangeDetectorRef)
        );
      }),
        (I.ɵcmp = e.ɵɵdefineComponent({
          type: I,
          selectors: [["tb-json-form"]],
          viewQuery: function (T, O) {
            if ((1 & T && (e.ɵɵviewQuery(E, 7), e.ɵɵviewQuery(c, 7)), 2 & T)) {
              let w;
              e.ɵɵqueryRefresh((w = e.ɵɵloadQuery())) &&
                (O.reactRootElmRef = w.first),
                e.ɵɵqueryRefresh((w = e.ɵɵloadQuery())) &&
                  (O.reactFullscreenElmRef = w.first);
            }
          },
          inputs: { required: "required" },
          features: [
            e.ɵɵProvidersFeature([
              {
                provide: n.NG_VALUE_ACCESSOR,
                useExisting: (0, e.forwardRef)(() => I),
                multi: !0,
              },
              {
                provide: n.NG_VALIDATORS,
                useExisting: (0, e.forwardRef)(() => I),
                multi: !0,
              },
            ]),
            e.ɵɵNgOnChangesFeature,
          ],
          decls: 5,
          vars: 2,
          consts: [
            [
              "tb-fullscreen",
              "",
              1,
              "tb-json-form",
              2,
              "background",
              "#fff",
              3,
              "fullscreenElement",
              "fullscreen",
              "fullscreenChanged",
            ],
            ["reactRoot", ""],
            [1, "tb-json-form"],
            ["reactFullscreen", ""],
          ],
          template: function (T, O) {
            if (
              (1 & T &&
                (e.ɵɵelementStart(0, "div", 0),
                e.ɵɵlistener("fullscreenChanged", function (b) {
                  return O.onFullscreenChanged(b);
                }),
                e.ɵɵelement(1, "div", null, 1),
                e.ɵɵelement(3, "div", 2, 3),
                e.ɵɵelementEnd()),
              2 & T)
            ) {
              const w = e.ɵɵreference(4);
              e.ɵɵproperty("fullscreenElement", w)(
                "fullscreen",
                O.isFullscreen
              );
            }
          },
          directives: [_.FullscreenDirective],
          styles: [
            '@charset "UTF-8";.tb-json-form{padding:12px;padding-bottom:14px!important;overflow:auto}\n',
          ],
          encapsulation: 2,
        }));
    },
    79731: (ee, R, t) => {
      "use strict";
      t.d(R, { Z: () => j });
      var e = t(96413),
        a = t(35754),
        C = t.n(a),
        s = t(23815),
        d = t.n(s),
        o = t(41960);
      function D(F) {
        if (Array.isArray(F) && 2 === F.length) {
          if ("null" === F[0]) return F[1];
          if ("null" === F[1]) return F[0];
        }
        return F;
      }
      const y = (F) => {
          const V = [];
          return (
            F.forEach((P) => {
              V.push({ name: P, value: P });
            }),
            V
          );
        },
        m = (F, V) => {
          if (!d().isArray(F)) {
            const P = [];
            if (V)
              V.forEach((A) => {
                P.push({ name: F[A], value: A });
              });
            else
              for (const A of Object.keys(F))
                F.hasOwnProperty(A) && P.push({ name: A, value: F[A] });
            return P;
          }
          return F;
        },
        r = (F, V, P) => {
          const A =
            (P = P || {}).global && P.global.formDefaults
              ? d().cloneDeep(P.global.formDefaults)
              : {};
          return (
            P.global && !0 === P.global.supressPropertyTitles
              ? (A.title = V.title)
              : (A.title = V.title || F),
            V.description && (A.description = V.description),
            (!0 === P.required || !0 === V.required) && (A.required = !0),
            V.maxLength && (A.maxlength = V.maxLength),
            V.minLength && (A.minlength = V.minLength),
            (V.readOnly || V.readonly) && (A.readonly = !0),
            V.minimum && (A.minimum = V.minimum + (V.exclusiveMinimum ? 1 : 0)),
            V.maximum && (A.maximum = V.maximum - (V.exclusiveMaximum ? 1 : 0)),
            V.validationMessage && (A.validationMessage = V.validationMessage),
            V.enumNames && (A.titleMap = m(V.enumNames, V.enum)),
            (A.schema = V),
            (A.ngModelOptions = A.ngModelOptions || {}),
            A
          );
        },
        O = {
          string: [
            (F, V, P) => {
              if ("string" === D(V.type) && V.enum) {
                const A = r(F, V, P);
                return (
                  (A.key = P.path),
                  (A.type = "select"),
                  A.titleMap || (A.titleMap = y(V.enum)),
                  (P.lookup[C().stringify(P.path)] = A),
                  A
                );
              }
            },
            (F, V, P) => {
              if ("string" === D(V.type) && !V.enum) {
                const A = r(F, V, P);
                return (
                  (A.key = P.path),
                  (A.type = "text"),
                  (P.lookup[C().stringify(P.path)] = A),
                  A
                );
              }
            },
          ],
          object: [
            (F, V, P) => {
              if ("object" === D(V.type)) {
                const A = r(F, V, P);
                (A.type = "fieldset"),
                  (A.items = []),
                  (P.lookup[C().stringify(P.path)] = A);
                for (const U of Object.keys(V.properties))
                  if (V.properties.hasOwnProperty(U)) {
                    const G = P.path.slice();
                    if ((G.push(U), !0 !== P.ignore[C().stringify(G)])) {
                      const Z = V.required && -1 !== V.required.indexOf(U),
                        le = w(U, V.properties[U], {
                          path: G,
                          required: Z || !1,
                          lookup: P.lookup,
                          ignore: P.ignore,
                          global: P.global,
                        });
                      le && A.items.push(le);
                    }
                  }
                return A;
              }
            },
          ],
          number: [
            (F, V, P) => {
              if ("number" === D(V.type)) {
                const A = r(F, V, P);
                return (
                  (A.key = P.path),
                  (A.type = "number"),
                  (P.lookup[C().stringify(P.path)] = A),
                  A
                );
              }
            },
          ],
          integer: [
            (F, V, P) => {
              if ("integer" === D(V.type)) {
                const A = r(F, V, P);
                return (
                  (A.key = P.path),
                  (A.type = "number"),
                  (P.lookup[C().stringify(P.path)] = A),
                  A
                );
              }
            },
          ],
          boolean: [
            (F, V, P) => {
              if ("boolean" === D(V.type)) {
                const A = r(F, V, P);
                return (
                  (A.key = P.path),
                  (A.type = "checkbox"),
                  (P.lookup[C().stringify(P.path)] = A),
                  A
                );
              }
            },
          ],
          array: [
            (F, V, P) => {
              if ("array" === D(V.type) && V.items && V.items.enum) {
                const A = r(F, V, P);
                return (
                  (A.key = P.path),
                  (A.type = "checkboxes"),
                  A.titleMap || (A.titleMap = y(V.items.enum)),
                  (P.lookup[C().stringify(P.path)] = A),
                  A
                );
              }
            },
            (F, V, P) => {
              if ("array" === D(V.type)) {
                const A = r(F, V, P);
                if (
                  ((A.type = "array"),
                  (A.key = P.path),
                  (P.lookup[C().stringify(P.path)] = A),
                  void 0 !== V.items)
                ) {
                  const U =
                      V.required &&
                      -1 !== V.required.indexOf(P.path[P.path.length - 1]),
                    G = P.path.slice();
                  G.push("");
                  const Z = w(F, V.items, {
                    path: G,
                    required: U || !1,
                    lookup: P.lookup,
                    ignore: P.ignore,
                    global: P.global,
                  });
                  A.items = Z ? [Z] : V.items;
                }
                return A;
              }
            },
          ],
          date: [
            (F, V, P) => {
              if ("date" === D(V.type)) {
                const A = r(F, V, P);
                return (
                  (A.key = P.path),
                  (A.type = "date"),
                  (P.lookup[C().stringify(P.path)] = A),
                  A
                );
              }
            },
          ],
        };
      function w(F, V, P) {
        const A = O[D(V.type)];
        if (A) {
          let U;
          for (const G of A)
            if (((U = G(F, V, P)), U))
              return (
                U.schema["x-schema-form"] &&
                  d().isObject(U.schema["x-schema-form"]) &&
                  (U = d().extend(U, U.schema["x-schema-form"])),
                U
              );
        }
      }
      function L(F, V, P) {
        let A = !1;
        return (
          F &&
            ((0, o.o8)(P)
              ? (0, o.$K)(F[V]) && (delete F[V], (A = !0))
              : ((A = !(0, o.Xy)(F[V], P)), (F[V] = P))),
          A
        );
      }
      const j = {
        validateBySchema: function (F, V) {
          return e.validateResult(V, F);
        },
        validate: function (F, V) {
          if (!F) return { valid: !0 };
          const P = F.schema;
          if (!P) return { valid: !0 };
          "" === V && (V = void 0),
            "number" === F.type && null === V && (V = void 0),
            "number" === F.type && isNaN(parseFloat(V)) && (V = void 0);
          const A = { type: "object", properties: {} },
            U = F.key[F.key.length - 1];
          (A.properties[U] = P), F.required && (A.required = [U]);
          const G = {};
          void 0 !== V && (G[U] = V);
          const Z = e.validateResult(G, A);
          return (
            null != Z &&
              !Z.valid &&
              null != F.validationMessage &&
              void 0 !== V &&
              (Z.error.message = F.validationMessage),
            Z
          );
        },
        merge: function u(F, V, P, A, U) {
          (V = V || ["*"]), (A = A || {}), (U = U || F.readonly || F.readOnly);
          const G = (function (F, V, P) {
              const A = [],
                U = {};
              if (((V = V || {}), (P = P || {}), "object" !== D(F.type)))
                throw new Error(
                  'Not implemented. Only type "object" allowed at root level of schema.'
                );
              for (const G of Object.keys(F.properties))
                if (F.properties.hasOwnProperty(G) && !0 !== V[G]) {
                  const Z = F.required && -1 !== F.required.indexOf(G),
                    le = w(G, F.properties[G], {
                      path: [G],
                      lookup: U,
                      ignore: V,
                      required: Z,
                      global: P,
                    });
                  le && A.push(le);
                }
              return { form: A, lookup: U };
            })(F, P, A),
            Z = V.indexOf("*");
          -1 !== Z &&
            (V = V.slice(0, Z)
              .concat(G.form)
              .concat(V.slice(Z + 1)));
          const le = G.lookup;
          return V.map((X) => {
            if (
              ("string" == typeof X && (X = { key: X }),
              X.key && "string" == typeof X.key && (X.key = C().parse(X.key)),
              X.titleMap && (X.titleMap = m(X.titleMap)),
              X.itemForm)
            ) {
              X.items = [];
              const se = C().stringify(X.key);
              le[se].items.forEach((re) => {
                const de = d().cloneDeep(X.itemForm);
                (de.key = re.key), X.items.push(de);
              });
            }
            if (X.key) {
              const se = C().stringify(X.key);
              if (le[se]) {
                const ne = le[se];
                for (const re of Object.keys(ne))
                  ne.hasOwnProperty(re) && void 0 === X[re] && (X[re] = ne[re]);
              }
            }
            return (
              !0 === U && (X.readonly = !0),
              X.items &&
                X.items.length > 0 &&
                (X.items = u(F, X.items, P, A, X.readonly)),
              X.tabs &&
                X.tabs.forEach((se) => {
                  se.items = u(F, se.items, P, A, X.readonly);
                }),
              "checkbox" === X.type &&
                d().isUndefined(X.schema.default) &&
                (X.schema.default = !1),
              X
            );
          });
        },
        updateValue: function (F, V, P) {
          const A = /^\d+$/;
          if ((V || (V = this), !V)) return !1;
          const U = (0, o.HD)(F) ? C().parse(F) : F;
          if (1 === U.length) return L(V, U[0], P);
          (0, o.o8)(V[U[0]]) &&
            (V[U[0]] = U.length > 2 && A.test(U[1]) ? [] : {});
          let G = V[U[0]];
          for (let Z = 1; Z < U.length; Z++) {
            if ("" === U[Z]) return !1;
            if (Z === U.length - 1) return L(G, U[Z], P);
            {
              let le = G[U[Z]];
              ((0, o.o8)(le) || null === le) &&
                ((le = A.test(U[Z + 1]) ? [] : {}), (G[U[Z]] = le)),
                (G = le);
            }
          }
          return G;
        },
        selectOrSet: function (F, V, P) {
          const A = /^\d+$/;
          V || (V = this);
          const U = "string" == typeof F ? C().parse(F) : F;
          if (void 0 !== P && 1 === U.length) return (V[U[0]] = P), V;
          void 0 !== P &&
            void 0 === V[U[0]] &&
            (V[U[0]] = U.length > 2 && A.test(U[1]) ? [] : {});
          let G = V[U[0]];
          for (let Z = 1; Z < U.length; Z++) {
            if ("" === U[Z]) return;
            if (void 0 !== P) {
              if (Z === U.length - 1) return (G[U[Z]] = P), P;
              {
                let le = G[U[Z]];
                null == le &&
                  ((le = A.test(U[Z + 1]) ? [] : {}), (G[U[Z]] = le)),
                  (G = le);
              }
            } else G && (G = G[U[Z]]);
          }
          return G;
        },
        traverseSchema: function (F, V, P, A) {
          A = void 0 === A || A;
          const U = (G, Z, le) => {
            if ((Z(G, le), G.properties))
              for (const X of Object.keys(G.properties))
                if (G.properties.hasOwnProperty(X)) {
                  const se = le.slice();
                  se.push(X), U(G.properties[X], Z, se);
                }
            if (!A && G.items) {
              const X = le.slice();
              X.push(""), U(G.items, Z, X);
            }
          };
          U(F, V, (P = P || []) || []);
        },
        traverseForm: function N(F, V) {
          V(F),
            F.items &&
              F.items.forEach((P) => {
                N(P, V);
              }),
            F.tabs &&
              F.tabs.forEach((P) => {
                P.items.forEach((A) => {
                  N(A, V);
                });
              });
        },
      };
    },
    91852: (ee, R, t) => {
      "use strict";
      t.r(R), t.d(R, { JsonObjectEditComponent: () => p });
      var e = t(37716),
        n = t(3679),
        a = t(39490),
        C = t(65264),
        s = t(25280),
        d = t(41960),
        o = t(30290),
        i = t(72145),
        g = t(86710);
      const D = ["jsonEditor"];
      function y(_, E) {
        if (1 & _) {
          const c = e.ɵɵgetCurrentView();
          e.ɵɵelementStart(0, "button", 10),
            e.ɵɵlistener("click", function () {
              return e.ɵɵrestoreView(c), e.ɵɵnextContext().beautifyJSON();
            }),
            e.ɵɵtext(1),
            e.ɵɵpipe(2, "translate"),
            e.ɵɵelementEnd();
        }
        2 & _ &&
          (e.ɵɵadvance(1),
          e.ɵɵtextInterpolate1(" ", e.ɵɵpipeBind1(2, 1, "js-func.tidy"), " "));
      }
      function m(_, E) {
        if (1 & _) {
          const c = e.ɵɵgetCurrentView();
          e.ɵɵelementStart(0, "button", 10),
            e.ɵɵlistener("click", function () {
              return e.ɵɵrestoreView(c), e.ɵɵnextContext().minifyJSON();
            }),
            e.ɵɵtext(1),
            e.ɵɵpipe(2, "translate"),
            e.ɵɵelementEnd();
        }
        2 & _ &&
          (e.ɵɵadvance(1),
          e.ɵɵtextInterpolate1(" ", e.ɵɵpipeBind1(2, 1, "js-func.mini"), " "));
      }
      const r = function (_) {
          return { "fill-height": _ };
        },
        h = function (_, E, c) {
          return { "tb-required": _, "tb-readonly": E, "tb-error": c };
        };
      class p {
        constructor(E, c, v) {
          (this.elementRef = E),
            (this.store = c),
            (this.raf = v),
            (this.toastTargetId = `jsonObjectEditor-${(0, d.M8)()}`),
            (this.fullscreen = !1),
            (this.errorShowed = !1),
            (this.ignoreChange = !1),
            (this.propagateChange = null);
        }
        get required() {
          return this.requiredValue;
        }
        set required(E) {
          this.requiredValue = (0, a.coerceBooleanProperty)(E);
        }
        get readonly() {
          return this.readonlyValue;
        }
        set readonly(E) {
          this.readonlyValue = (0, a.coerceBooleanProperty)(E);
        }
        ngOnInit() {
          const E = this.jsonEditorElmRef.nativeElement;
          let c = {
            mode: "ace/mode/json",
            showGutter: !0,
            showPrintMargin: !1,
            readOnly: this.disabled || this.readonly,
          };
          (c = Object.assign(Object.assign({}, c), {
            enableSnippets: !0,
            enableBasicAutocompletion: !0,
            enableLiveAutocompletion: !0,
          })),
            (0, i.Ln)().subscribe((I) => {
              (this.jsonEditor = I.edit(E, c)),
                this.jsonEditor.session.setUseWrapMode(!1),
                this.jsonEditor.setValue(
                  this.contentValue ? this.contentValue : "",
                  -1
                ),
                this.jsonEditor.setReadOnly(this.disabled || this.readonly),
                this.jsonEditor.on("change", () => {
                  this.ignoreChange ||
                    (this.cleanupJsonErrors(), this.updateView());
                }),
                (this.editorResize$ = new o.do(() => {
                  this.onAceEditorResize();
                })),
                this.editorResize$.observe(E);
            });
        }
        ngOnDestroy() {
          this.editorResize$ && this.editorResize$.disconnect(),
            this.jsonEditor && this.jsonEditor.destroy();
        }
        onAceEditorResize() {
          this.editorsResizeCaf &&
            (this.editorsResizeCaf(), (this.editorsResizeCaf = null)),
            (this.editorsResizeCaf = this.raf.raf(() => {
              this.jsonEditor.resize(), this.jsonEditor.renderer.updateFull();
            }));
        }
        registerOnChange(E) {
          this.propagateChange = E;
        }
        registerOnTouched(E) {}
        setDisabledState(E) {
          (this.disabled = E),
            this.jsonEditor &&
              this.jsonEditor.setReadOnly(this.disabled || this.readonly);
        }
        validate(E) {
          return this.objectValid ? null : { jsonParseError: { valid: !1 } };
        }
        validateOnSubmit() {
          !this.disabled &&
            !this.readonly &&
            (this.cleanupJsonErrors(),
            this.objectValid ||
              (this.store.dispatch(
                new C.zi({
                  message: this.validationError,
                  type: "error",
                  target: this.toastTargetId,
                  verticalPosition: "bottom",
                  horizontalPosition: "left",
                })
              ),
              (this.errorShowed = !0)));
        }
        cleanupJsonErrors() {
          this.errorShowed &&
            (this.store.dispatch(new C.VD({ target: this.toastTargetId })),
            (this.errorShowed = !1));
        }
        beautifyJSON() {
          if (this.jsonEditor && this.objectValid) {
            const E = JSON.stringify(this.modelValue, null, 2);
            this.jsonEditor.setValue(E || "", -1), this.updateView();
          }
        }
        minifyJSON() {
          if (this.jsonEditor && this.objectValid) {
            const E = JSON.stringify(this.modelValue);
            this.jsonEditor.setValue(E || "", -1), this.updateView();
          }
        }
        writeValue(E) {
          (this.modelValue = E),
            (this.contentValue = ""),
            (this.objectValid = !1);
          try {
            (0, d.nu)(this.modelValue)
              ? ((this.contentValue = JSON.stringify(
                  this.modelValue,
                  (0, d.o8)(this.sort) ? void 0 : (c, v) => this.sort(c, v),
                  2
                )),
                (this.objectValid = !0))
              : ((this.objectValid = !this.required),
                (this.validationError = "Json object is required."));
          } catch (c) {}
          this.jsonEditor &&
            ((this.ignoreChange = !0),
            this.jsonEditor.setValue(
              this.contentValue ? this.contentValue : "",
              -1
            ),
            (this.ignoreChange = !1));
        }
        updateView() {
          const E = this.jsonEditor.getValue();
          if (this.contentValue !== E) {
            this.contentValue = E;
            let c = null;
            if (
              ((this.objectValid = !1),
              this.contentValue && this.contentValue.length > 0)
            )
              try {
                if (((c = JSON.parse(this.contentValue)), !(0, d.Kn)(c)))
                  throw new TypeError("Value is not a valid JSON");
                (this.objectValid = !0), (this.validationError = "");
              } catch (v) {
                let I = "Error:";
                v.name && (I += " " + v.name + ":"),
                  v.message && (I += " " + v.message),
                  (this.validationError = I);
              }
            else
              (this.objectValid = !this.required),
                (this.validationError = this.required
                  ? "Json object is required."
                  : "");
            (this.modelValue = c), this.propagateChange(c);
          }
        }
        onFullscreen() {
          this.jsonEditor &&
            setTimeout(() => {
              this.jsonEditor.resize();
            }, 0);
        }
      }
      (p.ɵfac = function (E) {
        return new (E || p)(
          e.ɵɵdirectiveInject(e.ElementRef),
          e.ɵɵdirectiveInject(g.Store),
          e.ɵɵdirectiveInject(s.i)
        );
      }),
        (p.ɵcmp = e.ɵɵdefineComponent({
          type: p,
          selectors: [["tb-json-object-edit"]],
          viewQuery: function (E, c) {
            if ((1 & E && e.ɵɵviewQuery(D, 7), 2 & E)) {
              let v;
              e.ɵɵqueryRefresh((v = e.ɵɵloadQuery())) &&
                (c.jsonEditorElmRef = v.first);
            }
          },
          inputs: {
            label: "label",
            disabled: "disabled",
            fillHeight: "fillHeight",
            editorStyle: "editorStyle",
            sort: "sort",
            required: "required",
            readonly: "readonly",
          },
          features: [
            e.ɵɵProvidersFeature([
              {
                provide: n.NG_VALUE_ACCESSOR,
                useExisting: (0, e.forwardRef)(() => p),
                multi: !0,
              },
              {
                provide: n.NG_VALIDATORS,
                useExisting: (0, e.forwardRef)(() => p),
                multi: !0,
              },
            ]),
          ],
          decls: 14,
          vars: 21,
          consts: [
            [
              "tb-fullscreen",
              "",
              "fxLayout",
              "column",
              2,
              "background",
              "#fff",
              3,
              "ngClass",
              "fullscreen",
              "fullscreenChanged",
            ],
            [
              "fxLayout",
              "row",
              "fxLayoutAlign",
              "start center",
              1,
              "tb-json-object-toolbar",
            ],
            [1, "tb-title", "no-padding", 3, "ngClass"],
            ["fxFlex", ""],
            [
              "type",
              "button",
              "mat-button",
              "",
              "class",
              "tidy",
              3,
              "click",
              4,
              "ngIf",
            ],
            [
              "mat-button",
              "",
              "mat-icon-button",
              "",
              "matTooltipPosition",
              "above",
              3,
              "matTooltip",
              "click",
            ],
            [1, "material-icons"],
            [
              "id",
              "tb-json-panel",
              "tb-toast",
              "",
              "fxLayout",
              "column",
              1,
              "tb-json-object-panel",
              3,
              "toastTarget",
            ],
            ["id", "tb-json-input", 3, "ngStyle", "ngClass"],
            ["jsonEditor", ""],
            ["type", "button", "mat-button", "", 1, "tidy", 3, "click"],
          ],
          template: function (E, c) {
            1 & E &&
              (e.ɵɵelementStart(0, "div", 0),
              e.ɵɵlistener("fullscreenChanged", function () {
                return c.onFullscreen();
              }),
              e.ɵɵelementStart(1, "div", 1),
              e.ɵɵelementStart(2, "label", 2),
              e.ɵɵtext(3),
              e.ɵɵelementEnd(),
              e.ɵɵelement(4, "span", 3),
              e.ɵɵtemplate(5, y, 3, 3, "button", 4),
              e.ɵɵtemplate(6, m, 3, 3, "button", 4),
              e.ɵɵelementStart(7, "button", 5),
              e.ɵɵlistener("click", function () {
                return (c.fullscreen = !c.fullscreen);
              }),
              e.ɵɵpipe(8, "translate"),
              e.ɵɵelementStart(9, "mat-icon", 6),
              e.ɵɵtext(10),
              e.ɵɵelementEnd(),
              e.ɵɵelementEnd(),
              e.ɵɵelementEnd(),
              e.ɵɵelementStart(11, "div", 7),
              e.ɵɵelement(12, "div", 8, 9),
              e.ɵɵelementEnd(),
              e.ɵɵelementEnd()),
              2 & E &&
                (e.ɵɵproperty(
                  "ngClass",
                  e.ɵɵpureFunction1(13, r, c.fillHeight)
                )("fullscreen", c.fullscreen),
                e.ɵɵadvance(2),
                e.ɵɵproperty(
                  "ngClass",
                  e.ɵɵpureFunction3(
                    15,
                    h,
                    c.required,
                    c.readonly,
                    !c.objectValid
                  )
                ),
                e.ɵɵadvance(1),
                e.ɵɵtextInterpolate(c.label),
                e.ɵɵadvance(2),
                e.ɵɵproperty("ngIf", !c.readonly && !c.disabled),
                e.ɵɵadvance(1),
                e.ɵɵproperty("ngIf", !c.readonly && !c.disabled),
                e.ɵɵadvance(1),
                e.ɵɵpropertyInterpolate(
                  "matTooltip",
                  e.ɵɵpipeBind1(
                    8,
                    11,
                    c.fullscreen ? "fullscreen.exit" : "fullscreen.expand"
                  )
                ),
                e.ɵɵadvance(3),
                e.ɵɵtextInterpolate(
                  c.fullscreen ? "fullscreen_exit" : "fullscreen"
                ),
                e.ɵɵadvance(1),
                e.ɵɵpropertyInterpolate("toastTarget", c.toastTargetId),
                e.ɵɵadvance(1),
                e.ɵɵproperty("ngStyle", c.editorStyle)(
                  "ngClass",
                  e.ɵɵpureFunction1(19, r, c.fillHeight)
                ));
          },
          styles: [
            '@charset "UTF-8";[_nghost-%COMP%]{position:relative}[_nghost-%COMP%]   .fill-height[_ngcontent-%COMP%]{height:100%}.tb-json-object-toolbar[_ngcontent-%COMP%]   button.mat-button[_ngcontent-%COMP%], .tb-json-object-toolbar[_ngcontent-%COMP%]   button.mat-icon-button[_ngcontent-%COMP%], .tb-json-object-toolbar[_ngcontent-%COMP%]   button.mat-icon-button.tb-mat-32[_ngcontent-%COMP%]{align-items:center;vertical-align:middle;min-width:32px;min-height:15px;padding:4px;margin:0;font-size:.8rem;line-height:15px;color:#7b7b7b;background:rgba(220,220,220,.35)}.tb-json-object-toolbar[_ngcontent-%COMP%]   button.mat-button[_ngcontent-%COMP%]:not(:last-child), .tb-json-object-toolbar[_ngcontent-%COMP%]   button.mat-icon-button[_ngcontent-%COMP%]:not(:last-child), .tb-json-object-toolbar[_ngcontent-%COMP%]   button.mat-icon-button.tb-mat-32[_ngcontent-%COMP%]:not(:last-child){margin-right:4px}.tb-json-object-panel[_ngcontent-%COMP%]{height:100%;margin-left:15px;border:1px solid #c0c0c0}.tb-json-object-panel[_ngcontent-%COMP%]   #tb-json-input[_ngcontent-%COMP%]{width:100%;min-width:200px;height:100%}.tb-json-object-panel[_ngcontent-%COMP%]   #tb-json-input[_ngcontent-%COMP%]:not(.fill-height){min-height:200px}',
          ],
        }));
    },
    26167: (ee, R, t) => {
      "use strict";
      t.r(R), t.d(R, { JsonObjectViewComponent: () => h });
      var e = t(37716),
        n = t(3679),
        a = t(39490),
        C = t(25280),
        s = t(41960),
        d = t(72145),
        o = t(86710),
        i = t(38583),
        g = t(88030),
        D = t(35618);
      const y = ["jsonViewer"];
      function m(p, _) {
        if (
          (1 & p &&
            (e.ɵɵelementStart(0, "label", 5), e.ɵɵtext(1), e.ɵɵelementEnd()),
          2 & p)
        ) {
          const E = e.ɵɵnextContext();
          e.ɵɵadvance(1), e.ɵɵtextInterpolate(E.label);
        }
      }
      const r = function (p) {
        return { "fill-height": p };
      };
      class h {
        constructor(_, E, c, v) {
          (this.elementRef = _),
            (this.store = E),
            (this.raf = c),
            (this.renderer = v),
            (this.propagateChange = null);
        }
        get autoWidth() {
          return this.widthValue;
        }
        set autoWidth(_) {
          this.widthValue = (0, a.coerceBooleanProperty)(_);
        }
        get autoHeight() {
          return this.heigthValue;
        }
        set autoHeight(_) {
          this.heigthValue = (0, a.coerceBooleanProperty)(_);
        }
        ngOnInit() {
          this.viewerElement = this.jsonViewerElmRef.nativeElement;
          let _ = {
            mode: "ace/mode/java",
            theme: "ace/theme/github",
            showGutter: !1,
            showPrintMargin: !1,
            readOnly: !0,
          };
          (_ = Object.assign(Object.assign({}, _), {
            enableSnippets: !1,
            enableBasicAutocompletion: !1,
            enableLiveAutocompletion: !1,
          })),
            (0, d.Ln)().subscribe((c) => {
              (this.jsonViewer = c.edit(this.viewerElement, _)),
                this.jsonViewer.session.setUseWrapMode(!1),
                this.jsonViewer.setValue(
                  this.contentValue ? this.contentValue : "",
                  -1
                ),
                this.contentValue &&
                  (this.widthValue || this.heigthValue) &&
                  this.updateEditorSize(
                    this.viewerElement,
                    this.contentValue,
                    this.jsonViewer
                  );
            });
        }
        ngOnDestroy() {
          this.jsonViewer && this.jsonViewer.destroy();
        }
        updateEditorSize(_, E, c) {
          let v = 200,
            I = 600;
          if (E && E.length > 0) {
            const l = E.split("\n");
            v = 17 * l.length + 17;
            let T = 0;
            l.forEach((O) => {
              const b = O.replace(/\t/g, "    ").replace(/\n/g, "").length;
              T = Math.max(T, b);
            }),
              (I = 8 * T + 16);
          }
          this.heigthValue &&
            this.renderer.setStyle(_, "height", v.toString() + "px"),
            this.widthValue &&
              this.renderer.setStyle(_, "width", I.toString() + "px"),
            c.resize();
        }
        registerOnChange(_) {
          this.propagateChange = _;
        }
        registerOnTouched(_) {}
        writeValue(_) {
          (this.modelValue = _), (this.contentValue = "");
          try {
            (0, s.nu)(this.modelValue) &&
              (this.contentValue = JSON.stringify(
                this.modelValue,
                (0, s.o8)(this.sort) ? void 0 : (E, c) => this.sort(E, c),
                2
              ));
          } catch (E) {
            console.error(E);
          }
          this.jsonViewer &&
            (this.jsonViewer.setValue(
              this.contentValue ? this.contentValue : "",
              -1
            ),
            this.contentValue &&
              (this.widthValue || this.heigthValue) &&
              this.updateEditorSize(
                this.viewerElement,
                this.contentValue,
                this.jsonViewer
              ));
        }
      }
      (h.ɵfac = function (_) {
        return new (_ || h)(
          e.ɵɵdirectiveInject(e.ElementRef),
          e.ɵɵdirectiveInject(o.Store),
          e.ɵɵdirectiveInject(C.i),
          e.ɵɵdirectiveInject(e.Renderer2)
        );
      }),
        (h.ɵcmp = e.ɵɵdefineComponent({
          type: h,
          selectors: [["tb-json-object-view"]],
          viewQuery: function (_, E) {
            if ((1 & _ && e.ɵɵviewQuery(y, 7), 2 & _)) {
              let c;
              e.ɵɵqueryRefresh((c = e.ɵɵloadQuery())) &&
                (E.jsonViewerElmRef = c.first);
            }
          },
          inputs: {
            label: "label",
            fillHeight: "fillHeight",
            editorStyle: "editorStyle",
            sort: "sort",
            autoWidth: "autoWidth",
            autoHeight: "autoHeight",
          },
          features: [
            e.ɵɵProvidersFeature([
              {
                provide: n.NG_VALUE_ACCESSOR,
                useExisting: (0, e.forwardRef)(() => h),
                multi: !0,
              },
            ]),
          ],
          decls: 5,
          vars: 7,
          consts: [
            [2, "background", "#fff", 3, "ngClass"],
            ["class", "tb-title no-padding", 4, "ngIf"],
            ["fxFlex", ""],
            ["id", "tb-json-view", 3, "ngClass"],
            ["jsonViewer", ""],
            [1, "tb-title", "no-padding"],
          ],
          template: function (_, E) {
            1 & _ &&
              (e.ɵɵelementStart(0, "div", 0),
              e.ɵɵtemplate(1, m, 2, 1, "label", 1),
              e.ɵɵelement(2, "span", 2),
              e.ɵɵelement(3, "div", 3, 4),
              e.ɵɵelementEnd()),
              2 & _ &&
                (e.ɵɵproperty("ngClass", e.ɵɵpureFunction1(3, r, E.fillHeight)),
                e.ɵɵadvance(1),
                e.ɵɵproperty("ngIf", E.label),
                e.ɵɵadvance(2),
                e.ɵɵproperty("ngClass", e.ɵɵpureFunction1(5, r, E.fillHeight)));
          },
          directives: [
            i.NgClass,
            g.DefaultClassDirective,
            i.NgIf,
            D.DefaultFlexDirective,
          ],
          styles: [
            '@charset "UTF-8";[_nghost-%COMP%]   #tb-json-view[_ngcontent-%COMP%]{width:100%;height:100%;margin-bottom:16px;border:1px solid #c0c0c0}[_nghost-%COMP%]   #tb-json-view[_ngcontent-%COMP%]:not(.fill-height){min-height:100px}',
          ],
        }));
    },
    82443: (ee, R, t) => {
      "use strict";
      t.r(R), t.d(R, { KeyValMapComponent: () => _ });
      var e = t(37716),
        n = t(3679),
        a = t(75362),
        C = t(86710),
        s = t(35618),
        d = t(29790),
        o = t(38583),
        i = t(88030),
        g = t(51095),
        D = t(11436),
        y = t(98295),
        m = t(83166),
        r = t(76627);
      function h(E, c) {
        if (1 & E) {
          const v = e.ɵɵgetCurrentView();
          e.ɵɵelementStart(0, "div", 6),
            e.ɵɵelementStart(1, "mat-form-field", 7),
            e.ɵɵelement(2, "mat-label"),
            e.ɵɵelement(3, "input", 8),
            e.ɵɵpipe(4, "translate"),
            e.ɵɵelementEnd(),
            e.ɵɵelementStart(5, "mat-form-field", 7),
            e.ɵɵelement(6, "mat-label"),
            e.ɵɵelement(7, "input", 8),
            e.ɵɵpipe(8, "translate"),
            e.ɵɵelementEnd(),
            e.ɵɵelementStart(9, "button", 9),
            e.ɵɵlistener("click", function () {
              const T = e.ɵɵrestoreView(v).index;
              return e.ɵɵnextContext().removeKeyVal(T);
            }),
            e.ɵɵpipe(10, "async"),
            e.ɵɵpipe(11, "translate"),
            e.ɵɵelementStart(12, "mat-icon"),
            e.ɵɵtext(13, "close"),
            e.ɵɵelementEnd(),
            e.ɵɵelementEnd(),
            e.ɵɵelementEnd();
        }
        if (2 & E) {
          const v = c.$implicit,
            I = e.ɵɵnextContext();
          e.ɵɵadvance(3),
            e.ɵɵpropertyInterpolate(
              "placeholder",
              e.ɵɵpipeBind1(
                4,
                7,
                I.keyPlaceholderText ? I.keyPlaceholderText : "key-val.key"
              )
            ),
            e.ɵɵproperty("formControl", v.get("key")),
            e.ɵɵadvance(4),
            e.ɵɵpropertyInterpolate(
              "placeholder",
              e.ɵɵpipeBind1(
                8,
                9,
                I.valuePlaceholderText
                  ? I.valuePlaceholderText
                  : "key-val.value"
              )
            ),
            e.ɵɵproperty("formControl", v.get("value")),
            e.ɵɵadvance(2),
            e.ɵɵpropertyInterpolate(
              "matTooltip",
              e.ɵɵpipeBind1(11, 13, "key-val.remove-entry")
            ),
            e.ɵɵproperty("fxShow", !I.disabled)(
              "disabled",
              e.ɵɵpipeBind1(10, 11, I.isLoading$)
            );
        }
      }
      const p = function (E) {
        return { disabled: E };
      };
      class _ extends a.I {
        constructor(c, v) {
          super(c),
            (this.store = c),
            (this.fb = v),
            (this.propagateChange = null),
            (this.valueChangeSubscription = null);
        }
        ngOnInit() {
          (this.kvListFormGroup = this.fb.group({})),
            this.kvListFormGroup.addControl("keyVals", this.fb.array([]));
        }
        keyValsFormArray() {
          return this.kvListFormGroup.get("keyVals");
        }
        registerOnChange(c) {
          this.propagateChange = c;
        }
        registerOnTouched(c) {}
        setDisabledState(c) {
          (this.disabled = c),
            this.disabled
              ? this.kvListFormGroup.disable({ emitEvent: !1 })
              : this.kvListFormGroup.enable({ emitEvent: !1 });
        }
        writeValue(c) {
          this.valueChangeSubscription &&
            this.valueChangeSubscription.unsubscribe();
          const v = [];
          if (c)
            for (const I of Object.keys(c))
              Object.prototype.hasOwnProperty.call(c, I) &&
                v.push(
                  this.fb.group({
                    key: [I, [n.Validators.required]],
                    value: [c[I], [n.Validators.required]],
                  })
                );
          this.kvListFormGroup.setControl("keyVals", this.fb.array(v)),
            (this.valueChangeSubscription =
              this.kvListFormGroup.valueChanges.subscribe(() => {
                this.updateModel();
              })),
            this.disabled
              ? this.kvListFormGroup.disable({ emitEvent: !1 })
              : this.kvListFormGroup.enable({ emitEvent: !1 });
        }
        removeKeyVal(c) {
          this.kvListFormGroup.get("keyVals").removeAt(c);
        }
        addKeyVal() {
          this.kvListFormGroup
            .get("keyVals")
            .push(
              this.fb.group({
                key: ["", [n.Validators.required]],
                value: ["", [n.Validators.required]],
              })
            );
        }
        validate(c) {
          const v = this.kvListFormGroup.get("keyVals").value;
          let I = !0;
          for (const l of v)
            if (!l.key || !l.value) {
              I = !1;
              break;
            }
          return I ? null : { keyVals: { valid: !1 } };
        }
        updateModel() {
          const c = this.kvListFormGroup.get("keyVals").value,
            v = {};
          c.forEach((I) => {
            v[I.key] = I.value;
          }),
            this.propagateChange(v);
        }
      }
      (_.ɵfac = function (c) {
        return new (c || _)(
          e.ɵɵdirectiveInject(C.Store),
          e.ɵɵdirectiveInject(n.FormBuilder)
        );
      }),
        (_.ɵcmp = e.ɵɵdefineComponent({
          type: _,
          selectors: [["tb-key-val-map"]],
          inputs: {
            disabled: "disabled",
            titleText: "titleText",
            keyPlaceholderText: "keyPlaceholderText",
            valuePlaceholderText: "valuePlaceholderText",
            noDataText: "noDataText",
          },
          features: [
            e.ɵɵProvidersFeature([
              {
                provide: n.NG_VALUE_ACCESSOR,
                useExisting: (0, e.forwardRef)(() => _),
                multi: !0,
              },
              {
                provide: n.NG_VALIDATORS,
                useExisting: (0, e.forwardRef)(() => _),
                multi: !0,
              },
            ]),
            e.ɵɵInheritDefinitionFeature,
          ],
          decls: 12,
          vars: 18,
          consts: [
            ["fxLayout", "column", 1, "tb-kv-map", 3, "formGroup"],
            ["translate", "", 1, "tb-title", "no-padding"],
            [
              "fxLayout",
              "row",
              "fxLayoutAlign",
              "start center",
              "fxLayoutGap",
              "8px",
              "style",
              "max-height: 40px;",
              "formArrayName",
              "keyVals",
              4,
              "ngFor",
              "ngForOf",
            ],
            [
              "fxLayoutAlign",
              "center center",
              "translate",
              "",
              1,
              "no-data-found",
              3,
              "fxShow",
              "ngClass",
            ],
            [2, "margin-top", "8px"],
            [
              "mat-button",
              "",
              "mat-raised-button",
              "",
              "color",
              "primary",
              "type",
              "button",
              "matTooltipPosition",
              "above",
              3,
              "fxShow",
              "disabled",
              "matTooltip",
              "click",
            ],
            [
              "fxLayout",
              "row",
              "fxLayoutAlign",
              "start center",
              "fxLayoutGap",
              "8px",
              "formArrayName",
              "keyVals",
              2,
              "max-height",
              "40px",
            ],
            [
              "fxFlex",
              "",
              "floatLabel",
              "always",
              "hideRequiredMarker",
              "",
              1,
              "mat-block",
              2,
              "max-height",
              "40px",
            ],
            ["matInput", "", "required", "", 3, "formControl", "placeholder"],
            [
              "mat-button",
              "",
              "mat-icon-button",
              "",
              "color",
              "primary",
              "type",
              "button",
              "matTooltipPosition",
              "above",
              3,
              "fxShow",
              "disabled",
              "matTooltip",
              "click",
            ],
          ],
          template: function (c, v) {
            1 & c &&
              (e.ɵɵelementStart(0, "section", 0),
              e.ɵɵelementStart(1, "label", 1),
              e.ɵɵtext(2),
              e.ɵɵelementEnd(),
              e.ɵɵtemplate(3, h, 14, 15, "div", 2),
              e.ɵɵelementStart(4, "span", 3),
              e.ɵɵtext(5),
              e.ɵɵelementEnd(),
              e.ɵɵelementStart(6, "div", 4),
              e.ɵɵelementStart(7, "button", 5),
              e.ɵɵlistener("click", function () {
                return v.addKeyVal();
              }),
              e.ɵɵpipe(8, "async"),
              e.ɵɵpipe(9, "translate"),
              e.ɵɵtext(10),
              e.ɵɵpipe(11, "translate"),
              e.ɵɵelementEnd(),
              e.ɵɵelementEnd(),
              e.ɵɵelementEnd()),
              2 & c &&
                (e.ɵɵproperty("formGroup", v.kvListFormGroup),
                e.ɵɵadvance(2),
                e.ɵɵtextInterpolate(v.titleText),
                e.ɵɵadvance(1),
                e.ɵɵproperty("ngForOf", v.keyValsFormArray().controls),
                e.ɵɵadvance(1),
                e.ɵɵproperty("fxShow", !v.keyValsFormArray().length)(
                  "ngClass",
                  e.ɵɵpureFunction1(16, p, v.disabled)
                ),
                e.ɵɵadvance(1),
                e.ɵɵtextInterpolate(
                  v.noDataText ? v.noDataText : "key-val.no-data"
                ),
                e.ɵɵadvance(2),
                e.ɵɵpropertyInterpolate(
                  "matTooltip",
                  e.ɵɵpipeBind1(9, 12, "key-val.add-entry")
                ),
                e.ɵɵproperty("fxShow", !v.disabled)(
                  "disabled",
                  e.ɵɵpipeBind1(8, 10, v.isLoading$)
                ),
                e.ɵɵadvance(3),
                e.ɵɵtextInterpolate1(
                  " ",
                  e.ɵɵpipeBind1(11, 14, "action.add"),
                  " "
                ));
          },
          directives: [
            s.DefaultLayoutDirective,
            n.NgControlStatusGroup,
            n.FormGroupDirective,
            d.TranslateDirective,
            o.NgForOf,
            s.DefaultLayoutAlignDirective,
            i.DefaultShowHideDirective,
            o.NgClass,
            i.DefaultClassDirective,
            g.MatButton,
            D.MatTooltip,
            s.DefaultLayoutGapDirective,
            n.FormArrayName,
            y.MatFormField,
            s.DefaultFlexDirective,
            y.MatLabel,
            m.MatInput,
            n.DefaultValueAccessor,
            n.RequiredValidator,
            n.NgControlStatus,
            n.FormControlDirective,
            r.MatIcon,
          ],
          pipes: [o.AsyncPipe, d.TranslatePipe],
          styles: [
            '@charset "UTF-8";[_nghost-%COMP%]   .tb-kv-map[_ngcontent-%COMP%]   span.no-data-found[_ngcontent-%COMP%]{position:relative;display:flex;height:40px}[_nghost-%COMP%]   .tb-kv-map[_ngcontent-%COMP%]   span.no-data-found.disabled[_ngcontent-%COMP%]{color:#00000061}[_nghost-%COMP%]     .mat-form-field-wrapper{padding-bottom:0}[_nghost-%COMP%]     .mat-form-field-infix{border-top:0}[_nghost-%COMP%]     .mat-form-field-underline{bottom:0}',
          ],
        }));
    },
    41767: (ee, R, t) => {
      "use strict";
      t.r(R), t.d(R, { LedLightComponent: () => D });
      var e = t(37716),
        n = t(39490),
        a = t(4902),
        s = t(38583),
        d = t(88030),
        o = t(5609);
      const i = function (y, m) {
          return { width: y, height: m };
        },
        g = a;
      class D {
        constructor(m) {
          this.elementRef = m;
        }
        get enabled() {
          return this.enabledValue;
        }
        set enabled(m) {
          this.enabledValue = (0, n.coerceBooleanProperty)(m);
        }
        ngOnInit() {
          (this.offOpacity = this.offOpacity || 0.4),
            (this.glowColor = g(this.colorOn).lighten().toHexString());
        }
        ngAfterViewInit() {
          this.update();
        }
        ngOnChanges(m) {
          for (const r of Object.keys(m)) {
            const h = m[r];
            !h.firstChange &&
              h.currentValue !== h.previousValue &&
              ("enabled" === r && this.circleElement
                ? this.draw()
                : "size" === r && this.update());
          }
        }
        update() {
          (this.size = this.size || 50),
            (this.canvasSize = this.size),
            (this.radius = this.canvasSize / 4),
            (this.glowSize = this.radius / 5),
            this.paper && this.paper.remove(),
            t
              .e(4284)
              .then(t.t.bind(t, 84284, 23))
              .then((m) => {
                this.paper = m.default(
                  o("#canvas_container", this.elementRef.nativeElement)[0],
                  this.canvasSize,
                  this.canvasSize
                );
                const r = this.canvasSize / 2;
                (this.circleElement = this.paper.circle(r, r, this.radius)),
                  this.draw();
              });
        }
        draw() {
          this.enabled
            ? (this.circleElement.attr("fill", this.colorOn),
              this.circleElement.attr("stroke", this.colorOn),
              this.circleElement.attr("opacity", 1),
              this.circleElement.theGlow && this.circleElement.theGlow.remove(),
              (this.circleElement.theGlow = this.circleElement.glow({
                color: this.glowColor,
                width: this.radius + this.glowSize,
                opacity: 0.8,
                fill: !0,
              })))
            : (this.circleElement.theGlow &&
                this.circleElement.theGlow.remove(),
              this.circleElement.attr("fill", this.colorOff),
              this.circleElement.attr("stroke", this.colorOff),
              this.circleElement.attr("opacity", this.offOpacity));
        }
      }
      (D.ɵfac = function (m) {
        return new (m || D)(e.ɵɵdirectiveInject(e.ElementRef));
      }),
        (D.ɵcmp = e.ɵɵdefineComponent({
          type: D,
          selectors: [["tb-led-light"]],
          inputs: {
            size: "size",
            colorOn: "colorOn",
            colorOff: "colorOff",
            offOpacity: "offOpacity",
            enabled: "enabled",
          },
          features: [e.ɵɵNgOnChangesFeature],
          decls: 1,
          vars: 4,
          consts: [["id", "canvas_container", 3, "ngStyle"]],
          template: function (m, r) {
            1 & m && e.ɵɵelement(0, "div", 0),
              2 & m &&
                e.ɵɵproperty(
                  "ngStyle",
                  e.ɵɵpureFunction2(1, i, r.size + "px", r.size + "px")
                );
          },
          directives: [s.NgStyle, d.DefaultStyleDirective],
          encapsulation: 2,
        }));
    },
    43058: (ee, R, t) => {
      "use strict";
      t.r(R), t.d(R, { LogoComponent: () => a });
      var e = t(37716),
        n = t(35618);
      class a {
        constructor() {
          this.logo = "assets/logo_title_white.svg";
        }
        gotoThingsboard() {
          window.open("http://ninox.ai", "_blank");
        }
      }
      (a.ɵfac = function (s) {
        return new (s || a)();
      }),
        (a.ɵcmp = e.ɵɵdefineComponent({
          type: a,
          selectors: [["tb-logo"]],
          decls: 1,
          vars: 1,
          consts: [
            [
              "fxFlex",
              "",
              "aria-label",
              "logo",
              1,
              "tb-logo-title",
              3,
              "src",
              "click",
            ],
          ],
          template: function (s, d) {
            1 & s &&
              (e.ɵɵelementStart(0, "img", 0),
              e.ɵɵlistener("click", function () {
                return d.gotoThingsboard();
              }),
              e.ɵɵelementEnd()),
              2 & s && e.ɵɵproperty("src", d.logo, e.ɵɵsanitizeUrl);
          },
          directives: [n.DefaultFlexDirective],
          styles: [
            '@charset "UTF-8";.login-logo[_nghost-%COMP%]   img.tb-logo-title[_ngcontent-%COMP%], .login-logo   [_nghost-%COMP%]   img.tb-logo-title[_ngcontent-%COMP%]{width:280px;height:60px;text-decoration:none;cursor:pointer;border:none;transform:none}.login-logo[_nghost-%COMP%]   img.tb-logo-title[_ngcontent-%COMP%]:focus, .login-logo   [_nghost-%COMP%]   img.tb-logo-title[_ngcontent-%COMP%]:focus{outline:0}',
          ],
        }));
    },
    50367: (ee, R, t) => {
      "use strict";
      t.d(R, { k: () => D });
      var e = t(37716),
        n = t(3679),
        a = t(39490),
        C = t(72145);
      const s = ["markdownEditor"];
      function d(y, m) {
        if ((1 & y && e.ɵɵelement(0, "div", 16), 2 & y)) {
          const r = e.ɵɵnextContext();
          e.ɵɵproperty("tb-help-popup", r.helpId);
        }
      }
      function o(y, m) {
        if (
          (1 & y &&
            (e.ɵɵelementStart(0, "div", 17),
            e.ɵɵelement(1, "tb-markdown", 14),
            e.ɵɵelementEnd()),
          2 & y)
        ) {
          const r = e.ɵɵnextContext();
          e.ɵɵadvance(1), e.ɵɵproperty("data", r.renderValue);
        }
      }
      const i = function (y) {
          return { "tb-edit-mode": y };
        },
        g = function (y, m) {
          return { "tb-error": y, "tb-required": m };
        };
      class D {
        constructor() {
          (this.editorMode = !0),
            (this.fullscreen = !1),
            (this.ignoreChange = !1),
            (this.propagateChange = null);
        }
        get required() {
          return this.requiredValue;
        }
        set required(m) {
          this.requiredValue = (0, a.coerceBooleanProperty)(m);
        }
        ngOnInit() {
          if (!this.readonly) {
            const m = this.markdownEditorElmRef.nativeElement;
            let r = {
              mode: "ace/mode/markdown",
              showGutter: !0,
              showPrintMargin: !1,
              readOnly: !1,
            };
            const h = {
              enableSnippets: !0,
              enableBasicAutocompletion: !0,
              enableLiveAutocompletion: !0,
            };
            (r = Object.assign(Object.assign({}, r), h)),
              (0, C.Ln)().subscribe((p) => {
                (this.markdownEditor = p.edit(m, r)),
                  this.markdownEditor.session.setUseWrapMode(!1),
                  this.markdownEditor.setValue(
                    this.markdownValue ? this.markdownValue : "",
                    -1
                  ),
                  this.markdownEditor.on("change", () => {
                    this.ignoreChange || this.updateView();
                  });
              });
          }
        }
        ngOnDestroy() {
          this.markdownEditor && this.markdownEditor.destroy();
        }
        registerOnChange(m) {
          this.propagateChange = m;
        }
        registerOnTouched(m) {}
        setDisabledState(m) {
          this.disabled = m;
        }
        writeValue(m) {
          (this.editorMode = !0),
            (this.markdownValue = m),
            (this.renderValue = this.markdownValue ? this.markdownValue : " "),
            this.markdownEditor &&
              ((this.ignoreChange = !0),
              this.markdownEditor.setValue(
                this.markdownValue ? this.markdownValue : "",
                -1
              ),
              (this.ignoreChange = !1));
        }
        updateView() {
          const m = this.markdownEditor.getValue();
          this.markdownValue !== m &&
            ((this.markdownValue = m),
            (this.renderValue = this.markdownValue ? this.markdownValue : " "),
            this.propagateChange(this.markdownValue));
        }
        onFullscreen() {
          this.markdownEditor &&
            setTimeout(() => {
              this.markdownEditor.resize();
            }, 0);
        }
        toggleEditMode() {
          (this.editorMode = !this.editorMode),
            this.editorMode &&
              this.markdownEditor &&
              setTimeout(() => {
                this.markdownEditor.resize();
              }, 0);
        }
      }
      (D.ɵfac = function (m) {
        return new (m || D)();
      }),
        (D.ɵcmp = e.ɵɵdefineComponent({
          type: D,
          selectors: [["tb-markdown-editor"]],
          viewQuery: function (m, r) {
            if ((1 & m && e.ɵɵviewQuery(s, 7), 2 & m)) {
              let h;
              e.ɵɵqueryRefresh((h = e.ɵɵloadQuery())) &&
                (r.markdownEditorElmRef = h.first);
            }
          },
          inputs: {
            label: "label",
            disabled: "disabled",
            readonly: "readonly",
            helpId: "helpId",
            required: "required",
          },
          features: [
            e.ɵɵProvidersFeature([
              {
                provide: n.NG_VALUE_ACCESSOR,
                useExisting: (0, e.forwardRef)(() => D),
                multi: !0,
              },
            ]),
          ],
          decls: 24,
          vars: 27,
          consts: [
            [
              "tb-fullscreen",
              "",
              1,
              "markdown-content",
              3,
              "ngClass",
              "fullscreen",
              "fullscreenChanged",
            ],
            [
              "fxLayout",
              "row",
              "fxLayoutAlign",
              "start center",
              2,
              "height",
              "40px",
            ],
            [1, "tb-title", "no-padding", 3, "ngClass"],
            ["fxFlex", ""],
            [
              "type",
              "button",
              "mat-button",
              "",
              1,
              "panel-button",
              3,
              "fxShow",
              "click",
            ],
            [3, "tb-help-popup", 4, "ngIf"],
            [2, "width", "initial"],
            [
              "matTooltipPosition",
              "above",
              2,
              "border-radius",
              "50%",
              3,
              "matTooltip",
              "click",
            ],
            [
              "type",
              "button",
              "mat-button",
              "",
              "mat-icon-button",
              "",
              1,
              "tb-mat-32",
              "panel-button",
            ],
            [1, "material-icons"],
            [1, "markdown-content-editor", 3, "fxShow"],
            [1, "tb-markdown-editor", 3, "fxShow"],
            ["markdownEditor", ""],
            [1, "tb-markdown-view-container", 3, "fxShow"],
            ["lineNumbers", "", "fallbackToPlainMarkdown", "", 3, "data"],
            ["class", "tb-markdown-view-container", 4, "ngIf"],
            [3, "tb-help-popup"],
            [1, "tb-markdown-view-container"],
          ],
          template: function (m, r) {
            1 & m &&
              (e.ɵɵelementStart(0, "div", 0),
              e.ɵɵlistener("fullscreenChanged", function () {
                return r.onFullscreen();
              }),
              e.ɵɵelementStart(1, "div", 1),
              e.ɵɵelementStart(2, "label", 2),
              e.ɵɵtext(3),
              e.ɵɵelementEnd(),
              e.ɵɵelement(4, "span", 3),
              e.ɵɵelementStart(5, "button", 4),
              e.ɵɵlistener("click", function () {
                return r.toggleEditMode();
              }),
              e.ɵɵtext(6),
              e.ɵɵpipe(7, "translate"),
              e.ɵɵelementEnd(),
              e.ɵɵelementStart(8, "button", 4),
              e.ɵɵlistener("click", function () {
                return r.toggleEditMode();
              }),
              e.ɵɵtext(9),
              e.ɵɵpipe(10, "translate"),
              e.ɵɵelementEnd(),
              e.ɵɵtemplate(11, d, 1, 1, "div", 5),
              e.ɵɵelementStart(12, "fieldset", 6),
              e.ɵɵelementStart(13, "div", 7),
              e.ɵɵlistener("click", function () {
                return (r.fullscreen = !r.fullscreen);
              }),
              e.ɵɵpipe(14, "translate"),
              e.ɵɵelementStart(15, "button", 8),
              e.ɵɵelementStart(16, "mat-icon", 9),
              e.ɵɵtext(17),
              e.ɵɵelementEnd(),
              e.ɵɵelementEnd(),
              e.ɵɵelementEnd(),
              e.ɵɵelementEnd(),
              e.ɵɵelementEnd(),
              e.ɵɵelementStart(18, "div", 10),
              e.ɵɵelement(19, "div", 11, 12),
              e.ɵɵelementStart(21, "div", 13),
              e.ɵɵelement(22, "tb-markdown", 14),
              e.ɵɵelementEnd(),
              e.ɵɵelementEnd(),
              e.ɵɵtemplate(23, o, 2, 1, "div", 15),
              e.ɵɵelementEnd()),
              2 & m &&
                (e.ɵɵproperty("ngClass", e.ɵɵpureFunction1(22, i, !r.readonly))(
                  "fullscreen",
                  r.fullscreen
                ),
                e.ɵɵadvance(2),
                e.ɵɵproperty(
                  "ngClass",
                  e.ɵɵpureFunction2(
                    24,
                    g,
                    !r.disabled && r.required && !r.markdownValue,
                    !r.disabled && r.required
                  )
                ),
                e.ɵɵadvance(1),
                e.ɵɵtextInterpolate(r.label),
                e.ɵɵadvance(2),
                e.ɵɵproperty("fxShow", !r.editorMode),
                e.ɵɵadvance(1),
                e.ɵɵtextInterpolate(e.ɵɵpipeBind1(7, 16, "markdown.edit")),
                e.ɵɵadvance(2),
                e.ɵɵproperty("fxShow", r.editorMode),
                e.ɵɵadvance(1),
                e.ɵɵtextInterpolate(e.ɵɵpipeBind1(10, 18, "markdown.preview")),
                e.ɵɵadvance(2),
                e.ɵɵproperty("ngIf", r.helpId),
                e.ɵɵadvance(2),
                e.ɵɵpropertyInterpolate(
                  "matTooltip",
                  e.ɵɵpipeBind1(
                    14,
                    20,
                    r.fullscreen ? "fullscreen.exit" : "fullscreen.expand"
                  )
                ),
                e.ɵɵadvance(4),
                e.ɵɵtextInterpolate(
                  r.fullscreen ? "fullscreen_exit" : "fullscreen"
                ),
                e.ɵɵadvance(1),
                e.ɵɵproperty("fxShow", !r.readonly && !r.disabled),
                e.ɵɵadvance(1),
                e.ɵɵproperty("fxShow", r.editorMode),
                e.ɵɵadvance(2),
                e.ɵɵproperty("fxShow", !r.editorMode),
                e.ɵɵadvance(1),
                e.ɵɵproperty("data", r.renderValue),
                e.ɵɵadvance(1),
                e.ɵɵproperty("ngIf", r.readonly || r.disabled));
          },
          styles: [
            '@charset "UTF-8";.markdown-content[_ngcontent-%COMP%]{min-width:400px}.markdown-content.tb-edit-mode[_ngcontent-%COMP%]   .tb-markdown-view-container[_ngcontent-%COMP%]{border:1px solid #c0c0c0}.markdown-content.tb-edit-mode[_ngcontent-%COMP%]   .tb-markdown-view[_ngcontent-%COMP%]{padding:20px}.markdown-content.tb-edit-mode[_ngcontent-%COMP%]:not(.tb-fullscreen){padding-bottom:15px}.markdown-content.tb-edit-mode[_ngcontent-%COMP%]:not(.tb-fullscreen)   .markdown-content-editor[_ngcontent-%COMP%]{min-height:200px;max-height:200px;height:200px}.markdown-content.tb-edit-mode[_ngcontent-%COMP%]:not(.tb-fullscreen)   .tb-markdown-view-container[_ngcontent-%COMP%]{min-height:200px;max-height:200px;height:200px}.markdown-content.tb-fullscreen[_ngcontent-%COMP%]{background:#fff}.markdown-content.tb-fullscreen[_ngcontent-%COMP%]   .markdown-content-editor[_ngcontent-%COMP%]{height:calc(100% - 40px)}.markdown-content[_ngcontent-%COMP%]   .markdown-content-editor[_ngcontent-%COMP%]{position:relative;height:100%}.markdown-content[_ngcontent-%COMP%]   .tb-markdown-editor[_ngcontent-%COMP%]{position:absolute;top:0;left:0;right:0;bottom:0;border:1px solid #c0c0c0}.markdown-content[_ngcontent-%COMP%]   .tb-markdown-view-container[_ngcontent-%COMP%]{overflow:auto;height:100%}.markdown-content[_ngcontent-%COMP%]   button.panel-button[_ngcontent-%COMP%]{background:rgba(220,220,220,.35);align-items:center;vertical-align:middle;min-width:32px;min-height:15px;padding:4px;font-size:.8rem;line-height:15px;color:#7b7b7b}',
          ],
        }));
    },
    69741: (ee, R, t) => {
      "use strict";
      t.r(R), t.d(R, { TbMarkdownComponent: () => _ });
      var e = t(37716),
        n = t(32534),
        a = t(76715),
        C = t(76801),
        s = t(39490),
        d = t(95129),
        o = t(41960),
        i = t(25917),
        g = t(88229),
        D = t(38583),
        y = t(88030),
        m = t(5609);
      const r = ["markdownContainer"],
        h = ["fallbackElement"];
      function p(E, c) {
        if (
          (1 & E &&
            (e.ɵɵelementStart(0, "div", 4), e.ɵɵtext(1), e.ɵɵelementEnd()),
          2 & E)
        ) {
          const v = e.ɵɵnextContext();
          e.ɵɵadvance(1), e.ɵɵtextInterpolate1(" ", v.error, "\n");
        }
      }
      class _ {
        constructor(c, v, I, l, T) {
          (this.help = c),
            (this.cd = v),
            (this.markdownService = I),
            (this.sharedModule = l),
            (this.dynamicComponentFactoryService = T),
            (this.style = {}),
            (this.ready = new e.EventEmitter()),
            (this.lineNumbersValue = !1),
            (this.fallbackToPlainMarkdownValue = !1),
            (this.isMarkdownReady = !1),
            (this.error = null);
        }
        get lineNumbers() {
          return this.lineNumbersValue;
        }
        set lineNumbers(c) {
          this.lineNumbersValue = (0, s.coerceBooleanProperty)(c);
        }
        get fallbackToPlainMarkdown() {
          return this.fallbackToPlainMarkdownValue;
        }
        set fallbackToPlainMarkdown(c) {
          this.fallbackToPlainMarkdownValue = (0, s.coerceBooleanProperty)(c);
        }
        ngOnChanges(c) {
          (0, o.nu)(this.data) && this.render(this.data);
        }
        render(c) {
          const v = this.markdownService.compile(c, !1);
          let I = this.sanitizeCurlyBraces(v),
            l = "tb-markdown-view";
          this.markdownClass && (l += ` ${this.markdownClass}`),
            (I = `<div [ngStyle]="style" class="${l}">${I}</div>`),
            this.markdownContainer.clear();
          const T = this;
          let O,
            w = [this.sharedModule];
          this.additionalCompileModules &&
            (w = w.concat(this.additionalCompileModules)),
            this.dynamicComponentFactoryService
              .createDynamicComponentFactory(
                class {
                  ngOnDestroy() {
                    T.destroyMarkdownInstanceResources();
                  }
                },
                I,
                w,
                !0
              )
              .subscribe(
                (b) => {
                  this.tbMarkdownInstanceComponentFactory = b;
                  const S = e.Injector.create({
                    providers: [],
                    parent: this.markdownContainer.injector,
                  });
                  try {
                    if (
                      ((this.tbMarkdownInstanceComponentRef =
                        this.markdownContainer.createComponent(
                          this.tbMarkdownInstanceComponentFactory,
                          0,
                          S
                        )),
                      this.context)
                    )
                      for (const u of Object.keys(this.context))
                        this.tbMarkdownInstanceComponentRef.instance[u] =
                          this.context[u];
                    (this.tbMarkdownInstanceComponentRef.instance.style =
                      this.style),
                      this.handlePlugins(
                        this.tbMarkdownInstanceComponentRef.location
                          .nativeElement
                      ),
                      this.markdownService.highlight(
                        this.tbMarkdownInstanceComponentRef.location
                          .nativeElement
                      ),
                      (O = this.handleImages(
                        this.tbMarkdownInstanceComponentRef.location
                          .nativeElement
                      )),
                      this.cd.detectChanges(),
                      (this.error = null);
                  } catch (u) {
                    O = this.handleError(v, u);
                  }
                  O.subscribe(() => {
                    this.ready.emit();
                  });
                },
                (b) => {
                  (O = this.handleError(v, b)),
                    this.cd.detectChanges(),
                    O.subscribe(() => {
                      this.ready.emit();
                    });
                }
              );
        }
        handleError(c, v) {
          if (
            ((this.error = (v ? v + "" : "Failed to render markdown!").replace(
              /\n/g,
              "<br>"
            )),
            this.markdownContainer.clear(),
            this.fallbackToPlainMarkdownValue)
          ) {
            const I = this.fallbackElement.nativeElement;
            return (
              (I.innerHTML = c),
              this.handlePlugins(I),
              this.markdownService.highlight(I),
              this.handleImages(I)
            );
          }
          return (0, i.of)(null);
        }
        handlePlugins(c) {
          this.lineNumbers && this.setPluginClass(c, a.Gg.LineNumbers);
        }
        setPluginClass(c, v) {
          const I = c.querySelectorAll("pre");
          for (let l = 0; l < I.length; l++) {
            const T = v instanceof Array ? v : [v];
            I.item(l).classList.add(...T);
          }
        }
        handleImages(c) {
          const v = m("img", c);
          if (v.length) {
            let I = v.length;
            const l = new g.t();
            return (
              v.each((T, O) => {
                m(O).one("load error", () => {
                  I--, 0 === I && (l.next(), l.complete());
                });
              }),
              l.asObservable()
            );
          }
          return (0, i.of)(null);
        }
        sanitizeCurlyBraces(c) {
          return c.replace(/{/g, "&#123;").replace(/}/g, "&#125;");
        }
        destroyMarkdownInstanceResources() {
          this.tbMarkdownInstanceComponentFactory &&
            (this.dynamicComponentFactoryService.destroyDynamicComponentFactory(
              this.tbMarkdownInstanceComponentFactory
            ),
            (this.tbMarkdownInstanceComponentFactory = null)),
            (this.tbMarkdownInstanceComponentRef = null);
        }
      }
      (_.ɵfac = function (c) {
        return new (c || _)(
          e.ɵɵdirectiveInject(n.s),
          e.ɵɵdirectiveInject(e.ChangeDetectorRef),
          e.ɵɵdirectiveInject(a.Zy),
          e.ɵɵdirectiveInject(d.w),
          e.ɵɵdirectiveInject(C.u)
        );
      }),
        (_.ɵcmp = e.ɵɵdefineComponent({
          type: _,
          selectors: [["tb-markdown"]],
          viewQuery: function (c, v) {
            if (
              (1 & c &&
                (e.ɵɵviewQuery(r, 7, e.ViewContainerRef), e.ɵɵviewQuery(h, 7)),
              2 & c)
            ) {
              let I;
              e.ɵɵqueryRefresh((I = e.ɵɵloadQuery())) &&
                (v.markdownContainer = I.first),
                e.ɵɵqueryRefresh((I = e.ɵɵloadQuery())) &&
                  (v.fallbackElement = I.first);
            }
          },
          inputs: {
            data: "data",
            context: "context",
            additionalCompileModules: "additionalCompileModules",
            markdownClass: "markdownClass",
            style: "style",
            lineNumbers: "lineNumbers",
            fallbackToPlainMarkdown: "fallbackToPlainMarkdown",
          },
          outputs: { ready: "ready" },
          features: [e.ɵɵNgOnChangesFeature],
          decls: 5,
          vars: 4,
          consts: [
            ["markdownContainer", ""],
            [
              "style",
              "color: #f00; font-size: 14px;\n                                                      line-height: 28px;\n                                                      background: #efefef;",
              4,
              "ngIf",
            ],
            [1, "tb-markdown-view", 3, "fxShow", "ngClass", "ngStyle"],
            ["fallbackElement", ""],
            [
              2,
              "color",
              "#f00",
              "font-size",
              "14px",
              "line-height",
              "28px",
              "background",
              "#efefef",
            ],
          ],
          template: function (c, v) {
            1 & c &&
              (e.ɵɵelementContainer(0, null, 0),
              e.ɵɵtemplate(2, p, 2, 1, "div", 1),
              e.ɵɵelement(3, "div", 2, 3)),
              2 & c &&
                (e.ɵɵadvance(2),
                e.ɵɵproperty("ngIf", v.error && !v.fallbackToPlainMarkdown),
                e.ɵɵadvance(1),
                e.ɵɵproperty("fxShow", v.error && v.fallbackToPlainMarkdown)(
                  "ngClass",
                  v.markdownClass
                )("ngStyle", v.style));
          },
          directives: [
            D.NgIf,
            y.DefaultShowHideDirective,
            D.NgClass,
            y.DefaultClassDirective,
            D.NgStyle,
            y.DefaultStyleDirective,
          ],
          encapsulation: 2,
        }));
    },
    46382: (ee, R, t) => {
      "use strict";
      t.r(R), t.d(R, { MatChipDraggableDirective: () => a });
      var e = t(37716),
        n = t(58341);
      class a {
        constructor(y, m) {
          (this.chipsList = y),
            (this.elementRef = m),
            (this.chipDrop = new e.EventEmitter()),
            (this.draggableChips = []);
        }
        onDocumentMouseUp() {
          this.draggableChips.forEach((y) => {
            y.preventDrag = !1;
          });
        }
        ngAfterViewInit() {
          this.configureDraggableChipList(),
            this.chipsList.chips.changes.subscribe(() => {
              this.configureDraggableChipList();
            });
        }
        configureDraggableChipList() {
          const y = [];
          this.chipsList.chips.forEach((m) => {
            this.draggableChips.find((h) => h.chip === m) ||
              this.draggableChips.push(
                new g(
                  m,
                  this.chipsList,
                  this.elementRef.nativeElement,
                  this.chipDrop
                )
              );
          }),
            this.draggableChips.forEach((m) => {
              this.chipsList.chips.find((h) => h === m.chip) || y.push(m);
            }),
            y.forEach((m) => {
              const r = this.draggableChips.indexOf(m);
              this.draggableChips.splice(r, 1);
            });
        }
      }
      (a.ɵfac = function (y) {
        return new (y || a)(
          e.ɵɵdirectiveInject(n.MatChipList),
          e.ɵɵdirectiveInject(e.ElementRef)
        );
      }),
        (a.ɵdir = e.ɵɵdefineDirective({
          type: a,
          selectors: [["mat-chip-list", "tb-chip-draggable", ""]],
          hostBindings: function (y, m) {
            1 & y &&
              e.ɵɵlistener(
                "mouseup",
                function () {
                  return m.onDocumentMouseUp();
                },
                !1,
                e.ɵɵresolveDocument
              );
          },
          outputs: { chipDrop: "chipDrop" },
        }));
      const C = "dragging",
        s = "dropping",
        d = "dropping-before",
        o = "dropping-after";
      let i = null;
      class g {
        constructor(y, m, r, h) {
          (this.chip = y),
            (this.chipsList = m),
            (this.chipListElement = r),
            (this.chipDrop = h),
            (this.dragging = !1),
            (this.counter = 0),
            (this.preventDrag = !1),
            (this.dropHandler = this.onDrop.bind(this)),
            (this.dragOverHandler = this.onDragOver.bind(this)),
            (this.chipElement = y._elementRef.nativeElement),
            this.chipElement.setAttribute("draggable", "true"),
            (this.handle = this.chipElement.getElementsByClassName(
              "tb-chip-drag-handle"
            )[0]),
            this.chipElement.addEventListener(
              "mousedown",
              this.onMouseDown.bind(this)
            ),
            this.chipElement.addEventListener(
              "dragstart",
              this.onDragStart.bind(this)
            ),
            this.chipElement.addEventListener(
              "dragend",
              this.onDragEnd.bind(this)
            ),
            this.chipElement.addEventListener(
              "dragenter",
              this.onDragEnter.bind(this)
            ),
            this.chipElement.addEventListener(
              "dragleave",
              this.onDragLeave.bind(this)
            );
        }
        onMouseDown(y) {
          y.target !== this.handle && (this.preventDrag = !0);
        }
        onDragStart(y) {
          if (this.preventDrag) y.preventDefault();
          else {
            y.stopPropagation(),
              (this.dragging = !0),
              (i = this.chipListElement.id),
              this.chipListElement.classList.add(C),
              this.chipElement.classList.add(C);
            const m = (y = y.originalEvent || y).dataTransfer;
            (m.effectAllowed = "copyMove"),
              (m.dropEffect = "move"),
              m.setData("text", this.index() + "");
            const r = this.calculateDragImageOffset(y, this.chipElement) || {
              x: 0,
              y: 0,
            };
            y.dataTransfer.setDragImage(this.chipElement, r.x, r.y);
          }
        }
        onDragEnter(y) {
          this.counter++,
            !this.dragging &&
              (this.chipElement.removeEventListener(
                "dragover",
                this.dragOverHandler
              ),
              this.chipElement.removeEventListener("drop", this.dropHandler),
              this.chipElement.addEventListener(
                "dragover",
                this.dragOverHandler
              ),
              this.chipElement.addEventListener("drop", this.dropHandler));
        }
        onDragLeave(y) {
          this.counter--,
            this.counter <= 0 &&
              ((this.counter = 0),
              this.chipElement.classList.remove(s),
              this.chipElement.classList.remove(o),
              this.chipElement.classList.remove(d));
        }
        onDragEnd(y) {
          y.stopPropagation(),
            (this.dragging = !1),
            (i = null),
            this.chipListElement.classList.remove(C),
            this.chipElement.classList.remove(C);
        }
        onDragOver(y) {
          if (
            this.dragging ||
            (y.preventDefault(), i !== this.chipListElement.id)
          )
            return;
          const m = this.chipElement.getBoundingClientRect();
          y = y.originalEvent || y;
          const r = {
              width: m.right - m.left,
              height: m.bottom - m.top,
              x: y.clientX - m.left,
              y: y.clientY - m.top,
            },
            h = r.x,
            p = r.width / 2,
            _ = r.y,
            E = r.height / 2;
          this.chipElement.classList.add(s),
            this.chipElement.classList.remove(o),
            this.chipElement.classList.remove(d),
            h >= p || _ >= E
              ? ((this.dropPosition = "after"),
                this.chipElement.classList.add(o))
              : ((this.dropPosition = "before"),
                this.chipElement.classList.add(d));
        }
        onDrop(y) {
          if (
            ((this.counter = 0),
            y.preventDefault(),
            i !== this.chipListElement.id)
          )
            return;
          y = y.originalEvent || y;
          const m = parseInt(y.dataTransfer.getData("text"), 10),
            r = this.index();
          let h;
          (h =
            "before" === this.dropPosition
              ? m < r
                ? r - 1
                : r
              : m < r
              ? r
              : r + 1),
            this.dropTimeout && clearTimeout(this.dropTimeout),
            (this.dropTimeout = setTimeout(() => {
              (this.dropPosition = null),
                this.chipElement.classList.remove(s),
                this.chipElement.classList.remove(o),
                this.chipElement.classList.remove(d),
                this.chipElement.removeEventListener("drop", this.dropHandler);
              const p = { from: m, to: h };
              this.chipDrop.emit(p);
            }, 62.5));
        }
        index() {
          return this.chipsList.chips.toArray().indexOf(this.chip);
        }
        calculateDragImageOffset(y, m) {
          const r = window.getComputedStyle(m),
            h = parseFloat(r.paddingTop) || 0,
            p = parseFloat(r.paddingLeft) || 0,
            _ = parseFloat(r.borderTopWidth) || 0,
            E = parseFloat(r.borderLeftWidth) || 0;
          return { x: y.offsetX + p + E, y: y.offsetY + h + _ };
        }
      }
    },
    87061: (ee, R, t) => {
      "use strict";
      t.r(R), t.d(R, { MaterialIconSelectComponent: () => p });
      var e = t(37716),
        n = t(75362),
        a = t(3679),
        C = t(16797),
        s = t(39490),
        d = t(86710),
        o = t(29790),
        i = t(35618),
        g = t(76627),
        D = t(98295),
        y = t(83166),
        m = t(38583),
        r = t(51095);
      function h(_, E) {
        if (1 & _) {
          const c = e.ɵɵgetCurrentView();
          e.ɵɵelementStart(0, "button", 5),
            e.ɵɵlistener("click", function () {
              return e.ɵɵrestoreView(c), e.ɵɵnextContext().clear();
            }),
            e.ɵɵelementStart(1, "mat-icon", 6),
            e.ɵɵtext(2, "close"),
            e.ɵɵelementEnd(),
            e.ɵɵelementEnd();
        }
      }
      class p extends n.I {
        constructor(E, c, v, I) {
          super(E),
            (this.store = E),
            (this.dialogs = c),
            (this.translate = v),
            (this.fb = I),
            (this.label = this.translate.instant("icon.icon")),
            (this.propagateChange = null);
        }
        get iconClearButton() {
          return this.iconClearButtonValue;
        }
        set iconClearButton(E) {
          const c = (0, s.coerceBooleanProperty)(E);
          this.iconClearButtonValue !== c && (this.iconClearButtonValue = c);
        }
        get required() {
          return this.requiredValue;
        }
        set required(E) {
          this.requiredValue = (0, s.coerceBooleanProperty)(E);
        }
        ngOnInit() {
          (this.materialIconFormGroup = this.fb.group({ icon: [null, []] })),
            this.materialIconFormGroup.valueChanges.subscribe(() => {
              this.updateModel();
            });
        }
        registerOnChange(E) {
          this.propagateChange = E;
        }
        registerOnTouched(E) {}
        setDisabledState(E) {
          (this.disabled = E),
            E
              ? this.materialIconFormGroup.disable({ emitEvent: !1 })
              : this.materialIconFormGroup.enable({ emitEvent: !1 });
        }
        writeValue(E) {
          (this.modelValue = E),
            this.materialIconFormGroup.patchValue(
              { icon: this.modelValue },
              { emitEvent: !1 }
            );
        }
        updateModel() {
          const E = this.materialIconFormGroup.get("icon").value;
          this.modelValue !== E &&
            ((this.modelValue = E), this.propagateChange(this.modelValue));
        }
        openIconDialog() {
          this.disabled ||
            this.dialogs
              .materialIconPicker(this.materialIconFormGroup.get("icon").value)
              .subscribe((E) => {
                E &&
                  this.materialIconFormGroup.patchValue(
                    { icon: E },
                    { emitEvent: !0 }
                  );
              });
        }
        clear() {
          this.materialIconFormGroup
            .get("icon")
            .patchValue(null, { emitEvent: !0 });
        }
      }
      (p.ɵfac = function (E) {
        return new (E || p)(
          e.ɵɵdirectiveInject(d.Store),
          e.ɵɵdirectiveInject(C.x),
          e.ɵɵdirectiveInject(o.TranslateService),
          e.ɵɵdirectiveInject(a.FormBuilder)
        );
      }),
        (p.ɵcmp = e.ɵɵdefineComponent({
          type: p,
          selectors: [["tb-material-icon-select"]],
          inputs: {
            label: "label",
            disabled: "disabled",
            iconClearButton: "iconClearButton",
            required: "required",
          },
          features: [
            e.ɵɵProvidersFeature([
              {
                provide: a.NG_VALUE_ACCESSOR,
                useExisting: (0, e.forwardRef)(() => p),
                multi: !0,
              },
            ]),
            e.ɵɵInheritDefinitionFeature,
          ],
          decls: 8,
          vars: 5,
          consts: [
            ["fxLayout", "row", 3, "formGroup"],
            [1, "icon-value", 3, "click"],
            ["fxFlex", ""],
            [
              "matInput",
              "",
              "formControlName",
              "icon",
              3,
              "required",
              "mousedown",
            ],
            [
              "type",
              "button",
              "matSuffix",
              "",
              "mat-button",
              "",
              "mat-icon-button",
              "",
              "aria-label",
              "Clear",
              3,
              "click",
              4,
              "ngIf",
            ],
            [
              "type",
              "button",
              "matSuffix",
              "",
              "mat-button",
              "",
              "mat-icon-button",
              "",
              "aria-label",
              "Clear",
              3,
              "click",
            ],
            [1, "material-icons"],
          ],
          template: function (E, c) {
            1 & E &&
              (e.ɵɵelementStart(0, "div", 0),
              e.ɵɵelementStart(1, "mat-icon", 1),
              e.ɵɵlistener("click", function () {
                return c.openIconDialog();
              }),
              e.ɵɵtext(2),
              e.ɵɵelementEnd(),
              e.ɵɵelementStart(3, "mat-form-field", 2),
              e.ɵɵelementStart(4, "mat-label"),
              e.ɵɵtext(5),
              e.ɵɵelementEnd(),
              e.ɵɵelementStart(6, "input", 3),
              e.ɵɵlistener("mousedown", function () {
                return c.openIconDialog();
              }),
              e.ɵɵelementEnd(),
              e.ɵɵtemplate(7, h, 3, 0, "button", 4),
              e.ɵɵelementEnd(),
              e.ɵɵelementEnd()),
              2 & E &&
                (e.ɵɵproperty("formGroup", c.materialIconFormGroup),
                e.ɵɵadvance(2),
                e.ɵɵtextInterpolate(c.materialIconFormGroup.get("icon").value),
                e.ɵɵadvance(3),
                e.ɵɵtextInterpolate(c.label),
                e.ɵɵadvance(1),
                e.ɵɵproperty("required", c.required),
                e.ɵɵadvance(1),
                e.ɵɵproperty("ngIf", c.iconClearButton));
          },
          directives: [
            i.DefaultLayoutDirective,
            a.NgControlStatusGroup,
            a.FormGroupDirective,
            g.MatIcon,
            D.MatFormField,
            i.DefaultFlexDirective,
            D.MatLabel,
            y.MatInput,
            a.DefaultValueAccessor,
            a.NgControlStatus,
            a.FormControlName,
            a.RequiredValidator,
            m.NgIf,
            r.MatButton,
            D.MatSuffix,
          ],
          styles: [
            '@charset "UTF-8";[_nghost-%COMP%]   .mat-icon.icon-value[_ngcontent-%COMP%]{padding:4px;margin:8px 4px 4px;cursor:pointer;border:solid 1px rgba(0,0,0,.27)}[_nghost-%COMP%]     .mat-form-field-infix{width:146px}',
          ],
        }));
    },
    73642: (ee, R, t) => {
      "use strict";
      t.r(R), t.d(R, { MessageTypeAutocompleteComponent: () => b });
      var e = t(37716),
        n = t(3679),
        a = t(25917),
        C = t(68307),
        s = t(39761),
        d = t(88002),
        o = t(19773),
        i = t(39490),
        g = t(41429),
        D = t(41960),
        y = t(86710),
        m = t(29790),
        r = t(98295),
        h = t(83166),
        p = t(21554),
        _ = t(38583),
        E = t(51095),
        c = t(76627),
        v = t(72458),
        I = t(53883);
      const l = ["messageTypeInput"];
      function T(S, u) {
        if (1 & S) {
          const f = e.ɵɵgetCurrentView();
          e.ɵɵelementStart(0, "button", 8),
            e.ɵɵlistener("click", function () {
              return e.ɵɵrestoreView(f), e.ɵɵnextContext().clear();
            }),
            e.ɵɵelementStart(1, "mat-icon", 9),
            e.ɵɵtext(2, "close"),
            e.ɵɵelementEnd(),
            e.ɵɵelementEnd();
        }
      }
      function O(S, u) {
        if (
          (1 & S &&
            (e.ɵɵelementStart(0, "mat-option", 10),
            e.ɵɵelement(1, "span", 11),
            e.ɵɵpipe(2, "highlight"),
            e.ɵɵelementEnd()),
          2 & S)
        ) {
          const f = u.$implicit,
            M = e.ɵɵnextContext();
          e.ɵɵproperty("value", f),
            e.ɵɵadvance(1),
            e.ɵɵproperty(
              "innerHTML",
              e.ɵɵpipeBind2(2, 2, M.displayMessageTypeFn(f), M.searchText),
              e.ɵɵsanitizeHtml
            );
        }
      }
      function w(S, u) {
        1 & S &&
          (e.ɵɵelementStart(0, "mat-error"),
          e.ɵɵtext(1),
          e.ɵɵpipe(2, "translate"),
          e.ɵɵelementEnd()),
          2 & S &&
            (e.ɵɵadvance(1),
            e.ɵɵtextInterpolate1(
              " ",
              e.ɵɵpipeBind1(2, 1, "rulenode.message-type-required"),
              " "
            ));
      }
      class b {
        constructor(u, f, M) {
          (this.store = u),
            (this.translate = f),
            (this.fb = M),
            (this.searchText = ""),
            (this.dirty = !1),
            (this.propagateChange = (L) => {}),
            (this.messageTypeFormGroup = this.fb.group({
              messageType: [null],
            }));
        }
        get required() {
          return this.requiredValue;
        }
        set required(u) {
          this.requiredValue = (0, i.coerceBooleanProperty)(u);
        }
        registerOnChange(u) {
          this.propagateChange = u;
        }
        registerOnTouched(u) {}
        ngOnInit() {
          this.filteredMessageTypes = this.messageTypeFormGroup
            .get("messageType")
            .valueChanges.pipe(
              (0, C.b)((u) => {
                this.updateView(u);
              }),
              (0, s.O)(""),
              (0, d.U)((u) => u || ""),
              (0, o.zg)((u) => this.fetchMessageTypes(u))
            );
        }
        ngAfterViewInit() {}
        ngOnDestroy() {}
        setDisabledState(u) {
          (this.disabled = u),
            this.disabled
              ? this.messageTypeFormGroup.disable({ emitEvent: !1 })
              : this.messageTypeFormGroup.enable({ emitEvent: !1 });
        }
        writeValue(u) {
          (this.searchText = ""), (this.modelValue = u);
          let f = null;
          u && (f = (0, D.TT)(g.Cs).includes(u) ? g.Cs[u] : u),
            this.messageTypeFormGroup
              .get("messageType")
              .patchValue(f, { emitEvent: !1 }),
            (this.dirty = !0);
        }
        onFocus() {
          this.dirty &&
            (this.messageTypeFormGroup
              .get("messageType")
              .updateValueAndValidity({ onlySelf: !0, emitEvent: !0 }),
            (this.dirty = !1));
        }
        updateView(u) {
          let f = null;
          u && (f = (0, D.TT)(g.Cs).includes(u) ? g.Cs[u] : u),
            this.modelValue !== f &&
              ((this.modelValue = f), this.propagateChange(this.modelValue));
        }
        displayMessageTypeFn(u) {
          if (u) return (0, D.TT)(g.Cs).includes(u) ? g.gf.get(g.Cs[u]) : u;
        }
        fetchMessageTypes(u) {
          this.searchText = u;
          const f = [];
          return (
            g.gf.forEach((M, L) => {
              M.toUpperCase().includes(u.toUpperCase()) && f.push(L);
            }),
            f.length ? (0, a.of)(f) : (0, a.of)([u])
          );
        }
        clear() {
          this.messageTypeFormGroup
            .get("messageType")
            .patchValue(null, { emitEvent: !0 }),
            setTimeout(() => {
              this.messageTypeInput.nativeElement.blur(),
                this.messageTypeInput.nativeElement.focus();
            }, 0);
        }
      }
      (b.ɵfac = function (u) {
        return new (u || b)(
          e.ɵɵdirectiveInject(y.Store),
          e.ɵɵdirectiveInject(m.TranslateService),
          e.ɵɵdirectiveInject(n.FormBuilder)
        );
      }),
        (b.ɵcmp = e.ɵɵdefineComponent({
          type: b,
          selectors: [["tb-message-type-autocomplete"]],
          viewQuery: function (u, f) {
            if ((1 & u && e.ɵɵviewQuery(l, 7), 2 & u)) {
              let M;
              e.ɵɵqueryRefresh((M = e.ɵɵloadQuery())) &&
                (f.messageTypeInput = M.first);
            }
          },
          inputs: { required: "required", disabled: "disabled" },
          features: [
            e.ɵɵProvidersFeature([
              {
                provide: n.NG_VALUE_ACCESSOR,
                useExisting: (0, e.forwardRef)(() => b),
                multi: !0,
              },
            ]),
          ],
          decls: 13,
          vars: 15,
          consts: [
            [1, "mat-block", 3, "formGroup"],
            [
              "matInput",
              "",
              "type",
              "text",
              "formControlName",
              "messageType",
              3,
              "placeholder",
              "required",
              "matAutocomplete",
              "focusin",
            ],
            ["messageTypeInput", ""],
            [
              "type",
              "button",
              "matSuffix",
              "",
              "mat-button",
              "",
              "mat-icon-button",
              "",
              "aria-label",
              "Clear",
              3,
              "click",
              4,
              "ngIf",
            ],
            [1, "tb-autocomplete", 3, "displayWith"],
            ["messageTypeAutocomplete", "matAutocomplete"],
            [3, "value", 4, "ngFor", "ngForOf"],
            [4, "ngIf"],
            [
              "type",
              "button",
              "matSuffix",
              "",
              "mat-button",
              "",
              "mat-icon-button",
              "",
              "aria-label",
              "Clear",
              3,
              "click",
            ],
            [1, "material-icons"],
            [3, "value"],
            [3, "innerHTML"],
          ],
          template: function (u, f) {
            if (
              (1 & u &&
                (e.ɵɵelementStart(0, "mat-form-field", 0),
                e.ɵɵelementStart(1, "mat-label"),
                e.ɵɵtext(2),
                e.ɵɵpipe(3, "translate"),
                e.ɵɵelementEnd(),
                e.ɵɵelementStart(4, "input", 1, 2),
                e.ɵɵlistener("focusin", function () {
                  return f.onFocus();
                }),
                e.ɵɵpipe(6, "translate"),
                e.ɵɵelementEnd(),
                e.ɵɵtemplate(7, T, 3, 0, "button", 3),
                e.ɵɵelementStart(8, "mat-autocomplete", 4, 5),
                e.ɵɵtemplate(10, O, 3, 5, "mat-option", 6),
                e.ɵɵpipe(11, "async"),
                e.ɵɵelementEnd(),
                e.ɵɵtemplate(12, w, 3, 3, "mat-error", 7),
                e.ɵɵelementEnd()),
              2 & u)
            ) {
              const M = e.ɵɵreference(9);
              e.ɵɵproperty("formGroup", f.messageTypeFormGroup),
                e.ɵɵadvance(2),
                e.ɵɵtextInterpolate(
                  e.ɵɵpipeBind1(3, 9, "rulenode.message-type")
                ),
                e.ɵɵadvance(2),
                e.ɵɵpropertyInterpolate(
                  "placeholder",
                  e.ɵɵpipeBind1(6, 11, "rulenode.select-message-type")
                ),
                e.ɵɵproperty("required", f.required)("matAutocomplete", M),
                e.ɵɵadvance(3),
                e.ɵɵproperty(
                  "ngIf",
                  f.messageTypeFormGroup.get("messageType").value && !f.disabled
                ),
                e.ɵɵadvance(1),
                e.ɵɵproperty("displayWith", f.displayMessageTypeFn),
                e.ɵɵadvance(2),
                e.ɵɵproperty(
                  "ngForOf",
                  e.ɵɵpipeBind1(11, 13, f.filteredMessageTypes)
                ),
                e.ɵɵadvance(2),
                e.ɵɵproperty(
                  "ngIf",
                  f.messageTypeFormGroup.get("messageType").hasError("required")
                );
            }
          },
          directives: [
            r.MatFormField,
            n.NgControlStatusGroup,
            n.FormGroupDirective,
            r.MatLabel,
            h.MatInput,
            n.DefaultValueAccessor,
            p.MatAutocompleteTrigger,
            n.NgControlStatus,
            n.FormControlName,
            n.RequiredValidator,
            _.NgIf,
            p.MatAutocomplete,
            _.NgForOf,
            E.MatButton,
            r.MatSuffix,
            c.MatIcon,
            v.MatOption,
            r.MatError,
          ],
          pipes: [m.TranslatePipe, _.AsyncPipe, I.HighlightPipe],
          encapsulation: 2,
        }));
    },
    7662: (ee, R, t) => {
      "use strict";
      t.r(R), t.d(R, { MultipleImageInputComponent: () => V });
      var e = t(37716),
        n = t(75362),
        a = t(3679),
        C = t(39490),
        s = t(1361),
        d = t(16797),
        o = t(35223),
        i = t(77310),
        g = t(41960),
        D = t(86710),
        y = t(39075),
        m = t(29790),
        r = t(38583),
        h = t(17414),
        p = t(17897),
        _ = t(35618),
        E = t(88030),
        c = t(76627),
        v = t(51095),
        I = t(11436);
      const l = ["flow"],
        T = ["flowDrop"],
        O = function (P, A) {
          return { "tb-error": P, "tb-required": A };
        };
      function w(P, A) {
        if (
          (1 & P &&
            (e.ɵɵelementStart(0, "label", 12), e.ɵɵtext(1), e.ɵɵelementEnd()),
          2 & P)
        ) {
          const U = e.ɵɵnextContext();
          e.ɵɵproperty(
            "ngClass",
            e.ɵɵpureFunction2(
              2,
              O,
              !U.disabled && U.required && !U.safeImageUrls.length,
              !U.disabled && U.required
            )
          ),
            e.ɵɵadvance(1),
            e.ɵɵtextInterpolate(U.label);
        }
      }
      function b(P, A) {
        1 & P &&
          (e.ɵɵelementStart(0, "div", 20),
          e.ɵɵelementStart(1, "mat-icon", 21),
          e.ɵɵtext(2, "drag_indicator"),
          e.ɵɵelementEnd(),
          e.ɵɵelementEnd());
      }
      function S(P, A) {
        if (1 & P) {
          const U = e.ɵɵgetCurrentView();
          e.ɵɵelementStart(0, "div", 22),
            e.ɵɵelementStart(1, "button", 23),
            e.ɵɵlistener("click", function () {
              e.ɵɵrestoreView(U);
              const Z = e.ɵɵnextContext().index;
              return e.ɵɵnextContext().clearImage(Z);
            }),
            e.ɵɵpipe(2, "translate"),
            e.ɵɵelementStart(3, "mat-icon"),
            e.ɵɵtext(4, "close"),
            e.ɵɵelementEnd(),
            e.ɵɵelementEnd(),
            e.ɵɵelementEnd();
        }
        2 & P &&
          (e.ɵɵadvance(1),
          e.ɵɵpropertyInterpolate(
            "matTooltip",
            e.ɵɵpipeBind1(2, 1, "action.remove")
          ));
      }
      const u = function (P) {
        return { "image-dragging": P };
      };
      function f(P, A) {
        if (1 & P) {
          const U = e.ɵɵgetCurrentView();
          e.ɵɵelementStart(0, "div", 13),
            e.ɵɵlistener("dndStart", function () {
              const le = e.ɵɵrestoreView(U).index;
              return e.ɵɵnextContext().imageDragStart(le);
            })("dndEnd", function () {
              return e.ɵɵrestoreView(U), e.ɵɵnextContext().imageDragEnd();
            }),
            e.ɵɵelementStart(1, "span", 14),
            e.ɵɵtext(2),
            e.ɵɵpipe(3, "translate"),
            e.ɵɵelementEnd(),
            e.ɵɵelementStart(4, "div", 15),
            e.ɵɵtemplate(5, b, 3, 0, "div", 16),
            e.ɵɵelementStart(6, "div", 17),
            e.ɵɵelement(7, "img", 18),
            e.ɵɵelementEnd(),
            e.ɵɵtemplate(8, S, 5, 3, "div", 19),
            e.ɵɵelementEnd(),
            e.ɵɵelementEnd();
        }
        if (2 & P) {
          const U = A.$implicit,
            G = A.index,
            Z = e.ɵɵnextContext();
          e.ɵɵproperty("dndDraggable", U)("dndDisableIf", Z.disabled)(
            "ngClass",
            e.ɵɵpureFunction1(10, u, Z.dragIndex === G)
          ),
            e.ɵɵadvance(2),
            e.ɵɵtextInterpolate2(
              "",
              e.ɵɵpipeBind1(3, 8, "image-input.images"),
              " [",
              G,
              "]"
            ),
            e.ɵɵadvance(3),
            e.ɵɵproperty("ngIf", !Z.disabled),
            e.ɵɵadvance(2),
            e.ɵɵproperty("src", U, e.ɵɵsanitizeUrl),
            e.ɵɵadvance(1),
            e.ɵɵproperty("ngIf", !Z.disabled);
        }
      }
      function M(P, A) {
        1 & P &&
          (e.ɵɵelementStart(0, "div", 24),
          e.ɵɵtext(1),
          e.ɵɵpipe(2, "translate"),
          e.ɵɵelementEnd()),
          2 & P &&
            (e.ɵɵadvance(1),
            e.ɵɵtextInterpolate(e.ɵɵpipeBind1(2, 1, "image-input.no-images")));
      }
      const L = function () {
        return { accept: "image/*" };
      };
      function k(P, A) {
        if (
          (1 & P &&
            (e.ɵɵelementStart(0, "div", 25),
            e.ɵɵelementStart(1, "div", 26),
            e.ɵɵelementStart(2, "mat-icon"),
            e.ɵɵtext(3, "cloud_upload"),
            e.ɵɵelementEnd(),
            e.ɵɵelementStart(4, "span", 27),
            e.ɵɵtext(5, "image-input.drop-images-or"),
            e.ɵɵelementEnd(),
            e.ɵɵelementStart(6, "button", 28),
            e.ɵɵelementStart(7, "label", 29),
            e.ɵɵtext(8),
            e.ɵɵpipe(9, "translate"),
            e.ɵɵelementEnd(),
            e.ɵɵelementEnd(),
            e.ɵɵelement(10, "input", 30),
            e.ɵɵelementEnd(),
            e.ɵɵelementEnd()),
          2 & P)
        ) {
          const U = e.ɵɵnextContext(),
            G = e.ɵɵreference(3);
          e.ɵɵadvance(7),
            e.ɵɵpropertyInterpolate("for", U.inputId),
            e.ɵɵadvance(1),
            e.ɵɵtextInterpolate(e.ɵɵpipeBind1(9, 5, "file-input.browse-files")),
            e.ɵɵadvance(2),
            e.ɵɵpropertyInterpolate("id", U.inputId),
            e.ɵɵproperty("flow", G.flowJs)(
              "flowAttributes",
              e.ɵɵpureFunction0(7, L)
            );
        }
      }
      const N = function (P) {
        return { size: P };
      };
      function B(P, A) {
        if (
          (1 & P &&
            (e.ɵɵelementStart(0, "div", 31),
            e.ɵɵpipe(1, "fileSize"),
            e.ɵɵtext(2, "dashboard.maximum-upload-file-size"),
            e.ɵɵelementEnd()),
          2 & P)
        ) {
          const U = e.ɵɵnextContext();
          e.ɵɵproperty(
            "translateParams",
            e.ɵɵpureFunction1(3, N, e.ɵɵpipeBind1(1, 1, U.maxSizeByte))
          );
        }
      }
      const j = function () {
          return { allowDuplicateUploads: !0 };
        },
        F = function (P) {
          return { "no-images": P };
        };
      class V extends n.I {
        constructor(A, U, G, Z, le, X, se) {
          super(A),
            (this.store = A),
            (this.utils = U),
            (this.sanitizer = G),
            (this.dialog = Z),
            (this.translate = le),
            (this.fileSize = X),
            (this.cd = se),
            (this.inputId = this.utils.guid()),
            (this.propagateChange = null),
            (this.viewInited = !1);
        }
        get required() {
          return this.requiredValue;
        }
        set required(A) {
          const U = (0, C.coerceBooleanProperty)(A);
          this.requiredValue !== U && (this.requiredValue = U);
        }
        ngAfterViewInit() {
          (this.autoUploadSubscription = this.flow.events$.subscribe((A) => {
            if ("filesAdded" === A.type) {
              const U = [];
              A.event[0].forEach((G) => {
                U.push(this.readImageUrl(G));
              }),
                U.length &&
                  Promise.all(U).then((G) => {
                    (G = G.filter(
                      (Z) => null != Z.imageUrl || null != Z.safeImageUrl
                    )),
                      (this.imageUrls = this.imageUrls.concat(
                        G.map((Z) => Z.imageUrl)
                      )),
                      (this.safeImageUrls = this.safeImageUrls.concat(
                        G.map((Z) => Z.safeImageUrl)
                      )),
                      this.updateModel();
                  });
            }
          })),
            this.disabled ? this.flowDrop.disable() : this.flowDrop.enable(),
            (this.viewInited = !0);
        }
        readImageUrl(A) {
          return new Promise((U) => {
            this.maxSizeByte &&
              this.maxSizeByte < A.size &&
              U({ imageUrl: null, safeImageUrl: null });
            const G = new FileReader();
            (G.onload = () => {
              let Z = null,
                le = null;
              "string" == typeof G.result &&
                G.result.startsWith("data:image/") &&
                ((Z = G.result),
                Z &&
                  Z.length > 0 &&
                  (le = this.sanitizer.bypassSecurityTrustUrl(Z))),
                U({ imageUrl: Z, safeImageUrl: le });
            }),
              (G.onerror = () => {
                U({ imageUrl: null, safeImageUrl: null });
              }),
              G.readAsDataURL(A.file);
          });
        }
        ngOnDestroy() {
          this.autoUploadSubscription.unsubscribe();
        }
        registerOnChange(A) {
          this.propagateChange = A;
        }
        registerOnTouched(A) {}
        setDisabledState(A) {
          (this.disabled = A),
            this.viewInited &&
              (this.disabled
                ? this.flowDrop.disable()
                : this.flowDrop.enable());
        }
        writeValue(A) {
          (this.imageUrls = A || []),
            (this.safeImageUrls = this.imageUrls.map((U) =>
              this.sanitizer.bypassSecurityTrustUrl(U)
            ));
        }
        updateModel() {
          this.cd.markForCheck(), this.propagateChange(this.imageUrls);
        }
        clearImage(A) {
          this.imageUrls.splice(A, 1),
            this.safeImageUrls.splice(A, 1),
            this.updateModel();
        }
        imageDragStart(A) {
          setTimeout(() => {
            (this.dragIndex = A), this.cd.markForCheck();
          });
        }
        imageDragEnd() {
          (this.dragIndex = -1), this.cd.markForCheck();
        }
        imageDrop(A) {
          let U = A.index;
          (0, g.o8)(U) && (U = this.safeImageUrls.length),
            (0, i.moveItemInArray)(this.imageUrls, this.dragIndex, U),
            (0, i.moveItemInArray)(this.safeImageUrls, this.dragIndex, U),
            (this.dragIndex = -1),
            this.updateModel();
        }
      }
      (V.ɵfac = function (A) {
        return new (A || V)(
          e.ɵɵdirectiveInject(D.Store),
          e.ɵɵdirectiveInject(s.F),
          e.ɵɵdirectiveInject(y.DomSanitizer),
          e.ɵɵdirectiveInject(d.x),
          e.ɵɵdirectiveInject(m.TranslateService),
          e.ɵɵdirectiveInject(o.FileSizePipe),
          e.ɵɵdirectiveInject(e.ChangeDetectorRef)
        );
      }),
        (V.ɵcmp = e.ɵɵdefineComponent({
          type: V,
          selectors: [["tb-multiple-image-input"]],
          viewQuery: function (A, U) {
            if ((1 & A && (e.ɵɵviewQuery(l, 7), e.ɵɵviewQuery(T, 7)), 2 & A)) {
              let G;
              e.ɵɵqueryRefresh((G = e.ɵɵloadQuery())) && (U.flow = G.first),
                e.ɵɵqueryRefresh((G = e.ɵɵloadQuery())) &&
                  (U.flowDrop = G.first);
            }
          },
          inputs: {
            label: "label",
            maxSizeByte: "maxSizeByte",
            required: "required",
            disabled: "disabled",
            inputId: "inputId",
          },
          features: [
            e.ɵɵProvidersFeature([
              {
                provide: a.NG_VALUE_ACCESSOR,
                useExisting: (0, e.forwardRef)(() => V),
                multi: !0,
              },
            ]),
            e.ɵɵInheritDefinitionFeature,
          ],
          decls: 12,
          vars: 13,
          consts: [
            [1, "tb-container"],
            ["class", "tb-title", 3, "ngClass", 4, "ngIf"],
            [3, "flowConfig"],
            ["flow", "flow"],
            ["flowDrop", "", 1, "tb-image-select-container", 3, "flow"],
            ["flowDrop", "flowDrop"],
            [
              "dndDropzone",
              "",
              "dndEffectAllowed",
              "move",
              "fxLayout",
              "row",
              "fxLayoutGap",
              "8px",
              1,
              "images-container",
              3,
              "dndHorizontal",
              "dndDisableIf",
              "ngClass",
              "dndDrop",
            ],
            ["dndPlaceholderRef", "", 1, "image-card", "image-dnd-placeholder"],
            [
              "dndEffectAllowed",
              "move",
              "class",
              "image-card",
              "fxLayout",
              "column",
              3,
              "dndDraggable",
              "dndDisableIf",
              "ngClass",
              "dndStart",
              "dndEnd",
              4,
              "ngFor",
              "ngForOf",
            ],
            ["class", "no-images-prompt", 4, "ngIf"],
            ["class", "drop-area tb-flow-drop", 4, "ngIf"],
            [
              "class",
              "tb-hint",
              "translate",
              "",
              3,
              "translateParams",
              4,
              "ngIf",
            ],
            [1, "tb-title", 3, "ngClass"],
            [
              "dndEffectAllowed",
              "move",
              "fxLayout",
              "column",
              1,
              "image-card",
              3,
              "dndDraggable",
              "dndDisableIf",
              "ngClass",
              "dndStart",
              "dndEnd",
            ],
            [1, "image-title"],
            ["fxLayout", "row", 1, "image-content-container"],
            [
              "dndHandle",
              "",
              "class",
              "tb-image-action-container tb-drag-handle",
              4,
              "ngIf",
            ],
            [1, "tb-image-preview-container"],
            [1, "tb-image-preview", 3, "src"],
            ["class", "tb-image-action-container", 4, "ngIf"],
            ["dndHandle", "", 1, "tb-image-action-container", "tb-drag-handle"],
            ["color", "primary"],
            [1, "tb-image-action-container"],
            [
              "mat-button",
              "",
              "mat-icon-button",
              "",
              "color",
              "primary",
              "type",
              "button",
              "matTooltipPosition",
              "above",
              3,
              "matTooltip",
              "click",
            ],
            [1, "no-images-prompt"],
            [1, "drop-area", "tb-flow-drop"],
            [1, "upload-label"],
            ["translate", ""],
            [
              "type",
              "button",
              "mat-button",
              "",
              "color",
              "primary",
              1,
              "browse-file",
            ],
            [3, "for"],
            [
              "flowButton",
              "",
              "type",
              "file",
              1,
              "file-input",
              3,
              "flow",
              "flowAttributes",
              "id",
            ],
            ["translate", "", 1, "tb-hint", 3, "translateParams"],
          ],
          template: function (A, U) {
            if (
              (1 & A &&
                (e.ɵɵelementStart(0, "div", 0),
                e.ɵɵtemplate(1, w, 2, 5, "label", 1),
                e.ɵɵelementContainerStart(2, 2, 3),
                e.ɵɵelementStart(4, "div", 4, 5),
                e.ɵɵelementStart(6, "div", 6),
                e.ɵɵlistener("dndDrop", function (Z) {
                  return U.imageDrop(Z);
                }),
                e.ɵɵelement(7, "div", 7),
                e.ɵɵtemplate(8, f, 9, 12, "div", 8),
                e.ɵɵtemplate(9, M, 3, 3, "div", 9),
                e.ɵɵelementEnd(),
                e.ɵɵtemplate(10, k, 11, 8, "div", 10),
                e.ɵɵelementEnd(),
                e.ɵɵelementContainerEnd(),
                e.ɵɵtemplate(11, B, 3, 5, "div", 11),
                e.ɵɵelementEnd()),
              2 & A)
            ) {
              const G = e.ɵɵreference(3);
              e.ɵɵadvance(1),
                e.ɵɵproperty("ngIf", U.label),
                e.ɵɵadvance(1),
                e.ɵɵproperty("flowConfig", e.ɵɵpureFunction0(10, j)),
                e.ɵɵadvance(2),
                e.ɵɵproperty("flow", G.flowJs),
                e.ɵɵadvance(2),
                e.ɵɵproperty("dndHorizontal", !0)("dndDisableIf", U.disabled)(
                  "ngClass",
                  e.ɵɵpureFunction1(11, F, !U.safeImageUrls.length)
                ),
                e.ɵɵadvance(2),
                e.ɵɵproperty("ngForOf", U.safeImageUrls),
                e.ɵɵadvance(1),
                e.ɵɵproperty("ngIf", !U.safeImageUrls.length),
                e.ɵɵadvance(1),
                e.ɵɵproperty("ngIf", !U.disabled),
                e.ɵɵadvance(1),
                e.ɵɵproperty("ngIf", U.maxSizeByte && !U.disabled);
            }
          },
          directives: [
            r.NgIf,
            h.be,
            h.W,
            p.Q4,
            _.DefaultLayoutDirective,
            _.DefaultLayoutGapDirective,
            r.NgClass,
            E.DefaultClassDirective,
            p.s1,
            r.NgForOf,
            p.jk,
            p.mv,
            c.MatIcon,
            v.MatButton,
            I.MatTooltip,
            m.TranslateDirective,
            h.Hq,
          ],
          pipes: [m.TranslatePipe, o.FileSizePipe],
          styles: [
            '@charset "UTF-8";.image-card[_ngcontent-%COMP%]{margin-bottom:8px}.image-card.image-dnd-placeholder[_ngcontent-%COMP%]{height:82px;width:146px;border:2px dashed rgba(0,0,0,.2);background:rgba(0,0,0,.1);border-radius:4px}.image-card.image-dragging[_ngcontent-%COMP%]{display:none!important}.image-title[_ngcontent-%COMP%]{font-size:11px;font-weight:400;line-height:14px;color:#0009;padding-bottom:4px}.image-content-container[_ngcontent-%COMP%]{background:#FFFFFF;border:1px solid rgba(0,0,0,.2);border-radius:4px;height:64px}.tb-image-preview[_ngcontent-%COMP%]{width:auto;max-width:62px;height:auto;max-height:62px}.tb-image-preview-container[_ngcontent-%COMP%]{position:relative;width:64px;height:64px;margin-top:-1px;margin-bottom:-1px;border:1px solid rgba(0,0,0,.54)}.tb-image-preview-container[_ngcontent-%COMP%]   .tb-image-preview[_ngcontent-%COMP%]{position:absolute;top:50%;left:50%;transform:translate(-50%,-50%)}.tb-image-action-container[_ngcontent-%COMP%]{position:relative;height:62px;display:flex;align-items:center;justify-content:center;min-width:40px}[_nghost-%COMP%]   .tb-container[_ngcontent-%COMP%]{margin-top:0}[_nghost-%COMP%]   .tb-container[_ngcontent-%COMP%]   label.tb-title[_ngcontent-%COMP%]{display:block;padding-bottom:8px}[_nghost-%COMP%]   .tb-image-select-container[_ngcontent-%COMP%]{position:relative;width:100%}[_nghost-%COMP%]   .images-container[_ngcontent-%COMP%]{padding:12px 12px 4px;background:rgba(0,0,0,.03);border-radius:4px;flex-wrap:wrap;margin-bottom:8px}[_nghost-%COMP%]   .images-container.no-images[_ngcontent-%COMP%]{height:106px;padding-bottom:12px;align-items:center;justify-content:center}[_nghost-%COMP%]   .no-images-prompt[_ngcontent-%COMP%]{font-size:18px;color:#0000008a}[_nghost-%COMP%]   .file-input[_ngcontent-%COMP%]{display:none}[_nghost-%COMP%]   .tb-flow-drop[_ngcontent-%COMP%]{position:relative;height:120px;overflow:hidden;border:2px dashed rgba(0,0,0,.2);border-radius:4px;box-sizing:border-box}[_nghost-%COMP%]   .tb-flow-drop.float-left[_ngcontent-%COMP%]{float:left}[_nghost-%COMP%]   .tb-flow-drop[_ngcontent-%COMP%]   .upload-label[_ngcontent-%COMP%]{width:100%;height:100%;padding:0 16px;display:flex;flex-direction:row;justify-content:center;align-items:center;font-size:16px;color:#0000008a;text-align:center}[_nghost-%COMP%]   .tb-flow-drop[_ngcontent-%COMP%]   .upload-label[_ngcontent-%COMP%]   .mat-icon[_ngcontent-%COMP%]{margin-right:17px}[_nghost-%COMP%]   .tb-hint[_ngcontent-%COMP%]{margin-top:8px}[_nghost-%COMP%]     button.browse-file{padding:0;font-size:16px}[_nghost-%COMP%]     button.browse-file span.mat-button-wrapper{display:block}[_nghost-%COMP%]     button.browse-file span.mat-button-wrapper label{display:block;cursor:pointer;padding:0 16px}',
          ],
        }));
    },
    54587: (ee, R, t) => {
      "use strict";
      t.r(R), t.d(R, { NavTreeComponent: () => s });
      var e = t(37716),
        n = t(39490),
        a = t(41960),
        C = t(5609);
      class s {
        constructor(o, i) {
          (this.elementRef = o), (this.ngZone = i);
        }
        get enableSearch() {
          return this.enableSearchValue;
        }
        set enableSearch(o) {
          this.enableSearchValue = (0, n.coerceBooleanProperty)(o);
        }
        ngOnInit() {
          this.initTree();
        }
        initTree() {
          const i = {
            core: {
              worker: !1,
              multiple: !1,
              check_callback: !0,
              themes: { name: "proton", responsive: !0 },
              data: (g, D) => {
                const y = (m) => {
                  const r = [];
                  m &&
                    m.forEach((h) => {
                      r.push((0, a.I8)(h, ["data"]));
                    }),
                    D(r);
                };
                this.ngZone.runOutsideAngular(() => {
                  this.loadNodes(g, y);
                });
              },
              error: () => {
                console.error("Unexpected jstree error!");
              },
            },
            plugins: [],
          };
          this.enableSearch &&
            (i.plugins.push("search"),
            (i.search = {
              ajax: !1,
              fuzzy: !1,
              close_opened_onclear: !0,
              case_sensitive: !1,
              show_only_matches: !0,
              show_only_matches_children: !1,
              search_leaves_only: !1,
              search_callback: this.searchCallback,
            })),
            t
              .e(1510)
              .then(t.t.bind(t, 1510, 23))
              .then(() => {
                (this.treeElement = C(
                  ".tb-nav-tree-container",
                  this.elementRef.nativeElement
                ).jstree(i)),
                  this.treeElement.on("changed.jstree", (g, D) => {
                    const y = D.instance.get_selected(!0)[0];
                    this.onNodeSelected &&
                      this.ngZone.run(() => this.onNodeSelected(y, g));
                  }),
                  this.treeElement.on("model.jstree", (g, D) => {
                    this.onNodesInserted &&
                      this.ngZone.run(() =>
                        this.onNodesInserted(D.nodes, D.parent)
                      );
                  }),
                  this.editCallbacks &&
                    ((this.editCallbacks.selectNode = (g) => {
                      const D = this.treeElement.jstree("get_node", g);
                      D &&
                        (this.treeElement.jstree("deselect_all", !0),
                        this.treeElement.jstree("select_node", D));
                    }),
                    (this.editCallbacks.deselectAll = () => {
                      this.treeElement.jstree("deselect_all");
                    }),
                    (this.editCallbacks.getNode = (g) =>
                      this.treeElement.jstree("get_node", g)),
                    (this.editCallbacks.getParentNodeId = (g) => {
                      const D = this.treeElement.jstree("get_node", g);
                      if (D) return this.treeElement.jstree("get_parent", D);
                    }),
                    (this.editCallbacks.openNode = (g, D) => {
                      const y = this.treeElement.jstree("get_node", g);
                      y && this.treeElement.jstree("open_node", y, D);
                    }),
                    (this.editCallbacks.nodeIsOpen = (g) => {
                      const D = this.treeElement.jstree("get_node", g);
                      return !D || this.treeElement.jstree("is_open", D);
                    }),
                    (this.editCallbacks.nodeIsLoaded = (g) => {
                      const D = this.treeElement.jstree("get_node", g);
                      return !D || this.treeElement.jstree("is_loaded", D);
                    }),
                    (this.editCallbacks.refreshNode = (g) => {
                      if ("#" === g)
                        this.treeElement.jstree("refresh"),
                          this.treeElement.jstree("redraw");
                      else {
                        const D = this.treeElement.jstree("get_node", g);
                        if (D) {
                          const y = this.treeElement.jstree("is_open", D);
                          this.treeElement.jstree("refresh_node", D),
                            this.treeElement.jstree("redraw"),
                            D.children &&
                              y &&
                              this.treeElement.jstree("open_node", D);
                        }
                      }
                    }),
                    (this.editCallbacks.updateNode = (g, D, y) => {
                      const m = this.treeElement.jstree("get_node", g);
                      m && this.treeElement.jstree("rename_node", m, D),
                        y && m.data && Object.assign(m.data, y);
                    }),
                    (this.editCallbacks.createNode = (g, D, y) => {
                      const m = this.treeElement.jstree("get_node", g);
                      m && this.treeElement.jstree("create_node", m, D, y);
                    }),
                    (this.editCallbacks.deleteNode = (g) => {
                      const D = this.treeElement.jstree("get_node", g);
                      D && this.treeElement.jstree("delete_node", D);
                    }),
                    (this.editCallbacks.disableNode = (g) => {
                      const D = this.treeElement.jstree("get_node", g);
                      D && this.treeElement.jstree("disable_node", D);
                    }),
                    (this.editCallbacks.enableNode = (g) => {
                      const D = this.treeElement.jstree("get_node", g);
                      D && this.treeElement.jstree("enable_node", D);
                    }),
                    (this.editCallbacks.setNodeHasChildren = (g, D) => {
                      const y = this.treeElement.jstree("get_node", g);
                      y &&
                        (!y.children ||
                          (Array.isArray(y.children) && !y.children.length)) &&
                        ((y.children = D),
                        (y.state.loaded = !D),
                        (y.state.opened = !1),
                        this.treeElement.jstree("_node_changed", y.id),
                        this.treeElement.jstree("redraw"));
                    }),
                    (this.editCallbacks.search = (g) => {
                      this.treeElement.jstree("search", g);
                    }),
                    (this.editCallbacks.clearSearch = () => {
                      this.treeElement.jstree("clear_search");
                    }));
              });
        }
      }
      (s.ɵfac = function (o) {
        return new (o || s)(
          e.ɵɵdirectiveInject(e.ElementRef),
          e.ɵɵdirectiveInject(e.NgZone)
        );
      }),
        (s.ɵcmp = e.ɵɵdefineComponent({
          type: s,
          selectors: [["tb-nav-tree"]],
          inputs: {
            enableSearch: "enableSearch",
            loadNodes: "loadNodes",
            searchCallback: "searchCallback",
            onNodeSelected: "onNodeSelected",
            onNodesInserted: "onNodesInserted",
            editCallbacks: "editCallbacks",
          },
          decls: 1,
          vars: 0,
          consts: [[1, "tb-nav-tree-container"]],
          template: function (o, i) {
            1 & o && e.ɵɵelement(0, "div", 0);
          },
          styles: [
            '@charset "UTF-8";.tb-nav-tree-container{padding:15px;font-family:Roboto,"Helvetica Neue",sans-serif}.tb-nav-tree-container.jstree-proton .jstree-node,.tb-nav-tree-container.jstree-proton .jstree-icon,.tb-nav-tree-container.jstree-proton-small .jstree-node,.tb-nav-tree-container.jstree-proton-small .jstree-icon,.tb-nav-tree-container.jstree-proton-large .jstree-node,.tb-nav-tree-container.jstree-proton-large .jstree-icon{background-image:url(tb32px.b235808cfdb0a995153a.png)}.tb-nav-tree-container.jstree-proton .jstree-last,.tb-nav-tree-container.jstree-proton-small .jstree-last,.tb-nav-tree-container.jstree-proton-large .jstree-last{background:transparent}.tb-nav-tree-container.jstree-proton .jstree-themeicon-custom,.tb-nav-tree-container.jstree-proton-small .jstree-themeicon-custom,.tb-nav-tree-container.jstree-proton-large .jstree-themeicon-custom{background-image:none}.tb-nav-tree-container.jstree-proton .jstree-themeicon-custom.material-icons{font-size:18px}.tb-nav-tree-container.jstree-proton .jstree-anchor{font-size:16px}.tb-nav-tree-container.jstree-proton .jstree-file{background:url(tb32px.b235808cfdb0a995153a.png) -101px -69px no-repeat}.tb-nav-tree-container.jstree-proton .jstree-folder{background:url(tb32px.b235808cfdb0a995153a.png) -261px -5px no-repeat}.tb-nav-tree-container.jstree-proton-small .jstree-themeicon-custom.material-icons{font-size:14px}.tb-nav-tree-container.jstree-proton-small .jstree-anchor{font-size:14px}.tb-nav-tree-container.jstree-proton-small .jstree-file{background:url(tb32px.b235808cfdb0a995153a.png) -103px -71px no-repeat}.tb-nav-tree-container.jstree-proton-small .jstree-folder{background:url(tb32px.b235808cfdb0a995153a.png) -263px -7px no-repeat}.tb-nav-tree-container.jstree-proton-large .jstree-themeicon-custom.material-icons{font-size:24px}.tb-nav-tree-container.jstree-proton-large .jstree-anchor{font-size:20px}.tb-nav-tree-container.jstree-proton-large .jstree-file{background:url(tb32px.b235808cfdb0a995153a.png) -96px -64px no-repeat}.tb-nav-tree-container.jstree-proton-large .jstree-folder{background:url(tb32px.b235808cfdb0a995153a.png) -256px 0px no-repeat}.tb-nav-tree-container a{border-bottom:none}.tb-nav-tree-container a i.jstree-themeicon-custom.tb-user-group:before{content:"account_circle"}.tb-nav-tree-container a i.jstree-themeicon-custom.tb-customer-group:before{content:"supervisor_account"}.tb-nav-tree-container a i.jstree-themeicon-custom.tb-asset-group:before{content:"domain"}.tb-nav-tree-container a i.jstree-themeicon-custom.tb-device-group:before{content:"devices_other"}.tb-nav-tree-container a i.jstree-themeicon-custom.tb-entity-view-group:before{content:"view_quilt"}.tb-nav-tree-container a i.jstree-themeicon-custom.tb-dashboard-group:before{content:"dashboard"}.tb-nav-tree-container a i.jstree-themeicon-custom.tb-customer:before{content:"supervisor_account"}#jstree-dnd.jstree-proton .jstree-ok,#jstree-dnd.jstree-proton .jstree-er,#jstree-dnd.jstree-proton-small .jstree-ok,#jstree-dnd.jstree-proton-small .jstree-er,#jstree-dnd.jstree-proton-large .jstree-ok,#jstree-dnd.jstree-proton-large .jstree-er{background-image:url(tb32px.b235808cfdb0a995153a.png)}@media (max-width: 768px){.tb-nav-tree-container.jstree-proton-responsive .jstree-node,.tb-nav-tree-container.jstree-proton-responsive .jstree-icon,.tb-nav-tree-container.jstree-proton-responsive .jstree-node>.jstree-ocl,.tb-nav-tree-container.jstree-proton-responsive .jstree-themeicon,.tb-nav-tree-container.jstree-proton-responsive .jstree-checkbox{background-image:url(tb40px.4a7b4107b62ef059ba65.png);background-size:120px 240px}.tb-nav-tree-container.jstree-proton-responsive .jstree-container-ul{overflow:visible}.tb-nav-tree-container.jstree-proton-responsive .jstree-themeicon-custom{background-color:transparent;background-image:none;background-position:0 0}.tb-nav-tree-container.jstree-proton-responsive .jstree-themeicon-custom.material-icons{margin:0;font-size:24px}.tb-nav-tree-container.jstree-proton-responsive .jstree-node,.tb-nav-tree-container.jstree-proton-responsive .jstree-leaf>.jstree-ocl{background:0 0}.tb-nav-tree-container.jstree-proton-responsive .jstree-node{min-width:40px;min-height:40px;margin-left:40px;line-height:40px;white-space:nowrap;background-repeat:repeat-y;background-position:-80px 0}.tb-nav-tree-container.jstree-proton-responsive .jstree-last{background:0 0}.tb-nav-tree-container.jstree-proton-responsive .jstree-anchor{height:40px;font-size:1.1em;font-weight:700;line-height:40px;text-shadow:1px 1px #fff}.tb-nav-tree-container.jstree-proton-responsive .jstree-icon,.tb-nav-tree-container.jstree-proton-responsive .jstree-icon:empty{width:40px;height:40px;line-height:40px}.tb-nav-tree-container.jstree-proton-responsive>.jstree-container-ul>.jstree-node{margin-right:0;margin-left:0}.tb-nav-tree-container.jstree-proton-responsive .jstree-ocl,.tb-nav-tree-container.jstree-proton-responsive .jstree-themeicon,.tb-nav-tree-container.jstree-proton-responsive .jstree-checkbox{background-size:120px 240px}.tb-nav-tree-container.jstree-proton-responsive .jstree-leaf>.jstree-ocl{background-position:-40px -120px}.tb-nav-tree-container.jstree-proton-responsive .jstree-last>.jstree-ocl{background-position:-40px -160px}.tb-nav-tree-container.jstree-proton-responsive .jstree-open>.jstree-ocl{background-position:0 0!important}.tb-nav-tree-container.jstree-proton-responsive .jstree-closed>.jstree-ocl{background-position:0 -40px!important}.tb-nav-tree-container.jstree-proton-responsive .jstree-themeicon{background-position:-40px -40px}.tb-nav-tree-container.jstree-proton-responsive .jstree-file{background:url(tb40px.4a7b4107b62ef059ba65.png) 0 -160px no-repeat;background-size:120px 240px}.tb-nav-tree-container.jstree-proton-responsive .jstree-folder{background:url(tb40px.4a7b4107b62ef059ba65.png) -40px -40px no-repeat;background-size:120px 240px}.tb-nav-tree-container.jstree-proton-responsive .jstree-checkbox,.tb-nav-tree-container.jstree-proton-responsive .jstree-checkbox:hover{background-position:-40px -80px}.tb-nav-tree-container.jstree-proton-responsive.jstree-checkbox-selection .jstree-clicked>.jstree-checkbox,.tb-nav-tree-container.jstree-proton-responsive.jstree-checkbox-selection .jstree-clicked>.jstree-checkbox:hover{background-position:0 -80px}.tb-nav-tree-container.jstree-proton-responsive .jstree-checked>.jstree-checkbox,.tb-nav-tree-container.jstree-proton-responsive .jstree-checked>.jstree-checkbox:hover{background-position:0 -80px}.tb-nav-tree-container.jstree-proton-responsive .jstree-anchor>.jstree-undetermined,.tb-nav-tree-container.jstree-proton-responsive .jstree-anchor>.jstree-undetermined:hover{background-position:0 -120px}.tb-nav-tree-container.jstree-proton-responsive .jstree-striped{background:0 0}.tb-nav-tree-container.jstree-proton-responsive .jstree-wholerow{height:40px;background:#ebebeb;border-top:1px solid rgba(255,255,255,.7);border-bottom:1px solid rgba(64,64,64,.2)}.tb-nav-tree-container.jstree-proton-responsive .jstree-wholerow-hovered{background:#e7f4f9}.tb-nav-tree-container.jstree-proton-responsive .jstree-wholerow-clicked{background:#beebff}.tb-nav-tree-container.jstree-proton-responsive .jstree-children .jstree-last>.jstree-wholerow{box-shadow:inset 0 -6px 3px -5px #666}.tb-nav-tree-container.jstree-proton-responsive .jstree-children .jstree-open>.jstree-wholerow{border-top:0;box-shadow:inset 0 6px 3px -5px #666}.tb-nav-tree-container.jstree-proton-responsive .jstree-children .jstree-open+.jstree-open{box-shadow:none}.tb-nav-tree-container.jstree-proton-responsive.jstree-rtl .jstree-node{margin-right:40px;margin-left:0}.tb-nav-tree-container.jstree-proton-responsive.jstree-rtl .jstree-container-ul>.jstree-node{margin-right:0}.tb-nav-tree-container.jstree-proton-responsive.jstree-rtl .jstree-closed>.jstree-ocl{background-position:-40px 0!important}}@media (max-width: 768px){#jstree-dnd.jstree-dnd-responsive .jstree-ok,#jstree-dnd.jstree-dnd-responsive .jstree-er{background-image:url(tb40px.4a7b4107b62ef059ba65.png);background-size:120px 240px}#jstree-dnd.jstree-dnd-responsive .jstree-ok{background-position:0 -200px}#jstree-dnd.jstree-dnd-responsive .jstree-er{background-position:-40px -200px}}.tb-nav-tree .mat-button.tb-active{font-weight:500;background-color:#ffffff26}.tb-nav-tree,.tb-nav-tree ul{margin-top:0;list-style:none}.tb-nav-tree:first-child,.tb-nav-tree ul:first-child{padding:0}.tb-nav-tree li .mat-button,.tb-nav-tree ul li .mat-button{width:100%;max-height:40px;padding:0 16px;margin:0;overflow:hidden;line-height:40px;color:inherit;text-align:left;text-decoration:none;text-overflow:ellipsis;text-transform:none;text-rendering:optimizeLegibility;white-space:nowrap;cursor:pointer;border-radius:0}.tb-nav-tree li .mat-button span,.tb-nav-tree ul li .mat-button span{overflow:hidden;text-overflow:ellipsis;white-space:nowrap}\n',
          ],
          encapsulation: 2,
        }));
    },
    11419: (ee, R, t) => {
      "use strict";
      t.r(R), t.d(R, { OtaPackageAutocompleteComponent: () => se });
      var e = t(37716),
        n = t(3679),
        a = t(79765),
        C = t(66682),
        s = t(25917),
        d = t(54395),
        o = t(68307),
        i = t(88002),
        g = t(43190),
        D = t(78345),
        y = t(5304),
        m = t(39490),
        r = t(52042),
        h = t(23914),
        p = t(32813),
        _ = t(57331),
        E = t(54481),
        c = t(39774),
        v = t(23360),
        I = t(58187),
        l = t(41960),
        T = t(86710),
        O = t(29790),
        w = t(98295),
        b = t(83166),
        S = t(21554),
        u = t(88030),
        f = t(38583),
        M = t(39895),
        L = t(51095),
        k = t(76627),
        N = t(72458),
        B = t(53883);
      const j = ["packageInput"];
      function F(ne, re) {
        if (
          (1 & ne &&
            (e.ɵɵelementStart(0, "a", 10), e.ɵɵtext(1), e.ɵɵelementEnd()),
          2 & ne)
        ) {
          const de = e.ɵɵnextContext();
          e.ɵɵproperty("routerLink", de.packageURL),
            e.ɵɵadvance(1),
            e.ɵɵtextInterpolate1(
              " ",
              de.displayPackageFn(
                de.otaPackageFormGroup.get("packageId").value
              ),
              " "
            );
        }
      }
      function V(ne, re) {
        if (1 & ne) {
          const de = e.ɵɵgetCurrentView();
          e.ɵɵelementStart(0, "button", 11),
            e.ɵɵlistener("click", function () {
              return e.ɵɵrestoreView(de), e.ɵɵnextContext().clear();
            }),
            e.ɵɵelementStart(1, "mat-icon", 12),
            e.ɵɵtext(2, "close"),
            e.ɵɵelementEnd(),
            e.ɵɵelementEnd();
        }
      }
      function P(ne, re) {
        if (
          (1 & ne &&
            (e.ɵɵelementStart(0, "mat-option", 13),
            e.ɵɵelement(1, "span", 14),
            e.ɵɵpipe(2, "highlight"),
            e.ɵɵelementEnd()),
          2 & ne)
        ) {
          const de = re.$implicit,
            pe = e.ɵɵnextContext();
          e.ɵɵproperty("value", de),
            e.ɵɵadvance(1),
            e.ɵɵproperty(
              "innerHTML",
              e.ɵɵpipeBind2(2, 2, pe.packageTitleText(de), pe.searchText),
              e.ɵɵsanitizeHtml
            );
        }
      }
      function A(ne, re) {
        if (
          (1 & ne &&
            (e.ɵɵelementStart(0, "div"),
            e.ɵɵelementStart(1, "span"),
            e.ɵɵtext(2),
            e.ɵɵpipe(3, "translate"),
            e.ɵɵelementEnd(),
            e.ɵɵelementEnd()),
          2 & ne)
        ) {
          const de = e.ɵɵnextContext(2);
          e.ɵɵadvance(2),
            e.ɵɵtextInterpolate(e.ɵɵpipeBind1(3, 1, de.notFoundPackage));
        }
      }
      const U = function (ne) {
        return { entity: ne };
      };
      function G(ne, re) {
        if (
          (1 & ne &&
            (e.ɵɵelementStart(0, "span"),
            e.ɵɵtext(1),
            e.ɵɵpipe(2, "async"),
            e.ɵɵelementEnd()),
          2 & ne)
        ) {
          const de = e.ɵɵnextContext(2);
          e.ɵɵadvance(1),
            e.ɵɵtextInterpolate1(
              " ",
              e.ɵɵpipeBind1(
                2,
                1,
                de.translate.get(
                  de.notMatchingPackage,
                  e.ɵɵpureFunction1(
                    3,
                    U,
                    de.truncate.transform(de.searchText, !0, 6, "...")
                  )
                )
              ),
              " "
            );
        }
      }
      function Z(ne, re) {
        if (
          (1 & ne &&
            (e.ɵɵelementStart(0, "mat-option", 15),
            e.ɵɵelementStart(1, "div", 16),
            e.ɵɵlistener("click", function (pe) {
              return pe.stopPropagation();
            }),
            e.ɵɵtemplate(2, A, 4, 3, "div", 17),
            e.ɵɵtemplate(
              3,
              G,
              3,
              5,
              "ng-template",
              null,
              18,
              e.ɵɵtemplateRefExtractor
            ),
            e.ɵɵelementEnd(),
            e.ɵɵelementEnd()),
          2 & ne)
        ) {
          const de = e.ɵɵreference(4),
            pe = e.ɵɵnextContext();
          e.ɵɵproperty("value", null),
            e.ɵɵadvance(2),
            e.ɵɵproperty("ngIf", !pe.textIsNotEmpty(pe.searchText))(
              "ngIfElse",
              de
            );
        }
      }
      function le(ne, re) {
        if (
          (1 & ne &&
            (e.ɵɵelementStart(0, "mat-error"),
            e.ɵɵtext(1),
            e.ɵɵpipe(2, "translate"),
            e.ɵɵelementEnd()),
          2 & ne)
        ) {
          const de = e.ɵɵnextContext();
          e.ɵɵadvance(1),
            e.ɵɵtextInterpolate1(
              " ",
              e.ɵɵpipeBind1(2, 1, de.requiredErrorText),
              " "
            );
        }
      }
      function X(ne, re) {
        if (
          (1 & ne &&
            (e.ɵɵelementStart(0, "mat-hint"),
            e.ɵɵtext(1),
            e.ɵɵpipe(2, "translate"),
            e.ɵɵelementEnd()),
          2 & ne)
        ) {
          const de = e.ɵɵnextContext();
          e.ɵɵadvance(1), e.ɵɵtextInterpolate(e.ɵɵpipeBind1(2, 1, de.hintText));
        }
      }
      class se {
        constructor(re, de, pe, Q, K, H) {
          (this.store = re),
            (this.translate = de),
            (this.truncate = pe),
            (this.entityService = Q),
            (this.otaPackageService = K),
            (this.fb = H),
            (this.otaUpdateType = _.Jj.FIRMWARE),
            (this.useFullEntityId = !1),
            (this.showDetailsPageLink = !1),
            (this.searchText = ""),
            (this.dirty = !1),
            (this.cleanFilteredPackages = new a.xQ()),
            (this.propagateChange = (x) => {}),
            (this.otaPackageFormGroup = this.fb.group({ packageId: [null] }));
        }
        get type() {
          return this.otaUpdateType;
        }
        set type(re) {
          (this.otaUpdateType = re || _.Jj.FIRMWARE), this.reset();
        }
        get deviceProfileId() {
          return this.deviceProfile;
        }
        set deviceProfileId(re) {
          (this.deviceProfile = re), this.reset();
        }
        get required() {
          return this.requiredValue;
        }
        set required(re) {
          this.requiredValue = (0, m.coerceBooleanProperty)(re);
        }
        registerOnChange(re) {
          this.propagateChange = re;
        }
        registerOnTouched(re) {}
        ngOnInit() {
          const re = this.otaPackageFormGroup
            .get("packageId")
            .valueChanges.pipe(
              (0, d.b)(150),
              (0, o.b)((de) => {
                let pe;
                (pe =
                  "string" != typeof de && de
                    ? this.useFullEntityId
                      ? de.id
                      : de.id.id
                    : null),
                  this.updateView(pe),
                  null === de && this.clear();
              }),
              (0, i.U)((de) =>
                de ? ("string" == typeof de ? de : de.title) : ""
              ),
              (0, g.w)((de) => this.fetchPackages(de)),
              (0, D.B)()
            );
          this.filteredPackages = (0, C.T)(this.cleanFilteredPackages, re);
        }
        ngAfterViewInit() {}
        ngOnDestroy() {
          this.cleanFilteredPackages.complete(),
            (this.cleanFilteredPackages = null);
        }
        getCurrentEntity() {
          const re = this.otaPackageFormGroup.get("packageId").value;
          return re && "string" != typeof re ? re : null;
        }
        setDisabledState(re) {
          (this.disabled = re),
            this.disabled
              ? this.otaPackageFormGroup.disable({ emitEvent: !1 })
              : this.otaPackageFormGroup.enable({ emitEvent: !1 });
        }
        textIsNotEmpty(re) {
          return re && re.length > 0;
        }
        writeValue(re) {
          if (((this.searchText = ""), null != re && "" !== re)) {
            let de = "";
            "string" == typeof re
              ? (de = re)
              : re.entityType && re.id && (de = re.id),
              "" !== de
                ? this.entityService
                    .getEntity(r.py.OTA_PACKAGE, de, {
                      ignoreLoading: !0,
                      ignoreErrors: !0,
                    })
                    .subscribe(
                      (pe) => {
                        (this.packageURL = (0, l.cu)(
                          pe.id.id,
                          r.py.OTA_PACKAGE
                        )),
                          (this.modelValue = this.useFullEntityId
                            ? pe.id
                            : pe.id.id),
                          this.otaPackageFormGroup
                            .get("packageId")
                            .patchValue(pe, { emitEvent: !1 });
                      },
                      () => {
                        (this.modelValue = null),
                          this.otaPackageFormGroup
                            .get("packageId")
                            .patchValue("", { emitEvent: !1 }),
                          null !== re && this.propagateChange(this.modelValue);
                      }
                    )
                : ((this.modelValue = null),
                  this.otaPackageFormGroup
                    .get("packageId")
                    .patchValue("", { emitEvent: !1 }),
                  this.propagateChange(null));
          } else
            (this.modelValue = null),
              this.otaPackageFormGroup
                .get("packageId")
                .patchValue("", { emitEvent: !1 });
          this.dirty = !0;
        }
        onFocus() {
          this.dirty &&
            (this.otaPackageFormGroup
              .get("packageId")
              .updateValueAndValidity({ onlySelf: !0, emitEvent: !0 }),
            (this.dirty = !1));
        }
        reset() {
          this.cleanFilteredPackages.next([]),
            this.otaPackageFormGroup
              .get("packageId")
              .patchValue("", { emitEvent: !1 });
        }
        updateView(re) {
          this.modelValue !== re &&
            ((this.modelValue = re), this.propagateChange(this.modelValue));
        }
        displayPackageFn(re) {
          return re ? `${re.title} (${re.version})` : void 0;
        }
        fetchPackages(re) {
          this.searchText = re;
          const de = new c.H_(50, 0, re, {
            property: "title",
            direction: v.N.ASC,
          });
          return this.otaPackageService
            .getOtaPackagesInfoByDeviceProfileId(
              de,
              this.deviceProfileId,
              this.type,
              { ignoreLoading: !0 }
            )
            .pipe(
              (0, y.K)(() => (0, s.of)((0, I.n)())),
              (0, i.U)((pe) => (pe && pe.data.length ? pe.data : null))
            );
        }
        clear() {
          this.otaPackageFormGroup.get("packageId").patchValue(""),
            setTimeout(() => {
              this.packageInput.nativeElement.blur(),
                this.packageInput.nativeElement.focus();
            }, 0);
        }
        get placeholderText() {
          return this.labelText || _.LY.get(this.type).label;
        }
        get requiredErrorText() {
          return this.requiredText || _.LY.get(this.type).required;
        }
        get notFoundPackage() {
          return _.LY.get(this.type).noFound;
        }
        get notMatchingPackage() {
          return _.LY.get(this.type).noMatching;
        }
        get hintText() {
          return _.LY.get(this.type).hint;
        }
        packageTitleText(re) {
          return `${re.title} (${re.version})`;
        }
      }
      (se.ɵfac = function (re) {
        return new (re || se)(
          e.ɵɵdirectiveInject(T.Store),
          e.ɵɵdirectiveInject(O.TranslateService),
          e.ɵɵdirectiveInject(p.TruncatePipe),
          e.ɵɵdirectiveInject(h.c),
          e.ɵɵdirectiveInject(E.H),
          e.ɵɵdirectiveInject(n.FormBuilder)
        );
      }),
        (se.ɵcmp = e.ɵɵdefineComponent({
          type: se,
          selectors: [["tb-ota-package-autocomplete"]],
          viewQuery: function (re, de) {
            if ((1 & re && e.ɵɵviewQuery(j, 7), 2 & re)) {
              let pe;
              e.ɵɵqueryRefresh((pe = e.ɵɵloadQuery())) &&
                (de.packageInput = pe.first);
            }
          },
          inputs: {
            type: "type",
            deviceProfileId: "deviceProfileId",
            labelText: "labelText",
            requiredText: "requiredText",
            useFullEntityId: "useFullEntityId",
            showDetailsPageLink: "showDetailsPageLink",
            required: "required",
            disabled: "disabled",
          },
          features: [
            e.ɵɵProvidersFeature([
              {
                provide: n.NG_VALUE_ACCESSOR,
                useExisting: (0, e.forwardRef)(() => se),
                multi: !0,
              },
            ]),
          ],
          decls: 14,
          vars: 19,
          consts: [
            [1, "mat-block", 3, "formGroup"],
            [
              "matInput",
              "",
              "type",
              "text",
              "formControlName",
              "packageId",
              3,
              "placeholder",
              "required",
              "matAutocomplete",
              "matAutocompleteDisabled",
              "fxShow",
              "focusin",
            ],
            ["packageInput", ""],
            ["aria-label", "Open ota package", 3, "routerLink", 4, "ngIf"],
            [
              "type",
              "button",
              "matSuffix",
              "",
              "mat-button",
              "",
              "mat-icon-button",
              "",
              "aria-label",
              "Clear",
              3,
              "click",
              4,
              "ngIf",
            ],
            [1, "tb-autocomplete", 3, "displayWith"],
            ["packageAutocomplete", "matAutocomplete"],
            [3, "value", 4, "ngFor", "ngForOf"],
            ["class", "tb-not-found", 3, "value", 4, "ngIf"],
            [4, "ngIf"],
            ["aria-label", "Open ota package", 3, "routerLink"],
            [
              "type",
              "button",
              "matSuffix",
              "",
              "mat-button",
              "",
              "mat-icon-button",
              "",
              "aria-label",
              "Clear",
              3,
              "click",
            ],
            [1, "material-icons"],
            [3, "value"],
            [3, "innerHTML"],
            [1, "tb-not-found", 3, "value"],
            [1, "tb-not-found-content", 3, "click"],
            [4, "ngIf", "ngIfElse"],
            ["searchNotEmpty", ""],
          ],
          template: function (re, de) {
            if (
              (1 & re &&
                (e.ɵɵelementStart(0, "mat-form-field", 0),
                e.ɵɵelementStart(1, "input", 1, 2),
                e.ɵɵlistener("focusin", function () {
                  return de.onFocus();
                }),
                e.ɵɵpipe(3, "translate"),
                e.ɵɵelementEnd(),
                e.ɵɵtemplate(4, F, 2, 2, "a", 3),
                e.ɵɵtemplate(5, V, 3, 0, "button", 4),
                e.ɵɵelementStart(6, "mat-autocomplete", 5, 6),
                e.ɵɵtemplate(8, P, 3, 5, "mat-option", 7),
                e.ɵɵpipe(9, "async"),
                e.ɵɵtemplate(10, Z, 5, 3, "mat-option", 8),
                e.ɵɵpipe(11, "async"),
                e.ɵɵelementEnd(),
                e.ɵɵtemplate(12, le, 3, 3, "mat-error", 9),
                e.ɵɵtemplate(13, X, 3, 3, "mat-hint", 9),
                e.ɵɵelementEnd()),
              2 & re)
            ) {
              const pe = e.ɵɵreference(7);
              let Q;
              e.ɵɵproperty("formGroup", de.otaPackageFormGroup),
                e.ɵɵadvance(1),
                e.ɵɵpropertyInterpolate(
                  "placeholder",
                  e.ɵɵpipeBind1(3, 13, de.placeholderText)
                ),
                e.ɵɵproperty("required", de.required)("matAutocomplete", pe)(
                  "matAutocompleteDisabled",
                  de.disabled
                )(
                  "fxShow",
                  !de.showDetailsPageLink ||
                    !de.disabled ||
                    !de.otaPackageFormGroup.get("packageId").value
                ),
                e.ɵɵadvance(3),
                e.ɵɵproperty(
                  "ngIf",
                  de.showDetailsPageLink &&
                    de.otaPackageFormGroup.get("packageId").value &&
                    de.disabled
                ),
                e.ɵɵadvance(1),
                e.ɵɵproperty(
                  "ngIf",
                  de.otaPackageFormGroup.get("packageId").value && !de.disabled
                ),
                e.ɵɵadvance(1),
                e.ɵɵproperty("displayWith", de.displayPackageFn),
                e.ɵɵadvance(2),
                e.ɵɵproperty(
                  "ngForOf",
                  e.ɵɵpipeBind1(9, 15, de.filteredPackages)
                ),
                e.ɵɵadvance(2),
                e.ɵɵproperty(
                  "ngIf",
                  !(
                    null != (Q = e.ɵɵpipeBind1(11, 17, de.filteredPackages)) &&
                    Q.length
                  )
                ),
                e.ɵɵadvance(2),
                e.ɵɵproperty(
                  "ngIf",
                  de.otaPackageFormGroup.get("packageId").hasError("required")
                ),
                e.ɵɵadvance(1),
                e.ɵɵproperty("ngIf", !de.disabled);
            }
          },
          directives: [
            w.MatFormField,
            n.NgControlStatusGroup,
            n.FormGroupDirective,
            b.MatInput,
            n.DefaultValueAccessor,
            S.MatAutocompleteTrigger,
            n.NgControlStatus,
            n.FormControlName,
            n.RequiredValidator,
            u.DefaultShowHideDirective,
            f.NgIf,
            S.MatAutocomplete,
            f.NgForOf,
            M.RouterLinkWithHref,
            L.MatButton,
            w.MatSuffix,
            k.MatIcon,
            N.MatOption,
            w.MatError,
            w.MatHint,
          ],
          pipes: [O.TranslatePipe, f.AsyncPipe, B.HighlightPipe],
          styles: [
            '@charset "UTF-8";[_nghost-%COMP%]   .mat-icon-button[_ngcontent-%COMP%]   a[_ngcontent-%COMP%]{border-bottom:none;color:inherit}',
          ],
        }));
    },
    75362: (ee, R, t) => {
      "use strict";
      t.d(R, { I: () => d });
      var e = t(37716),
        n = t(86710),
        a = t(90917),
        C = t(65792),
        s = t(78345);
      class d {
        constructor(i) {
          (this.store = i),
            (this.disabledOnLoadFormControls = []),
            (this.isLoading$ = this.store.pipe(
              (0, C.g)(0),
              (0, n.select)(a.xU),
              (0, s.B)()
            ));
        }
        registerDisableOnLoadFormControl(i) {
          this.disabledOnLoadFormControls.push(i),
            this.loadingSubscription ||
              (this.loadingSubscription = this.isLoading$.subscribe((g) => {
                for (const D of this.disabledOnLoadFormControls)
                  g
                    ? D.disable({ emitEvent: !1 })
                    : D.enable({ emitEvent: !1 });
              }));
        }
        ngOnDestroy() {
          this.loadingSubscription && this.loadingSubscription.unsubscribe();
        }
      }
      (d.ɵfac = function (i) {
        return new (i || d)(e.ɵɵdirectiveInject(n.Store));
      }),
        (d.ɵdir = e.ɵɵdefineDirective({ type: d }));
    },
    68251: (ee, R, t) => {
      "use strict";
      t.d(R, { T: () => I });
      var a,
        l,
        e = t(37716),
        n = t(3679);
      ((l = a || (a = {})).Afghanistan = "AF"),
        (l.Albania = "AL"),
        (l.Algeria = "DZ"),
        (l.AmericanSamoa = "AS"),
        (l.Andorra = "AD"),
        (l.Angola = "AO"),
        (l.Anguilla = "AI"),
        (l.AntiguaAndBarbuda = "AG"),
        (l.Argentina = "AR"),
        (l.Armenia = "AM"),
        (l.Aruba = "AW"),
        (l.Australia = "AU"),
        (l.Austria = "AT"),
        (l.Azerbaijan = "AZ"),
        (l.Bahamas = "BS"),
        (l.Bahrain = "BH"),
        (l.Bangladesh = "BD"),
        (l.Barbados = "BB"),
        (l.Belarus = "BY"),
        (l.Belgium = "BE"),
        (l.Belize = "BZ"),
        (l.Benin = "BJ"),
        (l.Bermuda = "BM"),
        (l.Bhutan = "BT"),
        (l.Bolivia = "BO"),
        (l.BosniaAndHerzegovina = "BA"),
        (l.Botswana = "BW"),
        (l.Brazil = "BR"),
        (l.BritishIndianOceanTerritory = "IO"),
        (l.BritishVirginIslands = "VG"),
        (l.Brunei = "BN"),
        (l.Bulgaria = "BG"),
        (l.BurkinaFaso = "BF"),
        (l.Burundi = "BI"),
        (l.Cambodia = "KH"),
        (l.Cameroon = "CM"),
        (l.Canada = "CA"),
        (l.CapeVerde = "CV"),
        (l.CaribbeanNetherlands = "BQ"),
        (l.CaymanIslands = "KY"),
        (l.CentralAfricanRepublic = "CF"),
        (l.Chad = "TD"),
        (l.Chile = "CL"),
        (l.China = "CN"),
        (l.ChristmasIsland = "CX"),
        (l.Cocos = "CC"),
        (l.Colombia = "CC"),
        (l.Comoros = "KM"),
        (l.CongoDRCJamhuriYaKidemokrasiaYaKongo = "CD"),
        (l.CongoRepublicCongoBrazzaville = "CG"),
        (l.CookIslands = "CK"),
        (l.CostaRica = "CR"),
        (l.CôteDIvoire = "CI"),
        (l.Croatia = "HR"),
        (l.Cuba = "CU"),
        (l.Curaçao = "CW"),
        (l.Cyprus = "CY"),
        (l.CzechRepublic = "CZ"),
        (l.Denmark = "DK"),
        (l.Djibouti = "DJ"),
        (l.Dominica = "DM"),
        (l.DominicanRepublic = "DO"),
        (l.Ecuador = "EC"),
        (l.Egypt = "EG"),
        (l.ElSalvador = "SV"),
        (l.EquatorialGuinea = "GQ"),
        (l.Eritrea = "ER"),
        (l.Estonia = "EE"),
        (l.Ethiopia = "ET"),
        (l.FalklandIslands = "FK"),
        (l.FaroeIslands = "FO"),
        (l.Fiji = "FJ"),
        (l.Finland = "FI"),
        (l.France = "FR"),
        (l.FrenchGuiana = "GF"),
        (l.FrenchPolynesia = "PF"),
        (l.Gabon = "GA"),
        (l.Gambia = "GM"),
        (l.Georgia = "GE"),
        (l.Germany = "DE"),
        (l.Ghana = "GH"),
        (l.Gibraltar = "GI"),
        (l.Greece = "GR"),
        (l.Greenland = "GL"),
        (l.Grenada = "GD"),
        (l.Guadeloupe = "GP"),
        (l.Guam = "GU"),
        (l.Guatemala = "GT"),
        (l.Guernsey = "GG"),
        (l.Guinea = "GN"),
        (l.GuineaBissau = "GW"),
        (l.Guyana = "GY"),
        (l.Haiti = "HT"),
        (l.Honduras = "HN"),
        (l.HongKong = "HK"),
        (l.Hungary = "HU"),
        (l.Iceland = "IS"),
        (l.India = "IN"),
        (l.Indonesia = "ID"),
        (l.Iran = "IR"),
        (l.Iraq = "IQ"),
        (l.Ireland = "IE"),
        (l.IsleOfMan = "IM"),
        (l.Israel = "IL"),
        (l.Italy = "IT"),
        (l.Jamaica = "JM"),
        (l.Japan = "JP"),
        (l.Jersey = "JE"),
        (l.Jordan = "JO"),
        (l.Kazakhstan = "KZ"),
        (l.Kenya = "KE"),
        (l.Kiribati = "KI"),
        (l.Kosovo = "XK"),
        (l.Kuwait = "KW"),
        (l.Kyrgyzstan = "KG"),
        (l.Laos = "LA"),
        (l.Latvia = "LV"),
        (l.Lebanon = "LB"),
        (l.Lesotho = "LS"),
        (l.Liberia = "LR"),
        (l.Libya = "LY"),
        (l.Liechtenstein = "LI"),
        (l.Lithuania = "LT"),
        (l.Luxembourg = "LU"),
        (l.Macau = "MO"),
        (l.Macedonia = "MK"),
        (l.Madagascar = "MG"),
        (l.Malawi = "MW"),
        (l.Malaysia = "MY"),
        (l.Maldives = "MV"),
        (l.Mali = "ML"),
        (l.Malta = "MT"),
        (l.MarshallIslands = "MH"),
        (l.Martinique = "MQ"),
        (l.Mauritania = "MR"),
        (l.Mauritius = "MU"),
        (l.Mayotte = "YT"),
        (l.Mexico = "MX"),
        (l.Micronesia = "FM"),
        (l.Moldova = "MD"),
        (l.Monaco = "MC"),
        (l.Mongolia = "MN"),
        (l.Montenegro = "ME"),
        (l.Montserrat = "MS"),
        (l.Morocco = "MA"),
        (l.Mozambique = "MZ"),
        (l.Myanmar = "MM"),
        (l.Namibia = "NA"),
        (l.Nauru = "NR"),
        (l.Nepal = "NP"),
        (l.Netherlands = "NL"),
        (l.NewCaledonia = "NC"),
        (l.NewZealand = "NZ"),
        (l.Nicaragua = "NI"),
        (l.Niger = "NE"),
        (l.Nigeria = "NG"),
        (l.Niue = "NU"),
        (l.NorfolkIsland = "NF"),
        (l.NorthKorea = "KP"),
        (l.NorthernMarianaIslands = "MP"),
        (l.Norway = "NO"),
        (l.Oman = "OM"),
        (l.Pakistan = "PK"),
        (l.Palau = "PW"),
        (l.Palestine = "PS"),
        (l.Panama = "PA"),
        (l.PapuaNewGuinea = "PG"),
        (l.Paraguay = "PY"),
        (l.Peru = "PE"),
        (l.Philippines = "PH"),
        (l.Poland = "PL"),
        (l.Portugal = "PT"),
        (l.PuertoRico = "PR"),
        (l.Qatar = "QA"),
        (l.Réunion = "RE"),
        (l.Romania = "RO"),
        (l.Russia = "RU"),
        (l.Rwanda = "RW"),
        (l.SaintBarthélemy = "BL"),
        (l.SaintHelena = "SH"),
        (l.SaintKittsAndNevis = "KN"),
        (l.SaintLucia = "LC"),
        (l.SaintMartin = "MF"),
        (l.SaintPierreAndMiquelon = "PM"),
        (l.SaintVincentAndTheGrenadines = "VC"),
        (l.Samoa = "WS"),
        (l.SanMarino = "SM"),
        (l.SãoToméAndPríncipe = "ST"),
        (l.SaudiArabia = "SA"),
        (l.Senegal = "SN"),
        (l.Serbia = "RS"),
        (l.Seychelles = "SC"),
        (l.SierraLeone = "SL"),
        (l.Singapore = "SG"),
        (l.SintMaarten = "SX"),
        (l.Slovakia = "SK"),
        (l.Slovenia = "SI"),
        (l.SolomonIslands = "SB"),
        (l.Somalia = "SO"),
        (l.SouthAfrica = "ZA"),
        (l.SouthKorea = "KR"),
        (l.SouthSudan = "SS"),
        (l.Spain = "ES"),
        (l.SriLanka = "LK"),
        (l.Sudan = "SD"),
        (l.Suriname = "SR"),
        (l.SvalbardAndJanMayen = "SJ"),
        (l.Swaziland = "SZ"),
        (l.Sweden = "SE"),
        (l.Switzerland = "CH"),
        (l.Syria = "SY"),
        (l.Taiwan = "TW"),
        (l.Tajikistan = "TJ"),
        (l.Tanzania = "TZ"),
        (l.Thailand = "TH"),
        (l.TimorLeste = "TL"),
        (l.Togo = "TG"),
        (l.Tokelau = "TK"),
        (l.Tonga = "TO"),
        (l.TrinidadAndTobago = "TT"),
        (l.Tunisia = "TN"),
        (l.Turkey = "TR"),
        (l.Turkmenistan = "TM"),
        (l.TurksAndCaicosIslands = "TC"),
        (l.Tuvalu = "TV"),
        (l.USVirginIslands = "VI"),
        (l.Uganda = "UG"),
        (l.Ukraine = "UA"),
        (l.UnitedArabEmirates = "AE"),
        (l.UnitedKingdom = "GB"),
        (l.UnitedStates = "US"),
        (l.Uruguay = "UY"),
        (l.Uzbekistan = "UZ"),
        (l.Vanuatu = "VU"),
        (l.VaticanCity = "VA"),
        (l.Venezuela = "VE"),
        (l.Vietnam = "VN"),
        (l.WallisAndFutuna = "WF"),
        (l.WesternSahara = "EH"),
        (l.Yemen = "YE"),
        (l.Zambia = "ZM"),
        (l.Zimbabwe = "ZW"),
        (l.ÅlandIslands = "AX");
      class C {
        constructor() {
          this.allCountries = [
            {
              name: "Afghanistan",
              iso2: a.Afghanistan,
              dialCode: "93",
              flag: "\u{1f1e6}\u{1f1eb}",
            },
            {
              name: "Albania",
              iso2: a.Albania,
              dialCode: "355",
              flag: "\u{1f1e6}\u{1f1f1}",
            },
            {
              name: "Algeria",
              iso2: a.Algeria,
              dialCode: "213",
              flag: "\u{1f1e9}\u{1f1ff}",
            },
            {
              name: "American Samoa",
              iso2: a.AmericanSamoa,
              dialCode: "1",
              flag: "\u{1f1e6}\u{1f1f8}",
            },
            {
              name: "Andorra",
              iso2: a.Andorra,
              dialCode: "376",
              flag: "\u{1f1e6}\u{1f1e9}",
            },
            {
              name: "Angola",
              iso2: a.Angola,
              dialCode: "244",
              flag: "\u{1f1e6}\u{1f1f4}",
            },
            {
              name: "Anguilla",
              iso2: a.Anguilla,
              dialCode: "1",
              flag: "\u{1f1e6}\u{1f1ee}",
            },
            {
              name: "Antigua and Barbuda",
              iso2: a.AntiguaAndBarbuda,
              dialCode: "1",
              flag: "\u{1f1e6}\u{1f1ec}",
            },
            {
              name: "Argentina",
              iso2: a.Argentina,
              dialCode: "54",
              flag: "\u{1f1e6}\u{1f1f7}",
            },
            {
              name: "Armenia",
              iso2: a.Armenia,
              dialCode: "374",
              flag: "\u{1f1e6}\u{1f1f2}",
            },
            {
              name: "Aruba",
              iso2: a.Aruba,
              dialCode: "297",
              flag: "\u{1f1e6}\u{1f1fc}",
            },
            {
              name: "Australia",
              iso2: a.Australia,
              dialCode: "61",
              flag: "\u{1f1e6}\u{1f1fa}",
            },
            {
              name: "Austria",
              iso2: a.Austria,
              dialCode: "43",
              flag: "\u{1f1e6}\u{1f1f9}",
            },
            {
              name: "Azerbaijan",
              iso2: a.Azerbaijan,
              dialCode: "994",
              flag: "\u{1f1e6}\u{1f1ff}",
            },
            {
              name: "Bahamas",
              iso2: a.Bahamas,
              dialCode: "1",
              flag: "\u{1f1e7}\u{1f1f8}",
            },
            {
              name: "Bahrain",
              iso2: a.Bahrain,
              dialCode: "973",
              flag: "\u{1f1e7}\u{1f1ed}",
            },
            {
              name: "Bangladesh",
              iso2: a.Bangladesh,
              dialCode: "880",
              flag: "\u{1f1e7}\u{1f1e9}",
            },
            {
              name: "Barbados",
              iso2: a.Barbados,
              dialCode: "1",
              flag: "\u{1f1e7}\u{1f1e7}",
            },
            {
              name: "Belarus",
              iso2: a.Belarus,
              dialCode: "375",
              flag: "\u{1f1e7}\u{1f1fe}",
            },
            {
              name: "Belgium",
              iso2: a.Belgium,
              dialCode: "32",
              flag: "\u{1f1e7}\u{1f1ea}",
            },
            {
              name: "Belize",
              iso2: a.Belize,
              dialCode: "501",
              flag: "\u{1f1e7}\u{1f1ff}",
            },
            {
              name: "Benin",
              iso2: a.Benin,
              dialCode: "229",
              flag: "\u{1f1e7}\u{1f1ef}",
            },
            {
              name: "Bermuda",
              iso2: a.Bermuda,
              dialCode: "1",
              flag: "\u{1f1e7}\u{1f1f2}",
            },
            {
              name: "Bhutan",
              iso2: a.Bhutan,
              dialCode: "975",
              flag: "\u{1f1e7}\u{1f1f9}",
            },
            {
              name: "Bolivia",
              iso2: a.Bolivia,
              dialCode: "591",
              flag: "\u{1f1e7}\u{1f1f4}",
            },
            {
              name: "Bosnia and Herzegovina",
              iso2: a.BosniaAndHerzegovina,
              dialCode: "387",
              flag: "\u{1f1e7}\u{1f1e6}",
            },
            {
              name: "Botswana",
              iso2: a.Botswana,
              dialCode: "267",
              flag: "\u{1f1e7}\u{1f1fc}",
            },
            {
              name: "Brazil",
              iso2: a.Brazil,
              dialCode: "55",
              flag: "\u{1f1e7}\u{1f1f7}",
            },
            {
              name: "British Indian Ocean Territory",
              iso2: a.BritishIndianOceanTerritory,
              dialCode: "246",
              flag: "\u{1f1ee}\u{1f1f4}",
            },
            {
              name: "British Virgin Islands",
              iso2: a.BritishVirginIslands,
              dialCode: "1",
              flag: "\u{1f1fb}\u{1f1ec}",
            },
            {
              name: "Brunei",
              iso2: a.Brunei,
              dialCode: "673",
              flag: "\u{1f1e7}\u{1f1f3}",
            },
            {
              name: "Bulgaria",
              iso2: a.Bulgaria,
              dialCode: "359",
              flag: "\u{1f1e7}\u{1f1ec}",
            },
            {
              name: "Burkina Faso",
              iso2: a.BurkinaFaso,
              dialCode: "226",
              flag: "\u{1f1e7}\u{1f1eb}",
            },
            {
              name: "Burundi",
              iso2: a.Burundi,
              dialCode: "257",
              flag: "\u{1f1e7}\u{1f1ee}",
            },
            {
              name: "Cambodia",
              iso2: a.Cambodia,
              dialCode: "855",
              flag: "\u{1f1f0}\u{1f1ed}",
            },
            {
              name: "Cameroon",
              iso2: a.Cameroon,
              dialCode: "237",
              flag: "\u{1f1e8}\u{1f1f2}",
            },
            {
              name: "Canada",
              iso2: a.Canada,
              dialCode: "1",
              flag: "\u{1f1e8}\u{1f1e6}",
            },
            {
              name: "Cape Verde",
              iso2: a.CapeVerde,
              dialCode: "238",
              flag: "\u{1f1e8}\u{1f1fb}",
            },
            {
              name: "Caribbean Netherlands",
              iso2: a.CaribbeanNetherlands,
              dialCode: "599",
              flag: "\u{1f1e7}\u{1f1f6}",
            },
            {
              name: "Cayman Islands",
              iso2: a.CaymanIslands,
              dialCode: "1",
              flag: "\u{1f1f0}\u{1f1fe}",
            },
            {
              name: "Central African Republic",
              iso2: a.CentralAfricanRepublic,
              dialCode: "236",
              flag: "\u{1f1e8}\u{1f1eb}",
            },
            {
              name: "Chad",
              iso2: a.Chad,
              dialCode: "235",
              flag: "\u{1f1f9}\u{1f1e9}",
            },
            {
              name: "Chile",
              iso2: a.Chile,
              dialCode: "56",
              flag: "\u{1f1e8}\u{1f1f1}",
            },
            {
              name: "China",
              iso2: a.China,
              dialCode: "86",
              flag: "\u{1f1e8}\u{1f1f3}",
            },
            {
              name: "Christmas Island",
              iso2: a.ChristmasIsland,
              dialCode: "61",
              flag: "\u{1f1e8}\u{1f1fd}",
            },
            {
              name: "Cocos Islands",
              iso2: a.Cocos,
              dialCode: "61",
              flag: "\u{1f1e8}\u{1f1e8}",
            },
            {
              name: "Colombia",
              iso2: a.Colombia,
              dialCode: "57",
              flag: "\u{1f1e8}\u{1f1e8}",
            },
            {
              name: "Comoros",
              iso2: a.Comoros,
              dialCode: "269",
              flag: "\u{1f1f0}\u{1f1f2}",
            },
            {
              name: "Congo-Kinshasa",
              iso2: a.CongoDRCJamhuriYaKidemokrasiaYaKongo,
              dialCode: "243",
              flag: "\u{1f1e8}\u{1f1e9}",
            },
            {
              name: "Congo-Brazzaville",
              iso2: a.CongoRepublicCongoBrazzaville,
              dialCode: "242",
              flag: "\u{1f1e8}\u{1f1ec}",
            },
            {
              name: "Cook Islands",
              iso2: a.CookIslands,
              dialCode: "682",
              flag: "\u{1f1e8}\u{1f1f0}",
            },
            {
              name: "Costa Rica",
              iso2: a.CostaRica,
              dialCode: "506",
              flag: "\u{1f1e8}\u{1f1f7}",
            },
            {
              name: "C\xf4te d\u2019Ivoire",
              iso2: a.CôteDIvoire,
              dialCode: "225",
              flag: "\u{1f1e8}\u{1f1ee}",
            },
            {
              name: "Croatia",
              iso2: a.Croatia,
              dialCode: "385",
              flag: "\u{1f1ed}\u{1f1f7}",
            },
            {
              name: "Cuba",
              iso2: a.Cuba,
              dialCode: "53",
              flag: "\u{1f1e8}\u{1f1fa}",
            },
            {
              name: "Cura\xe7ao",
              iso2: a.Curaçao,
              dialCode: "599",
              flag: "\u{1f1e8}\u{1f1fc}",
            },
            {
              name: "Cyprus",
              iso2: a.Cyprus,
              dialCode: "357",
              flag: "\u{1f1e8}\u{1f1fe}",
            },
            {
              name: "Czech Republic",
              iso2: a.CzechRepublic,
              dialCode: "420",
              flag: "\u{1f1e8}\u{1f1ff}",
            },
            {
              name: "Denmark",
              iso2: a.Denmark,
              dialCode: "45",
              flag: "\u{1f1e9}\u{1f1f0}",
            },
            {
              name: "Djibouti",
              iso2: a.Djibouti,
              dialCode: "253",
              flag: "\u{1f1e9}\u{1f1ef}",
            },
            {
              name: "Dominica",
              iso2: a.Dominica,
              dialCode: "1767",
              flag: "\u{1f1e9}\u{1f1f2}",
            },
            {
              name: "Dominican Republic",
              iso2: a.DominicanRepublic,
              dialCode: "1",
              flag: "\u{1f1e9}\u{1f1f4}",
            },
            {
              name: "Ecuador",
              iso2: a.Ecuador,
              dialCode: "593",
              flag: "\u{1f1ea}\u{1f1e8}",
            },
            {
              name: "Egypt",
              iso2: a.Egypt,
              dialCode: "20",
              flag: "\u{1f1ea}\u{1f1ec}",
            },
            {
              name: "El Salvador",
              iso2: a.ElSalvador,
              dialCode: "503",
              flag: "\u{1f1f8}\u{1f1fb}",
            },
            {
              name: "Equatorial Guinea",
              iso2: a.EquatorialGuinea,
              dialCode: "240",
              flag: "\u{1f1ec}\u{1f1f6}",
            },
            {
              name: "Eritrea",
              iso2: a.Eritrea,
              dialCode: "291",
              flag: "\u{1f1ea}\u{1f1f7}",
            },
            {
              name: "Estonia",
              iso2: a.Estonia,
              dialCode: "372",
              flag: "\u{1f1ea}\u{1f1ea}",
            },
            {
              name: "Ethiopia",
              iso2: a.Ethiopia,
              dialCode: "251",
              flag: "\u{1f1ea}\u{1f1f9}",
            },
            {
              name: "Falkland Islands",
              iso2: a.FalklandIslands,
              dialCode: "500",
              flag: "\u{1f1eb}\u{1f1f0}",
            },
            {
              name: "Faroe Islands",
              iso2: a.FaroeIslands,
              dialCode: "298",
              flag: "\u{1f1eb}\u{1f1f4}",
            },
            {
              name: "Fiji",
              iso2: a.Fiji,
              dialCode: "679",
              flag: "\u{1f1eb}\u{1f1ef}",
            },
            {
              name: "Finland",
              iso2: a.Finland,
              dialCode: "358",
              flag: "\u{1f1eb}\u{1f1ee}",
            },
            {
              name: "France",
              iso2: a.France,
              dialCode: "33",
              flag: "\u{1f1eb}\u{1f1f7}",
            },
            {
              name: "French Guiana",
              iso2: a.FrenchGuiana,
              dialCode: "594",
              flag: "\u{1f1ec}\u{1f1eb}",
            },
            {
              name: "French Polynesia",
              iso2: a.FrenchPolynesia,
              dialCode: "689",
              flag: "\u{1f1f5}\u{1f1eb}",
            },
            {
              name: "Gabon",
              iso2: a.Gabon,
              dialCode: "241",
              flag: "\u{1f1ec}\u{1f1e6}",
            },
            {
              name: "Gambia",
              iso2: a.Gambia,
              dialCode: "220",
              flag: "\u{1f1ec}\u{1f1f2}",
            },
            {
              name: "Georgia",
              iso2: a.Georgia,
              dialCode: "995",
              flag: "\u{1f1ec}\u{1f1ea}",
            },
            {
              name: "Germany",
              iso2: a.Germany,
              dialCode: "49",
              flag: "\u{1f1e9}\u{1f1ea}",
            },
            {
              name: "Ghana",
              iso2: a.Ghana,
              dialCode: "233",
              flag: "\u{1f1ec}\u{1f1ed}",
            },
            {
              name: "Gibraltar",
              iso2: a.Gibraltar,
              dialCode: "350",
              flag: "\u{1f1ec}\u{1f1ee}",
            },
            {
              name: "Greece",
              iso2: a.Greece,
              dialCode: "30",
              flag: "\u{1f1ec}\u{1f1f7}",
            },
            {
              name: "Greenland",
              iso2: a.Greenland,
              dialCode: "299",
              flag: "\u{1f1ec}\u{1f1f1}",
            },
            {
              name: "Grenada",
              iso2: a.Grenada,
              dialCode: "1",
              flag: "\u{1f1ec}\u{1f1e9}",
            },
            {
              name: "Guadeloupe",
              iso2: a.Guadeloupe,
              dialCode: "590",
              flag: "\u{1f1ec}\u{1f1f5}",
            },
            {
              name: "Guam",
              iso2: a.Guam,
              dialCode: "1",
              flag: "\u{1f1ec}\u{1f1fa}",
            },
            {
              name: "Guatemala",
              iso2: a.Guatemala,
              dialCode: "502",
              flag: "\u{1f1ec}\u{1f1f9}",
            },
            {
              name: "Guernsey",
              iso2: a.Guernsey,
              dialCode: "44",
              flag: "\u{1f1ec}\u{1f1ec}",
            },
            {
              name: "Guinea",
              iso2: a.Guinea,
              dialCode: "224",
              flag: "\u{1f1ec}\u{1f1f3}",
            },
            {
              name: "Guinea-Bissau",
              iso2: a.GuineaBissau,
              dialCode: "245",
              flag: "\u{1f1ec}\u{1f1fc}",
            },
            {
              name: "Guyana",
              iso2: a.Guyana,
              dialCode: "592",
              flag: "\u{1f1ec}\u{1f1fe}",
            },
            {
              name: "Haiti",
              iso2: a.Haiti,
              dialCode: "509",
              flag: "\u{1f1ed}\u{1f1f9}",
            },
            {
              name: "Honduras",
              iso2: a.Honduras,
              dialCode: "504",
              flag: "\u{1f1ed}\u{1f1f3}",
            },
            {
              name: "Hong Kong",
              iso2: a.HongKong,
              dialCode: "852",
              flag: "\u{1f1ed}\u{1f1f0}",
            },
            {
              name: "Hungary",
              iso2: a.Hungary,
              dialCode: "36",
              flag: "\u{1f1ed}\u{1f1fa}",
            },
            {
              name: "Iceland",
              iso2: a.Iceland,
              dialCode: "354",
              flag: "\u{1f1ee}\u{1f1f8}",
            },
            {
              name: "India",
              iso2: a.India,
              dialCode: "91",
              flag: "\u{1f1ee}\u{1f1f3}",
            },
            {
              name: "Indonesia",
              iso2: a.Indonesia,
              dialCode: "62",
              flag: "\u{1f1ee}\u{1f1e9}",
            },
            {
              name: "Iran",
              iso2: a.Iran,
              dialCode: "98",
              flag: "\u{1f1ee}\u{1f1f7}",
            },
            {
              name: "Iraq",
              iso2: a.Iraq,
              dialCode: "964",
              flag: "\u{1f1ee}\u{1f1f6}",
            },
            {
              name: "Ireland",
              iso2: a.Ireland,
              dialCode: "353",
              flag: "\u{1f1ee}\u{1f1ea}",
            },
            {
              name: "Isle of Man",
              iso2: a.IsleOfMan,
              dialCode: "44",
              flag: "\u{1f1ee}\u{1f1f2}",
            },
            {
              name: "Israel",
              iso2: a.Israel,
              dialCode: "972",
              flag: "\u{1f1ee}\u{1f1f1}",
            },
            {
              name: "Italy",
              iso2: a.Italy,
              dialCode: "39",
              flag: "\u{1f1ee}\u{1f1f9}",
            },
            {
              name: "Jamaica",
              iso2: a.Jamaica,
              dialCode: "1",
              flag: "\u{1f1ef}\u{1f1f2}",
            },
            {
              name: "Japan",
              iso2: a.Japan,
              dialCode: "81",
              flag: "\u{1f1ef}\u{1f1f5}",
            },
            {
              name: "Jersey",
              iso2: a.Jersey,
              dialCode: "44",
              flag: "\u{1f1ef}\u{1f1ea}",
            },
            {
              name: "Jordan",
              iso2: a.Jordan,
              dialCode: "962",
              flag: "\u{1f1ef}\u{1f1f4}",
            },
            {
              name: "Kazakhstan",
              iso2: a.Kazakhstan,
              dialCode: "7",
              flag: "\u{1f1f0}\u{1f1ff}",
            },
            {
              name: "Kenya",
              iso2: a.Kenya,
              dialCode: "254",
              flag: "\u{1f1f0}\u{1f1ea}",
            },
            {
              name: "Kiribati",
              iso2: a.Kiribati,
              dialCode: "686",
              flag: "\u{1f1f0}\u{1f1ee}",
            },
            {
              name: "Kosovo",
              iso2: a.Kosovo,
              dialCode: "383",
              flag: "\u{1f1fd}\u{1f1f0}",
            },
            {
              name: "Kuwait",
              iso2: a.Kuwait,
              dialCode: "965",
              flag: "\u{1f1f0}\u{1f1fc}",
            },
            {
              name: "Kyrgyzstan",
              iso2: a.Kyrgyzstan,
              dialCode: "996",
              flag: "\u{1f1f0}\u{1f1ec}",
            },
            {
              name: "Laos",
              iso2: a.Laos,
              dialCode: "856",
              flag: "\u{1f1f1}\u{1f1e6}",
            },
            {
              name: "Latvia",
              iso2: a.Latvia,
              dialCode: "371",
              flag: "\u{1f1f1}\u{1f1fb}",
            },
            {
              name: "Lebanon",
              iso2: a.Lebanon,
              dialCode: "961",
              flag: "\u{1f1f1}\u{1f1e7}",
            },
            {
              name: "Lesotho",
              iso2: a.Lesotho,
              dialCode: "266",
              flag: "\u{1f1f1}\u{1f1f8}",
            },
            {
              name: "Liberia",
              iso2: a.Liberia,
              dialCode: "231",
              flag: "\u{1f1f1}\u{1f1f7}",
            },
            {
              name: "Libya",
              iso2: a.Libya,
              dialCode: "218",
              flag: "\u{1f1f1}\u{1f1fe}",
            },
            {
              name: "Liechtenstein",
              iso2: a.Liechtenstein,
              dialCode: "423",
              flag: "\u{1f1f1}\u{1f1ee}",
            },
            {
              name: "Lithuania",
              iso2: a.Lithuania,
              dialCode: "370",
              flag: "\u{1f1f1}\u{1f1f9}",
            },
            {
              name: "Luxembourg",
              iso2: a.Luxembourg,
              dialCode: "352",
              flag: "\u{1f1f1}\u{1f1fa}",
            },
            {
              name: "Macau",
              iso2: a.Macau,
              dialCode: "853",
              flag: "\u{1f1f2}\u{1f1f4}",
            },
            {
              name: "Macedonia",
              iso2: a.Macedonia,
              dialCode: "389",
              flag: "\u{1f1f2}\u{1f1f0}",
            },
            {
              name: "Madagascar",
              iso2: a.Madagascar,
              dialCode: "261",
              flag: "\u{1f1f2}\u{1f1ec}",
            },
            {
              name: "Malawi",
              iso2: a.Malawi,
              dialCode: "265",
              flag: "\u{1f1f2}\u{1f1fc}",
            },
            {
              name: "Malaysia",
              iso2: a.Malaysia,
              dialCode: "60",
              flag: "\u{1f1f2}\u{1f1fe}",
            },
            {
              name: "Maldives",
              iso2: a.Maldives,
              dialCode: "960",
              flag: "\u{1f1f2}\u{1f1fb}",
            },
            {
              name: "Mali",
              iso2: a.Mali,
              dialCode: "223",
              flag: "\u{1f1f2}\u{1f1f1}",
            },
            {
              name: "Malta",
              iso2: a.Malta,
              dialCode: "356",
              flag: "\u{1f1f2}\u{1f1f9}",
            },
            {
              name: "Marshall Islands",
              iso2: a.MarshallIslands,
              dialCode: "692",
              flag: "\u{1f1f2}\u{1f1ed}",
            },
            {
              name: "Martinique",
              iso2: a.Martinique,
              dialCode: "596",
              flag: "\u{1f1f2}\u{1f1f6}",
            },
            {
              name: "Mauritania",
              iso2: a.Mauritania,
              dialCode: "222",
              flag: "\u{1f1f2}\u{1f1f7}",
            },
            {
              name: "Mauritius",
              iso2: a.Mauritius,
              dialCode: "230",
              flag: "\u{1f1f2}\u{1f1fa}",
            },
            {
              name: "Mayotte",
              iso2: a.Mayotte,
              dialCode: "262",
              flag: "\u{1f1fe}\u{1f1f9}",
            },
            {
              name: "Mexico",
              iso2: a.Mexico,
              dialCode: "52",
              flag: "\u{1f1f2}\u{1f1fd}",
            },
            {
              name: "Micronesia",
              iso2: a.Micronesia,
              dialCode: "691",
              flag: "\u{1f1eb}\u{1f1f2}",
            },
            {
              name: "Moldova",
              iso2: a.Moldova,
              dialCode: "373",
              flag: "\u{1f1f2}\u{1f1e9}",
            },
            {
              name: "Monaco",
              iso2: a.Monaco,
              dialCode: "377",
              flag: "\u{1f1f2}\u{1f1e8}",
            },
            {
              name: "Mongolia",
              iso2: a.Mongolia,
              dialCode: "976",
              flag: "\u{1f1f2}\u{1f1f3}",
            },
            {
              name: "Montenegro",
              iso2: a.Montenegro,
              dialCode: "382",
              flag: "\u{1f1f2}\u{1f1ea}",
            },
            {
              name: "Montserrat",
              iso2: a.Montserrat,
              dialCode: "1",
              flag: "\u{1f1f2}\u{1f1f8}",
            },
            {
              name: "Morocco",
              iso2: a.Morocco,
              dialCode: "212",
              flag: "\u{1f1f2}\u{1f1e6}",
            },
            {
              name: "Mozambique",
              iso2: a.Mozambique,
              dialCode: "258",
              flag: "\u{1f1f2}\u{1f1ff}",
            },
            {
              name: "Myanmar",
              iso2: a.Myanmar,
              dialCode: "95",
              flag: "\u{1f1f2}\u{1f1f2}",
            },
            {
              name: "Namibia",
              iso2: a.Namibia,
              dialCode: "264",
              flag: "\u{1f1f3}\u{1f1e6}",
            },
            {
              name: "Nauru",
              iso2: a.Nauru,
              dialCode: "674",
              flag: "\u{1f1f3}\u{1f1f7}",
            },
            {
              name: "Nepal",
              iso2: a.Nepal,
              dialCode: "977",
              flag: "\u{1f1f3}\u{1f1f5}",
            },
            {
              name: "Netherlands",
              iso2: a.Netherlands,
              dialCode: "31",
              flag: "\u{1f1f3}\u{1f1f1}",
            },
            {
              name: "New Caledonia",
              iso2: a.NewCaledonia,
              dialCode: "687",
              flag: "\u{1f1f3}\u{1f1e8}",
            },
            {
              name: "New Zealand",
              iso2: a.NewZealand,
              dialCode: "64",
              flag: "\u{1f1f3}\u{1f1ff}",
            },
            {
              name: "Nicaragua",
              iso2: a.Nicaragua,
              dialCode: "505",
              flag: "\u{1f1f3}\u{1f1ee}",
            },
            {
              name: "Niger",
              iso2: a.Niger,
              dialCode: "227",
              flag: "\u{1f1f3}\u{1f1ea}",
            },
            {
              name: "Nigeria",
              iso2: a.Nigeria,
              dialCode: "234",
              flag: "\u{1f1f3}\u{1f1ec}",
            },
            {
              name: "Niue",
              iso2: a.Niue,
              dialCode: "683",
              flag: "\u{1f1f3}\u{1f1fa}",
            },
            {
              name: "Norfolk Island",
              iso2: a.NorfolkIsland,
              dialCode: "672",
              flag: "\u{1f1f3}\u{1f1eb}",
            },
            {
              name: "North Korea",
              iso2: a.NorthKorea,
              dialCode: "850",
              flag: "\u{1f1f0}\u{1f1f5}",
            },
            {
              name: "Northern Mariana Islands",
              iso2: a.NorthernMarianaIslands,
              dialCode: "1",
              flag: "\u{1f1f2}\u{1f1f5}",
            },
            {
              name: "Norway",
              iso2: a.Norway,
              dialCode: "47",
              flag: "\u{1f1f3}\u{1f1f4}",
            },
            {
              name: "Oman",
              iso2: a.Oman,
              dialCode: "968",
              flag: "\u{1f1f4}\u{1f1f2}",
            },
            {
              name: "Pakistan",
              iso2: a.Pakistan,
              dialCode: "92",
              flag: "\u{1f1f5}\u{1f1f0}",
            },
            {
              name: "Palau",
              iso2: a.Palau,
              dialCode: "680",
              flag: "\u{1f1f5}\u{1f1fc}",
            },
            {
              name: "Palestine",
              iso2: a.Palestine,
              dialCode: "970",
              flag: "\u{1f1f5}\u{1f1f8}",
            },
            {
              name: "Panama",
              iso2: a.Panama,
              dialCode: "507",
              flag: "\u{1f1f5}\u{1f1e6}",
            },
            {
              name: "Papua New Guinea",
              iso2: a.PapuaNewGuinea,
              dialCode: "675",
              flag: "\u{1f1f5}\u{1f1ec}",
            },
            {
              name: "Paraguay",
              iso2: a.Paraguay,
              dialCode: "595",
              flag: "\u{1f1f5}\u{1f1fe}",
            },
            {
              name: "Peru",
              iso2: a.Peru,
              dialCode: "51",
              flag: "\u{1f1f5}\u{1f1ea}",
            },
            {
              name: "Philippines",
              iso2: a.Philippines,
              dialCode: "63",
              flag: "\u{1f1f5}\u{1f1ed}",
            },
            {
              name: "Poland",
              iso2: a.Poland,
              dialCode: "48",
              flag: "\u{1f1f5}\u{1f1f1}",
            },
            {
              name: "Portugal",
              iso2: a.Portugal,
              dialCode: "351",
              flag: "\u{1f1f5}\u{1f1f9}",
            },
            {
              name: "Puerto Rico",
              iso2: a.PuertoRico,
              dialCode: "1",
              flag: "\u{1f1f5}\u{1f1f7}",
            },
            {
              name: "Qatar",
              iso2: a.Qatar,
              dialCode: "974",
              flag: "\u{1f1f6}\u{1f1e6}",
            },
            {
              name: "R\xe9union",
              iso2: a.Réunion,
              dialCode: "262",
              flag: "\u{1f1f7}\u{1f1ea}",
            },
            {
              name: "Romania",
              iso2: a.Romania,
              dialCode: "40",
              flag: "\u{1f1f7}\u{1f1f4}",
            },
            {
              name: "Russia",
              iso2: a.Russia,
              dialCode: "7",
              flag: "\u{1f1f7}\u{1f1fa}",
            },
            {
              name: "Rwanda",
              iso2: a.Rwanda,
              dialCode: "250",
              flag: "\u{1f1f7}\u{1f1fc}",
            },
            {
              name: "Saint Barth\xe9lemy",
              iso2: a.SaintBarthélemy,
              dialCode: "590",
              flag: "\u{1f1e7}\u{1f1f1}",
            },
            {
              name: "Saint Helena",
              iso2: a.SaintHelena,
              dialCode: "290",
              flag: "\u{1f1f8}\u{1f1ed}",
            },
            {
              name: "Saint Kitts and Nevis",
              iso2: a.SaintKittsAndNevis,
              dialCode: "1",
              flag: "\u{1f1f0}\u{1f1f3}",
            },
            {
              name: "Saint Lucia",
              iso2: a.SaintLucia,
              dialCode: "1",
              flag: "\u{1f1f1}\u{1f1e8}",
            },
            {
              name: "Saint Martin",
              iso2: a.SaintMartin,
              dialCode: "590",
              flag: "\u{1f1f2}\u{1f1eb}",
            },
            {
              name: "Saint Pierre and Miquelon",
              iso2: a.SaintPierreAndMiquelon,
              dialCode: "508",
              flag: "\u{1f1f5}\u{1f1f2}",
            },
            {
              name: "Saint Vincent and the Grenadines",
              iso2: a.SaintVincentAndTheGrenadines,
              dialCode: "1",
              flag: "\u{1f1fb}\u{1f1e8}",
            },
            {
              name: "Samoa",
              iso2: a.Samoa,
              dialCode: "685",
              flag: "\u{1f1fc}\u{1f1f8}",
            },
            {
              name: "San Marino",
              iso2: a.SanMarino,
              dialCode: "378",
              flag: "\u{1f1f8}\u{1f1f2}",
            },
            {
              name: "S\xe3o Tom\xe9 and Pr\xedncipe",
              iso2: a.SãoToméAndPríncipe,
              dialCode: "239",
              flag: "\u{1f1f8}\u{1f1f9}",
            },
            {
              name: "Saudi Arabia",
              iso2: a.SaudiArabia,
              dialCode: "966",
              flag: "\u{1f1f8}\u{1f1e6}",
            },
            {
              name: "Senegal",
              iso2: a.Senegal,
              dialCode: "221",
              flag: "\u{1f1f8}\u{1f1f3}",
            },
            {
              name: "Serbia",
              iso2: a.Serbia,
              dialCode: "381",
              flag: "\u{1f1f7}\u{1f1f8}",
            },
            {
              name: "Seychelles",
              iso2: a.Seychelles,
              dialCode: "248",
              flag: "\u{1f1f8}\u{1f1e8}",
            },
            {
              name: "Sierra Leone",
              iso2: a.SierraLeone,
              dialCode: "232",
              flag: "\u{1f1f8}\u{1f1f1}",
            },
            {
              name: "Singapore",
              iso2: a.Singapore,
              dialCode: "65",
              flag: "\u{1f1f8}\u{1f1ec}",
            },
            {
              name: "Sint Maarten",
              iso2: a.SintMaarten,
              dialCode: "1",
              flag: "\u{1f1f8}\u{1f1fd}",
            },
            {
              name: "Slovakia",
              iso2: a.Slovakia,
              dialCode: "421",
              flag: "\u{1f1f8}\u{1f1f0}",
            },
            {
              name: "Slovenia",
              iso2: a.Slovenia,
              dialCode: "386",
              flag: "\u{1f1f8}\u{1f1ee}",
            },
            {
              name: "Solomon Islands",
              iso2: a.SolomonIslands,
              dialCode: "677",
              flag: "\u{1f1f8}\u{1f1e7}",
            },
            {
              name: "Somalia",
              iso2: a.Somalia,
              dialCode: "252",
              flag: "\u{1f1f8}\u{1f1f4}",
            },
            {
              name: "South Africa",
              iso2: a.SouthAfrica,
              dialCode: "27",
              flag: "\u{1f1ff}\u{1f1e6}",
            },
            {
              name: "South Korea",
              iso2: a.SouthKorea,
              dialCode: "82",
              flag: "\u{1f1f0}\u{1f1f7}",
            },
            {
              name: "South Sudan",
              iso2: a.SouthSudan,
              dialCode: "211",
              flag: "\u{1f1f8}\u{1f1f8}",
            },
            {
              name: "Spain",
              iso2: a.Spain,
              dialCode: "34",
              flag: "\u{1f1ea}\u{1f1f8}",
            },
            {
              name: "Sri Lanka",
              iso2: a.SriLanka,
              dialCode: "94",
              flag: "\u{1f1f1}\u{1f1f0}",
            },
            {
              name: "Sudan",
              iso2: a.Sudan,
              dialCode: "249",
              flag: "\u{1f1f8}\u{1f1e9}",
            },
            {
              name: "Suriname: ",
              iso2: a.Suriname,
              dialCode: "597",
              flag: "\u{1f1f8}\u{1f1f7}",
            },
            {
              name: "Svalbard and Jan Mayen",
              iso2: a.SvalbardAndJanMayen,
              dialCode: "47",
              flag: "\u{1f1f8}\u{1f1ef}",
            },
            {
              name: "Swaziland",
              iso2: a.Swaziland,
              dialCode: "268",
              flag: "\u{1f1f8}\u{1f1ff}",
            },
            {
              name: "Sweden",
              iso2: a.Sweden,
              dialCode: "46",
              flag: "\u{1f1f8}\u{1f1ea}",
            },
            {
              name: "Switzerland",
              iso2: a.Switzerland,
              dialCode: "41",
              flag: "\u{1f1e8}\u{1f1ed}",
            },
            {
              name: "Syria",
              iso2: a.Syria,
              dialCode: "963",
              flag: "\u{1f1f8}\u{1f1fe}",
            },
            {
              name: "Taiwan",
              iso2: a.Taiwan,
              dialCode: "886",
              flag: "\u{1f1f9}\u{1f1fc}",
            },
            {
              name: "Tajikistan",
              iso2: a.Tajikistan,
              dialCode: "992",
              flag: "\u{1f1f9}\u{1f1ef}",
            },
            {
              name: "Tanzania",
              iso2: a.Tanzania,
              dialCode: "255",
              flag: "\u{1f1f9}\u{1f1ff}",
            },
            {
              name: "Thailand",
              iso2: a.Thailand,
              dialCode: "66",
              flag: "\u{1f1f9}\u{1f1ed}",
            },
            {
              name: "Timor-Leste",
              iso2: a.TimorLeste,
              dialCode: "670",
              flag: "\u{1f1f9}\u{1f1f1}",
            },
            {
              name: "Togo",
              iso2: a.Togo,
              dialCode: "228",
              flag: "\u{1f1f9}\u{1f1ec}",
            },
            {
              name: "Tokelau",
              iso2: a.Tokelau,
              dialCode: "690",
              flag: "\u{1f1f9}\u{1f1f0}",
            },
            {
              name: "Tonga",
              iso2: a.Tonga,
              dialCode: "676",
              flag: "\u{1f1f9}\u{1f1f4}",
            },
            {
              name: "Trinidad and Tobago",
              iso2: a.TrinidadAndTobago,
              dialCode: "1",
              flag: "\u{1f1f9}\u{1f1f9}",
            },
            {
              name: "Tunisia",
              iso2: a.Tunisia,
              dialCode: "216",
              flag: "\u{1f1f9}\u{1f1f3}",
            },
            {
              name: "Turkey",
              iso2: a.Turkey,
              dialCode: "90",
              flag: "\u{1f1f9}\u{1f1f7}",
            },
            {
              name: "Turkmenistan",
              iso2: a.Turkmenistan,
              dialCode: "993",
              flag: "\u{1f1f9}\u{1f1f2}",
            },
            {
              name: "Turks and Caicos Islands",
              iso2: a.TurksAndCaicosIslands,
              dialCode: "1",
              flag: "\u{1f1f9}\u{1f1e8}",
            },
            {
              name: "Tuvalu",
              iso2: a.Tuvalu,
              dialCode: "688",
              flag: "\u{1f1f9}\u{1f1fb}",
            },
            {
              name: "U.S. Virgin Islands",
              iso2: a.USVirginIslands,
              dialCode: "1",
              flag: "\u{1f1fb}\u{1f1ee}",
            },
            {
              name: "Uganda",
              iso2: a.Uganda,
              dialCode: "256",
              flag: "\u{1f1fa}\u{1f1ec}",
            },
            {
              name: "Ukraine",
              iso2: a.Ukraine,
              dialCode: "380",
              flag: "\u{1f1fa}\u{1f1e6}",
            },
            {
              name: "United Arab Emirates",
              iso2: a.UnitedArabEmirates,
              dialCode: "971",
              flag: "\u{1f1e6}\u{1f1ea}",
            },
            {
              name: "United Kingdom",
              iso2: a.UnitedKingdom,
              dialCode: "44",
              flag: "\u{1f1ec}\u{1f1e7}",
            },
            {
              name: "United States",
              iso2: a.UnitedStates,
              dialCode: "1",
              flag: "\u{1f1fa}\u{1f1f8}",
            },
            {
              name: "Uruguay",
              iso2: a.Uruguay,
              dialCode: "598",
              flag: "\u{1f1fa}\u{1f1fe}",
            },
            {
              name: "Uzbekistan",
              iso2: a.Uzbekistan,
              dialCode: "998",
              flag: "\u{1f1fa}\u{1f1ff}",
            },
            {
              name: "Vanuatu",
              iso2: a.Vanuatu,
              dialCode: "678",
              flag: "\u{1f1fb}\u{1f1fa}",
            },
            {
              name: "Vatican City",
              iso2: a.VaticanCity,
              dialCode: "39",
              flag: "\u{1f1fb}\u{1f1e6}",
            },
            {
              name: "Venezuela",
              iso2: a.Venezuela,
              dialCode: "58",
              flag: "\u{1f1fb}\u{1f1ea}",
            },
            {
              name: "Vietnam",
              iso2: a.Vietnam,
              dialCode: "84",
              flag: "\u{1f1fb}\u{1f1f3}",
            },
            {
              name: "Wallis and Futuna",
              iso2: a.WallisAndFutuna,
              dialCode: "681",
              flag: "\u{1f1fc}\u{1f1eb}",
            },
            {
              name: "Western Sahara",
              iso2: a.WesternSahara,
              dialCode: "212",
              flag: "\u{1f1ea}\u{1f1ed}",
            },
            {
              name: "Yemen",
              iso2: a.Yemen,
              dialCode: "967",
              flag: "\u{1f1fe}\u{1f1ea}",
            },
            {
              name: "Zambia",
              iso2: a.Zambia,
              dialCode: "260",
              flag: "\u{1f1ff}\u{1f1f2}",
            },
            {
              name: "Zimbabwe",
              iso2: a.Zimbabwe,
              dialCode: "263",
              flag: "\u{1f1ff}\u{1f1fc}",
            },
            {
              name: "\xc5land Islands",
              iso2: a.ÅlandIslands,
              dialCode: "358",
              flag: "\u{1f1e6}\u{1f1fd}",
            },
          ];
        }
      }
      (C.ɵfac = function (T) {
        return new (T || C)();
      }),
        (C.ɵprov = e.ɵɵdefineInjectable({ token: C, factory: C.ɵfac }));
      var s = t(71854),
        d = t(29790),
        o = t(38583),
        i = t(98295),
        g = t(83166),
        D = t(67441),
        y = t(4885),
        m = t(72458);
      function r(l, T) {
        if (
          (1 & l &&
            (e.ɵɵelementStart(0, "span", 12), e.ɵɵtext(1), e.ɵɵelementEnd()),
          2 & l)
        ) {
          const O = e.ɵɵnextContext(2);
          e.ɵɵadvance(1), e.ɵɵtextInterpolate(O.flagIcon);
        }
      }
      function h(l, T) {
        1 & l && e.ɵɵelement(0, "mat-spinner", 13);
      }
      function p(l, T) {
        if (
          (1 & l &&
            (e.ɵɵelementStart(0, "mat-option", 14),
            e.ɵɵelementStart(1, "span", 15),
            e.ɵɵtext(2),
            e.ɵɵelementEnd(),
            e.ɵɵelementStart(3, "span"),
            e.ɵɵtext(4),
            e.ɵɵelementEnd(),
            e.ɵɵelementEnd()),
          2 & l)
        ) {
          const O = T.$implicit;
          e.ɵɵproperty("value", O.iso2),
            e.ɵɵadvance(2),
            e.ɵɵtextInterpolate(O.flag),
            e.ɵɵadvance(2),
            e.ɵɵtextInterpolate(" " + O.name + " +" + O.dialCode);
        }
      }
      function _(l, T) {
        if (
          (1 & l &&
            (e.ɵɵelementStart(0, "div", 7),
            e.ɵɵtemplate(1, r, 2, 1, "span", 8),
            e.ɵɵtemplate(2, h, 1, 0, "mat-spinner", 9),
            e.ɵɵelementStart(3, "mat-select", 10),
            e.ɵɵtemplate(4, p, 5, 3, "mat-option", 11),
            e.ɵɵelementEnd(),
            e.ɵɵelementEnd()),
          2 & l)
        ) {
          const O = e.ɵɵnextContext();
          e.ɵɵadvance(1),
            e.ɵɵproperty("ngIf", !O.isLoad),
            e.ɵɵadvance(1),
            e.ɵɵproperty("ngIf", O.isLoad),
            e.ɵɵadvance(2),
            e.ɵɵproperty("ngForOf", O.allCountries);
        }
      }
      function E(l, T) {
        1 & l &&
          (e.ɵɵelementStart(0, "mat-error"),
          e.ɵɵtext(1),
          e.ɵɵpipe(2, "translate"),
          e.ɵɵelementEnd()),
          2 & l &&
            (e.ɵɵadvance(1),
            e.ɵɵtextInterpolate1(
              " ",
              e.ɵɵpipeBind1(2, 1, "phone-input.phone-input-required"),
              " "
            ));
      }
      function c(l, T) {
        1 & l &&
          (e.ɵɵelementStart(0, "mat-error"),
          e.ɵɵtext(1),
          e.ɵɵpipe(2, "translate"),
          e.ɵɵelementEnd()),
          2 & l &&
            (e.ɵɵadvance(1),
            e.ɵɵtextInterpolate1(
              " ",
              e.ɵɵpipeBind1(2, 1, "phone-input.phone-input-validation"),
              " "
            ));
      }
      const v = function (l) {
        return { phoneNumber: l };
      };
      class I {
        constructor(T, O, w) {
          (this.translate = T),
            (this.fb = O),
            (this.countryCodeData = w),
            (this.defaultCountry = "US"),
            (this.enableFlagsSelect = !0),
            (this.required = !0),
            (this.floatLabel = "auto"),
            (this.appearance = "legacy"),
            (this.label = this.translate.instant(
              "phone-input.phone-input-label"
            )),
            (this.allCountries = this.countryCodeData.allCountries),
            (this.phonePlaceholder = "+12015550123"),
            (this.isLoading = !0),
            (this.isLegacy = !1),
            (this.baseCode = 127397),
            (this.countryCallingCode = "+"),
            (this.changeSubscriptions = []),
            (this.validators = [this.validatePhoneNumber()]),
            (this.propagateChange = (b) => {}),
            t
              .e(3756)
              .then(t.bind(t, 13756))
              .then((b) => {
                (this.parsePhoneNumberFromString =
                  b.parsePhoneNumberFromString),
                  (this.getExampleNumber = b.getExampleNumber);
              })
              .then(() => (this.isLoad = !1));
        }
        get showFlagSelect() {
          return this.enableFlagsSelect && !this.isLegacy;
        }
        get isLoad() {
          return this.isLoading;
        }
        set isLoad(T) {
          if (
            this.isLoading &&
            ((this.isLoading = T),
            this.defaultCountry &&
              this.getFlagAndPhoneNumberData(this.defaultCountry),
            this.phoneFormGroup && this.phoneFormGroup.get("phoneNumber").value)
          ) {
            const O = this.parsePhoneNumberFromString(
              this.phoneFormGroup.get("phoneNumber").value
            );
            this.defineCountryFromNumber(O);
          }
        }
        ngOnInit() {
          this.required && this.validators.push(n.Validators.required),
            (this.phoneFormGroup = this.fb.group({
              country: [null, []],
              phoneNumber: [null, this.validators],
            })),
            this.changeSubscriptions.push(
              this.phoneFormGroup
                .get("phoneNumber")
                .valueChanges.subscribe((T) => {
                  let O = null;
                  T &&
                    this.parsePhoneNumberFromString &&
                    ((O = this.parsePhoneNumberFromString(T)),
                    this.defineCountryFromNumber(O)),
                    this.updateModel(O);
                })
            ),
            this.changeSubscriptions.push(
              this.phoneFormGroup.get("country").valueChanges.subscribe((T) => {
                if (T) {
                  const O = this.countryCallingCode;
                  this.getFlagAndPhoneNumberData(T);
                  let w = this.phoneFormGroup.get("phoneNumber").value;
                  w &&
                    "+" !== O &&
                    O !== this.countryCallingCode &&
                    w.includes(O) &&
                    ((w = w.replace(O, this.countryCallingCode)),
                    this.phoneFormGroup.get("phoneNumber").patchValue(w));
                }
              })
            );
        }
        ngOnDestroy() {
          for (const T of this.changeSubscriptions) T.unsubscribe();
        }
        focus() {
          const T = this.phoneFormGroup.get("phoneNumber");
          T.value || T.patchValue(this.countryCallingCode, { emitEvent: !0 });
        }
        getFlagAndPhoneNumberData(T) {
          this.enableFlagsSelect && (this.flagIcon = this.getFlagIcon(T)),
            this.getPhoneNumberData(T);
        }
        getPhoneNumberData(T) {
          if (this.getExampleNumber) {
            const O = this.getExampleNumber(T, s.Z);
            (this.phonePlaceholder = O.number),
              (this.countryCallingCode = `+${
                this.enableFlagsSelect ? O.countryCallingCode : ""
              }`);
          }
        }
        getFlagIcon(T) {
          return String.fromCodePoint(
            ...T.split("").map((O) => this.baseCode + O.charCodeAt(0))
          );
        }
        updateModelValueInFormat(T) {
          this.modelValue = T.format("E.164");
        }
        validatePhoneNumber() {
          return (T) => {
            const O = T.value;
            if (O && this.parsePhoneNumberFromString) {
              const w = this.parsePhoneNumberFromString(O);
              if (
                !(null == w ? void 0 : w.isValid()) ||
                !(null == w ? void 0 : w.isPossible())
              )
                return { invalidPhoneNumber: { valid: !1 } };
            }
            return null;
          };
        }
        defineCountryFromNumber(T) {
          const O = this.phoneFormGroup.get("country").value;
          (null == T ? void 0 : T.country) &&
            (null == T ? void 0 : T.country) !== O &&
            this.phoneFormGroup
              .get("country")
              .patchValue(T.country, { emitEvent: !0 });
        }
        validate() {
          const T = this.phoneFormGroup.get("phoneNumber");
          return T.valid || this.countryCallingCode === T.value
            ? null
            : { phoneFormGroup: !1 };
        }
        registerOnChange(T) {
          this.propagateChange = T;
        }
        registerOnTouched(T) {}
        setDisabledState(T) {
          (this.disabled = T),
            T
              ? this.phoneFormGroup.disable({ emitEvent: !1 })
              : this.phoneFormGroup.enable({ emitEvent: !1 });
        }
        writeValue(T) {
          this.modelValue = T;
          let O = this.defaultCountry;
          if (this.parsePhoneNumberFromString) {
            if (
              (this.phoneFormGroup.get("phoneNumber").clearValidators(),
              this.phoneFormGroup
                .get("phoneNumber")
                .setValidators(this.validators),
              T)
            ) {
              const w = this.parsePhoneNumberFromString(T);
              if (
                (null == w ? void 0 : w.isValid()) &&
                (null == w ? void 0 : w.isPossible())
              )
                (O = (null == w ? void 0 : w.country) || this.defaultCountry),
                  this.updateModelValueInFormat(w),
                  (this.isLegacy = !1);
              else {
                const b = [n.Validators.maxLength(255)];
                this.required && b.push(n.Validators.required),
                  this.phoneFormGroup.get("phoneNumber").setValidators(b),
                  (this.isLegacy = !0);
              }
            } else this.isLegacy = !1;
            this.phoneFormGroup.updateValueAndValidity({ emitEvent: !1 }),
              this.getFlagAndPhoneNumberData(O);
          }
          this.phoneFormGroup.reset(
            { phoneNumber: T, country: O },
            { emitEvent: !1 }
          );
        }
        updateModel(T) {
          const O = this.phoneFormGroup.get("phoneNumber");
          "+" === O.value || O.value === this.countryCallingCode
            ? this.propagateChange(null)
            : O.valid
            ? ((this.modelValue = O.value),
              T && this.updateModelValueInFormat(T),
              this.propagateChange(this.modelValue))
            : this.propagateChange(null);
        }
      }
      (I.ɵfac = function (T) {
        return new (T || I)(
          e.ɵɵdirectiveInject(d.TranslateService),
          e.ɵɵdirectiveInject(n.FormBuilder),
          e.ɵɵdirectiveInject(C)
        );
      }),
        (I.ɵcmp = e.ɵɵdefineComponent({
          type: I,
          selectors: [["tb-phone-input"]],
          inputs: {
            disabled: "disabled",
            defaultCountry: "defaultCountry",
            enableFlagsSelect: "enableFlagsSelect",
            required: "required",
            floatLabel: "floatLabel",
            appearance: "appearance",
            placeholder: "placeholder",
            label: "label",
          },
          features: [
            e.ɵɵProvidersFeature([
              C,
              {
                provide: n.NG_VALUE_ACCESSOR,
                useExisting: (0, e.forwardRef)(() => I),
                multi: !0,
              },
              {
                provide: n.NG_VALIDATORS,
                useExisting: (0, e.forwardRef)(() => I),
                multi: !0,
              },
            ]),
          ],
          decls: 11,
          vars: 15,
          consts: [
            [3, "formGroup"],
            [1, "phone-input-container"],
            ["class", "flags-select-container", 4, "ngIf"],
            [1, "phone-input", 3, "appearance", "floatLabel"],
            [
              "formControlName",
              "phoneNumber",
              "type",
              "tel",
              "matInput",
              "",
              "autocomplete",
              "off",
              3,
              "placeholder",
              "required",
              "focus",
            ],
            [3, "innerHTML"],
            [4, "ngIf"],
            [1, "flags-select-container"],
            ["class", "flag-container", 4, "ngIf"],
            ["diameter", "20", "class", "flag-loader", 4, "ngIf"],
            ["formControlName", "country", 1, "country-select"],
            [3, "value", 4, "ngFor", "ngForOf"],
            [1, "flag-container"],
            ["diameter", "20", 1, "flag-loader"],
            [3, "value"],
            [2, "font-size", "20px"],
          ],
          template: function (T, O) {
            1 & T &&
              (e.ɵɵelementStart(0, "form", 0),
              e.ɵɵelementStart(1, "div", 1),
              e.ɵɵtemplate(2, _, 5, 3, "div", 2),
              e.ɵɵelementStart(3, "mat-form-field", 3),
              e.ɵɵelementStart(4, "mat-label"),
              e.ɵɵtext(5),
              e.ɵɵelementEnd(),
              e.ɵɵelementStart(6, "input", 4),
              e.ɵɵlistener("focus", function () {
                return O.focus();
              }),
              e.ɵɵelementEnd(),
              e.ɵɵelement(7, "mat-hint", 5),
              e.ɵɵpipe(8, "translate"),
              e.ɵɵtemplate(9, E, 3, 3, "mat-error", 6),
              e.ɵɵtemplate(10, c, 3, 3, "mat-error", 6),
              e.ɵɵelementEnd(),
              e.ɵɵelementEnd(),
              e.ɵɵelementEnd()),
              2 & T &&
                (e.ɵɵproperty("formGroup", O.phoneFormGroup),
                e.ɵɵadvance(2),
                e.ɵɵproperty("ngIf", O.showFlagSelect),
                e.ɵɵadvance(1),
                e.ɵɵproperty("appearance", O.appearance)(
                  "floatLabel",
                  O.floatLabel
                ),
                e.ɵɵadvance(2),
                e.ɵɵtextInterpolate(O.label),
                e.ɵɵadvance(1),
                e.ɵɵpropertyInterpolate("placeholder", O.placeholder),
                e.ɵɵproperty("required", O.required),
                e.ɵɵadvance(1),
                e.ɵɵpropertyInterpolate(
                  "innerHTML",
                  e.ɵɵpipeBind2(
                    8,
                    10,
                    "phone-input.phone-input-hint",
                    e.ɵɵpureFunction1(13, v, O.phonePlaceholder)
                  ),
                  e.ɵɵsanitizeHtml
                ),
                e.ɵɵadvance(2),
                e.ɵɵproperty(
                  "ngIf",
                  O.phoneFormGroup.get("phoneNumber").hasError("required")
                ),
                e.ɵɵadvance(1),
                e.ɵɵproperty(
                  "ngIf",
                  O.phoneFormGroup
                    .get("phoneNumber")
                    .hasError("invalidPhoneNumber")
                ));
          },
          directives: [
            n.ɵNgNoValidate,
            n.NgControlStatusGroup,
            n.FormGroupDirective,
            o.NgIf,
            i.MatFormField,
            i.MatLabel,
            n.DefaultValueAccessor,
            g.MatInput,
            n.NgControlStatus,
            n.FormControlName,
            n.RequiredValidator,
            i.MatHint,
            D.MatSelect,
            o.NgForOf,
            y.MatSpinner,
            m.MatOption,
            i.MatError,
          ],
          pipes: [d.TranslatePipe],
          styles: [
            '@charset "UTF-8";[_nghost-%COMP%]     .flag-loader{position:absolute;top:50%;left:0;transform:translateY(-50%)}[_nghost-%COMP%]     .phone-input-container{display:flex;align-items:center}[_nghost-%COMP%]     .phone-input-container .phone-input{width:100%}[_nghost-%COMP%]     .flags-select-container{display:inline-block;position:relative;width:50px;height:100%;margin-right:5px}[_nghost-%COMP%]     .flag-container{position:absolute;font-size:20px;top:50%;left:0;transform:translateY(-50%)}[_nghost-%COMP%]     .country-select{width:45px;height:30px}[_nghost-%COMP%]     .country-select .mat-select-trigger{height:100%;width:100%}[_nghost-%COMP%]     .country-select .mat-select-value{visibility:hidden}',
          ],
        }));
    },
    95473: (ee, R, t) => {
      "use strict";
      t.r(R),
        t.d(R, { TbPopoverDirective: () => w, TbPopoverComponent: () => b });
      var e = t(37716),
        n = t(79765),
        a = t(88978),
        C = t(87519),
        s = t(46782),
        d = t(15257),
        o = t(41960),
        i = t(17238),
        g = t(70946),
        D = t(58203),
        y = t(38583),
        m = t(88030),
        r = t(69629),
        h = t(73100),
        p = t(5609);
      const _ = ["overlay"],
        E = ["popoverRoot"],
        c = ["popover"];
      function v(S, u) {
        if (1 & S) {
          const f = e.ɵɵgetCurrentView();
          e.ɵɵelementStart(0, "div", 14),
            e.ɵɵlistener("click", function (L) {
              return e.ɵɵrestoreView(f), e.ɵɵnextContext(2).closeButtonClick(L);
            }),
            e.ɵɵtext(1, "\xd7"),
            e.ɵɵelementEnd();
        }
      }
      function I(S, u) {
        if (
          (1 & S &&
            (e.ɵɵelementContainerStart(0),
            e.ɵɵtext(1),
            e.ɵɵelementContainerEnd()),
          2 & S)
        ) {
          const f = e.ɵɵnextContext(3);
          e.ɵɵadvance(1), e.ɵɵtextInterpolate(f.tbContent);
        }
      }
      function l(S, u) {
        if (
          (1 & S &&
            (e.ɵɵelementContainerStart(0),
            e.ɵɵtemplate(1, I, 2, 1, "ng-container", 15),
            e.ɵɵelementContainerEnd()),
          2 & S)
        ) {
          const f = e.ɵɵnextContext(2);
          e.ɵɵadvance(1), e.ɵɵproperty("tbStringTemplateOutlet", f.tbContent);
        }
      }
      function T(S, u) {
        if (1 & S) {
          const f = e.ɵɵgetCurrentView();
          e.ɵɵelementContainerStart(0, 16),
            e.ɵɵlistener("componentChange", function (L) {
              return (
                e.ɵɵrestoreView(f), e.ɵɵnextContext(2).onComponentChange(L)
              );
            }),
            e.ɵɵelementContainerEnd();
        }
        if (2 & S) {
          const f = e.ɵɵnextContext(2);
          e.ɵɵproperty("tbComponentOutlet", f.tbComponentFactory)(
            "tbComponentInjector",
            f.tbComponentInjector
          )("tbComponentOutletContext", f.tbComponentContext)(
            "tbComponentStyle",
            f.tbComponentStyle
          );
        }
      }
      function O(S, u) {
        if (1 & S) {
          const f = e.ɵɵgetCurrentView();
          e.ɵɵelementStart(0, "div", null, 2),
            e.ɵɵlistener("@popoverMotion.done", function () {
              return e.ɵɵrestoreView(f), e.ɵɵnextContext().animationDone();
            }),
            e.ɵɵelementStart(2, "div", 3, 4),
            e.ɵɵelementStart(4, "div", 5),
            e.ɵɵelementStart(5, "div", 6),
            e.ɵɵelement(6, "span", 7),
            e.ɵɵelementEnd(),
            e.ɵɵelementStart(7, "div", 8),
            e.ɵɵtemplate(8, v, 2, 0, "div", 9),
            e.ɵɵelementStart(9, "div", 10),
            e.ɵɵelementStart(10, "div", 11),
            e.ɵɵtemplate(11, l, 2, 1, "ng-container", 12),
            e.ɵɵtemplate(12, T, 1, 4, "ng-container", 13),
            e.ɵɵelementEnd(),
            e.ɵɵelementEnd(),
            e.ɵɵelementEnd(),
            e.ɵɵelementEnd(),
            e.ɵɵelementEnd(),
            e.ɵɵelementEnd();
        }
        if (2 & S) {
          const f = e.ɵɵnextContext();
          e.ɵɵproperty("@popoverMotion", f.tbAnimationState),
            e.ɵɵadvance(2),
            e.ɵɵclassProp("tb-popover-rtl", "rtl" === f.dir),
            e.ɵɵproperty("ngClass", f.classMap)("ngStyle", f.tbOverlayStyle),
            e.ɵɵadvance(5),
            e.ɵɵproperty("ngStyle", f.tbPopoverInnerStyle),
            e.ɵɵadvance(1),
            e.ɵɵproperty("ngIf", f.tbShowCloseButton),
            e.ɵɵadvance(3),
            e.ɵɵproperty("ngIf", f.tbContent),
            e.ɵɵadvance(1),
            e.ɵɵproperty("ngIf", f.tbComponentFactory);
        }
      }
      class w {
        constructor(u, f, M, L) {
          (this.elementRef = u),
            (this.hostView = f),
            (this.resolver = M),
            (this.renderer = L),
            (this.trigger = "hover"),
            (this.placement = "top"),
            (this.tbPopoverBackdrop = !1),
            (this.visibleChange = new e.EventEmitter()),
            (this.componentFactory = this.resolver.resolveComponentFactory(b)),
            (this.destroy$ = new n.xQ()),
            (this.triggerDisposables = []),
            (this.internalVisible = !1);
        }
        ngOnChanges(u) {
          const { trigger: f } = u;
          f && !f.isFirstChange() && this.registerTriggers(),
            this.component && this.updatePropertiesByChanges(u);
        }
        ngAfterViewInit() {
          this.registerTriggers();
        }
        ngOnDestroy() {
          this.destroy$.next(),
            this.destroy$.complete(),
            this.clearTogglingTimer(),
            this.removeTriggerListeners();
        }
        show() {
          var u;
          this.component || this.createComponent(),
            null === (u = this.component) || void 0 === u || u.show();
        }
        hide() {
          var u;
          null === (u = this.component) || void 0 === u || u.hide();
        }
        updatePosition() {
          this.component && this.component.updatePosition();
        }
        createComponent() {
          const u = this.hostView.createComponent(this.componentFactory);
          (this.component = u.instance),
            this.renderer.removeChild(
              this.renderer.parentNode(this.elementRef.nativeElement),
              u.location.nativeElement
            ),
            this.component.setOverlayOrigin({
              elementRef: this.origin || this.elementRef,
            }),
            this.initProperties(),
            this.component.tbVisibleChange
              .pipe((0, C.x)(), (0, s.R)(this.destroy$))
              .subscribe((f) => {
                (this.internalVisible = f), this.visibleChange.emit(f);
              });
        }
        registerTriggers() {
          const u = this.elementRef.nativeElement,
            f = this.trigger;
          if ((this.removeTriggerListeners(), "hover" === f)) {
            let M;
            this.triggerDisposables.push(
              this.renderer.listen(u, "mouseenter", () => {
                this.delayEnterLeave(!0, !0, this.mouseEnterDelay);
              })
            ),
              this.triggerDisposables.push(
                this.renderer.listen(u, "mouseleave", () => {
                  var L;
                  this.delayEnterLeave(!0, !1, this.mouseLeaveDelay),
                    (null === (L = this.component) || void 0 === L
                      ? void 0
                      : L.overlay.overlayRef) &&
                      !M &&
                      ((M = this.component.overlay.overlayRef.overlayElement),
                      this.triggerDisposables.push(
                        this.renderer.listen(M, "mouseenter", () => {
                          this.delayEnterLeave(!1, !0, this.mouseEnterDelay);
                        })
                      ),
                      this.triggerDisposables.push(
                        this.renderer.listen(M, "mouseleave", () => {
                          this.delayEnterLeave(!1, !1, this.mouseLeaveDelay);
                        })
                      ));
                })
              );
          } else
            "focus" === f
              ? (this.triggerDisposables.push(
                  this.renderer.listen(u, "focusin", () => this.show())
                ),
                this.triggerDisposables.push(
                  this.renderer.listen(u, "focusout", () => this.hide())
                ))
              : "click" === f &&
                this.triggerDisposables.push(
                  this.renderer.listen(u, "click", (M) => {
                    var L;
                    M.preventDefault(),
                      (
                        null === (L = this.component) || void 0 === L
                          ? void 0
                          : L.visible
                      )
                        ? this.hide()
                        : this.show();
                  })
                );
        }
        updatePropertiesByChanges(u) {
          this.updatePropertiesByKeys(Object.keys(u));
        }
        updatePropertiesByKeys(u) {
          var f;
          const M = {
            content: ["tbContent", () => this.content],
            trigger: ["tbTrigger", () => this.trigger],
            placement: ["tbPlacement", () => this.placement],
            visible: ["tbVisible", () => this.visible],
            mouseEnterDelay: ["tbMouseEnterDelay", () => this.mouseEnterDelay],
            mouseLeaveDelay: ["tbMouseLeaveDelay", () => this.mouseLeaveDelay],
            overlayClassName: [
              "tbOverlayClassName",
              () => this.overlayClassName,
            ],
            overlayStyle: ["tbOverlayStyle", () => this.overlayStyle],
            tbPopoverBackdrop: ["tbBackdrop", () => this.tbPopoverBackdrop],
          };
          (
            u || Object.keys(M).filter((L) => !L.startsWith("directive"))
          ).forEach((L) => {
            if (M[L]) {
              const [k, N] = M[L];
              this.updateComponentValue(k, N());
            }
          }),
            null === (f = this.component) ||
              void 0 === f ||
              f.updateByDirective();
        }
        initProperties() {
          this.updatePropertiesByKeys();
        }
        updateComponentValue(u, f) {
          void 0 !== f && (this.component[u] = f);
        }
        delayEnterLeave(u, f, M = -1) {
          this.delayTimer
            ? this.clearTogglingTimer()
            : M > 0
            ? (this.delayTimer = setTimeout(() => {
                (this.delayTimer = void 0), f ? this.show() : this.hide();
              }, 1e3 * M))
            : f && u
            ? this.show()
            : this.hide();
        }
        removeTriggerListeners() {
          this.triggerDisposables.forEach((u) => u()),
            (this.triggerDisposables.length = 0);
        }
        clearTogglingTimer() {
          this.delayTimer &&
            (clearTimeout(this.delayTimer), (this.delayTimer = void 0));
        }
      }
      (w.ɵfac = function (u) {
        return new (u || w)(
          e.ɵɵdirectiveInject(e.ElementRef),
          e.ɵɵdirectiveInject(e.ViewContainerRef),
          e.ɵɵdirectiveInject(e.ComponentFactoryResolver),
          e.ɵɵdirectiveInject(e.Renderer2)
        );
      }),
        (w.ɵdir = e.ɵɵdefineDirective({
          type: w,
          selectors: [["", "tb-popover", ""]],
          hostVars: 2,
          hostBindings: function (u, f) {
            2 & u && e.ɵɵclassProp("tb-popover-open", f.visible);
          },
          inputs: {
            content: ["tbPopoverContent", "content"],
            trigger: ["tbPopoverTrigger", "trigger"],
            placement: ["tbPopoverPlacement", "placement"],
            origin: ["tbPopoverOrigin", "origin"],
            visible: ["tbPopoverVisible", "visible"],
            mouseEnterDelay: ["tbPopoverMouseEnterDelay", "mouseEnterDelay"],
            mouseLeaveDelay: ["tbPopoverMouseLeaveDelay", "mouseLeaveDelay"],
            overlayClassName: ["tbPopoverOverlayClassName", "overlayClassName"],
            overlayStyle: ["tbPopoverOverlayStyle", "overlayStyle"],
            tbPopoverBackdrop: "tbPopoverBackdrop",
          },
          outputs: { visibleChange: "tbPopoverVisibleChange" },
          exportAs: ["tbPopover"],
          features: [e.ɵɵNgOnChangesFeature],
        }));
      class b {
        constructor(u, f, M, L) {
          (this.cdr = u),
            (this.renderer = f),
            (this.animationBuilder = M),
            (this.directionality = L),
            (this.tbContent = null),
            (this.tbComponentFactory = null),
            (this.tbComponentRef = null),
            (this.tbComponentInjector = null),
            (this.tbComponentStyle = {}),
            (this.tbOverlayStyle = {}),
            (this.tbPopoverInnerStyle = {}),
            (this.tbBackdrop = !1),
            (this.tbHideOnClickOutside = !0),
            (this.tbShowCloseButton = !0),
            (this.tbAnimationState = "active"),
            (this.tbVisibleChange = new n.xQ()),
            (this.tbAnimationDone = new n.xQ()),
            (this.tbComponentChange = new n.xQ()),
            (this.tbDestroy = new n.xQ()),
            (this.visible = !1),
            (this.hidden = !1),
            (this.lastIsIntersecting = !0),
            (this.trigger = "hover"),
            (this.preferredPlacement = "top"),
            (this.dir = "ltr"),
            (this.classMap = {}),
            (this.positions = [...a.rx]),
            (this.parentScrollSubscription = null),
            (this.intersectionObserver = new IntersectionObserver(
              (k) => {
                this.lastIsIntersecting !== k[0].isIntersecting &&
                  ((this.lastIsIntersecting = k[0].isIntersecting),
                  this.updateStyles(),
                  this.cdr.markForCheck());
              },
              { threshold: [0.5] }
            ));
        }
        set tbVisible(u) {
          const f = u;
          this.visible !== f &&
            ((this.visible = f), this.tbVisibleChange.next(f));
        }
        get tbVisible() {
          return this.visible && "active" === this.tbAnimationState;
        }
        set tbHidden(u) {
          const f = u;
          this.hidden !== f &&
            ((this.hidden = f),
            this.hidden
              ? (this.renderer.setStyle(
                  this.popoverRoot.nativeElement,
                  "width",
                  this.popoverRoot.nativeElement.offsetWidth + "px"
                ),
                this.renderer.setStyle(
                  this.popoverRoot.nativeElement,
                  "height",
                  this.popoverRoot.nativeElement.offsetHeight + "px"
                ))
              : setTimeout(() => {
                  this.renderer.removeStyle(
                    this.popoverRoot.nativeElement,
                    "width"
                  ),
                    this.renderer.removeStyle(
                      this.popoverRoot.nativeElement,
                      "height"
                    );
                }),
            this.updateStyles(),
            this.cdr.markForCheck());
        }
        get tbHidden() {
          return this.hidden;
        }
        set tbTrigger(u) {
          this.trigger = u;
        }
        get tbTrigger() {
          return this.trigger;
        }
        set tbPlacement(u) {
          if ("string" == typeof u) this.positions = [a.yW[u], ...a.rx];
          else {
            const f = u.map((M) => a.yW[M]);
            this.positions = [...f, ...a.rx];
          }
        }
        get hasBackdrop() {
          return "click" === this.tbTrigger && this.tbBackdrop;
        }
        ngOnInit() {
          var u;
          null === (u = this.directionality.change) ||
            void 0 === u ||
            u.pipe((0, s.R)(this.tbDestroy)).subscribe((f) => {
              (this.dir = f), this.cdr.detectChanges();
            }),
            (this.dir = this.directionality.value);
        }
        ngOnDestroy() {
          if (
            (this.parentScrollSubscription &&
              (this.parentScrollSubscription.unsubscribe(),
              (this.parentScrollSubscription = null)),
            this.origin)
          ) {
            const u = this.origin.elementRef.nativeElement;
            this.intersectionObserver.unobserve(u);
          }
          this.intersectionObserver.disconnect(),
            (this.intersectionObserver = null),
            this.tbVisibleChange.complete(),
            this.tbAnimationDone.complete(),
            this.tbDestroy.next(),
            this.tbDestroy.complete();
        }
        closeButtonClick(u) {
          u && (u.preventDefault(), u.stopPropagation()), this.hide();
        }
        show() {
          if (
            !this.tbVisible &&
            (this.isEmpty() ||
              ((this.tbVisible = !0),
              this.tbVisibleChange.next(!0),
              this.cdr.detectChanges()),
            this.origin && this.overlay && this.overlay.overlayRef)
          ) {
            "rtl" === this.overlay.overlayRef.getDirection() &&
              this.overlay.overlayRef.setDirection("ltr");
            const u = this.origin.elementRef.nativeElement;
            (this.parentScrollSubscription = (0, o.lg)(u).subscribe(() => {
              this.overlay.overlayRef.updatePosition();
            })),
              this.intersectionObserver.observe(u);
          }
        }
        hide() {
          if (this.tbVisible) {
            if (
              (this.parentScrollSubscription &&
                (this.parentScrollSubscription.unsubscribe(),
                (this.parentScrollSubscription = null)),
              this.origin)
            ) {
              const u = this.origin.elementRef.nativeElement;
              this.intersectionObserver.unobserve(u);
            }
            (this.tbAnimationState = "void"),
              this.cdr.detectChanges(),
              this.tbAnimationDone.pipe((0, d.q)(1)).subscribe(() => {
                (this.tbVisible = !1), this.cdr.detectChanges();
              });
          }
        }
        updateByDirective() {
          this.updateStyles(),
            this.cdr.detectChanges(),
            Promise.resolve().then(() => {
              this.updatePosition(), this.updateVisibilityByContent();
            });
        }
        resize(u, f, M) {
          if (M && M > 0) {
            const L = this.popover.nativeElement.offsetWidth,
              k = this.popover.nativeElement.offsetHeight,
              N = [
                (0, i.style)({ width: L + "px", height: k + "px" }),
                (0, i.animate)(M + "ms", (0, i.style)({ width: u, height: f })),
              ],
              j = this.animationBuilder
                .build(N)
                .create(this.popover.nativeElement);
            j.play();
            const F = new ResizeObserver(() => {
              this.updatePosition();
            });
            F.observe(this.popover.nativeElement),
              j.onDone(() => {
                j.destroy(), F.disconnect(), this.setSize(u, f);
              });
          } else this.setSize(u, f);
        }
        setSize(u, f) {
          this.renderer.setStyle(this.popover.nativeElement, "width", u),
            this.renderer.setStyle(this.popover.nativeElement, "height", f),
            this.updatePosition();
        }
        updatePosition() {
          this.origin &&
            this.overlay &&
            this.overlay.overlayRef &&
            this.overlay.overlayRef.updatePosition();
        }
        onPositionChange(u) {
          (this.preferredPlacement = (0, a.d_)(u)),
            this.updateStyles(),
            this.cdr.detectChanges();
        }
        updateStyles() {
          (this.classMap = {
            [`tb-popover-placement-${this.preferredPlacement}`]: !0,
            "tb-popover-hidden": this.tbHidden || !this.lastIsIntersecting,
          }),
            this.tbOverlayClassName &&
              (this.classMap[this.tbOverlayClassName] = !0);
        }
        setOverlayOrigin(u) {
          (this.origin = u), this.cdr.markForCheck();
        }
        onClickOutside(u) {
          this.tbHideOnClickOutside &&
            !this.origin.elementRef.nativeElement.contains(u.target) &&
            null !== this.tbTrigger &&
            (this.isTopOverlay(u.target) || this.hide());
        }
        onComponentChange(u) {
          (this.tbComponentRef = u), this.tbComponentChange.next(u);
        }
        animationDone() {
          this.tbAnimationDone.next();
        }
        isTopOverlay(u) {
          const f = p(u);
          if (f.parents(".cdk-overlay-container").length) {
            let M;
            M = f.hasClass("cdk-overlay-backdrop")
              ? f
              : f.parents(".cdk-overlay-pane").parent();
            const L = p(this.overlay.overlayRef.overlayElement).parent();
            return M.index() > L.index();
          }
          return !1;
        }
        updateVisibilityByContent() {
          this.isEmpty() && this.hide();
        }
        isEmpty() {
          return (
            !(
              this.tbComponentFactory instanceof e.ComponentFactory ||
              this.tbContent instanceof e.TemplateRef
            ) && !(0, o.XE)(this.tbContent)
          );
        }
      }
      (b.ɵfac = function (u) {
        return new (u || b)(
          e.ɵɵdirectiveInject(e.ChangeDetectorRef),
          e.ɵɵdirectiveInject(e.Renderer2),
          e.ɵɵdirectiveInject(i.AnimationBuilder),
          e.ɵɵdirectiveInject(g.Directionality, 8)
        );
      }),
        (b.ɵcmp = e.ɵɵdefineComponent({
          type: b,
          selectors: [["tb-popover"]],
          viewQuery: function (u, f) {
            if (
              (1 & u &&
                (e.ɵɵviewQuery(_, 5), e.ɵɵviewQuery(E, 5), e.ɵɵviewQuery(c, 5)),
              2 & u)
            ) {
              let M;
              e.ɵɵqueryRefresh((M = e.ɵɵloadQuery())) && (f.overlay = M.first),
                e.ɵɵqueryRefresh((M = e.ɵɵloadQuery())) &&
                  (f.popoverRoot = M.first),
                e.ɵɵqueryRefresh((M = e.ɵɵloadQuery())) &&
                  (f.popover = M.first);
            }
          },
          exportAs: ["tbPopoverComponent"],
          decls: 2,
          vars: 5,
          consts: [
            [
              "cdkConnectedOverlay",
              "",
              3,
              "cdkConnectedOverlayHasBackdrop",
              "cdkConnectedOverlayOrigin",
              "cdkConnectedOverlayPositions",
              "cdkConnectedOverlayOpen",
              "cdkConnectedOverlayPush",
              "overlayOutsideClick",
              "detach",
              "positionChange",
            ],
            ["overlay", "cdkConnectedOverlay"],
            ["popoverRoot", ""],
            [1, "tb-popover", 3, "ngClass", "ngStyle"],
            ["popover", ""],
            [1, "tb-popover-content"],
            [1, "tb-popover-arrow"],
            [1, "tb-popover-arrow-content"],
            ["role", "tooltip", 1, "tb-popover-inner", 3, "ngStyle"],
            ["class", "tb-popover-close-button", 3, "click", 4, "ngIf"],
            [2, "width", "100%", "height", "100%"],
            [1, "tb-popover-inner-content"],
            [4, "ngIf"],
            [
              3,
              "tbComponentOutlet",
              "tbComponentInjector",
              "tbComponentOutletContext",
              "tbComponentStyle",
              "componentChange",
              4,
              "ngIf",
            ],
            [1, "tb-popover-close-button", 3, "click"],
            [4, "tbStringTemplateOutlet"],
            [
              3,
              "tbComponentOutlet",
              "tbComponentInjector",
              "tbComponentOutletContext",
              "tbComponentStyle",
              "componentChange",
            ],
          ],
          template: function (u, f) {
            1 & u &&
              (e.ɵɵtemplate(
                0,
                O,
                13,
                9,
                "ng-template",
                0,
                1,
                e.ɵɵtemplateRefExtractor
              ),
              e.ɵɵlistener("overlayOutsideClick", function (L) {
                return f.onClickOutside(L);
              })("detach", function () {
                return f.hide();
              })("positionChange", function (L) {
                return f.onPositionChange(L);
              })),
              2 & u &&
                e.ɵɵproperty("cdkConnectedOverlayHasBackdrop", f.hasBackdrop)(
                  "cdkConnectedOverlayOrigin",
                  f.origin
                )("cdkConnectedOverlayPositions", f.positions)(
                  "cdkConnectedOverlayOpen",
                  f.visible
                )("cdkConnectedOverlayPush", !0);
          },
          directives: [
            D.CdkConnectedOverlay,
            y.NgClass,
            m.DefaultClassDirective,
            y.NgStyle,
            m.DefaultStyleDirective,
            y.NgIf,
            r.TbStringTemplateOutletDirective,
            h.TbComponentOutletDirective,
          ],
          styles: [
            '@charset "UTF-8";.tb-popover{z-index:1030;font-weight:normal;white-space:normal;text-align:left;cursor:auto;-webkit-user-select:text;user-select:text;max-width:100vw;max-height:100vh}.tb-popover:after{position:absolute;background:rgba(255,255,255,.01);content:""}.tb-popover-hidden{display:none}.tb-popover-placement-top,.tb-popover-placement-topLeft,.tb-popover-placement-topRight{padding-bottom:10px}.tb-popover-placement-right,.tb-popover-placement-rightTop,.tb-popover-placement-rightBottom{padding-left:10px}.tb-popover-placement-bottom,.tb-popover-placement-bottomLeft,.tb-popover-placement-bottomRight{padding-top:10px}.tb-popover-placement-left,.tb-popover-placement-leftTop,.tb-popover-placement-leftBottom{padding-right:10px}.tb-popover-inner{background-color:#fff;background-clip:padding-box;border-radius:6px;box-shadow:0 3px 6px -4px #0000001f,0 6px 16px #00000014,0 9px 28px 8px #0000000d,0 0 8px #00000026;overflow:hidden;position:relative;width:100%;height:100%}.tb-popover-close-button{cursor:pointer;position:absolute;top:6px;right:6px;padding:0;border:none;text-align:center;width:30px;height:30px;font-size:30px;color:#8e8e8e;text-decoration:none;font-weight:bold;background:transparent;z-index:10}.tb-popover-close-button:hover{color:#313131}.tb-popover-content{width:100%;height:100%}.tb-popover-inner-content{padding:12px 16px;color:#000000d9;overflow:auto;width:100%;height:100%}.tb-popover-arrow{position:absolute;display:block;width:8.4852813742px;height:8.4852813742px;background:transparent;border-style:solid;border-width:4.2426406871px;transform:rotate(45deg);z-index:10}.tb-popover-placement-top>.tb-popover-content>.tb-popover-arrow,.tb-popover-placement-topLeft>.tb-popover-content>.tb-popover-arrow,.tb-popover-placement-topRight>.tb-popover-content>.tb-popover-arrow{bottom:6.2px;border-top-color:transparent;border-right-color:#fff;border-bottom-color:#fff;border-left-color:transparent;box-shadow:3px 3px 7px #00000012}.tb-popover-placement-top>.tb-popover-content>.tb-popover-arrow{left:50%;transform:translate(-50%) rotate(45deg)}.tb-popover-placement-topLeft>.tb-popover-content>.tb-popover-arrow{left:16px}.tb-popover-placement-topRight>.tb-popover-content>.tb-popover-arrow{right:16px}.tb-popover-placement-right>.tb-popover-content>.tb-popover-arrow,.tb-popover-placement-rightTop>.tb-popover-content>.tb-popover-arrow,.tb-popover-placement-rightBottom>.tb-popover-content>.tb-popover-arrow{left:6px;border-top-color:transparent;border-right-color:transparent;border-bottom-color:#fff;border-left-color:#fff;box-shadow:-3px 3px 7px #00000012}.tb-popover-placement-right>.tb-popover-content>.tb-popover-arrow{top:50%;transform:translateY(-50%) rotate(45deg)}.tb-popover-placement-rightTop>.tb-popover-content>.tb-popover-arrow{top:12px}.tb-popover-placement-rightBottom>.tb-popover-content>.tb-popover-arrow{bottom:12px}.tb-popover-placement-bottom>.tb-popover-content>.tb-popover-arrow,.tb-popover-placement-bottomLeft>.tb-popover-content>.tb-popover-arrow,.tb-popover-placement-bottomRight>.tb-popover-content>.tb-popover-arrow{top:6px;border-top-color:#fff;border-right-color:transparent;border-bottom-color:transparent;border-left-color:#fff;box-shadow:-2px -2px 5px #0000000f}.tb-popover-placement-bottom>.tb-popover-content>.tb-popover-arrow{left:50%;transform:translate(-50%) rotate(45deg)}.tb-popover-placement-bottomLeft>.tb-popover-content>.tb-popover-arrow{left:16px}.tb-popover-placement-bottomRight>.tb-popover-content>.tb-popover-arrow{right:16px}.tb-popover-placement-left>.tb-popover-content>.tb-popover-arrow,.tb-popover-placement-leftTop>.tb-popover-content>.tb-popover-arrow,.tb-popover-placement-leftBottom>.tb-popover-content>.tb-popover-arrow{right:6px;border-top-color:#fff;border-right-color:#fff;border-bottom-color:transparent;border-left-color:transparent;box-shadow:3px -3px 7px #00000012}.tb-popover-placement-left>.tb-popover-content>.tb-popover-arrow{top:50%;transform:translateY(-50%) rotate(45deg)}.tb-popover-placement-leftTop>.tb-popover-content>.tb-popover-arrow{top:12px}.tb-popover-placement-leftBottom>.tb-popover-content>.tb-popover-arrow{bottom:12px}\n',
          ],
          encapsulation: 2,
          data: { animation: [a.Wo] },
          changeDetection: 0,
        }));
    },
    88978: (ee, R, t) => {
      "use strict";
      t.d(R, {
        Wo: () => a,
        JE: () => C,
        yW: () => s,
        rx: () => d,
        d_: () => o,
      });
      var e = t(17238),
        n = t(58203);
      const a = (0, e.trigger)("popoverMotion", [
          (0, e.transition)("void => active", [
            (0, e.style)({ opacity: 0, transform: "scale(0.8)" }),
            (0, e.animate)(
              "0.2s cubic-bezier(0.08, 0.82, 0.17, 1)",
              (0, e.style)({ opacity: 1, transform: "scale(1)" })
            ),
          ]),
          (0, e.transition)("active => void", [
            (0, e.style)({ opacity: 1, transform: "scale(1)" }),
            (0, e.animate)(
              "0.2s cubic-bezier(0.78, 0.14, 0.15, 0.86)",
              (0, e.style)({ opacity: 0, transform: "scale(0.8)" })
            ),
          ]),
        ]),
        C = [
          "top",
          "topLeft",
          "topRight",
          "right",
          "rightTop",
          "rightBottom",
          "bottom",
          "bottomLeft",
          "bottomRight",
          "left",
          "leftTop",
          "leftBottom",
        ],
        s = {
          top: new n.ConnectionPositionPair(
            { originX: "center", originY: "top" },
            { overlayX: "center", overlayY: "bottom" }
          ),
          topLeft: new n.ConnectionPositionPair(
            { originX: "start", originY: "top" },
            { overlayX: "start", overlayY: "bottom" }
          ),
          topRight: new n.ConnectionPositionPair(
            { originX: "end", originY: "top" },
            { overlayX: "end", overlayY: "bottom" }
          ),
          right: new n.ConnectionPositionPair(
            { originX: "end", originY: "center" },
            { overlayX: "start", overlayY: "center" }
          ),
          rightTop: new n.ConnectionPositionPair(
            { originX: "end", originY: "top" },
            { overlayX: "start", overlayY: "top" }
          ),
          rightBottom: new n.ConnectionPositionPair(
            { originX: "end", originY: "bottom" },
            { overlayX: "start", overlayY: "bottom" }
          ),
          bottom: new n.ConnectionPositionPair(
            { originX: "center", originY: "bottom" },
            { overlayX: "center", overlayY: "top" }
          ),
          bottomLeft: new n.ConnectionPositionPair(
            { originX: "start", originY: "bottom" },
            { overlayX: "start", overlayY: "top" }
          ),
          bottomRight: new n.ConnectionPositionPair(
            { originX: "end", originY: "bottom" },
            { overlayX: "end", overlayY: "top" }
          ),
          left: new n.ConnectionPositionPair(
            { originX: "start", originY: "center" },
            { overlayX: "end", overlayY: "center" }
          ),
          leftTop: new n.ConnectionPositionPair(
            { originX: "start", originY: "top" },
            { overlayX: "end", overlayY: "top" }
          ),
          leftBottom: new n.ConnectionPositionPair(
            { originX: "start", originY: "bottom" },
            { overlayX: "end", overlayY: "bottom" }
          ),
        },
        d = [s.top, s.right, s.bottom, s.left];
      function o(i) {
        for (const g in s)
          if (
            i.connectionPair.originX === s[g].originX &&
            i.connectionPair.originY === s[g].originY &&
            i.connectionPair.overlayX === s[g].overlayX &&
            i.connectionPair.overlayY === s[g].overlayY
          )
            return g;
      }
    },
    45113: (ee, R, t) => {
      "use strict";
      t.d(R, { t: () => C });
      var e = t(37716),
        n = t(95473),
        a = t(95129);
      class C {
        constructor(d, o) {
          (this.resolver = d),
            (this.helpMarkdownComponent = o),
            (this.popoverWithTriggers = []),
            (this.componentFactory = this.resolver.resolveComponentFactory(
              n.TbPopoverComponent
            ));
        }
        hasPopover(d) {
          return null !== this.findPopoverByTrigger(d);
        }
        hidePopover(d) {
          const o = this.findPopoverByTrigger(d);
          return !(!o || !o.tbVisible) && (o.hide(), !0);
        }
        createPopoverRef(d) {
          return d.createComponent(this.componentFactory);
        }
        displayPopover(
          d,
          o,
          i,
          g,
          D = "top",
          y = !0,
          m,
          r,
          h = {},
          p = {},
          _,
          E = !0
        ) {
          const c = this.createPopoverRef(i);
          return this.displayPopoverWithComponentRef(
            c,
            d,
            o,
            g,
            D,
            y,
            m,
            r,
            h,
            p,
            _,
            E
          );
        }
        displayPopoverWithComponentRef(
          d,
          o,
          i,
          g,
          D = "top",
          y = !0,
          m,
          r,
          h = {},
          p = {},
          _,
          E = !0
        ) {
          const c = d.instance;
          this.popoverWithTriggers.push({ trigger: o, popoverComponent: c }),
            i.removeChild(i.parentNode(o), d.location.nativeElement);
          const v = new e.ElementRef(o);
          return (
            c.setOverlayOrigin({ elementRef: v }),
            (c.tbPlacement = D),
            (c.tbComponentFactory = this.resolver.resolveComponentFactory(g)),
            (c.tbComponentInjector = m),
            (c.tbComponentContext = r),
            (c.tbOverlayStyle = h),
            (c.tbPopoverInnerStyle = p),
            (c.tbComponentStyle = _),
            (c.tbHideOnClickOutside = y),
            (c.tbShowCloseButton = E),
            c.tbVisibleChange.subscribe((I) => {
              I || d.destroy();
            }),
            c.tbDestroy.subscribe(() => {
              this.removePopoverByComponent(c);
            }),
            c.show(),
            c
          );
        }
        toggleHelpPopover(
          d,
          o,
          i,
          g = "",
          D = "",
          y = () => {},
          m = () => {},
          r = "bottom",
          h = {},
          p = {}
        ) {
          if (this.hasPopover(d)) this.hidePopover(d);
          else {
            m(!1);
            const _ = e.Injector.create({ parent: i.injector, providers: [] }),
              E = i.createComponent(this.componentFactory),
              c = E.instance;
            this.popoverWithTriggers.push({ trigger: d, popoverComponent: c }),
              o.removeChild(o.parentNode(d), E.location.nativeElement);
            const v = new e.ElementRef(d);
            (c.tbAnimationState = "void"),
              (c.tbOverlayStyle = Object.assign(Object.assign({}, h), {
                opacity: "0",
              })),
              c.setOverlayOrigin({ elementRef: v }),
              (c.tbPlacement = r),
              (c.tbComponentFactory = this.resolver.resolveComponentFactory(
                this.helpMarkdownComponent
              )),
              (c.tbComponentInjector = _),
              (c.tbComponentContext = {
                helpId: g,
                helpContent: D,
                style: p,
                visible: !0,
              }),
              (c.tbHideOnClickOutside = !0),
              c.tbVisibleChange.subscribe((T) => {
                T || (y(!1), E.destroy());
              }),
              c.tbDestroy.subscribe(() => {
                this.removePopoverByComponent(c);
              });
            const I = () => {
                (c.tbOverlayStyle = Object.assign(
                  Object.assign({}, c.tbOverlayStyle),
                  { opacity: "1" }
                )),
                  (c.tbAnimationState = "active"),
                  c.updatePosition(),
                  m(!0),
                  setTimeout(() => {
                    c.updatePosition();
                  });
              },
              l = (T) => {
                T.isMarkdownReady
                  ? I()
                  : T.markdownReady.subscribe(() => {
                      I();
                    });
              };
            c.tbComponentRef
              ? l(c.tbComponentRef.instance)
              : c.tbComponentChange.subscribe((T) => {
                  l(T.instance);
                }),
              c.show(),
              y(!0);
          }
        }
        findPopoverByTrigger(d) {
          const o = this.popoverWithTriggers.find((i) =>
            this.elementsAreEqualOrDescendant(d, i.trigger)
          );
          return o ? o.popoverComponent : null;
        }
        removePopoverByComponent(d) {
          const o = this.popoverWithTriggers.findIndex(
            (i) => i.popoverComponent === d
          );
          o > -1 && this.popoverWithTriggers.splice(o, 1);
        }
        elementsAreEqualOrDescendant(d, o) {
          return d === o || d.contains(o) || o.contains(d);
        }
      }
      (C.ɵfac = function (d) {
        return new (d || C)(
          e.ɵɵinject(e.ComponentFactoryResolver),
          e.ɵɵinject(a.e)
        );
      }),
        (C.ɵprov = e.ɵɵdefineInjectable({ token: C, factory: C.ɵfac }));
    },
    79229: (ee, R, t) => {
      "use strict";
      t.r(R), t.d(R, { ProtobufContentComponent: () => r });
      var e = t(37716),
        n = t(3679),
        a = t(25280),
        C = t(30290),
        s = t(41960),
        d = t(39490),
        o = t(72145),
        i = t(30013),
        g = t(86710);
      const D = ["protobufEditor"];
      function y(h, p) {
        if (1 & h) {
          const _ = e.ɵɵgetCurrentView();
          e.ɵɵelementStart(0, "button", 12),
            e.ɵɵlistener("click", function () {
              return e.ɵɵrestoreView(_), e.ɵɵnextContext().beautifyProtobuf();
            }),
            e.ɵɵtext(1),
            e.ɵɵpipe(2, "translate"),
            e.ɵɵelementEnd();
        }
        2 & h &&
          (e.ɵɵadvance(1),
          e.ɵɵtextInterpolate1(" ", e.ɵɵpipeBind1(2, 1, "js-func.tidy"), " "));
      }
      const m = function (h) {
        return { "fill-height": h };
      };
      class r {
        constructor(p, _, E) {
          (this.elementRef = p),
            (this.store = _),
            (this.raf = E),
            (this.ignoreChange = !1),
            (this.toastTargetId = `protobufContentEditor-${(0, s.M8)()}`),
            (this.fullscreen = !1),
            (this.errorShowed = !1),
            (this.propagateChange = null);
        }
        get readonly() {
          return this.readonlyValue;
        }
        set readonly(p) {
          this.readonlyValue = (0, d.coerceBooleanProperty)(p);
        }
        ngOnInit() {
          const p = this.protobufEditorElmRef.nativeElement;
          let _ = {
            mode: "ace/mode/protobuf",
            showGutter: !0,
            showPrintMargin: !1,
            readOnly: this.disabled || this.readonly,
          };
          (_ = Object.assign(Object.assign({}, _), {
            enableSnippets: !0,
            enableBasicAutocompletion: !0,
            enableLiveAutocompletion: !0,
          })),
            (0, o.Ln)().subscribe((c) => {
              (this.protobufEditor = c.edit(p, _)),
                this.protobufEditor.session.setUseWrapMode(!0),
                this.protobufEditor.setValue(
                  this.contentBody ? this.contentBody : "",
                  -1
                ),
                this.protobufEditor.setReadOnly(this.disabled || this.readonly),
                this.protobufEditor.on("change", () => {
                  this.ignoreChange || this.updateView();
                }),
                (this.editorResize$ = new C.do(() => {
                  this.onAceEditorResize();
                })),
                this.editorResize$.observe(p);
            });
        }
        ngOnDestroy() {
          this.editorResize$ && this.editorResize$.disconnect(),
            this.protobufEditor && this.protobufEditor.destroy();
        }
        registerOnChange(p) {
          this.propagateChange = p;
        }
        registerOnTouched(p) {}
        setDisabledState(p) {
          (this.disabled = p),
            this.protobufEditor &&
              this.protobufEditor.setReadOnly(this.disabled || this.readonly);
        }
        writeValue(p) {
          (this.contentBody = p),
            this.protobufEditor &&
              ((this.ignoreChange = !0),
              this.protobufEditor.setValue(
                this.contentBody ? this.contentBody : "",
                -1
              ),
              (this.ignoreChange = !1));
        }
        updateView() {
          const p = this.protobufEditor.getValue();
          this.contentBody !== p &&
            ((this.contentBody = p), this.propagateChange(this.contentBody));
        }
        beautifyProtobuf() {
          (0, i.Jx)(this.contentBody, {
            indent_size: 4,
            wrap_line_length: 60,
          }).subscribe((p) => {
            this.protobufEditor.setValue(p || "", -1), this.updateView();
          });
        }
        onFullscreen() {
          this.protobufEditor &&
            setTimeout(() => {
              this.protobufEditor.resize();
            }, 0);
        }
        onAceEditorResize() {
          this.editorsResizeCaf &&
            (this.editorsResizeCaf(), (this.editorsResizeCaf = null)),
            (this.editorsResizeCaf = this.raf.raf(() => {
              this.protobufEditor.resize(),
                this.protobufEditor.renderer.updateFull();
            }));
        }
      }
      (r.ɵfac = function (p) {
        return new (p || r)(
          e.ɵɵdirectiveInject(e.ElementRef),
          e.ɵɵdirectiveInject(g.Store),
          e.ɵɵdirectiveInject(a.i)
        );
      }),
        (r.ɵcmp = e.ɵɵdefineComponent({
          type: r,
          selectors: [["tb-protobuf-content"]],
          viewQuery: function (p, _) {
            if ((1 & p && e.ɵɵviewQuery(D, 7), 2 & p)) {
              let E;
              e.ɵɵqueryRefresh((E = e.ɵɵloadQuery())) &&
                (_.protobufEditorElmRef = E.first);
            }
          },
          inputs: {
            label: "label",
            disabled: "disabled",
            fillHeight: "fillHeight",
            editorStyle: "editorStyle",
            tbPlaceholder: "tbPlaceholder",
            readonly: "readonly",
          },
          features: [
            e.ɵɵProvidersFeature([
              {
                provide: n.NG_VALUE_ACCESSOR,
                useExisting: (0, e.forwardRef)(() => r),
                multi: !0,
              },
            ]),
          ],
          decls: 15,
          vars: 15,
          consts: [
            [
              "tb-fullscreen",
              "",
              "fxLayout",
              "column",
              2,
              "background",
              "#fff",
              3,
              "ngClass",
              "fullscreen",
              "fullscreenChanged",
            ],
            [
              "fxLayout",
              "row",
              "fxLayoutAlign",
              "start center",
              1,
              "tb-protobuf-content-toolbar",
              2,
              "height",
              "40px",
            ],
            [1, "tb-title", "no-padding"],
            ["fxFlex", ""],
            [
              "type",
              "button",
              "mat-button",
              "",
              "class",
              "tidy",
              3,
              "click",
              4,
              "ngIf",
            ],
            [2, "width", "initial"],
            [
              "matTooltipPosition",
              "above",
              2,
              "border-radius",
              "50%",
              3,
              "matTooltip",
              "click",
            ],
            [
              "type",
              "button",
              "mat-button",
              "",
              "mat-icon-button",
              "",
              1,
              "tb-mat-32",
            ],
            [1, "material-icons"],
            [
              "id",
              "tb-protobuf-panel",
              "tb-toast",
              "",
              "fxLayout",
              "column",
              1,
              "tb-protobuf-content-panel",
              3,
              "toastTarget",
            ],
            ["id", "tb-protobuf-input", 3, "ngStyle", "ngClass"],
            ["protobufEditor", ""],
            ["type", "button", "mat-button", "", 1, "tidy", 3, "click"],
          ],
          template: function (p, _) {
            1 & p &&
              (e.ɵɵelementStart(0, "div", 0),
              e.ɵɵlistener("fullscreenChanged", function () {
                return _.onFullscreen();
              }),
              e.ɵɵelementStart(1, "div", 1),
              e.ɵɵelementStart(2, "label", 2),
              e.ɵɵtext(3),
              e.ɵɵelementEnd(),
              e.ɵɵelement(4, "span", 3),
              e.ɵɵtemplate(5, y, 3, 3, "button", 4),
              e.ɵɵelementStart(6, "fieldset", 5),
              e.ɵɵelementStart(7, "div", 6),
              e.ɵɵlistener("click", function () {
                return (_.fullscreen = !_.fullscreen);
              }),
              e.ɵɵpipe(8, "translate"),
              e.ɵɵelementStart(9, "button", 7),
              e.ɵɵelementStart(10, "mat-icon", 8),
              e.ɵɵtext(11),
              e.ɵɵelementEnd(),
              e.ɵɵelementEnd(),
              e.ɵɵelementEnd(),
              e.ɵɵelementEnd(),
              e.ɵɵelementEnd(),
              e.ɵɵelementStart(12, "div", 9),
              e.ɵɵelement(13, "div", 10, 11),
              e.ɵɵelementEnd(),
              e.ɵɵelementEnd()),
              2 & p &&
                (e.ɵɵproperty(
                  "ngClass",
                  e.ɵɵpureFunction1(11, m, _.fillHeight)
                )("fullscreen", _.fullscreen),
                e.ɵɵadvance(3),
                e.ɵɵtextInterpolate(_.label),
                e.ɵɵadvance(2),
                e.ɵɵproperty("ngIf", !_.readonly && !_.disabled),
                e.ɵɵadvance(2),
                e.ɵɵpropertyInterpolate(
                  "matTooltip",
                  e.ɵɵpipeBind1(
                    8,
                    9,
                    _.fullscreen ? "fullscreen.exit" : "fullscreen.expand"
                  )
                ),
                e.ɵɵadvance(4),
                e.ɵɵtextInterpolate(
                  _.fullscreen ? "fullscreen_exit" : "fullscreen"
                ),
                e.ɵɵadvance(1),
                e.ɵɵpropertyInterpolate("toastTarget", _.toastTargetId),
                e.ɵɵadvance(1),
                e.ɵɵproperty("ngStyle", _.editorStyle)(
                  "ngClass",
                  e.ɵɵpureFunction1(13, m, _.fillHeight)
                ));
          },
          styles: [
            '@charset "UTF-8";[_nghost-%COMP%]{position:relative}[_nghost-%COMP%]   .fill-height[_ngcontent-%COMP%]{height:100%}.tb-protobuf-content-toolbar[_ngcontent-%COMP%]   button.mat-button[_ngcontent-%COMP%], .tb-protobuf-content-toolbar[_ngcontent-%COMP%]   button.mat-icon-button[_ngcontent-%COMP%], .tb-protobuf-content-toolbar[_ngcontent-%COMP%]   button.mat-icon-button.tb-mat-32[_ngcontent-%COMP%]{align-items:center;vertical-align:middle;min-width:32px;min-height:15px;padding:4px;margin:0;font-size:.8rem;line-height:15px;color:#7b7b7b;background:rgba(220,220,220,.35)}.tb-protobuf-content-toolbar[_ngcontent-%COMP%]   button.mat-button[_ngcontent-%COMP%]:not(:last-child), .tb-protobuf-content-toolbar[_ngcontent-%COMP%]   button.mat-icon-button[_ngcontent-%COMP%]:not(:last-child), .tb-protobuf-content-toolbar[_ngcontent-%COMP%]   button.mat-icon-button.tb-mat-32[_ngcontent-%COMP%]:not(:last-child){margin-right:4px}.tb-protobuf-content-panel[_ngcontent-%COMP%]{height:100%;margin-left:15px;border:1px solid #c0c0c0}.tb-protobuf-content-panel[_ngcontent-%COMP%]   #tb-protobuf-input[_ngcontent-%COMP%]{width:100%;min-width:200px;min-height:160px;height:100%}.tb-protobuf-content-panel[_ngcontent-%COMP%]   #tb-protobuf-input[_ngcontent-%COMP%]:not(.fill-height){min-height:200px}',
          ],
        }));
    },
    17119: (ee, R, t) => {
      "use strict";
      t.r(R), t.d(R, { QueueAutocompleteComponent: () => A });
      var e = t(37716),
        n = t(3679),
        a = t(25917),
        C = t(54395),
        s = t(68307),
        d = t(88002),
        o = t(87519),
        i = t(43190),
        g = t(78345),
        D = t(5304),
        y = t(39490),
        m = t(23914),
        r = t(32813),
        p = (t(73401), t(15208)),
        _ = t(39774),
        E = t(23360),
        c = t(58187),
        v = t(86710),
        I = t(29790),
        l = t(98295),
        T = t(83166),
        O = t(21554),
        w = t(38583),
        b = t(51095),
        S = t(76627),
        u = t(72458),
        f = t(53883);
      const M = ["queueInput"];
      function L(U, G) {
        if (1 & U) {
          const Z = e.ɵɵgetCurrentView();
          e.ɵɵelementStart(0, "button", 9),
            e.ɵɵlistener("click", function () {
              return e.ɵɵrestoreView(Z), e.ɵɵnextContext().clear();
            }),
            e.ɵɵelementStart(1, "mat-icon", 10),
            e.ɵɵtext(2, "close"),
            e.ɵɵelementEnd(),
            e.ɵɵelementEnd();
        }
      }
      function k(U, G) {
        if (
          (1 & U &&
            (e.ɵɵelementStart(0, "mat-option", 11),
            e.ɵɵelement(1, "span", 12),
            e.ɵɵpipe(2, "highlight"),
            e.ɵɵelementStart(3, "small", 13),
            e.ɵɵtext(4),
            e.ɵɵelementEnd(),
            e.ɵɵelementEnd()),
          2 & U)
        ) {
          const Z = G.$implicit,
            le = e.ɵɵnextContext();
          e.ɵɵproperty("value", Z),
            e.ɵɵadvance(1),
            e.ɵɵproperty(
              "innerHTML",
              e.ɵɵpipeBind2(2, 3, Z.name, le.searchText),
              e.ɵɵsanitizeHtml
            ),
            e.ɵɵadvance(3),
            e.ɵɵtextInterpolate(le.getDescription(Z));
        }
      }
      function N(U, G) {
        1 & U &&
          (e.ɵɵelementStart(0, "div"),
          e.ɵɵelementStart(1, "span", 18),
          e.ɵɵtext(2, "queue.no-queues-found"),
          e.ɵɵelementEnd(),
          e.ɵɵelementEnd());
      }
      const B = function (U) {
        return { queue: U };
      };
      function j(U, G) {
        if (
          (1 & U &&
            (e.ɵɵelementStart(0, "span"),
            e.ɵɵtext(1),
            e.ɵɵpipe(2, "async"),
            e.ɵɵelementEnd()),
          2 & U)
        ) {
          const Z = e.ɵɵnextContext(2);
          e.ɵɵadvance(1),
            e.ɵɵtextInterpolate1(
              " ",
              e.ɵɵpipeBind1(
                2,
                1,
                Z.translate.get(
                  "queue.no-queues-matching",
                  e.ɵɵpureFunction1(
                    3,
                    B,
                    Z.truncate.transform(Z.searchText, !0, 6, "...")
                  )
                )
              ),
              " "
            );
        }
      }
      function F(U, G) {
        if (
          (1 & U &&
            (e.ɵɵelementStart(0, "mat-option", 14),
            e.ɵɵelementStart(1, "div", 15),
            e.ɵɵlistener("click", function (le) {
              return le.stopPropagation();
            }),
            e.ɵɵtemplate(2, N, 3, 0, "div", 16),
            e.ɵɵtemplate(
              3,
              j,
              3,
              5,
              "ng-template",
              null,
              17,
              e.ɵɵtemplateRefExtractor
            ),
            e.ɵɵelementEnd(),
            e.ɵɵelementEnd()),
          2 & U)
        ) {
          const Z = e.ɵɵreference(4),
            le = e.ɵɵnextContext();
          e.ɵɵproperty("value", null),
            e.ɵɵadvance(2),
            e.ɵɵproperty("ngIf", !le.textIsNotEmpty(le.searchText))(
              "ngIfElse",
              Z
            );
        }
      }
      function V(U, G) {
        if (
          (1 & U &&
            (e.ɵɵelementStart(0, "mat-hint"),
            e.ɵɵtext(1),
            e.ɵɵpipe(2, "translate"),
            e.ɵɵelementEnd()),
          2 & U)
        ) {
          const Z = e.ɵɵnextContext();
          e.ɵɵadvance(1),
            e.ɵɵtextInterpolate(e.ɵɵpipeBind1(2, 1, Z.autocompleteHint));
        }
      }
      function P(U, G) {
        1 & U &&
          (e.ɵɵelementStart(0, "mat-error"),
          e.ɵɵtext(1),
          e.ɵɵpipe(2, "translate"),
          e.ɵɵelementEnd()),
          2 & U &&
            (e.ɵɵadvance(1),
            e.ɵɵtextInterpolate1(
              " ",
              e.ɵɵpipeBind1(2, 1, "queue.queue-required"),
              " "
            ));
      }
      class A {
        constructor(G, Z, le, X, se, ne) {
          (this.store = G),
            (this.translate = Z),
            (this.truncate = le),
            (this.entityService = X),
            (this.queueService = se),
            (this.fb = ne),
            (this.searchText = ""),
            (this.dirty = !1),
            (this.propagateChange = (re) => {}),
            (this.selectQueueFormGroup = this.fb.group({ queueName: [null] }));
        }
        get required() {
          return this.requiredValue;
        }
        set required(G) {
          this.requiredValue = (0, y.coerceBooleanProperty)(G);
        }
        registerOnChange(G) {
          this.propagateChange = G;
        }
        registerOnTouched(G) {}
        ngOnInit() {
          this.filteredQueues = this.selectQueueFormGroup
            .get("queueName")
            .valueChanges.pipe(
              (0, C.b)(150),
              (0, s.b)((G) => {
                let Z;
                (Z = "string" != typeof G && G ? G.name : null),
                  this.updateView(Z),
                  null === G && this.clear();
              }),
              (0, d.U)((G) => (G ? ("string" == typeof G ? G : G.name) : "")),
              (0, o.x)(),
              (0, i.w)((G) => this.fetchQueue(G)),
              (0, g.B)()
            );
        }
        ngAfterViewInit() {}
        setDisabledState(G) {
          (this.disabled = G),
            this.disabled
              ? this.selectQueueFormGroup.disable({ emitEvent: !1 })
              : this.selectQueueFormGroup.enable({ emitEvent: !1 });
        }
        textIsNotEmpty(G) {
          return G && G.length > 0;
        }
        writeValue(G) {
          (this.searchText = ""),
            null != G
              ? this.queueService
                  .getQueueByName(G, { ignoreLoading: !0, ignoreErrors: !0 })
                  .subscribe(
                    (Z) => {
                      (this.modelValue = Z.name),
                        this.selectQueueFormGroup
                          .get("queueName")
                          .patchValue(Z, { emitEvent: !1 });
                    },
                    () => {
                      (this.modelValue = null),
                        this.selectQueueFormGroup
                          .get("queueName")
                          .patchValue("", { emitEvent: !1 }),
                        null !== G && this.propagateChange(this.modelValue);
                    }
                  )
              : ((this.modelValue = null),
                this.selectQueueFormGroup
                  .get("queueName")
                  .patchValue("", { emitEvent: !1 })),
            (this.dirty = !0);
        }
        onFocus() {
          this.dirty &&
            (this.selectQueueFormGroup
              .get("queueName")
              .updateValueAndValidity({ onlySelf: !0, emitEvent: !0 }),
            (this.dirty = !1));
        }
        reset() {
          this.selectQueueFormGroup
            .get("queueName")
            .patchValue("", { emitEvent: !1 });
        }
        updateView(G) {
          this.modelValue !== G &&
            ((this.modelValue = G), this.propagateChange(this.modelValue));
        }
        displayQueueFn(G) {
          return G ? G.name : void 0;
        }
        fetchQueue(G) {
          this.searchText = G;
          const Z = new _.H_(10, 0, G, {
            property: "name",
            direction: E.N.ASC,
          });
          return this.queueService
            .getTenantQueuesByServiceType(Z, this.queueType, {
              ignoreLoading: !0,
            })
            .pipe(
              (0, D.K)(() => (0, a.of)((0, c.n)())),
              (0, d.U)((le) => le.data)
            );
        }
        getDescription(G) {
          var Z;
          return (
            null === (Z = G.additionalInfo) || void 0 === Z
              ? void 0
              : Z.description
          )
            ? G.additionalInfo.description
            : this.translate.instant("queue.alt-description", {
                submitStrategy: G.submitStrategy.type,
                processingStrategy: G.processingStrategy.type,
              });
        }
        clear() {
          this.selectQueueFormGroup
            .get("queueName")
            .patchValue("", { emitEvent: !0 }),
            setTimeout(() => {
              this.queueInput.nativeElement.blur(),
                this.queueInput.nativeElement.focus();
            }, 0);
        }
      }
      (A.ɵfac = function (G) {
        return new (G || A)(
          e.ɵɵdirectiveInject(v.Store),
          e.ɵɵdirectiveInject(I.TranslateService),
          e.ɵɵdirectiveInject(r.TruncatePipe),
          e.ɵɵdirectiveInject(m.c),
          e.ɵɵdirectiveInject(p.g),
          e.ɵɵdirectiveInject(n.FormBuilder)
        );
      }),
        (A.ɵcmp = e.ɵɵdefineComponent({
          type: A,
          selectors: [["tb-queue-autocomplete"]],
          viewQuery: function (G, Z) {
            if ((1 & G && e.ɵɵviewQuery(M, 7), 2 & G)) {
              let le;
              e.ɵɵqueryRefresh((le = e.ɵɵloadQuery())) &&
                (Z.queueInput = le.first);
            }
          },
          inputs: {
            labelText: "labelText",
            requiredText: "requiredText",
            autocompleteHint: "autocompleteHint",
            required: "required",
            queueType: "queueType",
            disabled: "disabled",
          },
          features: [
            e.ɵɵProvidersFeature([
              {
                provide: n.NG_VALUE_ACCESSOR,
                useExisting: (0, e.forwardRef)(() => A),
                multi: !0,
              },
            ]),
          ],
          decls: 13,
          vars: 16,
          consts: [
            [1, "mat-block", "autocomplete-queue", 3, "formGroup"],
            [
              "matInput",
              "",
              "type",
              "text",
              "formControlName",
              "queueName",
              3,
              "placeholder",
              "required",
              "matAutocomplete",
              "focusin",
            ],
            ["queueInput", ""],
            [
              "type",
              "button",
              "matSuffix",
              "",
              "mat-button",
              "",
              "mat-icon-button",
              "",
              "aria-label",
              "Clear",
              3,
              "click",
              4,
              "ngIf",
            ],
            [1, "tb-autocomplete", 3, "displayWith"],
            ["queueAutocomplete", "matAutocomplete"],
            ["class", "queue-option", 3, "value", 4, "ngFor", "ngForOf"],
            ["class", "tb-not-found", 3, "value", 4, "ngIf"],
            [4, "ngIf"],
            [
              "type",
              "button",
              "matSuffix",
              "",
              "mat-button",
              "",
              "mat-icon-button",
              "",
              "aria-label",
              "Clear",
              3,
              "click",
            ],
            [1, "material-icons"],
            [1, "queue-option", 3, "value"],
            [3, "innerHTML"],
            [1, "queue-option-description"],
            [1, "tb-not-found", 3, "value"],
            [1, "tb-not-found-content", 3, "click"],
            [4, "ngIf", "ngIfElse"],
            ["searchNotEmpty", ""],
            ["translate", ""],
          ],
          template: function (G, Z) {
            if (
              (1 & G &&
                (e.ɵɵelementStart(0, "mat-form-field", 0),
                e.ɵɵelementStart(1, "input", 1, 2),
                e.ɵɵlistener("focusin", function () {
                  return Z.onFocus();
                }),
                e.ɵɵpipe(3, "translate"),
                e.ɵɵelementEnd(),
                e.ɵɵtemplate(4, L, 3, 0, "button", 3),
                e.ɵɵelementStart(5, "mat-autocomplete", 4, 5),
                e.ɵɵtemplate(7, k, 5, 6, "mat-option", 6),
                e.ɵɵpipe(8, "async"),
                e.ɵɵtemplate(9, F, 5, 3, "mat-option", 7),
                e.ɵɵpipe(10, "async"),
                e.ɵɵelementEnd(),
                e.ɵɵtemplate(11, V, 3, 3, "mat-hint", 8),
                e.ɵɵtemplate(12, P, 3, 3, "mat-error", 8),
                e.ɵɵelementEnd()),
              2 & G)
            ) {
              const le = e.ɵɵreference(6);
              let X;
              e.ɵɵproperty("formGroup", Z.selectQueueFormGroup),
                e.ɵɵadvance(1),
                e.ɵɵpropertyInterpolate(
                  "placeholder",
                  e.ɵɵpipeBind1(3, 10, "queue.queue-name")
                ),
                e.ɵɵproperty("required", Z.required)("matAutocomplete", le),
                e.ɵɵadvance(3),
                e.ɵɵproperty(
                  "ngIf",
                  Z.selectQueueFormGroup.get("queueName").value && !Z.disabled
                ),
                e.ɵɵadvance(1),
                e.ɵɵproperty("displayWith", Z.displayQueueFn),
                e.ɵɵadvance(2),
                e.ɵɵproperty("ngForOf", e.ɵɵpipeBind1(8, 12, Z.filteredQueues)),
                e.ɵɵadvance(2),
                e.ɵɵproperty(
                  "ngIf",
                  !(
                    null != (X = e.ɵɵpipeBind1(10, 14, Z.filteredQueues)) &&
                    X.length
                  )
                ),
                e.ɵɵadvance(2),
                e.ɵɵproperty("ngIf", Z.autocompleteHint),
                e.ɵɵadvance(1),
                e.ɵɵproperty(
                  "ngIf",
                  Z.selectQueueFormGroup.get("queueName").hasError("required")
                );
            }
          },
          directives: [
            l.MatFormField,
            n.NgControlStatusGroup,
            n.FormGroupDirective,
            T.MatInput,
            n.DefaultValueAccessor,
            O.MatAutocompleteTrigger,
            n.NgControlStatus,
            n.FormControlName,
            n.RequiredValidator,
            w.NgIf,
            O.MatAutocomplete,
            w.NgForOf,
            b.MatButton,
            l.MatSuffix,
            S.MatIcon,
            u.MatOption,
            I.TranslateDirective,
            l.MatHint,
            l.MatError,
          ],
          pipes: [I.TranslatePipe, w.AsyncPipe, f.HighlightPipe],
          styles: [
            '@charset "UTF-8";  .queue-option .mat-option-text{display:inline}  .queue-option .queue-option-description{display:block;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}[_nghost-%COMP%]     .mat-form-field .mat-form-field-wrapper{padding-bottom:0}[_nghost-%COMP%]     .mat-form-field .mat-form-field-wrapper .mat-form-field-underline{position:initial!important;display:block;margin-top:-1px}[_nghost-%COMP%]     .mat-form-field .mat-form-field-wrapper .mat-form-field-subscript-wrapper, [_nghost-%COMP%]     .mat-form-field .mat-form-field-wrapper .mat-form-field-ripple{position:initial!important;display:table}[_nghost-%COMP%]     .mat-form-field .mat-form-field-wrapper .mat-form-field-subscript-wrapper{min-height:calc(1em + 1px)}',
          ],
        }));
    },
    46564: (ee, R, t) => {
      "use strict";
      t.r(R), t.d(R, { RelationTypeAutocompleteComponent: () => b });
      var e = t(37716),
        n = t(3679),
        a = t(25917),
        C = t(68307),
        s = t(88002),
        d = t(19773),
        o = t(14866),
        i = t(39490),
        g = t(36641),
        D = t(86710),
        y = t(29790),
        m = t(98295),
        r = t(83166),
        h = t(21554),
        p = t(38583),
        _ = t(51095),
        E = t(76627),
        c = t(72458),
        v = t(53883);
      const I = ["relationTypeInput"];
      function l(S, u) {
        if (1 & S) {
          const f = e.ɵɵgetCurrentView();
          e.ɵɵelementStart(0, "button", 8),
            e.ɵɵlistener("click", function () {
              return e.ɵɵrestoreView(f), e.ɵɵnextContext().clear();
            }),
            e.ɵɵelementStart(1, "mat-icon", 9),
            e.ɵɵtext(2, "close"),
            e.ɵɵelementEnd(),
            e.ɵɵelementEnd();
        }
      }
      function T(S, u) {
        if (
          (1 & S &&
            (e.ɵɵelementStart(0, "mat-option", 10),
            e.ɵɵelement(1, "span", 11),
            e.ɵɵpipe(2, "highlight"),
            e.ɵɵelementEnd()),
          2 & S)
        ) {
          const f = u.$implicit,
            M = e.ɵɵnextContext();
          e.ɵɵproperty("value", f),
            e.ɵɵadvance(1),
            e.ɵɵproperty(
              "innerHTML",
              e.ɵɵpipeBind2(2, 2, f, M.searchText),
              e.ɵɵsanitizeHtml
            );
        }
      }
      function O(S, u) {
        1 & S &&
          (e.ɵɵelementStart(0, "mat-error"),
          e.ɵɵtext(1),
          e.ɵɵpipe(2, "translate"),
          e.ɵɵelementEnd()),
          2 & S &&
            (e.ɵɵadvance(1),
            e.ɵɵtextInterpolate1(
              " ",
              e.ɵɵpipeBind1(2, 1, "relation.relation-type-required"),
              " "
            ));
      }
      function w(S, u) {
        1 & S &&
          (e.ɵɵelementStart(0, "mat-error"),
          e.ɵɵtext(1),
          e.ɵɵpipe(2, "translate"),
          e.ɵɵelementEnd()),
          2 & S &&
            (e.ɵɵadvance(1),
            e.ɵɵtextInterpolate1(
              " ",
              e.ɵɵpipeBind1(2, 1, "relation.relation-type-max-length"),
              " "
            ));
      }
      class b {
        constructor(u, f, M, L) {
          (this.store = u),
            (this.broadcast = f),
            (this.translate = M),
            (this.fb = L),
            (this.searchText = ""),
            (this.dirty = !1),
            (this.propagateChange = (k) => {}),
            (this.relationTypeFormGroup = this.fb.group({
              relationType: [
                null,
                this.required
                  ? [n.Validators.required, n.Validators.maxLength(255)]
                  : [n.Validators.maxLength(255)],
              ],
            }));
        }
        get required() {
          return this.requiredValue;
        }
        set required(u) {
          this.requiredValue = (0, i.coerceBooleanProperty)(u);
        }
        registerOnChange(u) {
          this.propagateChange = u;
        }
        registerOnTouched(u) {}
        ngOnInit() {
          this.filteredRelationTypes = this.relationTypeFormGroup
            .get("relationType")
            .valueChanges.pipe(
              (0, C.b)((u) => {
                this.updateView(u);
              }),
              (0, s.U)((u) => u || ""),
              (0, d.zg)((u) => this.fetchRelationTypes(u))
            );
        }
        ngAfterViewInit() {}
        ngOnDestroy() {}
        setDisabledState(u) {
          (this.disabled = u),
            this.disabled
              ? this.relationTypeFormGroup.disable({ emitEvent: !1 })
              : this.relationTypeFormGroup.enable({ emitEvent: !1 });
        }
        writeValue(u) {
          (this.searchText = ""),
            (this.modelValue = u),
            this.relationTypeFormGroup
              .get("relationType")
              .patchValue(u, { emitEvent: !1 }),
            (this.dirty = !0);
        }
        onFocus() {
          this.dirty &&
            (this.relationTypeFormGroup
              .get("relationType")
              .updateValueAndValidity({ onlySelf: !0, emitEvent: !0 }),
            (this.dirty = !1));
        }
        updateView(u) {
          this.modelValue !== u &&
            ((this.modelValue = u), this.propagateChange(this.modelValue));
        }
        displayRelationTypeFn(u) {
          return u || void 0;
        }
        fetchRelationTypes(u, f = !1) {
          return (
            (this.searchText = u),
            (0, a.of)(g.KE).pipe(
              (0, s.U)((M) =>
                M.filter((L) =>
                  f
                    ? !!u && L === u
                    : !u || L.toUpperCase().startsWith(u.toUpperCase())
                )
              )
            )
          );
        }
        clear() {
          this.relationTypeFormGroup
            .get("relationType")
            .patchValue(null, { emitEvent: !0 }),
            setTimeout(() => {
              this.relationTypeInput.nativeElement.blur(),
                this.relationTypeInput.nativeElement.focus();
            }, 0);
        }
      }
      (b.ɵfac = function (u) {
        return new (u || b)(
          e.ɵɵdirectiveInject(D.Store),
          e.ɵɵdirectiveInject(o.M),
          e.ɵɵdirectiveInject(y.TranslateService),
          e.ɵɵdirectiveInject(n.FormBuilder)
        );
      }),
        (b.ɵcmp = e.ɵɵdefineComponent({
          type: b,
          selectors: [["tb-relation-type-autocomplete"]],
          viewQuery: function (u, f) {
            if ((1 & u && e.ɵɵviewQuery(I, 7), 2 & u)) {
              let M;
              e.ɵɵqueryRefresh((M = e.ɵɵloadQuery())) &&
                (f.relationTypeInput = M.first);
            }
          },
          inputs: { required: "required", disabled: "disabled" },
          features: [
            e.ɵɵProvidersFeature([
              {
                provide: n.NG_VALUE_ACCESSOR,
                useExisting: (0, e.forwardRef)(() => b),
                multi: !0,
              },
            ]),
          ],
          decls: 12,
          vars: 15,
          consts: [
            [1, "mat-block", 3, "formGroup"],
            [
              "matInput",
              "",
              "type",
              "text",
              "formControlName",
              "relationType",
              3,
              "placeholder",
              "required",
              "matAutocomplete",
              "focusin",
            ],
            ["relationTypeInput", ""],
            [
              "type",
              "button",
              "matSuffix",
              "",
              "mat-icon-button",
              "",
              "aria-label",
              "Clear",
              3,
              "click",
              4,
              "ngIf",
            ],
            [1, "tb-autocomplete", 3, "displayWith"],
            ["relationTypeAutocomplete", "matAutocomplete"],
            [3, "value", 4, "ngFor", "ngForOf"],
            [4, "ngIf"],
            [
              "type",
              "button",
              "matSuffix",
              "",
              "mat-icon-button",
              "",
              "aria-label",
              "Clear",
              3,
              "click",
            ],
            [1, "material-icons"],
            [3, "value"],
            [3, "innerHTML"],
          ],
          template: function (u, f) {
            if (
              (1 & u &&
                (e.ɵɵelementStart(0, "mat-form-field", 0),
                e.ɵɵelementStart(1, "input", 1, 2),
                e.ɵɵlistener("focusin", function () {
                  return f.onFocus();
                }),
                e.ɵɵpipe(3, "translate"),
                e.ɵɵpipe(4, "translate"),
                e.ɵɵelementEnd(),
                e.ɵɵtemplate(5, l, 3, 0, "button", 3),
                e.ɵɵelementStart(6, "mat-autocomplete", 4, 5),
                e.ɵɵtemplate(8, T, 3, 5, "mat-option", 6),
                e.ɵɵpipe(9, "async"),
                e.ɵɵelementEnd(),
                e.ɵɵtemplate(10, O, 3, 3, "mat-error", 7),
                e.ɵɵtemplate(11, w, 3, 3, "mat-error", 7),
                e.ɵɵelementEnd()),
              2 & u)
            ) {
              const M = e.ɵɵreference(7);
              e.ɵɵproperty("formGroup", f.relationTypeFormGroup),
                e.ɵɵadvance(1),
                e.ɵɵpropertyInterpolate(
                  "placeholder",
                  f.required
                    ? e.ɵɵpipeBind1(3, 9, "relation.relation-type")
                    : f.modelValue
                    ? " "
                    : e.ɵɵpipeBind1(4, 11, "relation.any-relation-type")
                ),
                e.ɵɵproperty("required", f.required)("matAutocomplete", M),
                e.ɵɵadvance(4),
                e.ɵɵproperty(
                  "ngIf",
                  f.relationTypeFormGroup.get("relationType").value &&
                    !f.disabled
                ),
                e.ɵɵadvance(1),
                e.ɵɵproperty("displayWith", f.displayRelationTypeFn),
                e.ɵɵadvance(2),
                e.ɵɵproperty(
                  "ngForOf",
                  e.ɵɵpipeBind1(9, 13, f.filteredRelationTypes)
                ),
                e.ɵɵadvance(2),
                e.ɵɵproperty(
                  "ngIf",
                  f.relationTypeFormGroup
                    .get("relationType")
                    .hasError("required")
                ),
                e.ɵɵadvance(1),
                e.ɵɵproperty(
                  "ngIf",
                  f.relationTypeFormGroup
                    .get("relationType")
                    .hasError("maxlength")
                );
            }
          },
          directives: [
            m.MatFormField,
            n.NgControlStatusGroup,
            n.FormGroupDirective,
            r.MatInput,
            n.DefaultValueAccessor,
            h.MatAutocompleteTrigger,
            n.NgControlStatus,
            n.FormControlName,
            n.RequiredValidator,
            p.NgIf,
            h.MatAutocomplete,
            p.NgForOf,
            _.MatButton,
            m.MatSuffix,
            E.MatIcon,
            c.MatOption,
            m.MatError,
          ],
          pipes: [y.TranslatePipe, p.AsyncPipe, v.HighlightPipe],
          encapsulation: 2,
        }));
    },
    88814: (ee, R, t) => {
      "use strict";
      t.r(R), t.d(R, { TbScriptLangComponent: () => g });
      var e = t(37716),
        n = t(3679),
        a = t(75362),
        C = t(41429),
        s = t(86710),
        d = t(35618),
        o = t(42542),
        i = t(29790);
      class g extends a.I {
        constructor(y, m) {
          super(y),
            (this.store = y),
            (this.fb = m),
            (this.scriptLanguage = C.tS),
            (this.propagateChange = null),
            (this.scriptLangFormGroup = this.fb.group({ scriptLang: [null] }));
        }
        ngOnInit() {
          this.scriptLangFormGroup
            .get("scriptLang")
            .valueChanges.subscribe((y) => {
              this.updateView(y);
            });
        }
        registerOnChange(y) {
          this.propagateChange = y;
        }
        registerOnTouched(y) {}
        setDisabledState(y) {
          (this.disabled = y),
            this.disabled
              ? this.scriptLangFormGroup.disable({ emitEvent: !1 })
              : this.scriptLangFormGroup.enable({ emitEvent: !1 });
        }
        writeValue(y) {
          this.scriptLangFormGroup
            .get("scriptLang")
            .patchValue(y, { emitEvent: !1 });
        }
        updateView(y) {
          this.propagateChange(y);
        }
      }
      (g.ɵfac = function (y) {
        return new (y || g)(
          e.ɵɵdirectiveInject(s.Store),
          e.ɵɵdirectiveInject(n.FormBuilder)
        );
      }),
        (g.ɵcmp = e.ɵɵdefineComponent({
          type: g,
          selectors: [["tb-script-lang"]],
          inputs: { disabled: "disabled" },
          features: [
            e.ɵɵProvidersFeature([
              {
                provide: n.NG_VALUE_ACCESSOR,
                useExisting: (0, e.forwardRef)(() => g),
                multi: !0,
              },
            ]),
            e.ɵɵInheritDefinitionFeature,
          ],
          decls: 8,
          vars: 9,
          consts: [
            ["fxLayout", "row", "fxLayoutAlign", "center", 3, "formGroup"],
            [
              "formControlName",
              "scriptLang",
              "aria-label",
              "Script language",
              1,
              "tb-script-lang-toggle-group",
              2,
              "width",
              "320px",
            ],
            ["fxFlex", "", 3, "value"],
          ],
          template: function (y, m) {
            1 & y &&
              (e.ɵɵelementStart(0, "div", 0),
              e.ɵɵelementStart(1, "mat-button-toggle-group", 1),
              e.ɵɵelementStart(2, "mat-button-toggle", 2),
              e.ɵɵtext(3),
              e.ɵɵpipe(4, "translate"),
              e.ɵɵelementEnd(),
              e.ɵɵelementStart(5, "mat-button-toggle", 2),
              e.ɵɵtext(6),
              e.ɵɵpipe(7, "translate"),
              e.ɵɵelementEnd(),
              e.ɵɵelementEnd(),
              e.ɵɵelementEnd()),
              2 & y &&
                (e.ɵɵproperty("formGroup", m.scriptLangFormGroup),
                e.ɵɵadvance(2),
                e.ɵɵpropertyInterpolate("value", m.scriptLanguage.TBEL),
                e.ɵɵadvance(1),
                e.ɵɵtextInterpolate(
                  e.ɵɵpipeBind1(4, 5, "rulenode.script-lang-tbel")
                ),
                e.ɵɵadvance(2),
                e.ɵɵpropertyInterpolate("value", m.scriptLanguage.JS),
                e.ɵɵadvance(1),
                e.ɵɵtextInterpolate(
                  e.ɵɵpipeBind1(7, 7, "rulenode.script-lang-java-script")
                ));
          },
          directives: [
            d.DefaultLayoutDirective,
            d.DefaultLayoutAlignDirective,
            n.NgControlStatusGroup,
            n.FormGroupDirective,
            o.MatButtonToggleGroup,
            n.NgControlStatus,
            n.FormControlName,
            o.MatButtonToggle,
            d.DefaultFlexDirective,
          ],
          pipes: [i.TranslatePipe],
          styles: [
            '@charset "UTF-8";.mat-button-toggle-group.tb-script-lang-toggle-group.mat-button-toggle-group-appearance-standard{border:none;border-radius:18px}.mat-button-toggle-group.tb-script-lang-toggle-group.mat-button-toggle-group-appearance-standard .mat-button-toggle+.mat-button-toggle{border-left:none}.mat-button-toggle-group.tb-script-lang-toggle-group .mat-button-toggle{background:rgba(0,0,0,.06);height:36px;align-items:center;display:flex}.mat-button-toggle-group.tb-script-lang-toggle-group .mat-button-toggle .mat-button-toggle-ripple{top:2px;left:2px;right:2px;bottom:2px;border-radius:16px}.mat-button-toggle-group.tb-script-lang-toggle-group .mat-button-toggle-button{color:#959595}.mat-button-toggle-group.tb-script-lang-toggle-group .mat-button-toggle-focus-overlay{border-radius:16px;margin:2px}.mat-button-toggle-group.tb-script-lang-toggle-group .mat-button-toggle-checked .mat-button-toggle-button{background-color:#305680;color:#fff;border-radius:16px;margin-left:2px;margin-right:2px}.mat-button-toggle-group.tb-script-lang-toggle-group .mat-button-toggle-appearance-standard .mat-button-toggle-label-content{line-height:32px;font-size:16px;font-weight:500}.mat-button-toggle-group.tb-script-lang-toggle-group .mat-button-toggle-checked.mat-button-toggle-appearance-standard:not(.mat-button-toggle-disabled):hover .mat-button-toggle-focus-overlay{opacity:.01}\n',
          ],
          encapsulation: 2,
        }));
    },
    80184: (ee, R, t) => {
      "use strict";
      t.r(R), t.d(R, { SocialSharePanelComponent: () => h });
      var e = t(37716),
        n = t(41960),
        a = t(35618),
        C = t(88030),
        s = t(51095),
        d = t(61449),
        o = t(11436),
        i = t(76627),
        g = t(29790);
      const D = function () {
          return { provider: "Facebook" };
        },
        y = function () {
          return { provider: "Twitter" };
        },
        m = function () {
          return { provider: "Linkedin" };
        },
        r = function () {
          return { provider: "Reddit" };
        };
      class h {
        constructor() {}
        ngOnInit() {}
        isShareLinkLocal() {
          return (
            !(this.shareLink && this.shareLink.length > 0) ||
            (0, n.R8)(this.shareLink)
          );
        }
      }
      (h.ɵfac = function (_) {
        return new (_ || h)();
      }),
        (h.ɵcmp = e.ɵɵdefineComponent({
          type: h,
          selectors: [["tb-social-share-panel"]],
          inputs: {
            shareTitle: "shareTitle",
            shareText: "shareText",
            shareLink: "shareLink",
            shareHashTags: "shareHashTags",
          },
          decls: 13,
          vars: 31,
          consts: [
            ["fxLayout", "row", "fxLayoutGap", "12px", 3, "fxHide"],
            [
              "mat-icon-button",
              "",
              "mat-raised-button",
              "",
              "shareButton",
              "facebook",
              "matTooltipPosition",
              "above",
              1,
              "mat-primary",
              3,
              "title",
              "description",
              "url",
              "matTooltip",
            ],
            ["svgIcon", "mdi:facebook"],
            [
              "mat-icon-button",
              "",
              "mat-raised-button",
              "",
              "shareButton",
              "twitter",
              "matTooltipPosition",
              "above",
              1,
              "mat-primary",
              3,
              "title",
              "tags",
              "url",
              "matTooltip",
            ],
            ["svgIcon", "mdi:twitter"],
            [
              "mat-icon-button",
              "",
              "mat-raised-button",
              "",
              "shareButton",
              "linkedin",
              "matTooltipPosition",
              "above",
              1,
              "mat-primary",
              3,
              "title",
              "url",
              "matTooltip",
            ],
            ["svgIcon", "mdi:linkedin"],
            [
              "mat-icon-button",
              "",
              "mat-raised-button",
              "",
              "shareButton",
              "reddit",
              "matTooltipPosition",
              "above",
              1,
              "mat-primary",
              3,
              "title",
              "url",
              "matTooltip",
            ],
            ["svgIcon", "mdi:reddit"],
          ],
          template: function (_, E) {
            1 & _ &&
              (e.ɵɵelementStart(0, "div", 0),
              e.ɵɵelementStart(1, "button", 1),
              e.ɵɵpipe(2, "translate"),
              e.ɵɵelement(3, "mat-icon", 2),
              e.ɵɵelementEnd(),
              e.ɵɵelementStart(4, "button", 3),
              e.ɵɵpipe(5, "translate"),
              e.ɵɵelement(6, "mat-icon", 4),
              e.ɵɵelementEnd(),
              e.ɵɵelementStart(7, "button", 5),
              e.ɵɵpipe(8, "translate"),
              e.ɵɵelement(9, "mat-icon", 6),
              e.ɵɵelementEnd(),
              e.ɵɵelementStart(10, "button", 7),
              e.ɵɵpipe(11, "translate"),
              e.ɵɵelement(12, "mat-icon", 8),
              e.ɵɵelementEnd(),
              e.ɵɵelementEnd()),
              2 & _ &&
                (e.ɵɵproperty("fxHide", E.isShareLinkLocal()),
                e.ɵɵadvance(1),
                e.ɵɵpropertyInterpolate("title", E.shareTitle),
                e.ɵɵpropertyInterpolate("description", E.shareText),
                e.ɵɵpropertyInterpolate("url", E.shareLink),
                e.ɵɵpropertyInterpolate(
                  "matTooltip",
                  e.ɵɵpipeBind2(
                    2,
                    15,
                    "action.share-via",
                    e.ɵɵpureFunction0(27, D)
                  )
                ),
                e.ɵɵadvance(3),
                e.ɵɵpropertyInterpolate("title", E.shareTitle),
                e.ɵɵpropertyInterpolate("tags", E.shareHashTags),
                e.ɵɵpropertyInterpolate("url", E.shareLink),
                e.ɵɵpropertyInterpolate(
                  "matTooltip",
                  e.ɵɵpipeBind2(
                    5,
                    18,
                    "action.share-via",
                    e.ɵɵpureFunction0(28, y)
                  )
                ),
                e.ɵɵadvance(3),
                e.ɵɵpropertyInterpolate("title", E.shareTitle),
                e.ɵɵpropertyInterpolate("url", E.shareLink),
                e.ɵɵpropertyInterpolate(
                  "matTooltip",
                  e.ɵɵpipeBind2(
                    8,
                    21,
                    "action.share-via",
                    e.ɵɵpureFunction0(29, m)
                  )
                ),
                e.ɵɵadvance(3),
                e.ɵɵpropertyInterpolate("title", E.shareTitle),
                e.ɵɵpropertyInterpolate("url", E.shareLink),
                e.ɵɵpropertyInterpolate(
                  "matTooltip",
                  e.ɵɵpipeBind2(
                    11,
                    24,
                    "action.share-via",
                    e.ɵɵpureFunction0(30, r)
                  )
                ));
          },
          directives: [
            a.DefaultLayoutDirective,
            a.DefaultLayoutGapDirective,
            C.DefaultShowHideDirective,
            s.MatButton,
            d.Rz,
            o.MatTooltip,
            i.MatIcon,
          ],
          pipes: [g.TranslatePipe],
          styles: ['@charset "UTF-8";[_nghost-%COMP%]{display:block}'],
        }));
    },
    98847: (ee, R, t) => {
      "use strict";
      t.r(R), t.d(R, { TbAnchorComponent: () => a });
      var e = t(37716);
      function n(C, s) {}
      class a {
        constructor(s) {
          this.viewContainerRef = s;
        }
      }
      (a.ɵfac = function (s) {
        return new (s || a)(e.ɵɵdirectiveInject(e.ViewContainerRef));
      }),
        (a.ɵcmp = e.ɵɵdefineComponent({
          type: a,
          selectors: [["tb-anchor"]],
          decls: 1,
          vars: 0,
          template: function (s, d) {
            1 & s && e.ɵɵtemplate(0, n, 0, 0, "ng-template");
          },
          encapsulation: 2,
        }));
    },
    47215: (ee, R, t) => {
      "use strict";
      t.r(R), t.d(R, { TbCheckboxComponent: () => s });
      var e = t(37716),
        n = t(3679),
        a = t(7539);
      class s {
        constructor() {
          (this.trueValue = !0),
            (this.falseValue = !1),
            (this.valueChange = new e.EventEmitter()),
            (this.propagateChange = (o) => {});
        }
        onHostChange(o) {
          this.propagateChange(o.checked ? this.trueValue : this.falseValue);
        }
        modelChange(o) {
          o
            ? ((this.innerValue = !0), this.valueChange.emit(this.trueValue))
            : ((this.innerValue = !1), this.valueChange.emit(this.falseValue));
        }
        registerOnChange(o) {
          this.propagateChange = o;
        }
        registerOnTouched(o) {}
        setDisabledState(o) {
          this.disabled = o;
        }
        writeValue(o) {
          o === this.trueValue
            ? (this.innerValue = !0)
            : (this.innerValue = !1);
        }
      }
      (s.ɵfac = function (o) {
        return new (o || s)();
      }),
        (s.ɵcmp = e.ɵɵdefineComponent({
          type: s,
          selectors: [["tb-checkbox"]],
          inputs: {
            disabled: "disabled",
            trueValue: "trueValue",
            falseValue: "falseValue",
          },
          outputs: { valueChange: "valueChange" },
          features: [
            e.ɵɵProvidersFeature([
              {
                provide: n.NG_VALUE_ACCESSOR,
                useExisting: (0, e.forwardRef)(() => s),
                multi: !0,
              },
            ]),
          ],
          ngContentSelectors: ["*"],
          decls: 2,
          vars: 3,
          consts: [
            [3, "ngModel", "checked", "disabled", "ngModelChange", "change"],
          ],
          template: function (o, i) {
            1 & o &&
              (e.ɵɵprojectionDef(),
              e.ɵɵelementStart(0, "mat-checkbox", 0),
              e.ɵɵlistener("ngModelChange", function (D) {
                return (i.innerValue = D);
              })("ngModelChange", function (D) {
                return i.modelChange(D);
              })("change", function (D) {
                return i.onHostChange(D);
              }),
              e.ɵɵprojection(1),
              e.ɵɵelementEnd()),
              2 & o &&
                e.ɵɵproperty("ngModel", i.innerValue)("checked", i.innerValue)(
                  "disabled",
                  i.disabled
                );
          },
          directives: [a.MatCheckbox, n.NgControlStatus, n.NgModel],
          encapsulation: 2,
        }));
    },
    18500: (ee, R, t) => {
      "use strict";
      t.r(R), t.d(R, { TbErrorComponent: () => C });
      var e = t(37716),
        n = t(17238),
        a = t(98295);
      class C {
        set error(d) {
          d && !this.message
            ? ((this.message = d),
              (this.state = "hide"),
              setTimeout(() => {
                this.state = "show";
              }))
            : ((this.errorValue = d), (this.state = d ? "show" : "hide"));
        }
      }
      (C.ɵfac = function (d) {
        return new (d || C)();
      }),
        (C.ɵcmp = e.ɵɵdefineComponent({
          type: C,
          selectors: [["tb-error"]],
          inputs: { error: "error" },
          decls: 3,
          vars: 2,
          consts: [[2, "margin-top", "0.5rem", "font-size", ".75rem"]],
          template: function (d, o) {
            1 & d &&
              (e.ɵɵelementStart(0, "div", 0),
              e.ɵɵelementStart(1, "mat-error"),
              e.ɵɵtext(2),
              e.ɵɵelementEnd(),
              e.ɵɵelementEnd()),
              2 & d &&
                (e.ɵɵproperty("@animation", o.state),
                e.ɵɵadvance(2),
                e.ɵɵtextInterpolate1(" ", o.message, " "));
          },
          directives: [a.MatError],
          styles: ["[_nghost-%COMP%]{height:24px}"],
          data: {
            animation: [
              (0, n.trigger)("animation", [
                (0, n.state)("show", (0, n.style)({ opacity: 1 })),
                (0, n.state)(
                  "hide",
                  (0, n.style)({ opacity: 0, transform: "translateY(-1rem)" })
                ),
                (0, n.transition)(
                  "show => hide",
                  (0, n.animate)("200ms ease-out")
                ),
                (0, n.transition)("* => show", (0, n.animate)("200ms ease-in")),
              ]),
            ],
          },
        }));
    },
    7466: (ee, R, t) => {
      "use strict";
      t.r(R), t.d(R, { DatetimePeriodComponent: () => i });
      var e = t(37716),
        n = t(3679),
        a = t(35618),
        C = t(98295),
        s = t(29790),
        d = t(55959),
        o = t(83166);
      class i {
        constructor() {
          (this.changePending = !1), (this.propagateChange = null);
        }
        ngOnInit() {}
        registerOnChange(D) {
          (this.propagateChange = D),
            this.changePending &&
              this.propagateChange &&
              ((this.changePending = !1),
              this.propagateChange(this.modelValue));
        }
        registerOnTouched(D) {}
        setDisabledState(D) {
          this.disabled = D;
        }
        writeValue(D) {
          if (((this.modelValue = D), this.modelValue))
            (this.startDate = new Date(this.modelValue.startTimeMs)),
              (this.endDate = new Date(this.modelValue.endTimeMs));
          else {
            const y = new Date();
            (this.startDate = new Date(
              y.getFullYear(),
              y.getMonth(),
              y.getDate() - 1,
              y.getHours(),
              y.getMinutes(),
              y.getSeconds(),
              y.getMilliseconds()
            )),
              (this.endDate = y),
              this.updateView();
          }
          this.updateMinMaxDates();
        }
        updateView() {
          let D = null;
          this.startDate &&
            this.endDate &&
            (D = {
              startTimeMs: this.startDate.getTime(),
              endTimeMs: this.endDate.getTime(),
            }),
            (this.modelValue = D),
            this.propagateChange
              ? this.propagateChange(this.modelValue)
              : (this.changePending = !0);
        }
        updateMinMaxDates() {
          (this.maxStartDate = new Date(this.endDate.getTime() - 1e3)),
            (this.minEndDate = new Date(this.startDate.getTime() + 1e3)),
            (this.maxEndDate = new Date());
        }
        onStartDateChange() {
          this.startDate &&
            (this.startDate.getTime() > this.maxStartDate.getTime() &&
              (this.startDate = new Date(this.maxStartDate.getTime())),
            this.updateMinMaxDates()),
            this.updateView();
        }
        onEndDateChange() {
          this.endDate &&
            (this.endDate.getTime() < this.minEndDate.getTime()
              ? (this.endDate = new Date(this.minEndDate.getTime()))
              : this.endDate.getTime() > this.maxEndDate.getTime() &&
                (this.endDate = new Date(this.maxEndDate.getTime())),
            this.updateMinMaxDates()),
            this.updateView();
        }
      }
      (i.ɵfac = function (D) {
        return new (D || i)();
      }),
        (i.ɵcmp = e.ɵɵdefineComponent({
          type: i,
          selectors: [["tb-datetime-period"]],
          inputs: { disabled: "disabled" },
          features: [
            e.ɵɵProvidersFeature([
              {
                provide: n.NG_VALUE_ACCESSOR,
                useExisting: (0, e.forwardRef)(() => i),
                multi: !0,
              },
            ]),
          ],
          decls: 31,
          vars: 16,
          consts: [
            ["fxLayout", "column", "fxLayoutAlign", "start stretch"],
            [
              "fxLayout",
              "row",
              "fxLayoutAlign",
              "start start",
              "fxLayoutGap",
              "16px",
              "fxLayout.xs",
              "column",
              "fxLayoutAlign.xs",
              "start stretch",
              "fxLayoutGap.xs",
              "0",
            ],
            ["translate", ""],
            ["matPrefix", "", 3, "for"],
            ["type", "date", "openOnFocus", "true"],
            ["startDatePicker", ""],
            [
              "matInput",
              "",
              3,
              "disabled",
              "ngModel",
              "matDatetimepicker",
              "ngModelChange",
            ],
            ["type", "time", "openOnFocus", "true"],
            ["startTimePicker", ""],
            ["endDatePicker", ""],
            ["endTimePicker", ""],
          ],
          template: function (D, y) {
            if (
              (1 & D &&
                (e.ɵɵelementStart(0, "section", 0),
                e.ɵɵelementStart(1, "section", 1),
                e.ɵɵelementStart(2, "mat-form-field"),
                e.ɵɵelementStart(3, "mat-placeholder", 2),
                e.ɵɵtext(4, "datetime.date-from"),
                e.ɵɵelementEnd(),
                e.ɵɵelement(5, "mat-datetimepicker-toggle", 3),
                e.ɵɵelement(6, "mat-datetimepicker", 4, 5),
                e.ɵɵelementStart(8, "input", 6),
                e.ɵɵlistener("ngModelChange", function (r) {
                  return (y.startDate = r);
                })("ngModelChange", function () {
                  return y.onStartDateChange();
                }),
                e.ɵɵelementEnd(),
                e.ɵɵelementEnd(),
                e.ɵɵelementStart(9, "mat-form-field"),
                e.ɵɵelementStart(10, "mat-placeholder", 2),
                e.ɵɵtext(11, "datetime.time-from"),
                e.ɵɵelementEnd(),
                e.ɵɵelement(12, "mat-datetimepicker-toggle", 3),
                e.ɵɵelement(13, "mat-datetimepicker", 7, 8),
                e.ɵɵelementStart(15, "input", 6),
                e.ɵɵlistener("ngModelChange", function (r) {
                  return (y.startDate = r);
                })("ngModelChange", function () {
                  return y.onStartDateChange();
                }),
                e.ɵɵelementEnd(),
                e.ɵɵelementEnd(),
                e.ɵɵelementEnd(),
                e.ɵɵelementStart(16, "section", 1),
                e.ɵɵelementStart(17, "mat-form-field"),
                e.ɵɵelementStart(18, "mat-placeholder", 2),
                e.ɵɵtext(19, "datetime.date-to"),
                e.ɵɵelementEnd(),
                e.ɵɵelement(20, "mat-datetimepicker-toggle", 3),
                e.ɵɵelement(21, "mat-datetimepicker", 4, 9),
                e.ɵɵelementStart(23, "input", 6),
                e.ɵɵlistener("ngModelChange", function (r) {
                  return (y.endDate = r);
                })("ngModelChange", function () {
                  return y.onEndDateChange();
                }),
                e.ɵɵelementEnd(),
                e.ɵɵelementEnd(),
                e.ɵɵelementStart(24, "mat-form-field"),
                e.ɵɵelementStart(25, "mat-placeholder", 2),
                e.ɵɵtext(26, "datetime.time-to"),
                e.ɵɵelementEnd(),
                e.ɵɵelement(27, "mat-datetimepicker-toggle", 3),
                e.ɵɵelement(28, "mat-datetimepicker", 7, 10),
                e.ɵɵelementStart(30, "input", 6),
                e.ɵɵlistener("ngModelChange", function (r) {
                  return (y.endDate = r);
                })("ngModelChange", function () {
                  return y.onEndDateChange();
                }),
                e.ɵɵelementEnd(),
                e.ɵɵelementEnd(),
                e.ɵɵelementEnd(),
                e.ɵɵelementEnd()),
              2 & D)
            ) {
              const m = e.ɵɵreference(7),
                r = e.ɵɵreference(14),
                h = e.ɵɵreference(22),
                p = e.ɵɵreference(29);
              e.ɵɵadvance(5),
                e.ɵɵproperty("for", m),
                e.ɵɵadvance(3),
                e.ɵɵproperty("disabled", y.disabled)("ngModel", y.startDate)(
                  "matDatetimepicker",
                  m
                ),
                e.ɵɵadvance(4),
                e.ɵɵproperty("for", r),
                e.ɵɵadvance(3),
                e.ɵɵproperty("disabled", y.disabled)("ngModel", y.startDate)(
                  "matDatetimepicker",
                  r
                ),
                e.ɵɵadvance(5),
                e.ɵɵproperty("for", h),
                e.ɵɵadvance(3),
                e.ɵɵproperty("disabled", y.disabled)("ngModel", y.endDate)(
                  "matDatetimepicker",
                  h
                ),
                e.ɵɵadvance(4),
                e.ɵɵproperty("for", p),
                e.ɵɵadvance(3),
                e.ɵɵproperty("disabled", y.disabled)("ngModel", y.endDate)(
                  "matDatetimepicker",
                  p
                );
            }
          },
          directives: [
            a.DefaultLayoutDirective,
            a.DefaultLayoutAlignDirective,
            a.DefaultLayoutGapDirective,
            C.MatFormField,
            C.MatPlaceholder,
            s.TranslateDirective,
            d.MatDatetimepickerToggle,
            C.MatPrefix,
            d.MatDatetimepicker,
            o.MatInput,
            n.DefaultValueAccessor,
            d.MatDatetimepickerInput,
            n.NgControlStatus,
            n.NgModel,
          ],
          styles: [
            '@charset "UTF-8";[_nghost-%COMP%]     .mat-form-field-wrapper{padding-bottom:8px}[_nghost-%COMP%]     .mat-form-field-underline{bottom:8px}[_nghost-%COMP%]     .mat-form-field-infix{width:150px}@media screen and (max-width: 599px){[_nghost-%COMP%]     .mat-form-field-infix{width:100%}}',
          ],
        }));
    },
    73619: (ee, R, t) => {
      "use strict";
      t.r(R), t.d(R, { DatetimeComponent: () => h });
      var e = t(37716),
        n = t(3679),
        a = t(39490),
        C = t(35618),
        s = t(98295),
        d = t(38583),
        o = t(88030),
        i = t(55959),
        g = t(83166),
        D = t(29790);
      function y(p, _) {
        if (
          (1 & p &&
            (e.ɵɵelementStart(0, "mat-placeholder"),
            e.ɵɵtext(1),
            e.ɵɵpipe(2, "translate"),
            e.ɵɵelementEnd()),
          2 & p)
        ) {
          const E = e.ɵɵnextContext();
          e.ɵɵadvance(1), e.ɵɵtextInterpolate(e.ɵɵpipeBind1(2, 1, E.dateText));
        }
      }
      function m(p, _) {
        if (
          (1 & p &&
            (e.ɵɵelementStart(0, "mat-placeholder"),
            e.ɵɵtext(1),
            e.ɵɵpipe(2, "translate"),
            e.ɵɵelementEnd()),
          2 & p)
        ) {
          const E = e.ɵɵnextContext();
          e.ɵɵadvance(1), e.ɵɵtextInterpolate(e.ɵɵpipeBind1(2, 1, E.timeText));
        }
      }
      const r = function (p) {
        return { "no-label": p };
      };
      class h {
        constructor() {
          (this.showLabel = !0), (this.propagateChange = (_) => {});
        }
        get required() {
          return this.requiredValue;
        }
        set required(_) {
          this.requiredValue = (0, a.coerceBooleanProperty)(_);
        }
        set minDate(_) {
          this.minDateValue = _ ? new Date(_) : null;
        }
        set maxDate(_) {
          this.maxDateValue = _ ? new Date(_) : null;
        }
        registerOnChange(_) {
          this.propagateChange = _;
        }
        registerOnTouched(_) {}
        setDisabledState(_) {
          this.disabled = _;
        }
        ngOnInit() {}
        writeValue(_) {
          (this.modelValue = _),
            this.modelValue
              ? (this.date = new Date(this.modelValue))
              : (this.date = null);
        }
        updateView(_) {
          this.modelValue !== _ &&
            ((this.modelValue = _), this.propagateChange(this.modelValue));
        }
        onDateChange() {
          const _ = this.date ? this.date.getTime() : null;
          this.updateView(_);
        }
      }
      (h.ɵfac = function (_) {
        return new (_ || h)();
      }),
        (h.ɵcmp = e.ɵɵdefineComponent({
          type: h,
          selectors: [["tb-datetime"]],
          inputs: {
            required: "required",
            disabled: "disabled",
            dateText: "dateText",
            timeText: "timeText",
            showLabel: "showLabel",
            minDate: "minDate",
            maxDate: "maxDate",
          },
          features: [
            e.ɵɵProvidersFeature([
              {
                provide: n.NG_VALUE_ACCESSOR,
                useExisting: (0, e.forwardRef)(() => h),
                multi: !0,
              },
            ]),
          ],
          decls: 13,
          vars: 26,
          consts: [
            [
              "fxLayout",
              "row",
              "fxLayoutAlign",
              "start start",
              "fxLayoutGap",
              "16px",
            ],
            [3, "floatLabel", "hideRequiredMarker", "ngClass"],
            [4, "ngIf"],
            ["matPrefix", "", 3, "for"],
            ["type", "date", "openOnFocus", "true"],
            ["datePicker", ""],
            [
              "matInput",
              "",
              3,
              "min",
              "max",
              "disabled",
              "required",
              "ngModel",
              "matDatetimepicker",
              "ngModelChange",
            ],
            ["type", "time", "openOnFocus", "true"],
            ["timePicker", ""],
          ],
          template: function (_, E) {
            if (
              (1 & _ &&
                (e.ɵɵelementStart(0, "section", 0),
                e.ɵɵelementStart(1, "mat-form-field", 1),
                e.ɵɵtemplate(2, y, 3, 3, "mat-placeholder", 2),
                e.ɵɵelement(3, "mat-datetimepicker-toggle", 3),
                e.ɵɵelement(4, "mat-datetimepicker", 4, 5),
                e.ɵɵelementStart(6, "input", 6),
                e.ɵɵlistener("ngModelChange", function (v) {
                  return (E.date = v);
                })("ngModelChange", function () {
                  return E.onDateChange();
                }),
                e.ɵɵelementEnd(),
                e.ɵɵelementEnd(),
                e.ɵɵelementStart(7, "mat-form-field", 1),
                e.ɵɵtemplate(8, m, 3, 3, "mat-placeholder", 2),
                e.ɵɵelement(9, "mat-datetimepicker-toggle", 3),
                e.ɵɵelement(10, "mat-datetimepicker", 7, 8),
                e.ɵɵelementStart(12, "input", 6),
                e.ɵɵlistener("ngModelChange", function (v) {
                  return (E.date = v);
                })("ngModelChange", function () {
                  return E.onDateChange();
                }),
                e.ɵɵelementEnd(),
                e.ɵɵelementEnd(),
                e.ɵɵelementEnd()),
              2 & _)
            ) {
              const c = e.ɵɵreference(5),
                v = e.ɵɵreference(11);
              e.ɵɵadvance(1),
                e.ɵɵproperty("floatLabel", E.showLabel ? "auto" : "always")(
                  "hideRequiredMarker",
                  !E.showLabel
                )("ngClass", e.ɵɵpureFunction1(22, r, !E.showLabel)),
                e.ɵɵadvance(1),
                e.ɵɵproperty("ngIf", E.showLabel),
                e.ɵɵadvance(1),
                e.ɵɵproperty("for", c),
                e.ɵɵadvance(3),
                e.ɵɵproperty("min", E.minDateValue)("max", E.maxDateValue)(
                  "disabled",
                  E.disabled
                )("required", E.required)("ngModel", E.date)(
                  "matDatetimepicker",
                  c
                ),
                e.ɵɵadvance(1),
                e.ɵɵproperty("floatLabel", E.showLabel ? "auto" : "always")(
                  "hideRequiredMarker",
                  !E.showLabel
                )("ngClass", e.ɵɵpureFunction1(24, r, !E.showLabel)),
                e.ɵɵadvance(1),
                e.ɵɵproperty("ngIf", E.showLabel),
                e.ɵɵadvance(1),
                e.ɵɵproperty("for", v),
                e.ɵɵadvance(3),
                e.ɵɵproperty("min", E.minDateValue)("max", E.maxDateValue)(
                  "disabled",
                  E.disabled
                )("required", E.required)("ngModel", E.date)(
                  "matDatetimepicker",
                  v
                );
            }
          },
          directives: [
            C.DefaultLayoutDirective,
            C.DefaultLayoutAlignDirective,
            C.DefaultLayoutGapDirective,
            s.MatFormField,
            d.NgClass,
            o.DefaultClassDirective,
            d.NgIf,
            i.MatDatetimepickerToggle,
            s.MatPrefix,
            i.MatDatetimepicker,
            g.MatInput,
            n.DefaultValueAccessor,
            i.MatDatetimepickerInput,
            n.RequiredValidator,
            n.NgControlStatus,
            n.NgModel,
            s.MatPlaceholder,
          ],
          pipes: [D.TranslatePipe],
          styles: [
            '@charset "UTF-8";[_nghost-%COMP%]     .mat-form-field-wrapper{padding-bottom:8px}[_nghost-%COMP%]     .mat-form-field-underline{bottom:8px}[_nghost-%COMP%]     .mat-form-field-infix{width:auto;min-width:100px}[_nghost-%COMP%]     mat-form-field.no-label .mat-form-field-infix{border-top-width:.2em}',
          ],
        }));
    },
    91370: (ee, R, t) => {
      "use strict";
      t.r(R), t.d(R, { HistorySelectorComponent: () => I });
      var e = t(37716),
        n = t(20945),
        a = t(45435),
        C = t(35618),
        s = t(51095),
        d = t(76627),
        o = t(38583),
        i = t(88030),
        g = t(54436),
        D = t(3679),
        y = t(67441),
        m = t(72458),
        r = t(29790);
      function h(l, T) {
        if (
          (1 & l &&
            (e.ɵɵelementStart(0, "span"),
            e.ɵɵtext(1),
            e.ɵɵpipe(2, "date"),
            e.ɵɵelementEnd()),
          2 & l)
        ) {
          const O = e.ɵɵnextContext();
          e.ɵɵadvance(1),
            e.ɵɵtextInterpolate(e.ɵɵpipeBind2(2, 1, O.currentTime, "medium"));
        }
      }
      function p(l, T) {
        1 & l &&
          (e.ɵɵelementStart(0, "span"),
          e.ɵɵtext(1),
          e.ɵɵpipe(2, "translate"),
          e.ɵɵelementEnd()),
          2 & l &&
            (e.ɵɵadvance(1),
            e.ɵɵtextInterpolate(e.ɵɵpipeBind1(2, 1, "widget.no-data-found")));
      }
      const _ = function (l) {
        return { color: l };
      };
      function E(l, T) {
        if (1 & l) {
          const O = e.ɵɵgetCurrentView();
          e.ɵɵelementStart(0, "button", 15),
            e.ɵɵlistener("click", function () {
              return e.ɵɵrestoreView(O), e.ɵɵnextContext().play();
            }),
            e.ɵɵelementStart(1, "mat-icon", 3),
            e.ɵɵtext(2, " play_circle_outline "),
            e.ɵɵelementEnd(),
            e.ɵɵelementEnd();
        }
        if (2 & l) {
          const O = e.ɵɵnextContext();
          e.ɵɵadvance(1),
            e.ɵɵproperty(
              "ngStyle",
              e.ɵɵpureFunction1(1, _, O.settings.buttonColor)
            );
        }
      }
      function c(l, T) {
        if (1 & l) {
          const O = e.ɵɵgetCurrentView();
          e.ɵɵelementStart(0, "button", 16),
            e.ɵɵlistener("click", function () {
              return e.ɵɵrestoreView(O), e.ɵɵnextContext().pause();
            }),
            e.ɵɵelementStart(1, "mat-icon", 3),
            e.ɵɵtext(2, " pause_circle_outline "),
            e.ɵɵelementEnd(),
            e.ɵɵelementEnd();
        }
        if (2 & l) {
          const O = e.ɵɵnextContext();
          e.ɵɵadvance(1),
            e.ɵɵproperty(
              "ngStyle",
              e.ɵɵpureFunction1(1, _, O.settings.buttonColor)
            );
        }
      }
      function v(l, T) {
        if (
          (1 & l &&
            (e.ɵɵelementStart(0, "mat-option", 17),
            e.ɵɵtext(1),
            e.ɵɵelementEnd()),
          2 & l)
        ) {
          const O = T.$implicit;
          e.ɵɵproperty("value", O),
            e.ɵɵadvance(1),
            e.ɵɵtextInterpolate1("", O, " ");
        }
      }
      class I {
        constructor(T) {
          (this.cd = T),
            (this.step = 1e3),
            (this.anchors = []),
            (this.useAnchors = !1),
            (this.timeUpdated = new e.EventEmitter()),
            (this.minTimeIndex = 0),
            (this.maxTimeIndex = 0),
            (this.speed = 1),
            (this.index = 0),
            (this.playing = !1),
            (this.speeds = [1, 5, 10, 25]),
            (this.currentTime = null);
        }
        ngOnChanges() {
          (this.maxTimeIndex = Math.ceil(
            (this.maxTime - this.minTime) / this.step
          )),
            (this.currentTime = this.minTime === 1 / 0 ? null : this.minTime);
        }
        play() {
          (this.playing = !0),
            this.interval ||
              (this.interval = (0, n.F)(1e3 / this.speed)
                .pipe((0, a.h)(() => this.playing))
                .subscribe(
                  () => {
                    this.index++,
                      (this.currentTime =
                        this.minTime + this.index * this.step),
                      this.index <= this.maxTimeIndex
                        ? (this.cd.detectChanges(),
                          this.timeUpdated.emit(this.currentTime))
                        : ((this.playing = !1),
                          this.interval.complete(),
                          this.cd.detectChanges());
                  },
                  (T) => {
                    console.error(T);
                  },
                  () => {
                    this.interval = null;
                  }
                ));
        }
        reInit() {
          this.interval && this.interval.complete(),
            this.playing && this.play();
        }
        pause() {
          (this.playing = !1),
            (this.currentTime = this.minTime + this.index * this.step),
            this.cd.detectChanges(),
            this.timeUpdated.emit(this.currentTime);
        }
        moveNext() {
          if (this.index < this.maxTimeIndex)
            if (this.useAnchors) {
              const T = this.findIndex(this.currentTime, this.anchors) + 1;
              this.index = Math.floor(
                (this.anchors[T] - this.minTime) / this.step
              );
            } else this.index++;
          this.pause();
        }
        movePrev() {
          if (this.index > this.minTimeIndex)
            if (this.useAnchors) {
              const T = this.findIndex(this.currentTime, this.anchors) - 1;
              this.index = Math.floor(
                (this.anchors[T] - this.minTime) / this.step
              );
            } else this.index--;
          this.pause();
        }
        findIndex(T, O) {
          let w = 0;
          for (; O[w] < T; ) w++;
          return w;
        }
        moveStart() {
          (this.index = this.minTimeIndex), this.pause();
        }
        moveEnd() {
          (this.index = this.maxTimeIndex), this.pause();
        }
        changeIndex(T) {
          (this.index = T),
            (this.currentTime = this.minTime + T * this.step),
            this.timeUpdated.emit(this.currentTime);
        }
      }
      (I.ɵfac = function (T) {
        return new (T || I)(e.ɵɵdirectiveInject(e.ChangeDetectorRef));
      }),
        (I.ɵcmp = e.ɵɵdefineComponent({
          type: I,
          selectors: [["tb-history-selector"]],
          inputs: {
            settings: "settings",
            minTime: "minTime",
            maxTime: "maxTime",
            step: "step",
            anchors: "anchors",
            useAnchors: "useAnchors",
          },
          outputs: { timeUpdated: "timeUpdated" },
          features: [e.ɵɵNgOnChangesFeature],
          decls: 23,
          vars: 21,
          consts: [
            [1, "trip-animation-control-panel"],
            ["fxFlex", "", "fxLayout", "row", "fxFlexAlign", "center"],
            [
              "mat-icon-button",
              "",
              "aria-label",
              "Start",
              1,
              "mat-icon-button",
              3,
              "click",
            ],
            [1, "material-icons", 3, "ngStyle"],
            [
              "mat-icon-button",
              "",
              "aria-label",
              "Previous",
              1,
              "mat-icon-button",
              3,
              "click",
            ],
            ["fxLayout", "column", "fxFlex", "100"],
            [3, "ngModel", "min", "max", "ngModelChange", "input"],
            [1, "panel-timer"],
            [4, "ngIf"],
            [
              "mat-icon-button",
              "",
              "aria-label",
              "Next",
              1,
              "mat-icon-button",
              3,
              "click",
            ],
            [
              "mat-icon-button",
              "",
              "aria-label",
              "End",
              1,
              "mat-icon-button",
              3,
              "click",
            ],
            [
              "mat-icon-button",
              "",
              "class",
              "mat-icon-button",
              "aria-label",
              "Play",
              3,
              "click",
              4,
              "ngIf",
            ],
            [
              "mat-icon-button",
              "",
              "class",
              "mat-icon-button",
              "aria-label",
              "Stop",
              3,
              "click",
              4,
              "ngIf",
            ],
            [
              "aria-label",
              "Speed selector",
              1,
              "speed-select",
              3,
              "ngModel",
              "ngModelChange",
              "selectionChange",
            ],
            [3, "value", 4, "ngFor", "ngForOf"],
            [
              "mat-icon-button",
              "",
              "aria-label",
              "Play",
              1,
              "mat-icon-button",
              3,
              "click",
            ],
            [
              "mat-icon-button",
              "",
              "aria-label",
              "Stop",
              1,
              "mat-icon-button",
              3,
              "click",
            ],
            [3, "value"],
          ],
          template: function (T, O) {
            1 & T &&
              (e.ɵɵelementStart(0, "div", 0),
              e.ɵɵelementStart(1, "div", 1),
              e.ɵɵelementStart(2, "button", 2),
              e.ɵɵlistener("click", function () {
                return O.moveStart();
              }),
              e.ɵɵelementStart(3, "mat-icon", 3),
              e.ɵɵtext(4, "fast_rewind"),
              e.ɵɵelementEnd(),
              e.ɵɵelementEnd(),
              e.ɵɵelementStart(5, "button", 4),
              e.ɵɵlistener("click", function () {
                return O.movePrev();
              }),
              e.ɵɵelementStart(6, "mat-icon", 3),
              e.ɵɵtext(7, "skip_previous"),
              e.ɵɵelementEnd(),
              e.ɵɵelementEnd(),
              e.ɵɵelementStart(8, "div", 5),
              e.ɵɵelementStart(9, "mat-slider", 6),
              e.ɵɵlistener("ngModelChange", function (b) {
                return (O.index = b);
              })("input", function (b) {
                return O.changeIndex(b.value);
              }),
              e.ɵɵelementEnd(),
              e.ɵɵelementStart(10, "div", 7),
              e.ɵɵtemplate(11, h, 3, 4, "span", 8),
              e.ɵɵtemplate(12, p, 3, 3, "span", 8),
              e.ɵɵelementEnd(),
              e.ɵɵelementEnd(),
              e.ɵɵelementStart(13, "button", 9),
              e.ɵɵlistener("click", function () {
                return O.moveNext();
              }),
              e.ɵɵelementStart(14, "mat-icon", 3),
              e.ɵɵtext(15, "skip_next"),
              e.ɵɵelementEnd(),
              e.ɵɵelementEnd(),
              e.ɵɵelementStart(16, "button", 10),
              e.ɵɵlistener("click", function () {
                return O.moveEnd();
              }),
              e.ɵɵelementStart(17, "mat-icon", 3),
              e.ɵɵtext(18, "fast_forward"),
              e.ɵɵelementEnd(),
              e.ɵɵelementEnd(),
              e.ɵɵtemplate(19, E, 3, 3, "button", 11),
              e.ɵɵtemplate(20, c, 3, 3, "button", 12),
              e.ɵɵelementStart(21, "mat-select", 13),
              e.ɵɵlistener("ngModelChange", function (b) {
                return (O.speed = b);
              })("selectionChange", function () {
                return O.reInit();
              }),
              e.ɵɵtemplate(22, v, 2, 2, "mat-option", 14),
              e.ɵɵelementEnd(),
              e.ɵɵelementEnd(),
              e.ɵɵelementEnd()),
              2 & T &&
                (e.ɵɵadvance(3),
                e.ɵɵproperty(
                  "ngStyle",
                  e.ɵɵpureFunction1(13, _, O.settings.buttonColor)
                ),
                e.ɵɵadvance(3),
                e.ɵɵproperty(
                  "ngStyle",
                  e.ɵɵpureFunction1(15, _, O.settings.buttonColor)
                ),
                e.ɵɵadvance(3),
                e.ɵɵproperty("ngModel", O.index)("min", O.minTimeIndex)(
                  "max",
                  O.maxTimeIndex
                ),
                e.ɵɵadvance(2),
                e.ɵɵproperty("ngIf", O.currentTime),
                e.ɵɵadvance(1),
                e.ɵɵproperty("ngIf", !O.currentTime),
                e.ɵɵadvance(2),
                e.ɵɵproperty(
                  "ngStyle",
                  e.ɵɵpureFunction1(17, _, O.settings.buttonColor)
                ),
                e.ɵɵadvance(3),
                e.ɵɵproperty(
                  "ngStyle",
                  e.ɵɵpureFunction1(19, _, O.settings.buttonColor)
                ),
                e.ɵɵadvance(2),
                e.ɵɵproperty("ngIf", !O.playing),
                e.ɵɵadvance(1),
                e.ɵɵproperty("ngIf", O.playing),
                e.ɵɵadvance(1),
                e.ɵɵproperty("ngModel", O.speed),
                e.ɵɵadvance(1),
                e.ɵɵproperty("ngForOf", O.speeds));
          },
          directives: [
            C.DefaultFlexDirective,
            C.DefaultLayoutDirective,
            C.DefaultFlexAlignDirective,
            s.MatButton,
            d.MatIcon,
            o.NgStyle,
            i.DefaultStyleDirective,
            g.MatSlider,
            D.NgControlStatus,
            D.NgModel,
            o.NgIf,
            y.MatSelect,
            o.NgForOf,
            m.MatOption,
          ],
          pipes: [o.DatePipe, r.TranslatePipe],
          styles: [
            '@charset "UTF-8";.trip-animation-label-container[_ngcontent-%COMP%]{height:24px}.trip-animation-container[_ngcontent-%COMP%]{position:relative;z-index:1;flex:1;width:100%}.trip-animation-container[_ngcontent-%COMP%]   #trip-animation-map[_ngcontent-%COMP%]{z-index:1;width:100%;height:100%}.trip-animation-container[_ngcontent-%COMP%]   #trip-animation-map[_ngcontent-%COMP%]   .pointsLayerMarkerIcon[_ngcontent-%COMP%]{border-radius:50%}.trip-animation-container[_ngcontent-%COMP%]   .trip-animation-info-panel[_ngcontent-%COMP%]{position:absolute;top:0;right:0;z-index:2;pointer-events:none}.trip-animation-container[_ngcontent-%COMP%]   .trip-animation-info-panel[_ngcontent-%COMP%]   .mat-button[_ngcontent-%COMP%]{top:0;left:0;width:32px;min-width:32px;height:32px;min-height:32px;padding:0 0 2px;margin:2px;line-height:24px}.trip-animation-container[_ngcontent-%COMP%]   .trip-animation-info-panel[_ngcontent-%COMP%]   .mat-button[_ngcontent-%COMP%]   mat-icon[_ngcontent-%COMP%]{width:24px;height:24px}.trip-animation-container[_ngcontent-%COMP%]   .trip-animation-info-panel[_ngcontent-%COMP%]   .mat-button[_ngcontent-%COMP%]   mat-icon[_ngcontent-%COMP%]   svg[_ngcontent-%COMP%]{width:inherit;height:inherit}.trip-animation-container[_ngcontent-%COMP%]   .trip-animation-tooltip[_ngcontent-%COMP%]{position:absolute;top:38px;right:0;z-index:2;padding:10px;background-color:#fff;transition:.3s ease-in-out}.trip-animation-container[_ngcontent-%COMP%]   .trip-animation-tooltip-hidden[_ngcontent-%COMP%]{transform:translate(110%)}.trip-animation-control-panel[_ngcontent-%COMP%]{position:relative;box-sizing:border-box;width:100%;padding-bottom:16px;padding-left:10px}.trip-animation-control-panel[_ngcontent-%COMP%]   mat-slider-container[_ngcontent-%COMP%]   mat-slider[_ngcontent-%COMP%]{min-width:80px}.trip-animation-control-panel[_ngcontent-%COMP%]   .mat-icon-button[_ngcontent-%COMP%]{width:44px;min-width:44px;height:48px;min-height:48px;margin:0;line-height:28px}.trip-animation-control-panel[_ngcontent-%COMP%]   .mat-icon-button[_ngcontent-%COMP%]   mat-icon[_ngcontent-%COMP%]{width:24px;height:24px;font-size:24px}.trip-animation-control-panel[_ngcontent-%COMP%]   .mat-icon-button[_ngcontent-%COMP%]   mat-icon[_ngcontent-%COMP%]   svg[_ngcontent-%COMP%]{width:inherit;height:inherit}.trip-animation-control-panel[_ngcontent-%COMP%]   .mat-icon-button[_ngcontent-%COMP%]   mat-select[_ngcontent-%COMP%]{margin:0}.trip-animation-control-panel[_ngcontent-%COMP%]   .panel-timer[_ngcontent-%COMP%]{max-width:none;margin-top:-20px;font-size:12px;font-weight:500;text-align:center}.speed-select[_ngcontent-%COMP%]{width:70px;margin-left:10px;margin-top:10px}',
          ],
        }));
    },
    66398: (ee, R, t) => {
      "use strict";
      t.r(R), t.d(R, { QuickTimeIntervalComponent: () => y });
      var e = t(37716),
        n = t(3679),
        a = t(95341),
        C = t(35618),
        s = t(98295),
        d = t(29790),
        o = t(67441),
        i = t(38583),
        g = t(72458);
      function D(m, r) {
        if (
          (1 & m &&
            (e.ɵɵelementStart(0, "mat-option", 5),
            e.ɵɵtext(1),
            e.ɵɵpipe(2, "translate"),
            e.ɵɵelementEnd()),
          2 & m)
        ) {
          const h = r.$implicit,
            p = e.ɵɵnextContext();
          e.ɵɵproperty("value", h),
            e.ɵɵadvance(1),
            e.ɵɵtextInterpolate1(
              " ",
              e.ɵɵpipeBind1(2, 2, p.timeIntervalTranslationMap.get(h)),
              " "
            );
        }
      }
      class y {
        constructor() {
          (this.allIntervals = Object.values(a.WC)),
            (this.timeIntervalTranslationMap = a.$Y),
            (this.rendered = !1),
            (this.onlyCurrentInterval = !1),
            (this.propagateChange = (r) => {});
        }
        get intervals() {
          return this.onlyCurrentInterval
            ? this.allIntervals.filter((r) => r.startsWith("CURRENT_"))
            : this.allIntervals;
        }
        ngOnInit() {}
        registerOnChange(r) {
          this.propagateChange = r;
        }
        registerOnTouched(r) {}
        setDisabledState(r) {
          this.disabled = r;
        }
        writeValue(r) {
          this.modelValue = r;
        }
        onIntervalChange() {
          this.propagateChange(this.modelValue);
        }
      }
      (y.ɵfac = function (r) {
        return new (r || y)();
      }),
        (y.ɵcmp = e.ɵɵdefineComponent({
          type: y,
          selectors: [["tb-quick-time-interval"]],
          inputs: {
            disabled: "disabled",
            onlyCurrentInterval: "onlyCurrentInterval",
          },
          features: [
            e.ɵɵProvidersFeature([
              {
                provide: n.NG_VALUE_ACCESSOR,
                useExisting: (0, e.forwardRef)(() => y),
                multi: !0,
              },
            ]),
          ],
          decls: 6,
          vars: 3,
          consts: [
            ["fxLayout", "row", "fxFlex", "", 1, "interval-section"],
            ["fxFlex", ""],
            ["translate", ""],
            [3, "disabled", "ngModel", "ngModelChange"],
            [3, "value", 4, "ngFor", "ngForOf"],
            [3, "value"],
          ],
          template: function (r, h) {
            1 & r &&
              (e.ɵɵelementStart(0, "section", 0),
              e.ɵɵelementStart(1, "mat-form-field", 1),
              e.ɵɵelementStart(2, "mat-label", 2),
              e.ɵɵtext(3, "timewindow.interval"),
              e.ɵɵelementEnd(),
              e.ɵɵelementStart(4, "mat-select", 3),
              e.ɵɵlistener("ngModelChange", function (_) {
                return (h.modelValue = _);
              })("ngModelChange", function () {
                return h.onIntervalChange();
              }),
              e.ɵɵtemplate(5, D, 3, 4, "mat-option", 4),
              e.ɵɵelementEnd(),
              e.ɵɵelementEnd(),
              e.ɵɵelementEnd()),
              2 & r &&
                (e.ɵɵadvance(4),
                e.ɵɵproperty("disabled", h.disabled)("ngModel", h.modelValue),
                e.ɵɵadvance(1),
                e.ɵɵproperty("ngForOf", h.intervals));
          },
          directives: [
            C.DefaultLayoutDirective,
            C.DefaultFlexDirective,
            s.MatFormField,
            s.MatLabel,
            d.TranslateDirective,
            o.MatSelect,
            n.NgControlStatus,
            n.NgModel,
            i.NgForOf,
            g.MatOption,
          ],
          pipes: [d.TranslatePipe],
          styles: [
            '@charset "UTF-8";[_nghost-%COMP%]{min-width:355px}@media screen and (max-width: 599px){[_nghost-%COMP%]{min-width:0;width:100%}}',
          ],
        }));
    },
    43358: (ee, R, t) => {
      "use strict";
      t.r(R), t.d(R, { TimeintervalComponent: () => _ });
      var e = t(37716),
        n = t(3679),
        a = t(72491),
        C = t(39490),
        s = t(35618),
        d = t(88030),
        o = t(29790),
        i = t(7539),
        g = t(98295),
        D = t(83166),
        y = t(67441),
        m = t(38583),
        r = t(45396),
        h = t(72458);
      function p(E, c) {
        if (
          (1 & E &&
            (e.ɵɵelementStart(0, "mat-option", 18),
            e.ɵɵtext(1),
            e.ɵɵpipe(2, "translate"),
            e.ɵɵelementEnd()),
          2 & E)
        ) {
          const v = c.$implicit;
          e.ɵɵproperty("value", v.value),
            e.ɵɵadvance(1),
            e.ɵɵtextInterpolate1(
              " ",
              e.ɵɵpipeBind2(2, 2, v.name, v.translateParams),
              " "
            );
        }
      }
      class _ {
        constructor(c) {
          (this.timeService = c),
            (this.isEditValue = !1),
            (this.hideFlagValue = !1),
            (this.hideFlagChange = new e.EventEmitter()),
            (this.days = 0),
            (this.hours = 0),
            (this.mins = 1),
            (this.secs = 0),
            (this.intervalMs = 0),
            (this.advanced = !1),
            (this.rendered = !1),
            (this.propagateChange = (v) => {});
        }
        set min(c) {
          void 0 !== c &&
            c !== this.minValue &&
            ((this.minValue = c),
            (this.maxValue = Math.max(this.maxValue, this.minValue)),
            this.updateView());
        }
        set max(c) {
          void 0 !== c &&
            c !== this.maxValue &&
            ((this.maxValue = c),
            (this.minValue = Math.min(this.minValue, this.maxValue)),
            this.updateView());
        }
        set isEdit(c) {
          this.isEditValue = (0, C.coerceBooleanProperty)(c);
        }
        get isEdit() {
          return this.isEditValue;
        }
        get hideFlag() {
          return this.hideFlagValue;
        }
        set hideFlag(c) {
          this.hideFlagValue = c;
        }
        ngOnInit() {
          this.boundInterval();
        }
        registerOnChange(c) {
          this.propagateChange = c;
        }
        registerOnTouched(c) {}
        setDisabledState(c) {
          this.disabled = c;
        }
        writeValue(c) {
          if (
            ((this.modelValue = c),
            (this.rendered = !0),
            void 0 !== this.modelValue)
          ) {
            const v = this.timeService.boundMinInterval(this.minValue),
              I = this.timeService.boundMaxInterval(this.maxValue);
            this.modelValue >= v && this.modelValue <= I
              ? ((this.advanced = !this.timeService.matchesExistingInterval(
                  this.minValue,
                  this.maxValue,
                  this.modelValue
                )),
                this.setIntervalMs(this.modelValue))
              : this.boundInterval();
          }
        }
        setIntervalMs(c) {
          this.advanced || (this.intervalMs = c);
          const v = Math.floor(c / 1e3);
          (this.days = Math.floor(v / 86400)),
            (this.hours = Math.floor((v % 86400) / 3600)),
            (this.mins = Math.floor(((v % 86400) % 3600) / 60)),
            (this.secs = v % 60);
        }
        boundInterval() {
          const c = this.timeService.boundMinInterval(this.minValue),
            v = this.timeService.boundMaxInterval(this.maxValue);
          if (
            ((this.intervals = this.timeService.getIntervals(
              this.minValue,
              this.maxValue
            )),
            this.rendered)
          ) {
            let I = this.modelValue;
            I < c ? (I = c) : I > v && (I = v),
              this.advanced ||
                (I = this.timeService.boundToPredefinedInterval(c, v, I)),
              I !== this.modelValue &&
                (this.setIntervalMs(I), this.updateView());
          }
        }
        updateView() {
          if (!this.rendered) return;
          let v,
            c = null;
          this.advanced
            ? (v = this.calculateIntervalMs())
            : ((v = this.intervalMs),
              (!v || isNaN(v)) && (v = this.calculateIntervalMs())),
            !isNaN(v) && v > 0 && (c = v),
            (this.modelValue = c),
            this.propagateChange(this.modelValue),
            this.boundInterval();
        }
        calculateIntervalMs() {
          return (
            1e3 *
            (86400 * this.days + 3600 * this.hours + 60 * this.mins + this.secs)
          );
        }
        onIntervalMsChange() {
          this.updateView();
        }
        onAdvancedChange() {
          if (this.advanced) {
            let c = this.intervalMs;
            (!c || isNaN(c)) && (c = this.calculateIntervalMs()),
              this.setIntervalMs(c);
          } else this.intervalMs = this.calculateIntervalMs();
          this.updateView();
        }
        onHideFlagChange() {
          this.hideFlagChange.emit(this.hideFlagValue);
        }
        onTimeInputChange(c) {
          switch (c) {
            case "secs":
              setTimeout(() => this.onSecsChange(), 0);
              break;
            case "mins":
              setTimeout(() => this.onMinsChange(), 0);
              break;
            case "hours":
              setTimeout(() => this.onHoursChange(), 0);
              break;
            case "days":
              setTimeout(() => this.onDaysChange(), 0);
          }
        }
        onSecsChange() {
          void 0 !== this.secs &&
            (this.secs < 0
              ? this.days + this.hours + this.mins > 0
                ? ((this.secs = this.secs + 60),
                  this.mins--,
                  this.onMinsChange())
                : (this.secs = 0)
              : this.secs >= 60 &&
                ((this.secs = this.secs - 60),
                this.mins++,
                this.onMinsChange()),
            this.updateView());
        }
        onMinsChange() {
          void 0 !== this.mins &&
            (this.mins < 0
              ? this.days + this.hours > 0
                ? ((this.mins = this.mins + 60),
                  this.hours--,
                  this.onHoursChange())
                : (this.mins = 0)
              : this.mins >= 60 &&
                ((this.mins = this.mins - 60),
                this.hours++,
                this.onHoursChange()),
            this.updateView());
        }
        onHoursChange() {
          void 0 !== this.hours &&
            (this.hours < 0
              ? this.days > 0
                ? ((this.hours = this.hours + 24),
                  this.days--,
                  this.onDaysChange())
                : (this.hours = 0)
              : this.hours >= 24 &&
                ((this.hours = this.hours - 24),
                this.days++,
                this.onDaysChange()),
            this.updateView());
        }
        onDaysChange() {
          void 0 !== this.days &&
            (this.days < 0 && (this.days = 0), this.updateView());
        }
      }
      (_.ɵfac = function (c) {
        return new (c || _)(e.ɵɵdirectiveInject(a.O));
      }),
        (_.ɵcmp = e.ɵɵdefineComponent({
          type: _,
          selectors: [["tb-timeinterval"]],
          inputs: {
            min: "min",
            max: "max",
            predefinedName: "predefinedName",
            isEdit: "isEdit",
            hideFlag: "hideFlag",
            disabled: "disabled",
          },
          outputs: { hideFlagChange: "hideFlagChange" },
          features: [
            e.ɵɵProvidersFeature([
              {
                provide: n.NG_VALUE_ACCESSOR,
                useExisting: (0, e.forwardRef)(() => _),
                multi: !0,
              },
            ]),
          ],
          decls: 35,
          vars: 20,
          consts: [
            ["fxLayout", "row"],
            ["fxLayout", "column", 3, "fxShow"],
            ["translate", "", 1, "tb-small", "hide-label"],
            [3, "ngModel", "ngModelChange"],
            [
              "fxLayout",
              "column",
              "fxFlex",
              "",
              1,
              "interval-section",
              3,
              "fxShow",
            ],
            ["translate", "", 1, "tb-small", "interval-label"],
            [
              "fxLayout",
              "row wrap",
              "fxLayoutAlign",
              "start start",
              "fxFlex",
              "",
              "fxLayoutGap",
              "6px",
            ],
            [1, "number-input"],
            ["translate", ""],
            [
              "matInput",
              "",
              "type",
              "number",
              "step",
              "1",
              "min",
              "0",
              3,
              "disabled",
              "ngModel",
              "ngModelChange",
            ],
            [
              "matInput",
              "",
              "type",
              "number",
              "step",
              "1",
              3,
              "disabled",
              "ngModel",
              "ngModelChange",
            ],
            [
              "fxLayout",
              "row",
              "fxFlex",
              "",
              1,
              "interval-section",
              3,
              "fxShow",
            ],
            ["fxFlex", ""],
            [
              2,
              "min-width",
              "150px",
              3,
              "disabled",
              "ngModel",
              "ngModelChange",
            ],
            [3, "value", 4, "ngFor", "ngForOf"],
            [
              "fxLayout",
              "column",
              "fxLayoutAlign",
              "center center",
              3,
              "fxShow",
            ],
            ["translate", "", 1, "tb-small", "advanced-label"],
            [1, "advanced-switch", 3, "disabled", "ngModel", "ngModelChange"],
            [3, "value"],
          ],
          template: function (c, v) {
            1 & c &&
              (e.ɵɵelementStart(0, "section", 0),
              e.ɵɵelementStart(1, "section", 1),
              e.ɵɵelementStart(2, "label", 2),
              e.ɵɵtext(3, "timewindow.hide"),
              e.ɵɵelementEnd(),
              e.ɵɵelementStart(4, "mat-checkbox", 3),
              e.ɵɵlistener("ngModelChange", function (l) {
                return (v.hideFlag = l);
              })("ngModelChange", function () {
                return v.onHideFlagChange();
              }),
              e.ɵɵelementEnd(),
              e.ɵɵelementEnd(),
              e.ɵɵelementStart(5, "section", 4),
              e.ɵɵelementStart(6, "label", 5),
              e.ɵɵtext(7),
              e.ɵɵelementEnd(),
              e.ɵɵelementStart(8, "section", 6),
              e.ɵɵelementStart(9, "mat-form-field", 7),
              e.ɵɵelementStart(10, "mat-label", 8),
              e.ɵɵtext(11, "timeinterval.days"),
              e.ɵɵelementEnd(),
              e.ɵɵelementStart(12, "input", 9),
              e.ɵɵlistener("ngModelChange", function (l) {
                return (v.days = l);
              })("ngModelChange", function () {
                return v.onTimeInputChange("days");
              }),
              e.ɵɵelementEnd(),
              e.ɵɵelementEnd(),
              e.ɵɵelementStart(13, "mat-form-field", 7),
              e.ɵɵelementStart(14, "mat-label", 8),
              e.ɵɵtext(15, "timeinterval.hours"),
              e.ɵɵelementEnd(),
              e.ɵɵelementStart(16, "input", 10),
              e.ɵɵlistener("ngModelChange", function (l) {
                return (v.hours = l);
              })("ngModelChange", function () {
                return v.onTimeInputChange("hours");
              }),
              e.ɵɵelementEnd(),
              e.ɵɵelementEnd(),
              e.ɵɵelementStart(17, "mat-form-field", 7),
              e.ɵɵelementStart(18, "mat-label", 8),
              e.ɵɵtext(19, "timeinterval.minutes"),
              e.ɵɵelementEnd(),
              e.ɵɵelementStart(20, "input", 10),
              e.ɵɵlistener("ngModelChange", function (l) {
                return (v.mins = l);
              })("ngModelChange", function () {
                return v.onTimeInputChange("mins");
              }),
              e.ɵɵelementEnd(),
              e.ɵɵelementEnd(),
              e.ɵɵelementStart(21, "mat-form-field", 7),
              e.ɵɵelementStart(22, "mat-label", 8),
              e.ɵɵtext(23, "timeinterval.seconds"),
              e.ɵɵelementEnd(),
              e.ɵɵelementStart(24, "input", 10),
              e.ɵɵlistener("ngModelChange", function (l) {
                return (v.secs = l);
              })("ngModelChange", function () {
                return v.onTimeInputChange("secs");
              }),
              e.ɵɵelementEnd(),
              e.ɵɵelementEnd(),
              e.ɵɵelementEnd(),
              e.ɵɵelementEnd(),
              e.ɵɵelementStart(25, "section", 11),
              e.ɵɵelementStart(26, "mat-form-field", 12),
              e.ɵɵelementStart(27, "mat-label", 8),
              e.ɵɵtext(28),
              e.ɵɵelementEnd(),
              e.ɵɵelementStart(29, "mat-select", 13),
              e.ɵɵlistener("ngModelChange", function (l) {
                return (v.intervalMs = l);
              })("ngModelChange", function () {
                return v.onIntervalMsChange();
              }),
              e.ɵɵtemplate(30, p, 3, 5, "mat-option", 14),
              e.ɵɵelementEnd(),
              e.ɵɵelementEnd(),
              e.ɵɵelementEnd(),
              e.ɵɵelementStart(31, "section", 15),
              e.ɵɵelementStart(32, "label", 16),
              e.ɵɵtext(33, "timeinterval.advanced"),
              e.ɵɵelementEnd(),
              e.ɵɵelementStart(34, "mat-slide-toggle", 17),
              e.ɵɵlistener("ngModelChange", function (l) {
                return (v.advanced = l);
              })("ngModelChange", function () {
                return v.onAdvancedChange();
              }),
              e.ɵɵelementEnd(),
              e.ɵɵelementEnd(),
              e.ɵɵelementEnd()),
              2 & c &&
                (e.ɵɵadvance(1),
                e.ɵɵproperty("fxShow", v.isEdit),
                e.ɵɵadvance(3),
                e.ɵɵproperty("ngModel", v.hideFlag),
                e.ɵɵadvance(1),
                e.ɵɵproperty("fxShow", v.advanced && (v.isEdit || !v.hideFlag)),
                e.ɵɵadvance(2),
                e.ɵɵtextInterpolate(v.predefinedName),
                e.ɵɵadvance(5),
                e.ɵɵproperty("disabled", v.hideFlag || v.disabled)(
                  "ngModel",
                  v.days
                ),
                e.ɵɵadvance(4),
                e.ɵɵproperty("disabled", v.hideFlag || v.disabled)(
                  "ngModel",
                  v.hours
                ),
                e.ɵɵadvance(4),
                e.ɵɵproperty("disabled", v.hideFlag || v.disabled)(
                  "ngModel",
                  v.mins
                ),
                e.ɵɵadvance(4),
                e.ɵɵproperty("disabled", v.hideFlag || v.disabled)(
                  "ngModel",
                  v.secs
                ),
                e.ɵɵadvance(1),
                e.ɵɵproperty(
                  "fxShow",
                  !v.advanced && (v.isEdit || !v.hideFlag)
                ),
                e.ɵɵadvance(3),
                e.ɵɵtextInterpolate(v.predefinedName),
                e.ɵɵadvance(1),
                e.ɵɵproperty("disabled", v.hideFlag || v.disabled)(
                  "ngModel",
                  v.intervalMs
                ),
                e.ɵɵadvance(1),
                e.ɵɵproperty("ngForOf", v.intervals),
                e.ɵɵadvance(1),
                e.ɵɵproperty("fxShow", v.isEdit || !v.hideFlag),
                e.ɵɵadvance(3),
                e.ɵɵproperty("disabled", v.hideFlag || v.disabled)(
                  "ngModel",
                  v.advanced
                ));
          },
          directives: [
            s.DefaultLayoutDirective,
            d.DefaultShowHideDirective,
            o.TranslateDirective,
            i.MatCheckbox,
            n.NgControlStatus,
            n.NgModel,
            s.DefaultFlexDirective,
            s.DefaultLayoutAlignDirective,
            s.DefaultLayoutGapDirective,
            g.MatFormField,
            g.MatLabel,
            D.MatInput,
            n.MinValidator,
            n.NumberValueAccessor,
            n.DefaultValueAccessor,
            y.MatSelect,
            m.NgForOf,
            r.MatSlideToggle,
            h.MatOption,
          ],
          pipes: [o.TranslatePipe],
          styles: [
            '@charset "UTF-8";[_nghost-%COMP%]{min-width:355px}[_nghost-%COMP%]   .advanced-switch[_ngcontent-%COMP%]{margin-bottom:16px}[_nghost-%COMP%]   .advanced-label[_ngcontent-%COMP%]{margin:5px 0}[_nghost-%COMP%]   .hide-label[_ngcontent-%COMP%]{margin-bottom:5px;margin-right:5px}[_nghost-%COMP%]   .interval-section[_ngcontent-%COMP%]{min-height:66px}[_nghost-%COMP%]   .interval-section[_ngcontent-%COMP%]   .interval-label[_ngcontent-%COMP%]{margin-bottom:7px;margin-top:-1px}@media screen and (max-width: 599px){[_nghost-%COMP%]{min-width:0;width:100%}}[_nghost-%COMP%]     .number-input .mat-form-field-infix{width:70px}',
          ],
        }));
    },
    72495: (ee, R, t) => {
      "use strict";
      t.r(R),
        t.d(R, {
          TIMEWINDOW_PANEL_DATA: () => O,
          TimewindowPanelComponent: () => w,
        });
      var e = t(37716),
        n = t(95341),
        a = t(75362),
        C = t(3679),
        s = t(72491),
        d = t(58203),
        o = t(86710);
      const i = function () {
        return { standalone: !0 };
      };
      function g(b, S) {
        if (1 & b) {
          const u = e.ɵɵgetCurrentView();
          e.ɵɵelementStart(0, "section", 27),
            e.ɵɵelementStart(1, "label", 28),
            e.ɵɵtext(2, "timewindow.hide"),
            e.ɵɵelementEnd(),
            e.ɵɵelementStart(3, "mat-checkbox", 29),
            e.ɵɵlistener("ngModelChange", function (M) {
              e.ɵɵrestoreView(u);
              return (e.ɵɵnextContext().timewindow.hideInterval = M);
            })("ngModelChange", function () {
              return (
                e.ɵɵrestoreView(u), e.ɵɵnextContext().onHideIntervalChanged()
              );
            }),
            e.ɵɵelementEnd(),
            e.ɵɵelementEnd();
        }
        if (2 & b) {
          const u = e.ɵɵnextContext();
          e.ɵɵadvance(3),
            e.ɵɵproperty("ngModelOptions", e.ɵɵpureFunction0(2, i))(
              "ngModel",
              u.timewindow.hideInterval
            );
        }
      }
      function D(b, S) {
        if (1 & b) {
          const u = e.ɵɵgetCurrentView();
          e.ɵɵelementStart(0, "section", 34),
            e.ɵɵelementStart(1, "label", 28),
            e.ɵɵtext(2, "timewindow.hide"),
            e.ɵɵelementEnd(),
            e.ɵɵelementStart(3, "mat-checkbox", 29),
            e.ɵɵlistener("ngModelChange", function (M) {
              e.ɵɵrestoreView(u);
              return (e.ɵɵnextContext(2).timewindow.hideLastInterval = M);
            })("ngModelChange", function () {
              return (
                e.ɵɵrestoreView(u),
                e.ɵɵnextContext(2).onHideLastIntervalChanged()
              );
            }),
            e.ɵɵelementEnd(),
            e.ɵɵelementEnd();
        }
        if (2 & b) {
          const u = e.ɵɵnextContext(2);
          e.ɵɵadvance(3),
            e.ɵɵproperty("ngModelOptions", e.ɵɵpureFunction0(2, i))(
              "ngModel",
              u.timewindow.hideLastInterval
            );
        }
      }
      function y(b, S) {
        if (1 & b) {
          const u = e.ɵɵgetCurrentView();
          e.ɵɵelementStart(0, "section", 34),
            e.ɵɵelementStart(1, "label", 28),
            e.ɵɵtext(2, "timewindow.hide"),
            e.ɵɵelementEnd(),
            e.ɵɵelementStart(3, "mat-checkbox", 29),
            e.ɵɵlistener("ngModelChange", function (M) {
              e.ɵɵrestoreView(u);
              return (e.ɵɵnextContext(2).timewindow.hideQuickInterval = M);
            })("ngModelChange", function () {
              return (
                e.ɵɵrestoreView(u),
                e.ɵɵnextContext(2).onHideQuickIntervalChanged()
              );
            }),
            e.ɵɵelementEnd(),
            e.ɵɵelementEnd();
        }
        if (2 & b) {
          const u = e.ɵɵnextContext(2);
          e.ɵɵadvance(3),
            e.ɵɵproperty("ngModelOptions", e.ɵɵpureFunction0(2, i))(
              "ngModel",
              u.timewindow.hideQuickInterval
            );
        }
      }
      function m(b, S) {
        if (
          (1 & b &&
            (e.ɵɵelementStart(0, "mat-radio-group", 30),
            e.ɵɵelementStart(1, "mat-radio-button", 14),
            e.ɵɵelementStart(2, "section", 5),
            e.ɵɵtemplate(3, D, 4, 3, "section", 31),
            e.ɵɵelementStart(4, "section", 15),
            e.ɵɵelementStart(5, "span", 16),
            e.ɵɵtext(6, "timewindow.last"),
            e.ɵɵelementEnd(),
            e.ɵɵelement(7, "tb-timeinterval", 32),
            e.ɵɵelementEnd(),
            e.ɵɵelementEnd(),
            e.ɵɵelementEnd(),
            e.ɵɵelementStart(8, "mat-radio-button", 14),
            e.ɵɵelementStart(9, "section", 5),
            e.ɵɵtemplate(10, y, 4, 3, "section", 31),
            e.ɵɵelementStart(11, "section", 15),
            e.ɵɵelementStart(12, "span", 16),
            e.ɵɵtext(13, "timewindow.interval"),
            e.ɵɵelementEnd(),
            e.ɵɵelement(14, "tb-quick-time-interval", 33),
            e.ɵɵelementEnd(),
            e.ɵɵelementEnd(),
            e.ɵɵelementEnd(),
            e.ɵɵelementEnd()),
          2 & b)
        ) {
          const u = e.ɵɵnextContext();
          e.ɵɵproperty(
            "fxShow",
            u.isEdit ||
              (!u.timewindow.hideLastInterval &&
                !u.timewindow.hideQuickInterval)
          ),
            e.ɵɵadvance(1),
            e.ɵɵproperty("value", u.realtimeTypes.LAST_INTERVAL),
            e.ɵɵadvance(2),
            e.ɵɵproperty("ngIf", u.isEdit),
            e.ɵɵadvance(4),
            e.ɵɵproperty(
              "fxShow",
              u.timewindowForm.get("realtime.realtimeType").value ===
                u.realtimeTypes.LAST_INTERVAL
            )(
              "required",
              u.timewindow.selectedTab === u.timewindowTypes.REALTIME &&
                u.timewindowForm.get("realtime.realtimeType").value ===
                  u.realtimeTypes.LAST_INTERVAL
            ),
            e.ɵɵadvance(1),
            e.ɵɵproperty("value", u.realtimeTypes.INTERVAL),
            e.ɵɵadvance(2),
            e.ɵɵproperty("ngIf", u.isEdit),
            e.ɵɵadvance(4),
            e.ɵɵproperty(
              "fxShow",
              u.timewindowForm.get("realtime.realtimeType").value ===
                u.realtimeTypes.INTERVAL
            )(
              "required",
              u.timewindow.selectedTab === u.timewindowTypes.REALTIME &&
                u.timewindowForm.get("realtime.realtimeType").value ===
                  u.realtimeTypes.INTERVAL
            );
        }
      }
      function r(b, S) {
        1 & b && e.ɵɵelement(0, "tb-timeinterval", 35);
      }
      function h(b, S) {
        1 & b && e.ɵɵelement(0, "tb-quick-time-interval", 36);
      }
      function p(b, S) {
        if (1 & b) {
          const u = e.ɵɵgetCurrentView();
          e.ɵɵelementStart(0, "section", 27),
            e.ɵɵelementStart(1, "label", 28),
            e.ɵɵtext(2, "timewindow.hide"),
            e.ɵɵelementEnd(),
            e.ɵɵelementStart(3, "mat-checkbox", 29),
            e.ɵɵlistener("ngModelChange", function (M) {
              e.ɵɵrestoreView(u);
              return (e.ɵɵnextContext().timewindow.hideInterval = M);
            })("ngModelChange", function () {
              return (
                e.ɵɵrestoreView(u), e.ɵɵnextContext().onHideIntervalChanged()
              );
            }),
            e.ɵɵelementEnd(),
            e.ɵɵelementEnd();
        }
        if (2 & b) {
          const u = e.ɵɵnextContext();
          e.ɵɵadvance(3),
            e.ɵɵproperty("ngModelOptions", e.ɵɵpureFunction0(2, i))(
              "ngModel",
              u.timewindow.hideInterval
            );
        }
      }
      function _(b, S) {
        if (
          (1 & b &&
            (e.ɵɵelementStart(0, "mat-option", 43),
            e.ɵɵtext(1),
            e.ɵɵpipe(2, "translate"),
            e.ɵɵelementEnd()),
          2 & b)
        ) {
          const u = S.$implicit,
            f = e.ɵɵnextContext(2);
          e.ɵɵproperty("value", u),
            e.ɵɵadvance(1),
            e.ɵɵtextInterpolate1(
              " ",
              e.ɵɵpipeBind1(
                2,
                2,
                f.aggregationTypesTranslations.get(f.aggregationTypes[u])
              ),
              " "
            );
        }
      }
      function E(b, S) {
        if (1 & b) {
          const u = e.ɵɵgetCurrentView();
          e.ɵɵelementStart(0, "section", 5),
            e.ɵɵelementStart(1, "section", 38),
            e.ɵɵelementStart(2, "label", 28),
            e.ɵɵtext(3, "timewindow.hide"),
            e.ɵɵelementEnd(),
            e.ɵɵelementStart(4, "mat-checkbox", 29),
            e.ɵɵlistener("ngModelChange", function (M) {
              e.ɵɵrestoreView(u);
              return (e.ɵɵnextContext(2).timewindow.hideAggInterval = M);
            })("ngModelChange", function () {
              return (
                e.ɵɵrestoreView(u),
                e.ɵɵnextContext(2).onHideAggIntervalChanged()
              );
            }),
            e.ɵɵelementEnd(),
            e.ɵɵelementEnd(),
            e.ɵɵelementStart(5, "section", 7),
            e.ɵɵelementStart(6, "div", 44),
            e.ɵɵelementStart(7, "label", 16),
            e.ɵɵtext(8, "aggregation.limit"),
            e.ɵɵelementEnd(),
            e.ɵɵelementStart(9, "div", 45),
            e.ɵɵelement(10, "mat-slider", 46),
            e.ɵɵelementStart(11, "mat-form-field", 47),
            e.ɵɵelement(12, "input", 48),
            e.ɵɵelementEnd(),
            e.ɵɵelementEnd(),
            e.ɵɵelementEnd(),
            e.ɵɵelementEnd(),
            e.ɵɵelementEnd();
        }
        if (2 & b) {
          const u = e.ɵɵnextContext(2);
          e.ɵɵadvance(1),
            e.ɵɵproperty("fxShow", u.isEdit),
            e.ɵɵadvance(3),
            e.ɵɵproperty("ngModelOptions", e.ɵɵpureFunction0(10, i))(
              "ngModel",
              u.timewindow.hideAggInterval
            ),
            e.ɵɵadvance(1),
            e.ɵɵproperty("fxShow", u.isEdit || !u.timewindow.hideAggInterval),
            e.ɵɵadvance(5),
            e.ɵɵpropertyInterpolate("min", u.minDatapointsLimit()),
            e.ɵɵpropertyInterpolate("max", u.maxDatapointsLimit()),
            e.ɵɵproperty(
              "value",
              u.timewindowForm.get("aggregation.limit").value
            ),
            e.ɵɵadvance(2),
            e.ɵɵpropertyInterpolate("min", u.minDatapointsLimit()),
            e.ɵɵpropertyInterpolate("max", u.maxDatapointsLimit()),
            e.ɵɵproperty(
              "value",
              u.timewindowForm.get("aggregation.limit").value
            );
        }
      }
      function c(b, S) {
        if (1 & b) {
          const u = e.ɵɵgetCurrentView();
          e.ɵɵelementStart(0, "div", 37),
            e.ɵɵelementStart(1, "section", 5),
            e.ɵɵelementStart(2, "section", 38),
            e.ɵɵelementStart(3, "label", 28),
            e.ɵɵtext(4, "timewindow.hide"),
            e.ɵɵelementEnd(),
            e.ɵɵelementStart(5, "mat-checkbox", 29),
            e.ɵɵlistener("ngModelChange", function (M) {
              e.ɵɵrestoreView(u);
              return (e.ɵɵnextContext().timewindow.hideAggregation = M);
            })("ngModelChange", function () {
              return (
                e.ɵɵrestoreView(u), e.ɵɵnextContext().onHideAggregationChanged()
              );
            }),
            e.ɵɵelementEnd(),
            e.ɵɵelementEnd(),
            e.ɵɵelementStart(6, "section", 39),
            e.ɵɵelementStart(7, "mat-form-field"),
            e.ɵɵelementStart(8, "mat-label", 16),
            e.ɵɵtext(9, "aggregation.function"),
            e.ɵɵelementEnd(),
            e.ɵɵelementStart(10, "mat-select", 40),
            e.ɵɵtemplate(11, _, 3, 4, "mat-option", 41),
            e.ɵɵelementEnd(),
            e.ɵɵelementEnd(),
            e.ɵɵelementEnd(),
            e.ɵɵelementEnd(),
            e.ɵɵtemplate(12, E, 13, 11, "section", 42),
            e.ɵɵelementEnd();
        }
        if (2 & b) {
          const u = e.ɵɵnextContext();
          e.ɵɵadvance(2),
            e.ɵɵproperty("fxShow", u.isEdit),
            e.ɵɵadvance(3),
            e.ɵɵproperty("ngModelOptions", e.ɵɵpureFunction0(6, i))(
              "ngModel",
              u.timewindow.hideAggregation
            ),
            e.ɵɵadvance(1),
            e.ɵɵproperty("fxShow", u.isEdit || !u.timewindow.hideAggregation),
            e.ɵɵadvance(5),
            e.ɵɵproperty("ngForOf", u.aggregations),
            e.ɵɵadvance(1),
            e.ɵɵproperty(
              "ngIf",
              u.timewindowForm.get("aggregation.type").value ===
                u.aggregationTypes.NONE
            );
        }
      }
      function v(b, S) {
        if (1 & b) {
          const u = e.ɵɵgetCurrentView();
          e.ɵɵelementStart(0, "div", 49),
            e.ɵɵelementStart(1, "tb-timeinterval", 50),
            e.ɵɵlistener("hideFlagChange", function (M) {
              e.ɵɵrestoreView(u);
              return (e.ɵɵnextContext().timewindow.hideAggInterval = M);
            })("hideFlagChange", function () {
              return (
                e.ɵɵrestoreView(u), e.ɵɵnextContext().onHideAggIntervalChanged()
              );
            }),
            e.ɵɵelementEnd(),
            e.ɵɵelementEnd();
        }
        if (2 & b) {
          const u = e.ɵɵnextContext();
          e.ɵɵadvance(1),
            e.ɵɵproperty("isEdit", u.isEdit)(
              "hideFlag",
              u.timewindow.hideAggInterval
            )("min", u.minRealtimeAggInterval())(
              "max",
              u.maxRealtimeAggInterval()
            );
        }
      }
      function I(b, S) {
        if (1 & b) {
          const u = e.ɵɵgetCurrentView();
          e.ɵɵelementStart(0, "div", 51),
            e.ɵɵelementStart(1, "tb-timeinterval", 50),
            e.ɵɵlistener("hideFlagChange", function (M) {
              e.ɵɵrestoreView(u);
              return (e.ɵɵnextContext().timewindow.hideAggInterval = M);
            })("hideFlagChange", function () {
              return (
                e.ɵɵrestoreView(u), e.ɵɵnextContext().onHideAggIntervalChanged()
              );
            }),
            e.ɵɵelementEnd(),
            e.ɵɵelementEnd();
        }
        if (2 & b) {
          const u = e.ɵɵnextContext();
          e.ɵɵadvance(1),
            e.ɵɵproperty("isEdit", u.isEdit)(
              "hideFlag",
              u.timewindow.hideAggInterval
            )("min", u.minHistoryAggInterval())(
              "max",
              u.maxHistoryAggInterval()
            );
        }
      }
      function l(b, S) {
        if (1 & b) {
          const u = e.ɵɵgetCurrentView();
          e.ɵɵelementStart(0, "div", 52),
            e.ɵɵelementStart(1, "section", 38),
            e.ɵɵelementStart(2, "label", 28),
            e.ɵɵtext(3, "timewindow.hide"),
            e.ɵɵelementEnd(),
            e.ɵɵelementStart(4, "mat-checkbox", 29),
            e.ɵɵlistener("ngModelChange", function (M) {
              e.ɵɵrestoreView(u);
              return (e.ɵɵnextContext().timewindow.hideTimezone = M);
            })("ngModelChange", function () {
              return (
                e.ɵɵrestoreView(u), e.ɵɵnextContext().onHideTimezoneChanged()
              );
            }),
            e.ɵɵelementEnd(),
            e.ɵɵelementEnd(),
            e.ɵɵelement(5, "tb-timezone-select", 53),
            e.ɵɵelementEnd();
        }
        if (2 & b) {
          const u = e.ɵɵnextContext();
          e.ɵɵadvance(1),
            e.ɵɵproperty("fxShow", u.isEdit),
            e.ɵɵadvance(3),
            e.ɵɵproperty("ngModelOptions", e.ɵɵpureFunction0(4, i))(
              "ngModel",
              u.timewindow.hideTimezone
            ),
            e.ɵɵadvance(1),
            e.ɵɵproperty("fxShow", u.isEdit || !u.timewindow.hideTimezone);
        }
      }
      const T = function (b) {
          return { "tb-headless": b };
        },
        O = new e.InjectionToken("TimewindowPanelData");
      class w extends a.I {
        constructor(S, u, f, M, L, k) {
          super(f),
            (this.data = S),
            (this.overlayRef = u),
            (this.store = f),
            (this.fb = M),
            (this.timeService = L),
            (this.viewContainerRef = k),
            (this.historyOnly = !1),
            (this.quickIntervalOnly = !1),
            (this.aggregation = !1),
            (this.timezone = !1),
            (this.isEdit = !1),
            (this.historyTypes = n.dT),
            (this.realtimeTypes = n.Xf),
            (this.timewindowTypes = n._7),
            (this.aggregationTypes = n.Eu),
            (this.aggregations = Object.keys(n.Eu)),
            (this.aggregationTypesTranslations = n._s),
            (this.historyOnly = S.historyOnly),
            (this.quickIntervalOnly = S.quickIntervalOnly),
            (this.timewindow = S.timewindow),
            (this.aggregation = S.aggregation),
            (this.timezone = S.timezone),
            (this.isEdit = S.isEdit);
        }
        ngOnInit() {
          const S = this.timewindow.hideInterval || !1,
            u = this.timewindow.hideLastInterval || !1,
            f = this.timewindow.hideQuickInterval || !1,
            M = this.timewindow.hideAggregation || !1,
            L = this.timewindow.hideAggInterval || !1,
            k = this.timewindow.hideTimezone || !1;
          (this.timewindowForm = this.fb.group({
            realtime: this.fb.group({
              realtimeType: this.fb.control({
                value:
                  this.timewindow.realtime &&
                  void 0 !== this.timewindow.realtime.realtimeType
                    ? this.timewindow.realtime.realtimeType
                    : n.Xf.LAST_INTERVAL,
                disabled: S,
              }),
              timewindowMs: this.fb.control({
                value:
                  this.timewindow.realtime &&
                  void 0 !== this.timewindow.realtime.timewindowMs
                    ? this.timewindow.realtime.timewindowMs
                    : null,
                disabled: S || u,
              }),
              interval: [
                this.timewindow.realtime &&
                void 0 !== this.timewindow.realtime.interval
                  ? this.timewindow.realtime.interval
                  : null,
              ],
              quickInterval: this.fb.control({
                value:
                  this.timewindow.realtime &&
                  void 0 !== this.timewindow.realtime.quickInterval
                    ? this.timewindow.realtime.quickInterval
                    : null,
                disabled: S || f,
              }),
            }),
            history: this.fb.group({
              historyType: this.fb.control({
                value:
                  this.timewindow.history &&
                  void 0 !== this.timewindow.history.historyType
                    ? this.timewindow.history.historyType
                    : n.dT.LAST_INTERVAL,
                disabled: S,
              }),
              timewindowMs: this.fb.control({
                value:
                  this.timewindow.history &&
                  void 0 !== this.timewindow.history.timewindowMs
                    ? this.timewindow.history.timewindowMs
                    : null,
                disabled: S,
              }),
              interval: [
                this.timewindow.history &&
                void 0 !== this.timewindow.history.interval
                  ? this.timewindow.history.interval
                  : null,
              ],
              fixedTimewindow: this.fb.control({
                value:
                  this.timewindow.history &&
                  void 0 !== this.timewindow.history.fixedTimewindow
                    ? this.timewindow.history.fixedTimewindow
                    : null,
                disabled: S,
              }),
              quickInterval: this.fb.control({
                value:
                  this.timewindow.history &&
                  void 0 !== this.timewindow.history.quickInterval
                    ? this.timewindow.history.quickInterval
                    : null,
                disabled: S,
              }),
            }),
            aggregation: this.fb.group({
              type: this.fb.control({
                value:
                  this.timewindow.aggregation &&
                  void 0 !== this.timewindow.aggregation.type
                    ? this.timewindow.aggregation.type
                    : null,
                disabled: M,
              }),
              limit: this.fb.control(
                {
                  value:
                    this.timewindow.aggregation &&
                    void 0 !== this.timewindow.aggregation.limit
                      ? this.checkLimit(this.timewindow.aggregation.limit)
                      : null,
                  disabled: L,
                },
                []
              ),
            }),
            timezone: this.fb.control({
              value:
                "undefined" !== this.timewindow.timezone
                  ? this.timewindow.timezone
                  : null,
              disabled: k,
            }),
          })),
            this.updateValidators(),
            this.timewindowForm
              .get("aggregation.type")
              .valueChanges.subscribe(() => {
                this.updateValidators();
              });
        }
        checkLimit(S) {
          return !S || S < this.minDatapointsLimit()
            ? this.minDatapointsLimit()
            : S > this.maxDatapointsLimit()
            ? this.maxDatapointsLimit()
            : S;
        }
        updateValidators() {
          this.timewindowForm.get("aggregation.type").value !== n.Eu.NONE
            ? this.timewindowForm.get("aggregation.limit").clearValidators()
            : this.timewindowForm
                .get("aggregation.limit")
                .setValidators([
                  C.Validators.min(this.minDatapointsLimit()),
                  C.Validators.max(this.maxDatapointsLimit()),
                ]),
            this.timewindowForm
              .get("aggregation.limit")
              .updateValueAndValidity({ emitEvent: !1 });
        }
        update() {
          const S = this.timewindowForm.getRawValue();
          (this.timewindow.realtime = {
            realtimeType: S.realtime.realtimeType,
            timewindowMs: S.realtime.timewindowMs,
            quickInterval: S.realtime.quickInterval,
            interval: S.realtime.interval,
          }),
            (this.timewindow.history = {
              historyType: S.history.historyType,
              timewindowMs: S.history.timewindowMs,
              interval: S.history.interval,
              fixedTimewindow: S.history.fixedTimewindow,
              quickInterval: S.history.quickInterval,
            }),
            this.aggregation &&
              (this.timewindow.aggregation = {
                type: S.aggregation.type,
                limit: S.aggregation.limit,
              }),
            this.timezone && (this.timewindow.timezone = S.timezone),
            (this.result = this.timewindow),
            this.overlayRef.dispose();
        }
        cancel() {
          this.overlayRef.dispose();
        }
        minDatapointsLimit() {
          return this.timeService.getMinDatapointsLimit();
        }
        maxDatapointsLimit() {
          return this.timeService.getMaxDatapointsLimit();
        }
        minRealtimeAggInterval() {
          return this.timeService.minIntervalLimit(
            this.currentRealtimeTimewindow()
          );
        }
        maxRealtimeAggInterval() {
          return this.timeService.maxIntervalLimit(
            this.currentRealtimeTimewindow()
          );
        }
        currentRealtimeTimewindow() {
          const S = this.timewindowForm.getRawValue();
          switch (S.realtime.realtimeType) {
            case n.Xf.LAST_INTERVAL:
              return S.realtime.timewindowMs;
            case n.Xf.INTERVAL:
              return (0, n.Nb)(S.realtime.quickInterval);
            default:
              return n.x4;
          }
        }
        minHistoryAggInterval() {
          return this.timeService.minIntervalLimit(
            this.currentHistoryTimewindow()
          );
        }
        maxHistoryAggInterval() {
          return this.timeService.maxIntervalLimit(
            this.currentHistoryTimewindow()
          );
        }
        currentHistoryTimewindow() {
          const S = this.timewindowForm.getRawValue();
          return S.history.historyType === n.dT.LAST_INTERVAL
            ? S.history.timewindowMs
            : S.history.historyType === n.dT.INTERVAL
            ? (0, n.Nb)(S.history.quickInterval)
            : S.history.fixedTimewindow
            ? S.history.fixedTimewindow.endTimeMs -
              S.history.fixedTimewindow.startTimeMs
            : n.x4;
        }
        onHideIntervalChanged() {
          this.timewindow.hideInterval
            ? (this.timewindowForm
                .get("history.historyType")
                .disable({ emitEvent: !1 }),
              this.timewindowForm
                .get("history.timewindowMs")
                .disable({ emitEvent: !1 }),
              this.timewindowForm
                .get("history.fixedTimewindow")
                .disable({ emitEvent: !1 }),
              this.timewindowForm
                .get("history.quickInterval")
                .disable({ emitEvent: !1 }),
              this.timewindowForm
                .get("realtime.realtimeType")
                .disable({ emitEvent: !1 }),
              this.timewindowForm
                .get("realtime.timewindowMs")
                .disable({ emitEvent: !1 }),
              this.timewindowForm
                .get("realtime.quickInterval")
                .disable({ emitEvent: !1 }))
            : (this.timewindowForm
                .get("history.historyType")
                .enable({ emitEvent: !1 }),
              this.timewindowForm
                .get("history.timewindowMs")
                .enable({ emitEvent: !1 }),
              this.timewindowForm
                .get("history.fixedTimewindow")
                .enable({ emitEvent: !1 }),
              this.timewindowForm
                .get("history.quickInterval")
                .enable({ emitEvent: !1 }),
              this.timewindowForm
                .get("realtime.realtimeType")
                .enable({ emitEvent: !1 }),
              this.timewindow.hideLastInterval ||
                this.timewindowForm
                  .get("realtime.timewindowMs")
                  .enable({ emitEvent: !1 }),
              this.timewindow.hideQuickInterval ||
                this.timewindowForm
                  .get("realtime.quickInterval")
                  .enable({ emitEvent: !1 })),
            this.timewindowForm.markAsDirty();
        }
        onHideLastIntervalChanged() {
          this.timewindow.hideLastInterval
            ? (this.timewindowForm
                .get("realtime.timewindowMs")
                .disable({ emitEvent: !1 }),
              this.timewindow.hideQuickInterval ||
                this.timewindowForm
                  .get("realtime.realtimeType")
                  .setValue(n.Xf.INTERVAL))
            : this.timewindow.hideInterval ||
              this.timewindowForm
                .get("realtime.timewindowMs")
                .enable({ emitEvent: !1 }),
            this.timewindowForm.markAsDirty();
        }
        onHideQuickIntervalChanged() {
          this.timewindow.hideQuickInterval
            ? (this.timewindowForm
                .get("realtime.quickInterval")
                .disable({ emitEvent: !1 }),
              this.timewindow.hideLastInterval ||
                this.timewindowForm
                  .get("realtime.realtimeType")
                  .setValue(n.Xf.LAST_INTERVAL))
            : this.timewindow.hideInterval ||
              this.timewindowForm
                .get("realtime.quickInterval")
                .enable({ emitEvent: !1 }),
            this.timewindowForm.markAsDirty();
        }
        onHideAggregationChanged() {
          this.timewindow.hideAggregation
            ? this.timewindowForm
                .get("aggregation.type")
                .disable({ emitEvent: !1 })
            : this.timewindowForm
                .get("aggregation.type")
                .enable({ emitEvent: !1 }),
            this.timewindowForm.markAsDirty();
        }
        onHideAggIntervalChanged() {
          this.timewindow.hideAggInterval
            ? this.timewindowForm
                .get("aggregation.limit")
                .disable({ emitEvent: !1 })
            : this.timewindowForm
                .get("aggregation.limit")
                .enable({ emitEvent: !1 }),
            this.timewindowForm.markAsDirty();
        }
        onHideTimezoneChanged() {
          this.timewindow.hideTimezone
            ? this.timewindowForm.get("timezone").disable({ emitEvent: !1 })
            : this.timewindowForm.get("timezone").enable({ emitEvent: !1 }),
            this.timewindowForm.markAsDirty();
        }
      }
      (w.ɵfac = function (S) {
        return new (S || w)(
          e.ɵɵdirectiveInject(O),
          e.ɵɵdirectiveInject(d.OverlayRef),
          e.ɵɵdirectiveInject(o.Store),
          e.ɵɵdirectiveInject(C.FormBuilder),
          e.ɵɵdirectiveInject(s.O),
          e.ɵɵdirectiveInject(e.ViewContainerRef)
        );
      }),
        (w.ɵcmp = e.ɵɵdefineComponent({
          type: w,
          selectors: [["tb-timewindow-panel"]],
          features: [e.ɵɵInheritDefinitionFeature],
          decls: 49,
          vars: 46,
          consts: [
            [3, "formGroup", "ngSubmit"],
            [3, "disabled"],
            ["fxLayout", "column", 1, "mat-content"],
            [
              "dynamicHeight",
              "",
              3,
              "ngClass",
              "selectedIndex",
              "selectedIndexChange",
            ],
            [3, "label"],
            ["fxLayout", "row"],
            [
              "fxLayout",
              "column",
              "style",
              "padding-top: 8px; padding-left: 16px;",
              4,
              "ngIf",
            ],
            ["fxLayout", "column", "fxFlex", "", 3, "fxShow"],
            [
              "formGroupName",
              "realtime",
              1,
              "mat-content",
              "mat-padding",
              2,
              "padding-top",
              "8px",
            ],
            ["formControlName", "realtimeType", 3, "fxShow", 4, "ngIf"],
            [
              "formControlName",
              "timewindowMs",
              "predefinedName",
              "timewindow.last",
              "required",
              "",
              "style",
              "padding-top: 8px;",
              4,
              "ngIf",
            ],
            [
              "formControlName",
              "quickInterval",
              "onlyCurrentInterval",
              "true",
              "required",
              "",
              "style",
              "padding-top: 8px",
              4,
              "ngIf",
            ],
            [
              "formGroupName",
              "history",
              1,
              "mat-content",
              "mat-padding",
              2,
              "padding-top",
              "8px",
            ],
            ["formControlName", "historyType"],
            ["color", "primary", 3, "value"],
            ["fxLayout", "column"],
            ["translate", ""],
            [
              "formControlName",
              "timewindowMs",
              "predefinedName",
              "timewindow.last",
              1,
              "history-time-input",
              2,
              "padding-top",
              "8px",
              3,
              "fxShow",
              "required",
            ],
            [
              "formControlName",
              "fixedTimewindow",
              1,
              "history-time-input",
              2,
              "padding-top",
              "8px",
              3,
              "fxShow",
              "required",
            ],
            [
              "formControlName",
              "quickInterval",
              1,
              "history-time-input",
              2,
              "padding-top",
              "8px",
              3,
              "fxShow",
              "required",
            ],
            [
              "formGroupName",
              "aggregation",
              "class",
              "mat-content mat-padding",
              "fxLayout",
              "column",
              4,
              "ngIf",
            ],
            [
              "formGroupName",
              "realtime",
              "class",
              "mat-content mat-padding",
              "fxLayout",
              "column",
              4,
              "ngIf",
            ],
            [
              "formGroupName",
              "history",
              "class",
              "mat-content mat-padding",
              "fxLayout",
              "column",
              4,
              "ngIf",
            ],
            ["class", "mat-content mat-padding", "fxLayout", "row", 4, "ngIf"],
            [
              "fxLayout",
              "row",
              "fxLayoutAlign",
              "end center",
              1,
              "tb-panel-actions",
            ],
            ["type", "button", "mat-button", "", 3, "disabled", "click"],
            [
              "type",
              "submit",
              "mat-raised-button",
              "",
              "color",
              "primary",
              3,
              "disabled",
            ],
            [
              "fxLayout",
              "column",
              2,
              "padding-top",
              "8px",
              "padding-left",
              "16px",
            ],
            ["translate", "", 1, "tb-small", "hide-label"],
            [3, "ngModelOptions", "ngModel", "ngModelChange"],
            ["formControlName", "realtimeType", 3, "fxShow"],
            ["fxLayout", "column", "style", "padding-right: 8px;", 4, "ngIf"],
            [
              "formControlName",
              "timewindowMs",
              "predefinedName",
              "timewindow.last",
              2,
              "padding-top",
              "8px",
              3,
              "fxShow",
              "required",
            ],
            [
              "formControlName",
              "quickInterval",
              "onlyCurrentInterval",
              "true",
              2,
              "padding-top",
              "8px",
              3,
              "fxShow",
              "required",
            ],
            ["fxLayout", "column", 2, "padding-right", "8px"],
            [
              "formControlName",
              "timewindowMs",
              "predefinedName",
              "timewindow.last",
              "required",
              "",
              2,
              "padding-top",
              "8px",
            ],
            [
              "formControlName",
              "quickInterval",
              "onlyCurrentInterval",
              "true",
              "required",
              "",
              2,
              "padding-top",
              "8px",
            ],
            [
              "formGroupName",
              "aggregation",
              "fxLayout",
              "column",
              1,
              "mat-content",
              "mat-padding",
            ],
            ["fxLayout", "column", 3, "fxShow"],
            ["fxFlex", "", "fxLayout", "column", 3, "fxShow"],
            ["formControlName", "type", 2, "min-width", "150px"],
            [3, "value", 4, "ngFor", "ngForOf"],
            ["fxLayout", "row", 4, "ngIf"],
            [3, "value"],
            [
              "fxLayout",
              "row",
              "fxLayoutAlign",
              "start center",
              "fxLayout.xs",
              "column",
              "fxLayoutAlign.xs",
              "stretch",
              1,
              "limit-slider-container",
            ],
            ["fxLayout", "row", "fxLayoutAlign", "start center", "fxFlex", ""],
            [
              "fxFlex",
              "",
              "formControlName",
              "limit",
              "thumbLabel",
              "",
              3,
              "value",
              "min",
              "max",
            ],
            [1, "limit-slider-value"],
            [
              "matInput",
              "",
              "formControlName",
              "limit",
              "type",
              "number",
              "step",
              "1",
              3,
              "value",
              "min",
              "max",
            ],
            [
              "formGroupName",
              "realtime",
              "fxLayout",
              "column",
              1,
              "mat-content",
              "mat-padding",
            ],
            [
              "formControlName",
              "interval",
              "predefinedName",
              "aggregation.group-interval",
              3,
              "isEdit",
              "hideFlag",
              "min",
              "max",
              "hideFlagChange",
            ],
            [
              "formGroupName",
              "history",
              "fxLayout",
              "column",
              1,
              "mat-content",
              "mat-padding",
            ],
            ["fxLayout", "row", 1, "mat-content", "mat-padding"],
            [
              "fxFlex",
              "",
              "localBrowserTimezonePlaceholderOnEmpty",
              "true",
              "formControlName",
              "timezone",
              3,
              "fxShow",
            ],
          ],
          template: function (S, u) {
            1 & S &&
              (e.ɵɵelementStart(0, "form", 0),
              e.ɵɵlistener("ngSubmit", function () {
                return u.update();
              }),
              e.ɵɵelementStart(1, "fieldset", 1),
              e.ɵɵpipe(2, "async"),
              e.ɵɵelementStart(3, "div", 2),
              e.ɵɵelementStart(4, "mat-tab-group", 3),
              e.ɵɵlistener("selectedIndexChange", function () {
                return u.timewindowForm.markAsDirty();
              })("selectedIndexChange", function (M) {
                return (u.timewindow.selectedTab = M);
              }),
              e.ɵɵelementStart(5, "mat-tab", 4),
              e.ɵɵpipe(6, "translate"),
              e.ɵɵelementStart(7, "section", 5),
              e.ɵɵtemplate(8, g, 4, 3, "section", 6),
              e.ɵɵelementStart(9, "section", 7),
              e.ɵɵelementStart(10, "div", 8),
              e.ɵɵtemplate(11, m, 15, 9, "mat-radio-group", 9),
              e.ɵɵtemplate(12, r, 1, 0, "tb-timeinterval", 10),
              e.ɵɵtemplate(13, h, 1, 0, "tb-quick-time-interval", 11),
              e.ɵɵelementEnd(),
              e.ɵɵelementEnd(),
              e.ɵɵelementEnd(),
              e.ɵɵelementEnd(),
              e.ɵɵelementStart(14, "mat-tab", 4),
              e.ɵɵpipe(15, "translate"),
              e.ɵɵelementStart(16, "section", 5),
              e.ɵɵtemplate(17, p, 4, 3, "section", 6),
              e.ɵɵelementStart(18, "section", 7),
              e.ɵɵelementStart(19, "div", 12),
              e.ɵɵelementStart(20, "mat-radio-group", 13),
              e.ɵɵelementStart(21, "mat-radio-button", 14),
              e.ɵɵelementStart(22, "section", 15),
              e.ɵɵelementStart(23, "span", 16),
              e.ɵɵtext(24, "timewindow.last"),
              e.ɵɵelementEnd(),
              e.ɵɵelement(25, "tb-timeinterval", 17),
              e.ɵɵelementEnd(),
              e.ɵɵelementEnd(),
              e.ɵɵelementStart(26, "mat-radio-button", 14),
              e.ɵɵelementStart(27, "section", 15),
              e.ɵɵelementStart(28, "span", 16),
              e.ɵɵtext(29, "timewindow.time-period"),
              e.ɵɵelementEnd(),
              e.ɵɵelement(30, "tb-datetime-period", 18),
              e.ɵɵelementEnd(),
              e.ɵɵelementEnd(),
              e.ɵɵelementStart(31, "mat-radio-button", 14),
              e.ɵɵelementStart(32, "section", 15),
              e.ɵɵelementStart(33, "span", 16),
              e.ɵɵtext(34, "timewindow.interval"),
              e.ɵɵelementEnd(),
              e.ɵɵelement(35, "tb-quick-time-interval", 19),
              e.ɵɵelementEnd(),
              e.ɵɵelementEnd(),
              e.ɵɵelementEnd(),
              e.ɵɵelementEnd(),
              e.ɵɵelementEnd(),
              e.ɵɵelementEnd(),
              e.ɵɵelementEnd(),
              e.ɵɵelementEnd(),
              e.ɵɵtemplate(36, c, 13, 7, "div", 20),
              e.ɵɵtemplate(37, v, 2, 4, "div", 21),
              e.ɵɵtemplate(38, I, 2, 4, "div", 22),
              e.ɵɵtemplate(39, l, 6, 5, "div", 23),
              e.ɵɵelementStart(40, "div", 24),
              e.ɵɵelementStart(41, "button", 25),
              e.ɵɵlistener("click", function () {
                return u.cancel();
              }),
              e.ɵɵpipe(42, "async"),
              e.ɵɵtext(43),
              e.ɵɵpipe(44, "translate"),
              e.ɵɵelementEnd(),
              e.ɵɵelementStart(45, "button", 26),
              e.ɵɵpipe(46, "async"),
              e.ɵɵtext(47),
              e.ɵɵpipe(48, "translate"),
              e.ɵɵelementEnd(),
              e.ɵɵelementEnd(),
              e.ɵɵelementEnd(),
              e.ɵɵelementEnd(),
              e.ɵɵelementEnd()),
              2 & S &&
                (e.ɵɵproperty("formGroup", u.timewindowForm),
                e.ɵɵadvance(1),
                e.ɵɵproperty("disabled", e.ɵɵpipeBind1(2, 30, u.isLoading$)),
                e.ɵɵadvance(3),
                e.ɵɵproperty(
                  "ngClass",
                  e.ɵɵpureFunction1(44, T, u.historyOnly)
                )("selectedIndex", u.timewindow.selectedTab),
                e.ɵɵadvance(1),
                e.ɵɵpropertyInterpolate(
                  "label",
                  e.ɵɵpipeBind1(6, 32, "timewindow.realtime")
                ),
                e.ɵɵadvance(3),
                e.ɵɵproperty("ngIf", u.isEdit),
                e.ɵɵadvance(1),
                e.ɵɵproperty("fxShow", u.isEdit || !u.timewindow.hideInterval),
                e.ɵɵadvance(2),
                e.ɵɵproperty("ngIf", !u.quickIntervalOnly),
                e.ɵɵadvance(1),
                e.ɵɵproperty(
                  "ngIf",
                  !u.isEdit &&
                    !u.timewindow.hideLastInterval &&
                    u.timewindow.hideQuickInterval
                ),
                e.ɵɵadvance(1),
                e.ɵɵproperty(
                  "ngIf",
                  u.quickIntervalOnly ||
                    (!u.isEdit &&
                      u.timewindow.hideLastInterval &&
                      !u.timewindow.hideQuickInterval)
                ),
                e.ɵɵadvance(1),
                e.ɵɵpropertyInterpolate(
                  "label",
                  e.ɵɵpipeBind1(15, 34, "timewindow.history")
                ),
                e.ɵɵadvance(3),
                e.ɵɵproperty("ngIf", u.isEdit),
                e.ɵɵadvance(1),
                e.ɵɵproperty("fxShow", u.isEdit || !u.timewindow.hideInterval),
                e.ɵɵadvance(3),
                e.ɵɵproperty("value", u.historyTypes.LAST_INTERVAL),
                e.ɵɵadvance(4),
                e.ɵɵproperty(
                  "fxShow",
                  u.timewindowForm.get("history.historyType").value ===
                    u.historyTypes.LAST_INTERVAL
                )(
                  "required",
                  u.timewindow.selectedTab === u.timewindowTypes.HISTORY &&
                    u.timewindowForm.get("history.historyType").value ===
                      u.historyTypes.LAST_INTERVAL
                ),
                e.ɵɵadvance(1),
                e.ɵɵproperty("value", u.historyTypes.FIXED),
                e.ɵɵadvance(4),
                e.ɵɵproperty(
                  "fxShow",
                  u.timewindowForm.get("history.historyType").value ===
                    u.historyTypes.FIXED
                )(
                  "required",
                  u.timewindow.selectedTab === u.timewindowTypes.HISTORY &&
                    u.timewindowForm.get("history.historyType").value ===
                      u.historyTypes.FIXED
                ),
                e.ɵɵadvance(1),
                e.ɵɵproperty("value", u.historyTypes.INTERVAL),
                e.ɵɵadvance(4),
                e.ɵɵproperty(
                  "fxShow",
                  u.timewindowForm.get("history.historyType").value ===
                    u.historyTypes.INTERVAL
                )(
                  "required",
                  u.timewindow.selectedTab === u.timewindowTypes.HISTORY &&
                    u.timewindowForm.get("history.historyType").value ===
                      u.historyTypes.INTERVAL
                ),
                e.ɵɵadvance(1),
                e.ɵɵproperty("ngIf", u.aggregation),
                e.ɵɵadvance(1),
                e.ɵɵproperty(
                  "ngIf",
                  u.aggregation &&
                    u.timewindowForm.get("aggregation.type").value !==
                      u.aggregationTypes.NONE &&
                    u.timewindow.selectedTab === u.timewindowTypes.REALTIME
                ),
                e.ɵɵadvance(1),
                e.ɵɵproperty(
                  "ngIf",
                  u.aggregation &&
                    u.timewindowForm.get("aggregation.type").value !==
                      u.aggregationTypes.NONE &&
                    u.timewindow.selectedTab === u.timewindowTypes.HISTORY
                ),
                e.ɵɵadvance(1),
                e.ɵɵproperty("ngIf", u.timezone),
                e.ɵɵadvance(2),
                e.ɵɵproperty("disabled", e.ɵɵpipeBind1(42, 36, u.isLoading$)),
                e.ɵɵadvance(2),
                e.ɵɵtextInterpolate1(
                  " ",
                  e.ɵɵpipeBind1(44, 38, "action.cancel"),
                  " "
                ),
                e.ɵɵadvance(2),
                e.ɵɵproperty(
                  "disabled",
                  e.ɵɵpipeBind1(46, 40, u.isLoading$) ||
                    u.timewindowForm.invalid ||
                    !u.timewindowForm.dirty
                ),
                e.ɵɵadvance(2),
                e.ɵɵtextInterpolate1(
                  " ",
                  e.ɵɵpipeBind1(48, 42, "action.update"),
                  " "
                ));
          },
          styles: [
            '@charset "UTF-8";[_nghost-%COMP%]{width:100%;height:100%}[_nghost-%COMP%]   form[_ngcontent-%COMP%], [_nghost-%COMP%]   fieldset[_ngcontent-%COMP%]{height:100%}[_nghost-%COMP%]   .mat-content[_ngcontent-%COMP%]{overflow:hidden;background-color:#fff}[_nghost-%COMP%]   .mat-padding[_ngcontent-%COMP%]{padding:0 16px}[_nghost-%COMP%]   .hide-label[_ngcontent-%COMP%]{margin-bottom:5px;margin-right:5px}[_nghost-%COMP%]   tb-timeinterval[ng-reflect-fx-show=true][_ngcontent-%COMP%]{margin-bottom:-16px}[_nghost-%COMP%]   .limit-slider-container[_ngcontent-%COMP%]   .limit-slider-value[_ngcontent-%COMP%]{margin-left:16px;min-width:25px;max-width:80px}[_nghost-%COMP%]   .limit-slider-container[_ngcontent-%COMP%]   mat-form-field[_ngcontent-%COMP%]   input[type=number][_ngcontent-%COMP%]{text-align:center}@media screen and (min-width: 960px){[_nghost-%COMP%]   .history-time-input[_ngcontent-%COMP%]{min-width:364px}[_nghost-%COMP%]   .limit-slider-container[_ngcontent-%COMP%] > label[_ngcontent-%COMP%]{margin-right:16px;width:min-content;max-width:40%}}[_nghost-%COMP%]     mat-radio-button{display:block;margin-bottom:16px}[_nghost-%COMP%]     mat-radio-button .mat-radio-label{width:100%;align-items:start}[_nghost-%COMP%]     mat-radio-button .mat-radio-label .mat-radio-label-content{width:100%}[_nghost-%COMP%]     .mat-slider-horizontal .mat-slider-thumb-label{width:38px;height:38px;top:-46px;right:-19px}',
          ],
        }));
    },
    3698: (ee, R, t) => {
      "use strict";
      t.r(R), t.d(R, { TimewindowComponent: () => S });
      var e = t(37716),
        n = t(3679),
        a = t(57533),
        C = t(95341),
        s = t(38583),
        d = t(58203),
        o = t(72495),
        i = t(87636),
        g = t(82068),
        D = t(11877),
        y = t(72491),
        m = t(41960),
        r = t(39490),
        h = t(29790),
        p = t(65072),
        _ = t(51095),
        E = t(76627),
        c = t(35618),
        v = t(88030),
        I = t(11436);
      const l = ["timewindowPanelOrigin"];
      function T(u, f) {
        if (1 & u) {
          const M = e.ɵɵgetCurrentView();
          e.ɵɵelementStart(0, "button", 2, 3),
            e.ɵɵlistener("click", function () {
              return e.ɵɵrestoreView(M), e.ɵɵnextContext().openEditMode();
            }),
            e.ɵɵelementStart(2, "mat-icon", 4),
            e.ɵɵtext(3, "query_builder"),
            e.ɵɵelementEnd(),
            e.ɵɵelementStart(4, "span"),
            e.ɵɵtext(5),
            e.ɵɵelementEnd(),
            e.ɵɵelementEnd();
        }
        if (2 & u) {
          const M = e.ɵɵnextContext();
          e.ɵɵproperty("disabled", M.timewindowDisabled),
            e.ɵɵadvance(5),
            e.ɵɵtextInterpolate(
              null == M.innerValue ? null : M.innerValue.displayValue
            );
        }
      }
      function O(u, f) {
        if (1 & u) {
          const M = e.ɵɵgetCurrentView();
          e.ɵɵelementStart(0, "button", 10),
            e.ɵɵlistener("click", function () {
              return e.ɵɵrestoreView(M), e.ɵɵnextContext(2).openEditMode();
            }),
            e.ɵɵpipe(1, "translate"),
            e.ɵɵelementStart(2, "mat-icon", 4),
            e.ɵɵtext(3, "query_builder"),
            e.ɵɵelementEnd(),
            e.ɵɵelementEnd();
        }
        if (2 & u) {
          const M = e.ɵɵnextContext(2);
          e.ɵɵpropertyInterpolate(
            "matTooltip",
            e.ɵɵpipeBind1(1, 3, "timewindow.edit")
          ),
            e.ɵɵproperty("disabled", M.timewindowDisabled)(
              "matTooltipPosition",
              M.tooltipPosition
            );
        }
      }
      function w(u, f) {
        if (1 & u) {
          const M = e.ɵɵgetCurrentView();
          e.ɵɵelementStart(0, "button", 10),
            e.ɵɵlistener("click", function () {
              return e.ɵɵrestoreView(M), e.ɵɵnextContext(2).openEditMode();
            }),
            e.ɵɵpipe(1, "translate"),
            e.ɵɵelementStart(2, "mat-icon", 4),
            e.ɵɵtext(3, "query_builder"),
            e.ɵɵelementEnd(),
            e.ɵɵelementEnd();
        }
        if (2 & u) {
          const M = e.ɵɵnextContext(2);
          e.ɵɵpropertyInterpolate(
            "matTooltip",
            e.ɵɵpipeBind1(1, 3, "timewindow.edit")
          ),
            e.ɵɵproperty("disabled", M.timewindowDisabled)(
              "matTooltipPosition",
              M.tooltipPosition
            );
        }
      }
      function b(u, f) {
        if (1 & u) {
          const M = e.ɵɵgetCurrentView();
          e.ɵɵelementStart(0, "section", 5, 3),
            e.ɵɵtemplate(2, O, 4, 5, "button", 6),
            e.ɵɵelementStart(3, "span", 7),
            e.ɵɵlistener("click", function () {
              return e.ɵɵrestoreView(M), e.ɵɵnextContext().openEditMode();
            }),
            e.ɵɵpipe(4, "translate"),
            e.ɵɵtext(5),
            e.ɵɵelementStart(6, "span", 8),
            e.ɵɵtext(7, "| "),
            e.ɵɵelementStart(8, "span", 9),
            e.ɵɵtext(9),
            e.ɵɵelementEnd(),
            e.ɵɵelementEnd(),
            e.ɵɵelementEnd(),
            e.ɵɵtemplate(10, w, 4, 5, "button", 6),
            e.ɵɵelementEnd();
        }
        if (2 & u) {
          const M = e.ɵɵnextContext();
          e.ɵɵadvance(2),
            e.ɵɵproperty("ngIf", "left" === M.direction),
            e.ɵɵadvance(1),
            e.ɵɵpropertyInterpolate(
              "matTooltip",
              e.ɵɵpipeBind1(4, 8, "timewindow.edit")
            ),
            e.ɵɵproperty("fxHide", M.hideLabel())(
              "matTooltipPosition",
              M.tooltipPosition
            ),
            e.ɵɵadvance(2),
            e.ɵɵtextInterpolate1(
              " ",
              null == M.innerValue ? null : M.innerValue.displayValue,
              " "
            ),
            e.ɵɵadvance(1),
            e.ɵɵproperty(
              "fxShow",
              "" !==
                (null == M.innerValue ? null : M.innerValue.displayTimezoneAbbr)
            ),
            e.ɵɵadvance(3),
            e.ɵɵtextInterpolate(M.innerValue.displayTimezoneAbbr),
            e.ɵɵadvance(1),
            e.ɵɵproperty("ngIf", "right" === M.direction);
        }
      }
      class S {
        constructor(f, M, L, k, N, B, j, F, V, P) {
          (this.translate = f),
            (this.timeService = M),
            (this.millisecondsToTimeStringPipe = L),
            (this.datePipe = k),
            (this.overlay = N),
            (this.cd = B),
            (this.viewContainerRef = j),
            (this.breakpointObserver = F),
            (this.document = V),
            (this.window = P),
            (this.historyOnlyValue = !1),
            (this.alwaysDisplayTypePrefixValue = !1),
            (this.quickIntervalOnlyValue = !1),
            (this.aggregationValue = !1),
            (this.timezoneValue = !1),
            (this.isToolbarValue = !1),
            (this.asButtonValue = !1),
            (this.isEditValue = !1),
            (this.direction = "left"),
            (this.tooltipPosition = "above"),
            (this.propagateChange = (A) => {});
        }
        set historyOnly(f) {
          const M = (0, r.coerceBooleanProperty)(f);
          this.historyOnlyValue !== M &&
            ((this.historyOnlyValue = M),
            this.onHistoryOnlyChanged() && this.notifyChanged());
        }
        get historyOnly() {
          return this.historyOnlyValue;
        }
        set alwaysDisplayTypePrefix(f) {
          this.alwaysDisplayTypePrefixValue = (0, r.coerceBooleanProperty)(f);
        }
        get alwaysDisplayTypePrefix() {
          return this.alwaysDisplayTypePrefixValue;
        }
        set quickIntervalOnly(f) {
          this.quickIntervalOnlyValue = (0, r.coerceBooleanProperty)(f);
        }
        get quickIntervalOnly() {
          return this.quickIntervalOnlyValue;
        }
        set aggregation(f) {
          this.aggregationValue = (0, r.coerceBooleanProperty)(f);
        }
        get aggregation() {
          return this.aggregationValue;
        }
        set timezone(f) {
          this.timezoneValue = (0, r.coerceBooleanProperty)(f);
        }
        get timezone() {
          return this.timezoneValue;
        }
        set isToolbar(f) {
          this.isToolbarValue = (0, r.coerceBooleanProperty)(f);
        }
        get isToolbar() {
          return this.isToolbarValue;
        }
        set asButton(f) {
          this.asButtonValue = (0, r.coerceBooleanProperty)(f);
        }
        get asButton() {
          return this.asButtonValue;
        }
        set isEdit(f) {
          (this.isEditValue = (0, r.coerceBooleanProperty)(f)),
            (this.timewindowDisabled = this.isTimewindowDisabled());
        }
        get isEdit() {
          return this.isEditValue;
        }
        ngOnInit() {}
        ngOnDestroy() {}
        openEditMode() {
          if (this.timewindowDisabled) return;
          const f = this.breakpointObserver.isMatched(g.tr["gt-xs"]),
            M = this.overlay.position(),
            L = new d.OverlayConfig({
              panelClass: "tb-timewindow-panel",
              backdropClass: "cdk-overlay-transparent-backdrop",
              hasBackdrop: f,
            });
          if (f) {
            (L.minWidth = "417px"), (L.maxHeight = "550px");
            const j = 375,
              F = 417,
              P =
                this.timewindowPanelOrigin.elementRef.nativeElement.getBoundingClientRect(),
              A =
                this.window.pageYOffset ||
                this.document.documentElement.scrollTop ||
                this.document.body.scrollTop ||
                0,
              U =
                this.window.pageXOffset ||
                this.document.documentElement.scrollLeft ||
                this.document.body.scrollLeft ||
                0,
              G = P.bottom - A,
              Z = P.left - U;
            let le, X, se, ne;
            const re = this.document.documentElement.clientHeight,
              de = this.document.documentElement.clientWidth;
            G + j > re
              ? ((X = "top"), (ne = "bottom"))
              : ((X = "bottom"), (ne = "top")),
              Z + F > de
                ? ((le = "end"), (se = "end"))
                : ((le = "start"), (se = "start"));
            const pe = { originX: le, originY: X, overlayX: se, overlayY: ne };
            L.positionStrategy = M.flexibleConnectedTo(
              this.timewindowPanelOrigin.elementRef
            ).withPositions([pe]);
          } else
            (L.minWidth = "100%"),
              (L.minHeight = "100%"),
              (L.positionStrategy = M.global()
                .top("0%")
                .left("0%")
                .right("0%")
                .bottom("0%"));
          const k = this.overlay.create(L);
          k.backdropClick().subscribe(() => {
            k.dispose();
          });
          const N = this._createTimewindowPanelInjector(k, {
              timewindow: (0, m.I8)(this.innerValue),
              historyOnly: this.historyOnly,
              quickIntervalOnly: this.quickIntervalOnly,
              aggregation: this.aggregation,
              timezone: this.timezone,
              isEdit: this.isEdit,
            }),
            B = k.attach(
              new i.ComponentPortal(
                o.TimewindowPanelComponent,
                this.viewContainerRef,
                N
              )
            );
          B.onDestroy(() => {
            B.instance.result &&
              ((this.innerValue = B.instance.result),
              (this.timewindowDisabled = this.isTimewindowDisabled()),
              this.updateDisplayValue(),
              this.notifyChanged());
          });
        }
        _createTimewindowPanelInjector(f, M) {
          const L = [
            { provide: o.TIMEWINDOW_PANEL_DATA, useValue: M },
            { provide: d.OverlayRef, useValue: f },
          ];
          return e.Injector.create({
            parent: this.viewContainerRef.injector,
            providers: L,
          });
        }
        onHistoryOnlyChanged() {
          return (
            !(
              !this.historyOnlyValue ||
              !this.innerValue ||
              this.innerValue.selectedTab === C._7.HISTORY
            ) &&
            ((this.innerValue.selectedTab = C._7.HISTORY),
            this.updateDisplayValue(),
            !0)
          );
        }
        registerOnChange(f) {
          this.propagateChange = f;
        }
        registerOnTouched(f) {}
        setDisabledState(f) {
          (this.disabled = f),
            (this.timewindowDisabled = this.isTimewindowDisabled());
        }
        writeValue(f) {
          (this.innerValue = (0, C.cs)(
            f,
            this.quickIntervalOnly,
            this.timeService
          )),
            (this.timewindowDisabled = this.isTimewindowDisabled()),
            this.onHistoryOnlyChanged()
              ? setTimeout(() => {
                  this.notifyChanged();
                })
              : this.updateDisplayValue();
        }
        notifyChanged() {
          this.propagateChange((0, C.MI)(this.innerValue));
        }
        updateDisplayValue() {
          if (this.innerValue.selectedTab !== C._7.REALTIME || this.historyOnly)
            if (
              ((this.innerValue.displayValue =
                !this.historyOnly || this.alwaysDisplayTypePrefix
                  ? this.translate.instant("timewindow.history") + " - "
                  : ""),
              this.innerValue.history.historyType === C.dT.LAST_INTERVAL)
            )
              this.innerValue.displayValue +=
                this.translate.instant("timewindow.last-prefix") +
                " " +
                this.millisecondsToTimeStringPipe.transform(
                  this.innerValue.history.timewindowMs
                );
            else if (this.innerValue.history.historyType === C.dT.INTERVAL)
              this.innerValue.displayValue += this.translate.instant(
                C.$Y.get(this.innerValue.history.quickInterval)
              );
            else {
              const f = this.datePipe.transform(
                  this.innerValue.history.fixedTimewindow.startTimeMs,
                  "yyyy-MM-dd HH:mm:ss"
                ),
                M = this.datePipe.transform(
                  this.innerValue.history.fixedTimewindow.endTimeMs,
                  "yyyy-MM-dd HH:mm:ss"
                );
              this.innerValue.displayValue += this.translate.instant(
                "timewindow.period",
                { startTime: f, endTime: M }
              );
            }
          else
            (this.innerValue.displayValue =
              this.translate.instant("timewindow.realtime") + " - "),
              this.innerValue.realtime.realtimeType === C.Xf.INTERVAL
                ? (this.innerValue.displayValue += this.translate.instant(
                    C.$Y.get(this.innerValue.realtime.quickInterval)
                  ))
                : (this.innerValue.displayValue +=
                    this.translate.instant("timewindow.last-prefix") +
                    " " +
                    this.millisecondsToTimeStringPipe.transform(
                      this.innerValue.realtime.timewindowMs
                    ));
          (0, m.nu)(this.innerValue.timezone) && "" !== this.innerValue.timezone
            ? ((this.innerValue.displayValue += " "),
              (this.innerValue.displayTimezoneAbbr = (0, C.kD)(
                this.innerValue.timezone
              ).abbr))
            : (this.innerValue.displayTimezoneAbbr = ""),
            this.cd.detectChanges();
        }
        hideLabel() {
          return (
            this.isToolbar && !this.breakpointObserver.isMatched(g.tr["gt-md"])
          );
        }
        isTimewindowDisabled() {
          return (
            this.disabled ||
            (!this.isEdit &&
              (!this.innerValue ||
                (this.innerValue.hideInterval &&
                  (!this.aggregation ||
                    (this.innerValue.hideAggregation &&
                      this.innerValue.hideAggInterval)))))
          );
        }
      }
      (S.ɵfac = function (f) {
        return new (f || S)(
          e.ɵɵdirectiveInject(h.TranslateService),
          e.ɵɵdirectiveInject(y.O),
          e.ɵɵdirectiveInject(a.MillisecondsToTimeStringPipe),
          e.ɵɵdirectiveInject(s.DatePipe),
          e.ɵɵdirectiveInject(d.Overlay),
          e.ɵɵdirectiveInject(e.ChangeDetectorRef),
          e.ɵɵdirectiveInject(e.ViewContainerRef),
          e.ɵɵdirectiveInject(p.BreakpointObserver),
          e.ɵɵdirectiveInject(s.DOCUMENT),
          e.ɵɵdirectiveInject(D.m9)
        );
      }),
        (S.ɵcmp = e.ɵɵdefineComponent({
          type: S,
          selectors: [["tb-timewindow"]],
          viewQuery: function (f, M) {
            if ((1 & f && e.ɵɵviewQuery(l, 5), 2 & f)) {
              let L;
              e.ɵɵqueryRefresh((L = e.ɵɵloadQuery())) &&
                (M.timewindowPanelOrigin = L.first);
            }
          },
          inputs: {
            historyOnly: "historyOnly",
            alwaysDisplayTypePrefix: "alwaysDisplayTypePrefix",
            quickIntervalOnly: "quickIntervalOnly",
            aggregation: "aggregation",
            timezone: "timezone",
            isToolbar: "isToolbar",
            asButton: "asButton",
            isEdit: "isEdit",
            direction: "direction",
            tooltipPosition: "tooltipPosition",
            disabled: "disabled",
          },
          features: [
            e.ɵɵProvidersFeature([
              {
                provide: n.NG_VALUE_ACCESSOR,
                useExisting: (0, e.forwardRef)(() => S),
                multi: !0,
              },
            ]),
          ],
          decls: 2,
          vars: 2,
          consts: [
            [
              "cdkOverlayOrigin",
              "",
              "type",
              "button",
              "mat-raised-button",
              "",
              "color",
              "primary",
              3,
              "disabled",
              "click",
              4,
              "ngIf",
            ],
            [
              "cdkOverlayOrigin",
              "",
              "class",
              "tb-timewindow",
              "fxLayout",
              "row",
              "fxLayoutAlign",
              "start center",
              4,
              "ngIf",
            ],
            [
              "cdkOverlayOrigin",
              "",
              "type",
              "button",
              "mat-raised-button",
              "",
              "color",
              "primary",
              3,
              "disabled",
              "click",
            ],
            ["timewindowPanelOrigin", "cdkOverlayOrigin"],
            [1, "material-icons"],
            [
              "cdkOverlayOrigin",
              "",
              "fxLayout",
              "row",
              "fxLayoutAlign",
              "start center",
              1,
              "tb-timewindow",
            ],
            [
              "mat-icon-button",
              "",
              "class",
              "tb-mat-32",
              "type",
              "button",
              3,
              "disabled",
              "matTooltip",
              "matTooltipPosition",
              "click",
              4,
              "ngIf",
            ],
            [3, "fxHide", "matTooltip", "matTooltipPosition", "click"],
            [3, "fxShow"],
            [1, "timezone-abbr"],
            [
              "mat-icon-button",
              "",
              "type",
              "button",
              1,
              "tb-mat-32",
              3,
              "disabled",
              "matTooltip",
              "matTooltipPosition",
              "click",
            ],
          ],
          template: function (f, M) {
            1 & f &&
              (e.ɵɵtemplate(0, T, 6, 2, "button", 0),
              e.ɵɵtemplate(1, b, 11, 10, "section", 1)),
              2 & f &&
                (e.ɵɵproperty("ngIf", M.asButton),
                e.ɵɵadvance(1),
                e.ɵɵproperty("ngIf", !M.asButton));
          },
          directives: [
            s.NgIf,
            _.MatButton,
            d.CdkOverlayOrigin,
            E.MatIcon,
            c.DefaultLayoutDirective,
            c.DefaultLayoutAlignDirective,
            v.DefaultShowHideDirective,
            I.MatTooltip,
          ],
          pipes: [h.TranslatePipe],
          styles: [
            '@charset "UTF-8";[_nghost-%COMP%]{min-width:52px;margin:8px 0}[_nghost-%COMP%]   section.tb-timewindow[_ngcontent-%COMP%]{min-height:32px;padding:0 6px}[_nghost-%COMP%]   section.tb-timewindow[_ngcontent-%COMP%]   span[_ngcontent-%COMP%]{overflow:hidden;text-overflow:ellipsis;white-space:nowrap;pointer-events:all;cursor:pointer}[_nghost-%COMP%]   section.tb-timewindow[_ngcontent-%COMP%]   .timezone-abbr[_ngcontent-%COMP%]{font-weight:500}',
          ],
        }));
    },
    74049: (ee, R, t) => {
      "use strict";
      t.r(R), t.d(R, { TimezoneSelectComponent: () => f });
      var e = t(37716),
        n = t(3679),
        a = t(25917),
        C = t(68307),
        s = t(88002),
        d = t(19773),
        o = t(78345),
        i = t(39490),
        g = t(21554),
        D = t(95341),
        y = t(41960),
        m = t(86710),
        r = t(29790),
        h = t(98295),
        p = t(35618),
        _ = t(83166),
        E = t(38583),
        c = t(51095),
        v = t(76627),
        I = t(72458),
        l = t(53883);
      const T = ["timezoneInput"];
      function O(M, L) {
        if (1 & M) {
          const k = e.ɵɵgetCurrentView();
          e.ɵɵelementStart(0, "button", 10),
            e.ɵɵlistener("mousedown", function () {
              e.ɵɵrestoreView(k);
              return (e.ɵɵnextContext().ignoreClosePanel = !0);
            })("click", function () {
              return e.ɵɵrestoreView(k), e.ɵɵnextContext().clear();
            }),
            e.ɵɵelementStart(1, "mat-icon", 11),
            e.ɵɵtext(2, "close"),
            e.ɵɵelementEnd(),
            e.ɵɵelementEnd();
        }
      }
      function w(M, L) {
        if (
          (1 & M &&
            (e.ɵɵelementStart(0, "mat-option", 12),
            e.ɵɵelement(1, "span", 13),
            e.ɵɵpipe(2, "highlight"),
            e.ɵɵelementEnd()),
          2 & M)
        ) {
          const k = L.$implicit,
            N = e.ɵɵnextContext();
          e.ɵɵproperty("value", k),
            e.ɵɵadvance(1),
            e.ɵɵproperty(
              "innerHTML",
              e.ɵɵpipeBind2(2, 2, N.displayTimezoneFn(k), N.searchText),
              e.ɵɵsanitizeHtml
            );
        }
      }
      const b = function (M) {
        return { timezone: M };
      };
      function S(M, L) {
        if (
          (1 & M &&
            (e.ɵɵelementStart(0, "mat-option", 12),
            e.ɵɵelementStart(1, "span"),
            e.ɵɵtext(2),
            e.ɵɵpipe(3, "async"),
            e.ɵɵelementEnd(),
            e.ɵɵelementEnd()),
          2 & M)
        ) {
          const k = e.ɵɵnextContext();
          e.ɵɵproperty("value", null),
            e.ɵɵadvance(2),
            e.ɵɵtextInterpolate1(
              " ",
              e.ɵɵpipeBind1(
                3,
                2,
                k.translate.get(
                  "timezone.no-timezones-matching",
                  e.ɵɵpureFunction1(4, b, k.searchText)
                )
              ),
              " "
            );
        }
      }
      function u(M, L) {
        1 & M &&
          (e.ɵɵelementStart(0, "mat-error"),
          e.ɵɵtext(1),
          e.ɵɵpipe(2, "translate"),
          e.ɵɵelementEnd()),
          2 & M &&
            (e.ɵɵadvance(1),
            e.ɵɵtextInterpolate1(
              " ",
              e.ɵɵpipeBind1(2, 1, "timezone.timezone-required"),
              " "
            ));
      }
      class f {
        constructor(L, k, N, B) {
          (this.store = L),
            (this.translate = k),
            (this.ngZone = N),
            (this.fb = B),
            (this.defaultTimezoneId = null),
            (this.appearance = "legacy"),
            (this.searchText = ""),
            (this.ignoreClosePanel = !1),
            (this.dirty = !1),
            (this.propagateChange = (j) => {}),
            (this.selectTimezoneFormGroup = this.fb.group({
              timezone: [null],
            }));
        }
        set defaultTimezone(L) {
          this.defaultTimezoneId !== L && (this.defaultTimezoneId = L);
        }
        get required() {
          return this.requiredValue;
        }
        set required(L) {
          this.requiredValue = (0, i.coerceBooleanProperty)(L);
        }
        get userTimezoneByDefault() {
          return this.userTimezoneByDefaultValue;
        }
        set userTimezoneByDefault(L) {
          this.userTimezoneByDefaultValue = (0, i.coerceBooleanProperty)(L);
        }
        get localBrowserTimezonePlaceholderOnEmpty() {
          return this.localBrowserTimezonePlaceholderOnEmptyValue;
        }
        set localBrowserTimezonePlaceholderOnEmpty(L) {
          this.localBrowserTimezonePlaceholderOnEmptyValue = (0,
          i.coerceBooleanProperty)(L);
        }
        registerOnChange(L) {
          this.propagateChange = L;
        }
        registerOnTouched(L) {}
        ngOnInit() {
          this.filteredTimezones = this.selectTimezoneFormGroup
            .get("timezone")
            .valueChanges.pipe(
              (0, C.b)((L) => {
                let k;
                (k = "string" != typeof L && L ? L.id : null),
                  this.updateView(k),
                  null === L && this.clear();
              }),
              (0, s.U)((L) => (L ? ("string" == typeof L ? L : L.name) : "")),
              (0, d.zg)((L) => this.fetchTimezones(L)),
              (0, o.B)()
            );
        }
        ngAfterViewInit() {}
        setDisabledState(L) {
          (this.disabled = L),
            this.disabled
              ? this.selectTimezoneFormGroup.disable({ emitEvent: !1 })
              : this.selectTimezoneFormGroup.enable({ emitEvent: !1 });
        }
        writeValue(L) {
          this.searchText = "";
          const k = (0, D.kD)(
            L,
            this.defaultTimezoneId,
            this.userTimezoneByDefaultValue
          );
          null !== k
            ? (this.selectTimezoneFormGroup
                .get("timezone")
                .patchValue(k, { emitEvent: !1 }),
              k.id !== L
                ? setTimeout(() => {
                    this.updateView(k.id);
                  }, 0)
                : (this.modelValue = L))
            : ((this.modelValue = null),
              this.localBrowserTimezonePlaceholderOnEmptyValue
                ? this.selectTimezoneFormGroup
                    .get("timezone")
                    .patchValue(this.getLocalBrowserTimezoneInfoPlaceholder(), {
                      emitEvent: !1,
                    })
                : this.selectTimezoneFormGroup
                    .get("timezone")
                    .patchValue("", { emitEvent: !1 })),
            (this.dirty = !0);
        }
        onFocus() {
          this.dirty &&
            (this.selectTimezoneFormGroup
              .get("timezone")
              .updateValueAndValidity({ onlySelf: !0, emitEvent: !0 }),
            (this.dirty = !1));
        }
        onPanelClosed() {
          if (this.ignoreClosePanel) this.ignoreClosePanel = !1;
          else if (!this.modelValue)
            if (this.defaultTimezoneId || this.userTimezoneByDefaultValue) {
              const L = (0, D.kD)(
                this.defaultTimezoneId,
                this.defaultTimezoneId,
                this.userTimezoneByDefaultValue
              );
              null !== L &&
                this.ngZone.run(() => {
                  this.selectTimezoneFormGroup
                    .get("timezone")
                    .reset(L, { emitEvent: !0 });
                });
            } else
              this.localBrowserTimezonePlaceholderOnEmptyValue &&
                this.ngZone.run(() => {
                  this.selectTimezoneFormGroup
                    .get("timezone")
                    .reset(this.getLocalBrowserTimezoneInfoPlaceholder(), {
                      emitEvent: !0,
                    });
                });
        }
        updateView(L) {
          this.modelValue !== L &&
            ((this.modelValue = L), this.propagateChange(this.modelValue));
        }
        displayTimezoneFn(L) {
          return L ? `${L.name} (${L.offset})` : void 0;
        }
        fetchTimezones(L) {
          return (
            (this.searchText = L),
            L && L.length
              ? (0, a.of)(
                  this.loadTimezones().filter((k) =>
                    k.name.toLowerCase().includes(L.toLowerCase())
                  )
                )
              : (0, a.of)(this.loadTimezones())
          );
        }
        clear() {
          this.selectTimezoneFormGroup
            .get("timezone")
            .patchValue("", { emitEvent: !0 }),
            setTimeout(() => {
              this.timezoneInputTrigger.openPanel();
            }, 0);
        }
        loadTimezones() {
          return (
            this.timezones ||
              ((this.timezones = []),
              this.localBrowserTimezonePlaceholderOnEmptyValue &&
                this.timezones.push(
                  this.getLocalBrowserTimezoneInfoPlaceholder()
                ),
              this.timezones.push(...(0, D.MW)())),
            this.timezones
          );
        }
        getLocalBrowserTimezoneInfoPlaceholder() {
          return (
            this.localBrowserTimezoneInfoPlaceholder ||
              ((this.localBrowserTimezoneInfoPlaceholder = (0, y.I8)(
                (0, D.Xc)()
              )),
              (this.localBrowserTimezoneInfoPlaceholder.id = null),
              (this.localBrowserTimezoneInfoPlaceholder.name =
                this.translate.instant("timezone.browser-time"))),
            this.localBrowserTimezoneInfoPlaceholder
          );
        }
      }
      (f.ɵfac = function (L) {
        return new (L || f)(
          e.ɵɵdirectiveInject(m.Store),
          e.ɵɵdirectiveInject(r.TranslateService),
          e.ɵɵdirectiveInject(e.NgZone),
          e.ɵɵdirectiveInject(n.FormBuilder)
        );
      }),
        (f.ɵcmp = e.ɵɵdefineComponent({
          type: f,
          selectors: [["tb-timezone-select"]],
          viewQuery: function (L, k) {
            if (
              (1 & L && e.ɵɵviewQuery(T, 7, g.MatAutocompleteTrigger), 2 & L)
            ) {
              let N;
              e.ɵɵqueryRefresh((N = e.ɵɵloadQuery())) &&
                (k.timezoneInputTrigger = N.first);
            }
          },
          inputs: {
            appearance: "appearance",
            defaultTimezone: "defaultTimezone",
            required: "required",
            userTimezoneByDefault: "userTimezoneByDefault",
            localBrowserTimezonePlaceholderOnEmpty:
              "localBrowserTimezonePlaceholderOnEmpty",
            disabled: "disabled",
          },
          features: [
            e.ɵɵProvidersFeature([
              {
                provide: n.NG_VALUE_ACCESSOR,
                useExisting: (0, e.forwardRef)(() => f),
                multi: !0,
              },
            ]),
          ],
          decls: 14,
          vars: 16,
          consts: [
            ["fxFlex", "", 1, "mat-block", 3, "formGroup", "appearance"],
            ["translate", ""],
            [
              "matInput",
              "",
              "type",
              "text",
              "formControlName",
              "timezone",
              3,
              "placeholder",
              "required",
              "matAutocomplete",
              "focusin",
            ],
            ["timezoneInput", ""],
            [
              "type",
              "button",
              "style",
              "margin-right: 1px",
              "matSuffix",
              "",
              "mat-button",
              "",
              "mat-icon-button",
              "",
              "aria-label",
              "Clear",
              3,
              "mousedown",
              "click",
              4,
              "ngIf",
            ],
            [
              1,
              "tb-autocomplete",
              3,
              "displayWith",
              "closed",
              "optionSelected",
            ],
            ["timezoneAutocomplete", "matAutocomplete"],
            [3, "value", 4, "ngFor", "ngForOf"],
            [3, "value", 4, "ngIf"],
            [4, "ngIf"],
            [
              "type",
              "button",
              "matSuffix",
              "",
              "mat-button",
              "",
              "mat-icon-button",
              "",
              "aria-label",
              "Clear",
              2,
              "margin-right",
              "1px",
              3,
              "mousedown",
              "click",
            ],
            [1, "material-icons"],
            [3, "value"],
            [3, "innerHTML"],
          ],
          template: function (L, k) {
            if (
              (1 & L &&
                (e.ɵɵelementStart(0, "mat-form-field", 0),
                e.ɵɵelementStart(1, "mat-label", 1),
                e.ɵɵtext(2, "timezone.timezone"),
                e.ɵɵelementEnd(),
                e.ɵɵelementStart(3, "input", 2, 3),
                e.ɵɵlistener("focusin", function () {
                  return k.onFocus();
                }),
                e.ɵɵpipe(5, "translate"),
                e.ɵɵelementEnd(),
                e.ɵɵtemplate(6, O, 3, 0, "button", 4),
                e.ɵɵelementStart(7, "mat-autocomplete", 5, 6),
                e.ɵɵlistener("closed", function () {
                  return k.onPanelClosed();
                })("optionSelected", function () {
                  return (k.ignoreClosePanel = !0);
                }),
                e.ɵɵtemplate(9, w, 3, 5, "mat-option", 7),
                e.ɵɵpipe(10, "async"),
                e.ɵɵtemplate(11, S, 4, 6, "mat-option", 8),
                e.ɵɵpipe(12, "async"),
                e.ɵɵelementEnd(),
                e.ɵɵtemplate(13, u, 3, 3, "mat-error", 9),
                e.ɵɵelementEnd()),
              2 & L)
            ) {
              const N = e.ɵɵreference(8);
              let B;
              e.ɵɵproperty("formGroup", k.selectTimezoneFormGroup)(
                "appearance",
                k.appearance
              ),
                e.ɵɵadvance(3),
                e.ɵɵpropertyInterpolate(
                  "placeholder",
                  e.ɵɵpipeBind1(5, 10, "timezone.select-timezone")
                ),
                e.ɵɵproperty("required", k.required)("matAutocomplete", N),
                e.ɵɵadvance(3),
                e.ɵɵproperty(
                  "ngIf",
                  k.selectTimezoneFormGroup.get("timezone").value && !k.disabled
                ),
                e.ɵɵadvance(1),
                e.ɵɵproperty("displayWith", k.displayTimezoneFn),
                e.ɵɵadvance(2),
                e.ɵɵproperty(
                  "ngForOf",
                  e.ɵɵpipeBind1(10, 12, k.filteredTimezones)
                ),
                e.ɵɵadvance(2),
                e.ɵɵproperty(
                  "ngIf",
                  !(
                    null != (B = e.ɵɵpipeBind1(12, 14, k.filteredTimezones)) &&
                    B.length
                  )
                ),
                e.ɵɵadvance(2),
                e.ɵɵproperty(
                  "ngIf",
                  k.selectTimezoneFormGroup.get("timezone").hasError("required")
                );
            }
          },
          directives: [
            h.MatFormField,
            p.DefaultFlexDirective,
            n.NgControlStatusGroup,
            n.FormGroupDirective,
            h.MatLabel,
            r.TranslateDirective,
            _.MatInput,
            n.DefaultValueAccessor,
            g.MatAutocompleteTrigger,
            n.NgControlStatus,
            n.FormControlName,
            n.RequiredValidator,
            E.NgIf,
            g.MatAutocomplete,
            E.NgForOf,
            c.MatButton,
            h.MatSuffix,
            v.MatIcon,
            I.MatOption,
            h.MatError,
          ],
          pipes: [r.TranslatePipe, E.AsyncPipe, l.HighlightPipe],
          encapsulation: 2,
        }));
    },
    99271: (ee, R, t) => {
      "use strict";
      t.r(R),
        t.d(R, {
          ToastDirective: () => E,
          toastAnimations: () => c,
          TbSnackBarComponent: () => v,
        });
      var e = t(37716),
        n = t(77001),
        a = t(91645),
        C = t(82068),
        s = t(17238),
        d = t(41960),
        o = t(65072),
        i = t(35618),
        g = t(38583),
        D = t(88030),
        y = t(51095),
        m = t(29790),
        r = t(5609);
      const h = ["actionButton"],
        p = function (I, l) {
          return { value: I, params: l };
        },
        _ = function (I, l, T, O) {
          return {
            "error-toast": I,
            "warn-toast": l,
            "success-toast": T,
            "info-toast": O,
          };
        };
      class E {
        constructor(l, T, O, w, b, S, u, f) {
          (this.elementRef = l),
            (this.viewContainerRef = T),
            (this.notificationService = O),
            (this.componentFactoryResolver = w),
            (this.snackBar = b),
            (this.ngZone = S),
            (this.breakpointObserver = u),
            (this.cd = f),
            (this.toastTarget = "root"),
            (this.notificationSubscription = null),
            (this.hideNotificationSubscription = null),
            (this.snackBarRef = null),
            (this.currentMessage = null),
            (this.dismissTimeout = null);
        }
        ngAfterViewInit() {
          (this.notificationSubscription = this.notificationService
            .getNotification()
            .subscribe((l) => {
              if (this.shouldDisplayMessage(l)) {
                this.currentMessage = l;
                const T = this.breakpointObserver.isMatched(C.tr["gt-sm"]);
                T && "root" !== this.toastTarget
                  ? this.showToastPanel(l)
                  : this.showSnackBar(l, T);
              }
            })),
            (this.hideNotificationSubscription = this.notificationService
              .getHideNotification()
              .subscribe((l) => {
                if (l) {
                  const T = l.target || "root";
                  this.toastTarget === T &&
                    this.ngZone.run(() => {
                      this.snackBarRef && this.snackBarRef.dismiss(),
                        this.toastComponentRef &&
                          this.toastComponentRef.instance.actionButton._elementRef.nativeElement.click();
                    });
                }
              }));
        }
        showToastPanel(l) {
          this.ngZone.run(() => {
            this.snackBarRef && this.snackBarRef.dismiss(),
              this.toastComponentRef &&
                (this.viewContainerRef.detach(0),
                this.toastComponentRef.destroy());
            let T = ["tb-toast-panel", "toast-panel"];
            l.panelClass &&
              ("string" == typeof l.panelClass
                ? T.push(l.panelClass)
                : l.panelClass.length && (T = T.concat(l.panelClass)));
            const O = l.horizontalPosition || "left",
              w = l.verticalPosition || "top";
            "start" === O || "left" === O
              ? T.push("left")
              : "end" === O || "right" === O
              ? T.push("right")
              : T.push("h-center"),
              "top" === w ? T.push("top") : T.push("bottom");
            const b = this.componentFactoryResolver.resolveComponentFactory(v),
              S = {
                notification: l,
                panelClass: T,
                destroyToastComponent: () => {
                  this.viewContainerRef.detach(0),
                    this.toastComponentRef.destroy();
                },
              },
              u = [{ provide: n.MAT_SNACK_BAR_DATA, useValue: S }],
              f = e.Injector.create({
                parent: this.viewContainerRef.injector,
                providers: u,
              });
            (this.toastComponentRef = this.viewContainerRef.createComponent(
              b,
              0,
              f
            )),
              this.cd.detectChanges(),
              l.duration &&
                l.duration > 0 &&
                (null !== this.dismissTimeout &&
                  (clearTimeout(this.dismissTimeout),
                  (this.dismissTimeout = null)),
                (this.dismissTimeout = setTimeout(() => {
                  this.toastComponentRef &&
                    this.toastComponentRef.instance.actionButton._elementRef.nativeElement.click(),
                    (this.dismissTimeout = null);
                }, l.duration + 500))),
              this.toastComponentRef.onDestroy(() => {
                null !== this.dismissTimeout &&
                  (clearTimeout(this.dismissTimeout),
                  (this.dismissTimeout = null)),
                  (this.toastComponentRef = null),
                  (this.currentMessage = null);
              });
          });
        }
        showSnackBar(l, T) {
          this.ngZone.run(() => {
            this.snackBarRef && this.snackBarRef.dismiss();
            const O = {
                notification: l,
                parent: this.elementRef,
                panelClass: [],
                destroyToastComponent: () => {},
              },
              w = {
                horizontalPosition: l.horizontalPosition || "left",
                verticalPosition: T ? l.verticalPosition || "top" : "bottom",
                viewContainerRef: this.viewContainerRef,
                duration: l.duration,
                panelClass: l.panelClass,
                data: O,
              };
            (this.snackBarRef = this.snackBar.openFromComponent(v, w)),
              l.duration &&
                l.duration > 0 &&
                l.forceDismiss &&
                (null !== this.dismissTimeout &&
                  (clearTimeout(this.dismissTimeout),
                  (this.dismissTimeout = null)),
                (this.dismissTimeout = setTimeout(() => {
                  this.snackBarRef &&
                    this.snackBarRef.instance.actionButton._elementRef.nativeElement.click(),
                    (this.dismissTimeout = null);
                }, l.duration))),
              this.snackBarRef.afterDismissed().subscribe(() => {
                null !== this.dismissTimeout &&
                  (clearTimeout(this.dismissTimeout),
                  (this.dismissTimeout = null)),
                  (this.snackBarRef = null),
                  (this.currentMessage = null);
              });
          });
        }
        shouldDisplayMessage(l) {
          if (l && l.message) {
            const T = l.target || "root";
            if (
              this.toastTarget === T &&
              (!this.currentMessage ||
                this.currentMessage.message !== l.message ||
                this.currentMessage.type !== l.type)
            )
              return !0;
          }
          return !1;
        }
        ngOnDestroy() {
          this.toastComponentRef &&
            (this.viewContainerRef.detach(0), this.toastComponentRef.destroy()),
            this.notificationSubscription &&
              this.notificationSubscription.unsubscribe(),
            this.hideNotificationSubscription &&
              this.hideNotificationSubscription.unsubscribe();
        }
      }
      (E.ɵfac = function (l) {
        return new (l || E)(
          e.ɵɵdirectiveInject(e.ElementRef),
          e.ɵɵdirectiveInject(e.ViewContainerRef),
          e.ɵɵdirectiveInject(a.g),
          e.ɵɵdirectiveInject(e.ComponentFactoryResolver),
          e.ɵɵdirectiveInject(n.MatSnackBar),
          e.ɵɵdirectiveInject(e.NgZone),
          e.ɵɵdirectiveInject(o.BreakpointObserver),
          e.ɵɵdirectiveInject(e.ChangeDetectorRef)
        );
      }),
        (E.ɵdir = e.ɵɵdefineDirective({
          type: E,
          selectors: [["", "tb-toast", ""]],
          inputs: { toastTarget: "toastTarget" },
        }));
      const c = {
        showHideToast: (0, s.trigger)("showHideAnimation", [
          (0, s.state)(
            "in",
            (0, s.style)({ transform: "scale(1)", opacity: 1 })
          ),
          (0, s.transition)("void => opened", [
            (0, s.style)({ transform: "scale(0)", opacity: 0 }),
            (0, s.animate)("{{ open }}ms"),
          ]),
          (0, s.transition)(
            "opened => closing",
            (0, s.animate)(
              "{{ close }}ms",
              (0, s.style)({ transform: "scale(0)", opacity: 0 })
            )
          ),
        ]),
      };
      class v {
        constructor(l, T, O) {
          (this.data = l),
            (this.elementRef = T),
            (this.snackBarRef = O),
            (this.parentScrollSubscription = null),
            (this.animationParams = { open: 100, close: 100 }),
            (this.animationState = this.snackBarRef ? "default" : "opened"),
            (this.notification = l.notification);
        }
        get panelClass() {
          return this.data.panelClass;
        }
        ngAfterViewInit() {
          this.snackBarRef &&
            ((this.parentEl = this.data.parent.nativeElement),
            (this.snackBarContainerEl = r(
              this.elementRef.nativeElement
            ).closest("snack-bar-container")[0]),
            (this.snackBarContainerEl.style.position = "absolute"),
            this.updateContainerRect(),
            this.updatePosition(
              this.snackBarRef.containerInstance.snackBarConfig
            ),
            (this.parentScrollSubscription = (0, d.lg)(this.parentEl).subscribe(
              () => {
                this.updateContainerRect();
              }
            )));
        }
        updatePosition(l) {
          const T = "rtl" === l.direction,
            O =
              "left" === l.horizontalPosition ||
              ("start" === l.horizontalPosition && !T) ||
              ("end" === l.horizontalPosition && T),
            w = !O && "center" !== l.horizontalPosition;
          (this.snackBarContainerEl.style.justifyContent = O
            ? "flex-start"
            : w
            ? "flex-end"
            : "center"),
            "top" === l.verticalPosition
              ? (this.snackBarContainerEl.style.alignItems = "flex-start")
              : (this.snackBarContainerEl.style.alignItems = "flex-end");
        }
        updateContainerRect() {
          const l = this.parentEl.getBoundingClientRect();
          (this.snackBarContainerEl.style.top = l.top + "px"),
            (this.snackBarContainerEl.style.left = l.left + "px"),
            (this.snackBarContainerEl.style.width = l.width + "px"),
            (this.snackBarContainerEl.style.height = l.height + "px");
        }
        ngOnDestroy() {
          this.parentScrollSubscription &&
            this.parentScrollSubscription.unsubscribe();
        }
        action(l) {
          l.stopPropagation(),
            this.snackBarRef
              ? this.snackBarRef.dismissWithAction()
              : (this.animationState = "closing");
        }
        onHideFinished(l) {
          const { toState: T } = l,
            O = "closing" === T,
            w = "closing" === this.animationState;
          O && w && this.data.destroyToastComponent();
        }
      }
      (v.ɵfac = function (l) {
        return new (l || v)(
          e.ɵɵdirectiveInject(n.MAT_SNACK_BAR_DATA),
          e.ɵɵdirectiveInject(e.ElementRef),
          e.ɵɵdirectiveInject(n.MatSnackBarRef, 8)
        );
      }),
        (v.ɵcmp = e.ɵɵdefineComponent({
          type: v,
          selectors: [["tb-snack-bar-component"]],
          viewQuery: function (l, T) {
            if ((1 & l && e.ɵɵviewQuery(h, 7), 2 & l)) {
              let O;
              e.ɵɵqueryRefresh((O = e.ɵɵloadQuery())) &&
                (T.actionButton = O.first);
            }
          },
          hostVars: 2,
          hostBindings: function (l, T) {
            2 & l && e.ɵɵclassMap(T.panelClass);
          },
          decls: 6,
          vars: 14,
          consts: [
            [
              "fxLayout",
              "row",
              "fxLayoutAlign",
              "start center",
              1,
              "tb-toast",
              3,
              "ngClass",
            ],
            [1, "toast-text", 3, "innerHTML"],
            ["type", "button", "mat-button", "", 3, "click"],
            ["actionButton", ""],
          ],
          template: function (l, T) {
            1 & l &&
              (e.ɵɵelementStart(0, "div", 0),
              e.ɵɵlistener("@showHideAnimation.done", function (w) {
                return T.onHideFinished(w);
              }),
              e.ɵɵelement(1, "div", 1),
              e.ɵɵelementStart(2, "button", 2, 3),
              e.ɵɵlistener("click", function (w) {
                return T.action(w);
              }),
              e.ɵɵtext(4),
              e.ɵɵpipe(5, "translate"),
              e.ɵɵelementEnd(),
              e.ɵɵelementEnd()),
              2 & l &&
                (e.ɵɵproperty(
                  "@showHideAnimation",
                  e.ɵɵpureFunction2(6, p, T.animationState, T.animationParams)
                )(
                  "ngClass",
                  e.ɵɵpureFunction4(
                    9,
                    _,
                    "error" === T.notification.type,
                    "warn" === T.notification.type,
                    "success" === T.notification.type,
                    "info" === T.notification.type
                  )
                ),
                e.ɵɵadvance(1),
                e.ɵɵproperty(
                  "innerHTML",
                  T.notification.message,
                  e.ɵɵsanitizeHtml
                ),
                e.ɵɵadvance(3),
                e.ɵɵtextInterpolate(e.ɵɵpipeBind1(5, 4, "action.close")));
          },
          directives: [
            i.DefaultLayoutDirective,
            i.DefaultLayoutAlignDirective,
            g.NgClass,
            D.DefaultClassDirective,
            y.MatButton,
          ],
          pipes: [m.TranslatePipe],
          styles: [
            '@charset "UTF-8";[_nghost-%COMP%]{display:inline-block;pointer-events:all}.toast-panel[_nghost-%COMP%]{position:absolute;top:0;bottom:0;left:0;right:0;z-index:1000;display:flex}.toast-panel.left[_nghost-%COMP%]{justify-content:flex-start}.toast-panel.right[_nghost-%COMP%]{justify-content:flex-end}.toast-panel.top[_nghost-%COMP%]{align-items:flex-start}.toast-panel.bottom[_nghost-%COMP%]{align-items:flex-end}.toast-panel.h-center[_nghost-%COMP%]{justify-content:center}.toast-panel.v-center[_nghost-%COMP%]{align-items:center}[_nghost-%COMP%]   .tb-toast[_ngcontent-%COMP%]{box-shadow:0 3px 5px -1px #0003,0 6px 10px #00000024,0 1px 18px #0000001f;color:#fff;font-size:18px;border-radius:4px;padding:0 18px;margin:8px}[_nghost-%COMP%]   .tb-toast[_ngcontent-%COMP%]   .toast-text[_ngcontent-%COMP%]{padding:0 6px;width:100%}[_nghost-%COMP%]   .tb-toast[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]{margin:6px 0 6px 12px}[_nghost-%COMP%]   .tb-toast.info-toast[_ngcontent-%COMP%]{background:#323232}[_nghost-%COMP%]   .tb-toast.warn-toast[_ngcontent-%COMP%]{background:#dc6d1b}[_nghost-%COMP%]   .tb-toast.error-toast[_ngcontent-%COMP%]{background:#800000}[_nghost-%COMP%]   .tb-toast.success-toast[_ngcontent-%COMP%]{background:#008000}',
          ],
          data: { animation: [c.showHideToast] },
        }));
    },
    95129: (ee, R, t) => {
      "use strict";
      t.d(R, { e: () => n, w: () => a });
      var e = t(37716);
      const n = new e.InjectionToken("HELP_MARKDOWN_COMPONENT_TOKEN"),
        a = new e.InjectionToken("SHARED_MODULE_TOKEN");
    },
    84529: (ee, R, t) => {
      "use strict";
      t.r(R), t.d(R, { UserMenuComponent: () => v });
      var e = t(37716),
        n = t(26311),
        a = t(86710),
        C = t(54787),
        s = t(88002),
        d = t(88951),
        o = t(39895),
        i = t(35618),
        g = t(38583),
        D = t(51095),
        y = t(33935),
        m = t(76627),
        r = t(88030),
        h = t(29790);
      function p(I, l) {
        if (
          (1 & I &&
            (e.ɵɵelementStart(0, "span", 12), e.ɵɵtext(1), e.ɵɵelementEnd()),
          2 & I)
        ) {
          const T = l.$implicit;
          e.ɵɵadvance(1), e.ɵɵtextInterpolate(T);
        }
      }
      function _(I, l) {
        if (
          (1 & I &&
            (e.ɵɵelementStart(0, "span", 13),
            e.ɵɵtext(1),
            e.ɵɵpipe(2, "translate"),
            e.ɵɵelementEnd()),
          2 & I)
        ) {
          const T = l.$implicit;
          e.ɵɵadvance(1), e.ɵɵtextInterpolate(e.ɵɵpipeBind1(2, 1, T));
        }
      }
      function E(I, l) {
        if (
          (1 & I &&
            (e.ɵɵelementStart(0, "div", 7),
            e.ɵɵelementStart(1, "mat-icon", 8),
            e.ɵɵtext(2, "account_circle"),
            e.ɵɵelementEnd(),
            e.ɵɵelementStart(3, "div", 9),
            e.ɵɵtemplate(4, p, 2, 1, "span", 10),
            e.ɵɵpipe(5, "async"),
            e.ɵɵtemplate(6, _, 3, 3, "span", 11),
            e.ɵɵpipe(7, "async"),
            e.ɵɵelementEnd(),
            e.ɵɵelementEnd()),
          2 & I)
        ) {
          const T = e.ɵɵnextContext();
          e.ɵɵadvance(4),
            e.ɵɵproperty("ngIf", e.ɵɵpipeBind1(5, 2, T.userDisplayName$)),
            e.ɵɵadvance(2),
            e.ɵɵproperty("ngIf", e.ɵɵpipeBind1(7, 4, T.authorityName$));
        }
      }
      function c(I, l) {
        if (1 & I) {
          const T = e.ɵɵgetCurrentView();
          e.ɵɵelementStart(0, "div", 14),
            e.ɵɵelementStart(1, "button", 15),
            e.ɵɵlistener("click", function () {
              return e.ɵɵrestoreView(T), e.ɵɵnextContext().openProfile();
            }),
            e.ɵɵelementStart(2, "mat-icon", 3),
            e.ɵɵtext(3, "account_circle"),
            e.ɵɵelementEnd(),
            e.ɵɵelementStart(4, "span", 16),
            e.ɵɵtext(5, "home.profile"),
            e.ɵɵelementEnd(),
            e.ɵɵelementEnd(),
            e.ɵɵelementStart(6, "button", 15),
            e.ɵɵlistener("click", function () {
              return e.ɵɵrestoreView(T), e.ɵɵnextContext().openSecurity();
            }),
            e.ɵɵelementStart(7, "mat-icon", 3),
            e.ɵɵtext(8, "lock"),
            e.ɵɵelementEnd(),
            e.ɵɵelementStart(9, "span", 16),
            e.ɵɵtext(10, "security.security"),
            e.ɵɵelementEnd(),
            e.ɵɵelementEnd(),
            e.ɵɵelementStart(11, "button", 15),
            e.ɵɵlistener("click", function () {
              return e.ɵɵrestoreView(T), e.ɵɵnextContext().logout();
            }),
            e.ɵɵelementStart(12, "mat-icon", 3),
            e.ɵɵtext(13, "exit_to_app"),
            e.ɵɵelementEnd(),
            e.ɵɵelementStart(14, "span", 16),
            e.ɵɵtext(15, "home.logout"),
            e.ɵɵelementEnd(),
            e.ɵɵelementEnd(),
            e.ɵɵelementEnd();
        }
      }
      class v {
        constructor(l, T, O) {
          (this.store = l),
            (this.router = T),
            (this.authService = O),
            (this.authorities = n.W),
            (this.authority$ = this.store.pipe(
              (0, a.select)(C.rk),
              (0, s.U)((w) => (w ? w.authority : n.W.ANONYMOUS))
            )),
            (this.authorityName$ = this.store.pipe(
              (0, a.select)(C.uy),
              (0, s.U)((w) => this.getAuthorityName(w))
            )),
            (this.userDisplayName$ = this.store.pipe(
              (0, a.select)(C.uy),
              (0, s.U)((w) => this.getUserDisplayName(w))
            ));
        }
        ngOnInit() {}
        ngOnDestroy() {}
        getAuthorityName(l) {
          let T = null;
          if (l)
            switch (l.authority) {
              case n.W.SYS_ADMIN:
                T = "user.sys-admin";
                break;
              case n.W.TENANT_ADMIN:
                T = "user.tenant-admin";
                break;
              case n.W.CUSTOMER_USER:
                T = "user.customer";
            }
          return T;
        }
        getUserDisplayName(l) {
          let T = "";
          return (
            l &&
              ((l.firstName && l.firstName.length > 0) ||
              (l.lastName && l.lastName.length > 0)
                ? (l.firstName && (T += l.firstName),
                  l.lastName && (T.length > 0 && (T += " "), (T += l.lastName)))
                : (T = l.email)),
            T
          );
        }
        openProfile() {
          this.router.navigate(["profile"]);
        }
        openSecurity() {
          this.router.navigate(["security"]);
        }
        logout() {
          this.authService.logout();
        }
      }
      (v.ɵfac = function (l) {
        return new (l || v)(
          e.ɵɵdirectiveInject(a.Store),
          e.ɵɵdirectiveInject(o.Router),
          e.ɵɵdirectiveInject(d.e)
        );
      }),
        (v.ɵcmp = e.ɵɵdefineComponent({
          type: v,
          selectors: [["tb-user-menu"]],
          inputs: { displayUserInfo: "displayUserInfo" },
          decls: 9,
          vars: 5,
          consts: [
            ["fxLayout", "row"],
            [
              "fxHide.lt-lg",
              "",
              "class",
              "tb-user-info",
              "fxLayout",
              "row",
              4,
              "ngIf",
            ],
            ["mat-button", "", "mat-icon-button", "", 3, "matMenuTriggerFor"],
            [1, "material-icons"],
            ["xPosition", "before"],
            ["userMenu", "matMenu"],
            ["class", "tb-user-menu-items", 4, "ngIf"],
            ["fxHide.lt-lg", "", "fxLayout", "row", 1, "tb-user-info"],
            [1, "material-icons", "tb-mini-avatar"],
            ["fxLayout", "column", "fxLayoutAlign", "center"],
            ["class", "tb-user-display-name", 4, "ngIf"],
            ["class", "tb-user-authority", 4, "ngIf"],
            [1, "tb-user-display-name"],
            [1, "tb-user-authority"],
            [1, "tb-user-menu-items"],
            ["mat-menu-item", "", 3, "click"],
            ["translate", ""],
          ],
          template: function (l, T) {
            if (
              (1 & l &&
                (e.ɵɵelementStart(0, "section", 0),
                e.ɵɵtemplate(1, E, 8, 6, "div", 1),
                e.ɵɵelementStart(2, "button", 2),
                e.ɵɵelementStart(3, "mat-icon", 3),
                e.ɵɵtext(4, "more_vert"),
                e.ɵɵelementEnd(),
                e.ɵɵelementEnd(),
                e.ɵɵelementStart(5, "mat-menu", 4, 5),
                e.ɵɵtemplate(7, c, 16, 0, "div", 6),
                e.ɵɵpipe(8, "async"),
                e.ɵɵelementEnd(),
                e.ɵɵelementEnd()),
              2 & l)
            ) {
              const O = e.ɵɵreference(6);
              e.ɵɵadvance(1),
                e.ɵɵproperty("ngIf", T.displayUserInfo),
                e.ɵɵadvance(1),
                e.ɵɵproperty("matMenuTriggerFor", O),
                e.ɵɵadvance(5),
                e.ɵɵproperty("ngIf", e.ɵɵpipeBind1(8, 3, T.authority$));
            }
          },
          directives: [
            i.DefaultLayoutDirective,
            g.NgIf,
            D.MatButton,
            y.MatMenuTrigger,
            m.MatIcon,
            y.MatMenu,
            r.DefaultShowHideDirective,
            i.DefaultLayoutAlignDirective,
            y.MatMenuItem,
            h.TranslateDirective,
          ],
          pipes: [g.AsyncPipe, h.TranslatePipe],
          styles: [
            '@charset "UTF-8";[_nghost-%COMP%]   div.tb-user-info[_ngcontent-%COMP%]{line-height:1.5}[_nghost-%COMP%]   div.tb-user-info[_ngcontent-%COMP%]   span[_ngcontent-%COMP%]{text-transform:none}[_nghost-%COMP%]   div.tb-user-info[_ngcontent-%COMP%]   span.tb-user-display-name[_ngcontent-%COMP%]{font-size:.8rem;font-weight:300;letter-spacing:.008em}[_nghost-%COMP%]   div.tb-user-info[_ngcontent-%COMP%]   span.tb-user-authority[_ngcontent-%COMP%]{font-size:.8rem;font-weight:300;letter-spacing:.005em;opacity:.8}[_nghost-%COMP%]   mat-icon.tb-mini-avatar[_ngcontent-%COMP%]{width:36px;height:36px;margin:auto 8px;font-size:36px;cursor:default}.tb-user-menu-items[_ngcontent-%COMP%]{min-width:256px}',
          ],
          changeDetection: 0,
        }));
    },
    77645: (ee, R, t) => {
      "use strict";
      t.r(R), t.d(R, { ValueInputComponent: () => I });
      var e = t(37716),
        n = t(3679),
        a = t(82068),
        C = t(41960),
        s = t(50540),
        d = t(22238);
      const o = ["inputForm"];
      function i(l, T) {
        if (
          (1 & l &&
            (e.ɵɵelementStart(0, "mat-option", 10),
            e.ɵɵelement(1, "mat-icon", 5),
            e.ɵɵelementStart(2, "span"),
            e.ɵɵtext(3),
            e.ɵɵpipe(4, "translate"),
            e.ɵɵelementEnd(),
            e.ɵɵelementEnd()),
          2 & l)
        ) {
          const O = T.$implicit,
            w = e.ɵɵnextContext();
          e.ɵɵproperty("value", O),
            e.ɵɵadvance(1),
            e.ɵɵpropertyInterpolate(
              "svgIcon",
              w.valueTypes.get(w.valueTypeEnum[O]).icon
            ),
            e.ɵɵadvance(2),
            e.ɵɵtextInterpolate(
              e.ɵɵpipeBind1(4, 3, w.valueTypes.get(w.valueTypeEnum[O]).name)
            );
        }
      }
      function g(l, T) {
        if (
          (1 & l &&
            (e.ɵɵelementStart(0, "mat-error"),
            e.ɵɵtext(1),
            e.ɵɵpipe(2, "translate"),
            e.ɵɵelementEnd()),
          2 & l)
        ) {
          const O = e.ɵɵnextContext(2);
          e.ɵɵadvance(1),
            e.ɵɵtextInterpolate1(
              " ",
              e.ɵɵpipeBind1(
                2,
                1,
                O.requiredText ? O.requiredText : "value.string-value-required"
              ),
              " "
            );
        }
      }
      function D(l, T) {
        if (1 & l) {
          const O = e.ɵɵgetCurrentView();
          e.ɵɵelementStart(0, "mat-form-field", 11),
            e.ɵɵelementStart(1, "mat-label", 3),
            e.ɵɵtext(2, "value.string-value"),
            e.ɵɵelementEnd(),
            e.ɵɵelementStart(3, "input", 12, 13),
            e.ɵɵlistener("ngModelChange", function (b) {
              e.ɵɵrestoreView(O);
              return (e.ɵɵnextContext().modelValue = b);
            })("ngModelChange", function () {
              return e.ɵɵrestoreView(O), e.ɵɵnextContext().onValueChanged();
            }),
            e.ɵɵelementEnd(),
            e.ɵɵtemplate(5, g, 3, 3, "mat-error", 14),
            e.ɵɵelementEnd();
        }
        if (2 & l) {
          const O = e.ɵɵreference(4),
            w = e.ɵɵnextContext();
          e.ɵɵadvance(3),
            e.ɵɵproperty("disabled", w.disabled)("ngModel", w.modelValue),
            e.ɵɵadvance(2),
            e.ɵɵproperty("ngIf", O.hasError("required"));
        }
      }
      function y(l, T) {
        if (
          (1 & l &&
            (e.ɵɵelementStart(0, "mat-error"),
            e.ɵɵtext(1),
            e.ɵɵpipe(2, "translate"),
            e.ɵɵelementEnd()),
          2 & l)
        ) {
          const O = e.ɵɵnextContext(2);
          e.ɵɵadvance(1),
            e.ɵɵtextInterpolate1(
              " ",
              e.ɵɵpipeBind1(
                2,
                1,
                O.requiredText ? O.requiredText : "value.integer-value-required"
              ),
              " "
            );
        }
      }
      function m(l, T) {
        1 & l &&
          (e.ɵɵelementStart(0, "mat-error"),
          e.ɵɵtext(1),
          e.ɵɵpipe(2, "translate"),
          e.ɵɵelementEnd()),
          2 & l &&
            (e.ɵɵadvance(1),
            e.ɵɵtextInterpolate1(
              " ",
              e.ɵɵpipeBind1(2, 1, "value.invalid-integer-value"),
              " "
            ));
      }
      function r(l, T) {
        if (1 & l) {
          const O = e.ɵɵgetCurrentView();
          e.ɵɵelementStart(0, "mat-form-field", 11),
            e.ɵɵelementStart(1, "mat-label", 3),
            e.ɵɵtext(2, "value.integer-value"),
            e.ɵɵelementEnd(),
            e.ɵɵelementStart(3, "input", 15, 13),
            e.ɵɵlistener("ngModelChange", function (b) {
              e.ɵɵrestoreView(O);
              return (e.ɵɵnextContext().modelValue = b);
            })("ngModelChange", function () {
              return e.ɵɵrestoreView(O), e.ɵɵnextContext().onValueChanged();
            }),
            e.ɵɵelementEnd(),
            e.ɵɵtemplate(5, y, 3, 3, "mat-error", 14),
            e.ɵɵtemplate(6, m, 3, 3, "mat-error", 14),
            e.ɵɵelementEnd();
        }
        if (2 & l) {
          const O = e.ɵɵreference(4),
            w = e.ɵɵnextContext();
          e.ɵɵadvance(3),
            e.ɵɵproperty("disabled", w.disabled)("ngModel", w.modelValue),
            e.ɵɵadvance(2),
            e.ɵɵproperty("ngIf", O.hasError("required")),
            e.ɵɵadvance(1),
            e.ɵɵproperty("ngIf", O.hasError("pattern"));
        }
      }
      function h(l, T) {
        if (
          (1 & l &&
            (e.ɵɵelementStart(0, "mat-error"),
            e.ɵɵtext(1),
            e.ɵɵpipe(2, "translate"),
            e.ɵɵelementEnd()),
          2 & l)
        ) {
          const O = e.ɵɵnextContext(2);
          e.ɵɵadvance(1),
            e.ɵɵtextInterpolate1(
              " ",
              e.ɵɵpipeBind1(
                2,
                1,
                O.requiredText ? O.requiredText : "value.double-value-required"
              ),
              " "
            );
        }
      }
      function p(l, T) {
        if (1 & l) {
          const O = e.ɵɵgetCurrentView();
          e.ɵɵelementStart(0, "mat-form-field", 11),
            e.ɵɵelementStart(1, "mat-label", 3),
            e.ɵɵtext(2, "value.double-value"),
            e.ɵɵelementEnd(),
            e.ɵɵelementStart(3, "input", 16, 13),
            e.ɵɵlistener("ngModelChange", function (b) {
              e.ɵɵrestoreView(O);
              return (e.ɵɵnextContext().modelValue = b);
            })("ngModelChange", function () {
              return e.ɵɵrestoreView(O), e.ɵɵnextContext().onValueChanged();
            }),
            e.ɵɵelementEnd(),
            e.ɵɵtemplate(5, h, 3, 3, "mat-error", 14),
            e.ɵɵelementEnd();
        }
        if (2 & l) {
          const O = e.ɵɵreference(4),
            w = e.ɵɵnextContext();
          e.ɵɵadvance(3),
            e.ɵɵproperty("disabled", w.disabled)("ngModel", w.modelValue),
            e.ɵɵadvance(2),
            e.ɵɵproperty("ngIf", O.hasError("required"));
        }
      }
      function _(l, T) {
        if (1 & l) {
          const O = e.ɵɵgetCurrentView();
          e.ɵɵelementStart(0, "div", 17),
            e.ɵɵelementStart(1, "mat-checkbox", 18, 13),
            e.ɵɵlistener("ngModelChange", function (b) {
              e.ɵɵrestoreView(O);
              return (e.ɵɵnextContext().modelValue = b);
            })("ngModelChange", function () {
              return e.ɵɵrestoreView(O), e.ɵɵnextContext().onValueChanged();
            }),
            e.ɵɵtext(3),
            e.ɵɵpipe(4, "translate"),
            e.ɵɵelementEnd(),
            e.ɵɵelementEnd();
        }
        if (2 & l) {
          const O = e.ɵɵnextContext();
          e.ɵɵadvance(1),
            e.ɵɵproperty("disabled", O.disabled)("ngModel", O.modelValue),
            e.ɵɵadvance(2),
            e.ɵɵtextInterpolate1(
              " ",
              e.ɵɵpipeBind1(4, 3, O.modelValue ? "value.true" : "value.false"),
              " "
            );
        }
      }
      function E(l, T) {
        if (
          (1 & l &&
            (e.ɵɵelementStart(0, "mat-error"),
            e.ɵɵtext(1),
            e.ɵɵpipe(2, "translate"),
            e.ɵɵelementEnd()),
          2 & l)
        ) {
          const O = e.ɵɵnextContext(2);
          e.ɵɵadvance(1),
            e.ɵɵtextInterpolate1(
              " ",
              e.ɵɵpipeBind1(
                2,
                1,
                O.requiredText ? O.requiredText : "value.json-value-required"
              ),
              " "
            );
        }
      }
      function c(l, T) {
        1 & l &&
          (e.ɵɵelementStart(0, "mat-error"),
          e.ɵɵtext(1),
          e.ɵɵpipe(2, "translate"),
          e.ɵɵelementEnd()),
          2 & l &&
            (e.ɵɵadvance(1),
            e.ɵɵtextInterpolate1(
              " ",
              e.ɵɵpipeBind1(2, 1, "value.json-value-invalid"),
              " "
            ));
      }
      function v(l, T) {
        if (1 & l) {
          const O = e.ɵɵgetCurrentView();
          e.ɵɵelementStart(0, "div", 19),
            e.ɵɵelementStart(1, "mat-form-field", 20),
            e.ɵɵelementStart(2, "mat-label", 3),
            e.ɵɵtext(3, "value.json-value"),
            e.ɵɵelementEnd(),
            e.ɵɵelementStart(4, "input", 21, 13),
            e.ɵɵlistener("ngModelChange", function (b) {
              e.ɵɵrestoreView(O);
              return (e.ɵɵnextContext().modelValue = b);
            })("ngModelChange", function () {
              return e.ɵɵrestoreView(O), e.ɵɵnextContext().onValueChanged();
            }),
            e.ɵɵelementEnd(),
            e.ɵɵelementStart(6, "button", 22),
            e.ɵɵlistener("click", function (b) {
              return (
                e.ɵɵrestoreView(O), e.ɵɵnextContext().openEditJSONDialog(b)
              );
            }),
            e.ɵɵelementStart(7, "mat-icon"),
            e.ɵɵtext(8, "open_in_new"),
            e.ɵɵelementEnd(),
            e.ɵɵelementEnd(),
            e.ɵɵtemplate(9, E, 3, 3, "mat-error", 14),
            e.ɵɵtemplate(10, c, 3, 3, "mat-error", 14),
            e.ɵɵelementEnd(),
            e.ɵɵelementEnd();
        }
        if (2 & l) {
          const O = e.ɵɵreference(5),
            w = e.ɵɵnextContext();
          e.ɵɵadvance(4),
            e.ɵɵproperty("disabled", w.disabled)("ngModel", w.modelValue),
            e.ɵɵadvance(5),
            e.ɵɵproperty("ngIf", O.hasError("required")),
            e.ɵɵadvance(1),
            e.ɵɵproperty("ngIf", O.hasError("invalidJSON"));
        }
      }
      class I {
        constructor(T) {
          (this.dialog = T),
            (this.valueTypeEnum = a.Ge),
            (this.valueTypeKeys = Object.keys(a.Ge)),
            (this.valueTypes = a.h6),
            (this.propagateChange = null);
        }
        ngOnInit() {}
        openEditJSONDialog(T) {
          T && T.stopPropagation(),
            this.dialog
              .open(s.JsonObjectEditDialogComponent, {
                disableClose: !0,
                panelClass: ["tb-dialog", "tb-fullscreen-dialog"],
                data: { jsonValue: this.modelValue },
              })
              .afterClosed()
              .subscribe((O) => {
                O &&
                  ((this.modelValue = O),
                  this.inputForm.control.patchValue({
                    value: this.modelValue,
                  }));
              });
        }
        registerOnChange(T) {
          this.propagateChange = T;
        }
        registerOnTouched(T) {}
        setDisabledState(T) {
          this.disabled = T;
        }
        writeValue(T) {
          (this.modelValue = T),
            !0 === this.modelValue || !1 === this.modelValue
              ? (this.valueType = a.Ge.BOOLEAN)
              : "number" == typeof this.modelValue
              ? -1 === this.modelValue.toString().indexOf(".")
                ? (this.valueType = a.Ge.INTEGER)
                : (this.valueType = a.Ge.DOUBLE)
              : (0, C.Kn)(this.modelValue)
              ? (this.valueType = a.Ge.JSON)
              : (this.valueType = a.Ge.STRING);
        }
        updateView() {
          this.inputForm.valid || this.valueType === a.Ge.BOOLEAN
            ? this.propagateChange(this.modelValue)
            : this.propagateChange(null);
        }
        onValueTypeChanged() {
          this.valueType === a.Ge.BOOLEAN
            ? (this.modelValue = !1)
            : this.valueType === a.Ge.JSON
            ? ((this.modelValue = {}),
              this.inputForm.form.get("value").patchValue({}))
            : (this.modelValue = null),
            this.updateView();
        }
        onValueChanged() {
          this.updateView();
        }
      }
      (I.ɵfac = function (T) {
        return new (T || I)(e.ɵɵdirectiveInject(d.MatDialog));
      }),
        (I.ɵcmp = e.ɵɵdefineComponent({
          type: I,
          selectors: [["tb-value-input"]],
          viewQuery: function (T, O) {
            if ((1 & T && e.ɵɵviewQuery(o, 7), 2 & T)) {
              let w;
              e.ɵɵqueryRefresh((w = e.ɵɵloadQuery())) &&
                (O.inputForm = w.first);
            }
          },
          inputs: { disabled: "disabled", requiredText: "requiredText" },
          features: [
            e.ɵɵProvidersFeature([
              {
                provide: n.NG_VALUE_ACCESSOR,
                useExisting: (0, e.forwardRef)(() => I),
                multi: !0,
              },
            ]),
          ],
          decls: 18,
          vars: 12,
          consts: [
            ["inputForm", "ngForm"],
            ["fxLayout", "row", "fxLayoutGap", "8px"],
            ["fxFlex", "40", 1, "mat-block", "tb-value-type"],
            ["translate", ""],
            [
              "matInput",
              "",
              "name",
              "valueType",
              3,
              "disabled",
              "ngModel",
              "ngModelChange",
            ],
            [3, "svgIcon"],
            [3, "value", 4, "ngFor", "ngForOf"],
            ["fxFlex", "60", "class", "mat-block", 4, "ngIf"],
            [
              "fxLayout",
              "column",
              "fxLayoutAlign",
              "center",
              "fxFlex",
              "60",
              4,
              "ngIf",
            ],
            [
              "fxLayout",
              "row",
              "fxLayoutAlign",
              "center",
              "fxFlex",
              "60",
              "class",
              "mat-block",
              4,
              "ngIf",
            ],
            [3, "value"],
            ["fxFlex", "60", 1, "mat-block"],
            [
              "matInput",
              "",
              "required",
              "",
              "name",
              "value",
              3,
              "disabled",
              "ngModel",
              "ngModelChange",
            ],
            ["value", "ngModel"],
            [4, "ngIf"],
            [
              "matInput",
              "",
              "required",
              "",
              "name",
              "value",
              "type",
              "number",
              "step",
              "1",
              "pattern",
              "^-?[0-9]+$",
              3,
              "disabled",
              "ngModel",
              "ngModelChange",
            ],
            [
              "matInput",
              "",
              "required",
              "",
              "name",
              "value",
              "type",
              "number",
              "step",
              "any",
              3,
              "disabled",
              "ngModel",
              "ngModelChange",
            ],
            ["fxLayout", "column", "fxLayoutAlign", "center", "fxFlex", "60"],
            [
              "name",
              "value",
              2,
              "margin-bottom",
              "0",
              3,
              "disabled",
              "ngModel",
              "ngModelChange",
            ],
            [
              "fxLayout",
              "row",
              "fxLayoutAlign",
              "center",
              "fxFlex",
              "60",
              1,
              "mat-block",
            ],
            ["fxFlex", "", 1, "mat-block"],
            [
              "matInput",
              "",
              "tb-json-to-string",
              "",
              "required",
              "",
              "name",
              "value",
              3,
              "disabled",
              "ngModel",
              "ngModelChange",
            ],
            [
              "matSuffix",
              "",
              "mat-button",
              "",
              "mat-icon-button",
              "",
              3,
              "click",
            ],
          ],
          template: function (T, O) {
            1 & T &&
              (e.ɵɵelementStart(0, "form", null, 0),
              e.ɵɵelementStart(2, "section", 1),
              e.ɵɵelementStart(3, "mat-form-field", 2),
              e.ɵɵelementStart(4, "mat-label", 3),
              e.ɵɵtext(5, "value.type"),
              e.ɵɵelementEnd(),
              e.ɵɵelementStart(6, "mat-select", 4),
              e.ɵɵlistener("ngModelChange", function (b) {
                return (O.valueType = b);
              })("ngModelChange", function () {
                return O.onValueTypeChanged();
              }),
              e.ɵɵelementStart(7, "mat-select-trigger"),
              e.ɵɵelement(8, "mat-icon", 5),
              e.ɵɵelementStart(9, "span"),
              e.ɵɵtext(10),
              e.ɵɵpipe(11, "translate"),
              e.ɵɵelementEnd(),
              e.ɵɵelementEnd(),
              e.ɵɵtemplate(12, i, 5, 5, "mat-option", 6),
              e.ɵɵelementEnd(),
              e.ɵɵelementEnd(),
              e.ɵɵtemplate(13, D, 6, 3, "mat-form-field", 7),
              e.ɵɵtemplate(14, r, 7, 4, "mat-form-field", 7),
              e.ɵɵtemplate(15, p, 6, 3, "mat-form-field", 7),
              e.ɵɵtemplate(16, _, 5, 5, "div", 8),
              e.ɵɵtemplate(17, v, 11, 4, "div", 9),
              e.ɵɵelementEnd(),
              e.ɵɵelementEnd()),
              2 & T &&
                (e.ɵɵadvance(6),
                e.ɵɵproperty("disabled", O.disabled)("ngModel", O.valueType),
                e.ɵɵadvance(2),
                e.ɵɵpropertyInterpolate(
                  "svgIcon",
                  O.valueTypes.get(O.valueType).icon
                ),
                e.ɵɵadvance(2),
                e.ɵɵtextInterpolate(
                  e.ɵɵpipeBind1(11, 10, O.valueTypes.get(O.valueType).name)
                ),
                e.ɵɵadvance(2),
                e.ɵɵproperty("ngForOf", O.valueTypeKeys),
                e.ɵɵadvance(1),
                e.ɵɵproperty("ngIf", O.valueType === O.valueTypeEnum.STRING),
                e.ɵɵadvance(1),
                e.ɵɵproperty("ngIf", O.valueType === O.valueTypeEnum.INTEGER),
                e.ɵɵadvance(1),
                e.ɵɵproperty("ngIf", O.valueType === O.valueTypeEnum.DOUBLE),
                e.ɵɵadvance(1),
                e.ɵɵproperty("ngIf", O.valueType === O.valueTypeEnum.BOOLEAN),
                e.ɵɵadvance(1),
                e.ɵɵproperty("ngIf", O.valueType === O.valueTypeEnum.JSON));
          },
          styles: [
            '@charset "UTF-8";[_nghost-%COMP%]     mat-form-field.tb-value-type .mat-form-field-infix{padding-bottom:1px}[_nghost-%COMP%]     mat-form-field.tb-value-type mat-select-trigger .mat-icon{vertical-align:middle;margin-right:16px}',
          ],
        }));
    },
    15134: (ee, R, t) => {
      "use strict";
      t.d(R, { A: () => L });
      var e = t(37716),
        n = t(3679),
        a = t(68307),
        C = t(88002),
        s = t(54395),
        d = t(87519),
        o = t(43190),
        i = t(78345),
        g = t(39490),
        D = t(16624),
        y = t(41960),
        m = t(21554),
        r = t(86710),
        h = t(98295),
        p = t(83166),
        _ = t(38583),
        E = t(51095),
        c = t(76627),
        v = t(72458),
        I = t(29790),
        l = t(53883);
      const T = ["branchAutocomplete"],
        O = ["branchInput"];
      function w(k, N) {
        if (1 & k) {
          const B = e.ɵɵgetCurrentView();
          e.ɵɵelementStart(0, "button", 8),
            e.ɵɵlistener("click", function () {
              return e.ɵɵrestoreView(B), e.ɵɵnextContext().clear();
            }),
            e.ɵɵelementStart(1, "mat-icon", 9),
            e.ɵɵtext(2, "close"),
            e.ɵɵelementEnd(),
            e.ɵɵelementEnd();
        }
      }
      function b(k, N) {
        1 & k &&
          (e.ɵɵelementStart(0, "mat-icon", 15),
          e.ɵɵtext(1, "check"),
          e.ɵɵelementEnd());
      }
      function S(k, N) {
        1 & k && e.ɵɵelement(0, "span", 16);
      }
      function u(k, N) {
        1 & k &&
          (e.ɵɵelementStart(0, "small", 17),
          e.ɵɵtext(1),
          e.ɵɵpipe(2, "translate"),
          e.ɵɵelementEnd()),
          2 & k &&
            (e.ɵɵadvance(1),
            e.ɵɵtextInterpolate(
              e.ɵɵpipeBind1(2, 1, "version-control.default")
            ));
      }
      function f(k, N) {
        if (
          (1 & k &&
            (e.ɵɵelementStart(0, "mat-option", 10),
            e.ɵɵtemplate(1, b, 2, 0, "mat-icon", 11),
            e.ɵɵtemplate(2, S, 1, 0, "span", 12),
            e.ɵɵelement(3, "span", 13),
            e.ɵɵpipe(4, "highlight"),
            e.ɵɵtemplate(5, u, 3, 3, "small", 14),
            e.ɵɵelementEnd()),
          2 & k)
        ) {
          const B = N.$implicit,
            j = e.ɵɵnextContext();
          e.ɵɵproperty("value", B),
            e.ɵɵadvance(1),
            e.ɵɵproperty("ngIf", j.selectionMode && B.name === j.modelValue),
            e.ɵɵadvance(1),
            e.ɵɵproperty("ngIf", j.selectionMode && B.name !== j.modelValue),
            e.ɵɵadvance(1),
            e.ɵɵproperty(
              "innerHTML",
              e.ɵɵpipeBind2(4, 5, B.name, j.searchText),
              e.ɵɵsanitizeHtml
            ),
            e.ɵɵadvance(2),
            e.ɵɵproperty("ngIf", B.default);
        }
      }
      function M(k, N) {
        1 & k &&
          (e.ɵɵelementStart(0, "mat-error"),
          e.ɵɵtext(1),
          e.ɵɵpipe(2, "translate"),
          e.ɵɵelementEnd()),
          2 & k &&
            (e.ɵɵadvance(1),
            e.ɵɵtextInterpolate1(
              " ",
              e.ɵɵpipeBind1(2, 1, "version-control.branch-required"),
              " "
            ));
      }
      class L {
        constructor(N, B, j, F) {
          (this.store = N),
            (this.entitiesVersionControlService = B),
            (this.fb = j),
            (this.zone = F),
            (this.selectDefaultBranch = !0),
            (this.selectionMode = !1),
            (this.defaultBranch = null),
            (this.searchText = ""),
            (this.loading = !1),
            (this.dirty = !1),
            (this.clearButtonClicked = !1),
            (this.propagateChange = (V) => {}),
            (this.branchFormGroup = this.fb.group({ branch: [null, []] }));
        }
        get required() {
          return this.requiredValue;
        }
        set required(N) {
          this.requiredValue = (0, g.coerceBooleanProperty)(N);
        }
        get disabled() {
          return this.disabledValue;
        }
        set disabled(N) {
          (this.disabledValue = (0, g.coerceBooleanProperty)(N)),
            this.disabledValue
              ? this.branchFormGroup.disable({ emitEvent: !1 })
              : this.branchFormGroup.enable({ emitEvent: !1 });
        }
        registerOnChange(N) {
          this.propagateChange = N;
        }
        registerOnTouched(N) {}
        ngOnInit() {
          this.filteredBranches = this.branchFormGroup
            .get("branch")
            .valueChanges.pipe(
              (0, a.b)((N) => {
                let B;
                (B =
                  "string" != typeof N && N
                    ? N
                    : !this.selectionMode &&
                      "string" == typeof N &&
                      (0, y.XE)(N)
                    ? { name: N, default: !1 }
                    : null),
                  (!this.selectionMode || B) && this.updateView(B);
              }),
              (0, C.U)((N) => (N ? ("string" == typeof N ? N : N.name) : "")),
              (0, s.b)(150),
              (0, d.x)(),
              (0, o.w)((N) => this.fetchBranches(N)),
              (0, i.B)()
            );
        }
        ngAfterViewInit() {}
        setDisabledState(N) {
          this.disabled = N;
        }
        isDefaultBranchSelected() {
          return (
            this.defaultBranch && this.defaultBranch.name === this.modelValue
          );
        }
        selectDefaultBranchIfNeeded(N = !1) {
          ((this.selectDefaultBranch && !this.modelValue) || N) &&
            setTimeout(() => {
              var B;
              this.defaultBranch
                ? (this.branchFormGroup
                    .get("branch")
                    .patchValue(this.defaultBranch, { emitEvent: !1 }),
                  (this.modelValue =
                    null === (B = this.defaultBranch) || void 0 === B
                      ? void 0
                      : B.name),
                  this.propagateChange(this.modelValue))
                : ((this.loading = !0),
                  this.getBranches().subscribe(() => {
                    var j;
                    this.defaultBranch || N
                      ? (this.branchFormGroup
                          .get("branch")
                          .patchValue(this.defaultBranch, { emitEvent: !1 }),
                        (this.modelValue =
                          null === (j = this.defaultBranch) || void 0 === j
                            ? void 0
                            : j.name),
                        this.propagateChange(this.modelValue),
                        (this.loading = !1))
                      : (this.loading = !1);
                  }));
            });
        }
        writeValue(N) {
          (this.searchText = ""),
            (this.modelValue = N),
            null != N
              ? this.branchFormGroup
                  .get("branch")
                  .patchValue({ name: N }, { emitEvent: !1 })
              : (this.branchFormGroup
                  .get("branch")
                  .patchValue(null, { emitEvent: !1 }),
                this.selectDefaultBranchIfNeeded()),
            (this.dirty = !0);
        }
        onFocus() {
          this.dirty &&
            (this.branchFormGroup
              .get("branch")
              .updateValueAndValidity({ onlySelf: !0, emitEvent: !0 }),
            (this.dirty = !1));
        }
        onBlur() {
          this.clearButtonClicked
            ? (this.clearButtonClicked = !1)
            : this.matAutocomplete.isOpen || this.selectAvailableValue();
        }
        onPanelClosed() {
          this.selectAvailableValue();
        }
        selectAvailableValue() {
          if (this.selectionMode) {
            const N = this.branchFormGroup.get("branch").value;
            this.getBranches()
              .pipe(
                (0, C.U)((B) => {
                  let j = B.find((F) => F.name === N);
                  return (
                    !j &&
                      (0, y.XE)(this.modelValue) &&
                      (j = B.find((F) => F.name === this.modelValue)),
                    j
                  );
                })
              )
              .subscribe((B) => {
                !B && this.defaultBranch && (B = this.defaultBranch),
                  this.zone.run(() => {
                    this.branchFormGroup
                      .get("branch")
                      .patchValue(B, { emitEvent: !0 });
                  }, 0);
              });
          }
        }
        updateView(N) {
          this.modelValue !== (null == N ? void 0 : N.name) &&
            ((this.modelValue = null == N ? void 0 : N.name),
            this.propagateChange(this.modelValue));
        }
        displayBranchFn(N) {
          return N ? N.name : void 0;
        }
        fetchBranches(N) {
          return (
            (this.searchText = N),
            this.getBranches().pipe(
              (0, C.U)((B) => {
                let j = B.filter(
                  (F) => !N || F.name.toUpperCase().startsWith(N.toUpperCase())
                );
                return (
                  !this.selectionMode &&
                    (0, y.XE)(N) &&
                    !j.find((F) => F.name === N) &&
                    (j = [{ name: N, default: !1 }, ...j]),
                  j
                );
              })
            )
          );
        }
        getBranches() {
          return this.entitiesVersionControlService.listBranches().pipe(
            (0, a.b)((N) => {
              this.defaultBranch = N.find((B) => B.default);
            })
          );
        }
        clear() {
          (this.clearButtonClicked = !0),
            setTimeout(() => {
              this.branchFormGroup
                .get("branch")
                .patchValue(null, { emitEvent: !0 }),
                this.branchInput.nativeElement.blur(),
                this.branchInput.nativeElement.focus();
            }, 0);
        }
      }
      (L.ɵfac = function (N) {
        return new (N || L)(
          e.ɵɵdirectiveInject(r.Store),
          e.ɵɵdirectiveInject(D.Q),
          e.ɵɵdirectiveInject(n.FormBuilder),
          e.ɵɵdirectiveInject(e.NgZone)
        );
      }),
        (L.ɵcmp = e.ɵɵdefineComponent({
          type: L,
          selectors: [["tb-branch-autocomplete"]],
          viewQuery: function (N, B) {
            if (
              (1 & N &&
                (e.ɵɵviewQuery(T, 5),
                e.ɵɵviewQuery(O, 7, m.MatAutocompleteTrigger),
                e.ɵɵviewQuery(O, 7)),
              2 & N)
            ) {
              let j;
              e.ɵɵqueryRefresh((j = e.ɵɵloadQuery())) &&
                (B.matAutocomplete = j.first),
                e.ɵɵqueryRefresh((j = e.ɵɵloadQuery())) &&
                  (B.autoCompleteTrigger = j.first),
                e.ɵɵqueryRefresh((j = e.ɵɵloadQuery())) &&
                  (B.branchInput = j.first);
            }
          },
          inputs: {
            required: "required",
            disabled: "disabled",
            selectDefaultBranch: "selectDefaultBranch",
            selectionMode: "selectionMode",
            emptyPlaceholder: "emptyPlaceholder",
          },
          features: [
            e.ɵɵProvidersFeature([
              {
                provide: n.NG_VALUE_ACCESSOR,
                useExisting: (0, e.forwardRef)(() => L),
                multi: !0,
              },
            ]),
          ],
          decls: 13,
          vars: 16,
          consts: [
            [1, "mat-block", 3, "formGroup", "floatLabel"],
            [
              "matInput",
              "",
              "type",
              "text",
              "formControlName",
              "branch",
              3,
              "placeholder",
              "required",
              "matAutocomplete",
              "keydown.enter",
              "focusin",
              "blur",
            ],
            ["branchInput", ""],
            [
              "type",
              "button",
              "matSuffix",
              "",
              "mat-button",
              "",
              "mat-icon-button",
              "",
              "aria-label",
              "Clear",
              3,
              "click",
              4,
              "ngIf",
            ],
            [1, "tb-autocomplete", 3, "displayWith", "closed"],
            ["branchAutocomplete", "matAutocomplete"],
            ["class", "branch-option", 3, "value", 4, "ngFor", "ngForOf"],
            [4, "ngIf"],
            [
              "type",
              "button",
              "matSuffix",
              "",
              "mat-button",
              "",
              "mat-icon-button",
              "",
              "aria-label",
              "Clear",
              3,
              "click",
            ],
            [1, "material-icons"],
            [1, "branch-option", 3, "value"],
            ["class", "tb-mat-18", 4, "ngIf"],
            ["class", "check-placeholder", 4, "ngIf"],
            [3, "innerHTML"],
            ["class", "default-branch", 4, "ngIf"],
            [1, "tb-mat-18"],
            [1, "check-placeholder"],
            [1, "default-branch"],
          ],
          template: function (N, B) {
            if (1 & N) {
              const j = e.ɵɵgetCurrentView();
              e.ɵɵelementStart(0, "mat-form-field", 0),
                e.ɵɵelementStart(1, "mat-label"),
                e.ɵɵtext(2),
                e.ɵɵpipe(3, "translate"),
                e.ɵɵelementEnd(),
                e.ɵɵelementStart(4, "input", 1, 2),
                e.ɵɵlistener("keydown.enter", function () {
                  return (
                    e.ɵɵrestoreView(j),
                    e.ɵɵreference(5).blur(),
                    B.autoCompleteTrigger.closePanel()
                  );
                })("focusin", function () {
                  return B.onFocus();
                })("blur", function () {
                  return B.onBlur();
                }),
                e.ɵɵpipe(6, "translate"),
                e.ɵɵelementEnd(),
                e.ɵɵtemplate(7, w, 3, 0, "button", 3),
                e.ɵɵelementStart(8, "mat-autocomplete", 4, 5),
                e.ɵɵlistener("closed", function () {
                  return B.onPanelClosed();
                }),
                e.ɵɵtemplate(10, f, 6, 8, "mat-option", 6),
                e.ɵɵpipe(11, "async"),
                e.ɵɵelementEnd(),
                e.ɵɵtemplate(12, M, 3, 3, "mat-error", 7),
                e.ɵɵelementEnd();
            }
            if (2 & N) {
              const j = e.ɵɵreference(9);
              e.ɵɵproperty("formGroup", B.branchFormGroup)(
                "floatLabel",
                B.selectionMode || B.emptyPlaceholder ? "always" : "auto"
              ),
                e.ɵɵadvance(2),
                e.ɵɵtextInterpolate(
                  e.ɵɵpipeBind1(3, 10, "version-control.branch")
                ),
                e.ɵɵadvance(2),
                e.ɵɵpropertyInterpolate(
                  "placeholder",
                  B.emptyPlaceholder ||
                    e.ɵɵpipeBind1(
                      6,
                      12,
                      B.loading
                        ? "common.loading"
                        : "version-control.select-branch"
                    )
                ),
                e.ɵɵproperty("required", B.required)("matAutocomplete", j),
                e.ɵɵadvance(3),
                e.ɵɵproperty(
                  "ngIf",
                  B.branchFormGroup.get("branch").value && !B.disabled
                ),
                e.ɵɵadvance(1),
                e.ɵɵproperty("displayWith", B.displayBranchFn),
                e.ɵɵadvance(2),
                e.ɵɵproperty(
                  "ngForOf",
                  e.ɵɵpipeBind1(11, 14, B.filteredBranches)
                ),
                e.ɵɵadvance(2),
                e.ɵɵproperty(
                  "ngIf",
                  B.branchFormGroup.get("branch").hasError("required")
                );
            }
          },
          directives: [
            h.MatFormField,
            n.NgControlStatusGroup,
            n.FormGroupDirective,
            h.MatLabel,
            p.MatInput,
            n.DefaultValueAccessor,
            m.MatAutocompleteTrigger,
            n.NgControlStatus,
            n.FormControlName,
            n.RequiredValidator,
            _.NgIf,
            m.MatAutocomplete,
            _.NgForOf,
            E.MatButton,
            h.MatSuffix,
            c.MatIcon,
            v.MatOption,
            h.MatError,
          ],
          pipes: [I.TranslatePipe, _.AsyncPipe, l.HighlightPipe],
          styles: [
            '@charset "UTF-8";.mat-option.branch-option .mat-icon,.mat-option.branch-option .check-placeholder{margin-right:8px}.mat-option.branch-option .check-placeholder{width:18px;display:inline-block}.mat-option.branch-option .mat-option-text{width:100%}.mat-option.branch-option .mat-option-text .default-branch{float:right}\n',
          ],
          encapsulation: 2,
        }));
    },
    28607: (ee, R, t) => {
      "use strict";
      t.r(R), t.d(R, { WidgetsBundleSearchComponent: () => y });
      var e = t(37716),
        n = t(3679),
        a = t(35618),
        C = t(38583),
        s = t(88030),
        d = t(76627),
        o = t(51095);
      const i = ["searchInput"];
      function g(m, r) {
        if (1 & m) {
          const h = e.ɵɵgetCurrentView();
          e.ɵɵelementStart(0, "button", 3),
            e.ɵɵlistener("click", function (_) {
              return e.ɵɵrestoreView(h), e.ɵɵnextContext().clear(_);
            }),
            e.ɵɵelementStart(1, "mat-icon", 4),
            e.ɵɵtext(2, "close"),
            e.ɵɵelementEnd(),
            e.ɵɵelementEnd();
        }
      }
      const D = function (m) {
        return { focus: m };
      };
      class y {
        constructor() {
          (this.focus = !1), (this.propagateChange = (r) => {});
        }
        registerOnChange(r) {
          this.propagateChange = r;
        }
        registerOnTouched(r) {}
        writeValue(r) {
          this.searchText = r;
        }
        updateSearchText() {
          this.updateView();
        }
        updateView() {
          this.propagateChange(this.searchText);
        }
        clear(r) {
          r.preventDefault(),
            r.stopPropagation(),
            (this.searchText = ""),
            this.updateView();
        }
        toggleFocus() {
          this.focus = !this.focus;
        }
      }
      (y.ɵfac = function (r) {
        return new (r || y)();
      }),
        (y.ɵcmp = e.ɵɵdefineComponent({
          type: y,
          selectors: [["tb-widgets-bundle-search"]],
          viewQuery: function (r, h) {
            if ((1 & r && e.ɵɵviewQuery(i, 5), 2 & r)) {
              let p;
              e.ɵɵqueryRefresh((p = e.ɵɵloadQuery())) &&
                (h.searchInput = p.first);
            }
          },
          inputs: { placeholder: "placeholder" },
          features: [
            e.ɵɵProvidersFeature([
              {
                provide: n.NG_VALUE_ACCESSOR,
                useExisting: (0, e.forwardRef)(() => y),
                multi: !0,
              },
            ]),
          ],
          decls: 5,
          vars: 6,
          consts: [
            [
              "fxLayoutAlign",
              "start center",
              "fxLayoutGap",
              "16px",
              1,
              "input-wrapper",
              3,
              "ngClass",
            ],
            [
              "type",
              "text",
              3,
              "ngModel",
              "placeholder",
              "ngModelChange",
              "focus",
              "blur",
            ],
            [
              "mat-button",
              "",
              "type",
              "button",
              "mat-icon-button",
              "",
              3,
              "click",
              4,
              "ngIf",
            ],
            [
              "mat-button",
              "",
              "type",
              "button",
              "mat-icon-button",
              "",
              3,
              "click",
            ],
            [1, "close"],
          ],
          template: function (r, h) {
            1 & r &&
              (e.ɵɵelementStart(0, "div", 0),
              e.ɵɵelementStart(1, "mat-icon"),
              e.ɵɵtext(2, "search"),
              e.ɵɵelementEnd(),
              e.ɵɵelementStart(3, "input", 1),
              e.ɵɵlistener("ngModelChange", function (_) {
                return (h.searchText = _);
              })("ngModelChange", function () {
                return h.updateSearchText();
              })("focus", function () {
                return h.toggleFocus();
              })("blur", function () {
                return h.toggleFocus();
              }),
              e.ɵɵelementEnd(),
              e.ɵɵtemplate(4, g, 3, 0, "button", 2),
              e.ɵɵelementEnd()),
              2 & r &&
                (e.ɵɵproperty("ngClass", e.ɵɵpureFunction1(4, D, h.focus)),
                e.ɵɵadvance(3),
                e.ɵɵproperty("ngModel", h.searchText)(
                  "placeholder",
                  h.placeholder
                ),
                e.ɵɵadvance(1),
                e.ɵɵproperty("ngIf", h.searchText));
          },
          directives: [
            a.DefaultLayoutAlignDirective,
            a.DefaultLayoutGapDirective,
            C.NgClass,
            s.DefaultClassDirective,
            d.MatIcon,
            n.DefaultValueAccessor,
            n.NgControlStatus,
            n.NgModel,
            C.NgIf,
            o.MatButton,
          ],
          styles: [
            '@charset "UTF-8";.input-wrapper{background:rgba(255,255,255,.2);border-radius:8px;color:#ffffffd6;padding:5px 8px 5px 16px;height:46px}.input-wrapper input{width:100%;height:100%;padding:0;font-size:20px;outline:none;border:none;background-color:transparent;color:#fff}.input-wrapper input::placeholder{color:#fff;opacity:.6;line-height:26px}.input-wrapper.focus{background:#fff;color:#0000008a}.input-wrapper.focus input{color:#000;opacity:.6}.input-wrapper.focus .close{color:#000!important;opacity:.54}\n',
          ],
          encapsulation: 2,
        }));
    },
    86768: (ee, R, t) => {
      "use strict";
      t.r(R), t.d(R, { WidgetsBundleSelectComponent: () => I });
      var e = t(37716),
        n = t(3679),
        a = t(88002),
        C = t(68307),
        s = t(78345),
        d = t(39490),
        o = t(40039),
        i = t(41960),
        g = t(86057),
        D = t(54787),
        y = t(86710),
        m = t(98295),
        r = t(67441),
        h = t(38583),
        p = t(29790),
        _ = t(72458);
      function E(l, T) {
        1 & l &&
          (e.ɵɵelementStart(0, "span", 5),
          e.ɵɵtext(1, "widgets-bundle.system"),
          e.ɵɵelementEnd());
      }
      function c(l, T) {
        1 & l &&
          (e.ɵɵelementStart(0, "span", 5),
          e.ɵɵtext(1, "widgets-bundle.system"),
          e.ɵɵelementEnd());
      }
      function v(l, T) {
        if (
          (1 & l &&
            (e.ɵɵelementStart(0, "mat-option", 6),
            e.ɵɵelementStart(1, "div", 2),
            e.ɵɵelementStart(2, "span"),
            e.ɵɵtext(3),
            e.ɵɵelementEnd(),
            e.ɵɵtemplate(4, c, 2, 0, "span", 3),
            e.ɵɵelementEnd(),
            e.ɵɵelementEnd()),
          2 & l)
        ) {
          const O = T.$implicit,
            w = e.ɵɵnextContext();
          e.ɵɵproperty("value", O),
            e.ɵɵadvance(3),
            e.ɵɵtextInterpolate(O.title),
            e.ɵɵadvance(1),
            e.ɵɵproperty("ngIf", w.isSystem(O));
        }
      }
      class I {
        constructor(T, O) {
          (this.store = T),
            (this.widgetService = O),
            (this.propagateChange = (w) => {});
        }
        get required() {
          return this.requiredValue;
        }
        set required(T) {
          this.requiredValue = (0, d.coerceBooleanProperty)(T);
        }
        registerOnChange(T) {
          this.propagateChange = T;
        }
        registerOnTouched(T) {}
        ngOnInit() {
          this.widgetsBundles$ = this.getWidgetsBundles().pipe(
            (0, a.U)(
              (T) => (
                (0, D.dE)(this.store).edgesSupportEnabled ||
                  (T = T.filter((w) => "edge_widgets" !== w.alias)),
                T
              )
            ),
            (0, C.b)((T) => {
              (this.widgetsBundles = T),
                this.selectFirstBundle &&
                  T.length > 0 &&
                  (this.widgetsBundle !== T[0]
                    ? ((this.widgetsBundle = T[0]), this.updateView())
                    : (0, i.$K)(this.selectBundleAlias) &&
                      this.selectWidgetsBundleByAlias(this.selectBundleAlias));
            }),
            (0, s.B)()
          );
        }
        ngOnChanges(T) {
          for (const O of Object.keys(T)) {
            const w = T[O];
            !w.firstChange &&
              w.currentValue !== w.previousValue &&
              "selectBundleAlias" === O &&
              this.selectWidgetsBundleByAlias(this.selectBundleAlias);
          }
        }
        setDisabledState(T) {
          this.disabled = T;
        }
        writeValue(T) {
          this.widgetsBundle = T;
        }
        widgetsBundleChanged() {
          this.updateView();
        }
        isSystem(T) {
          return T && T.tenantId.id === g._;
        }
        selectWidgetsBundleByAlias(T) {
          if (this.widgetsBundles && T) {
            const O = this.widgetsBundles.find((w) => w.alias === T);
            O &&
              this.widgetsBundle !== O &&
              ((this.widgetsBundle = O), this.updateView());
          } else
            this.widgetsBundle &&
              ((this.widgetsBundle = null), this.updateView());
        }
        updateView() {
          this.propagateChange(this.widgetsBundle);
        }
        getWidgetsBundles() {
          let T;
          return (
            this.bundlesScope
              ? "system" === this.bundlesScope
                ? (T = this.widgetService.getSystemWidgetsBundles())
                : "tenant" === this.bundlesScope &&
                  (T = this.widgetService.getTenantWidgetsBundles())
              : (T = this.widgetService.getAllWidgetsBundles()),
            T
          );
        }
      }
      (I.ɵfac = function (T) {
        return new (T || I)(
          e.ɵɵdirectiveInject(y.Store),
          e.ɵɵdirectiveInject(o.i)
        );
      }),
        (I.ɵcmp = e.ɵɵdefineComponent({
          type: I,
          selectors: [["tb-widgets-bundle-select"]],
          inputs: {
            bundlesScope: "bundlesScope",
            selectFirstBundle: "selectFirstBundle",
            selectBundleAlias: "selectBundleAlias",
            required: "required",
            disabled: "disabled",
          },
          features: [
            e.ɵɵProvidersFeature([
              {
                provide: n.NG_VALUE_ACCESSOR,
                useExisting: (0, e.forwardRef)(() => I),
                multi: !0,
              },
            ]),
            e.ɵɵNgOnChangesFeature,
          ],
          decls: 11,
          vars: 11,
          consts: [
            ["floatLabel", "always", "hideRequiredMarker", "", 1, "mat-block"],
            [
              "matInput",
              "",
              "panelClass",
              "tb-widgets-bundle-select",
              3,
              "required",
              "disabled",
              "ngModel",
              "placeholder",
              "ngModelChange",
            ],
            [1, "tb-bundle-item"],
            ["translate", "", "class", "tb-bundle-system", 4, "ngIf"],
            [3, "value", 4, "ngFor", "ngForOf"],
            ["translate", "", 1, "tb-bundle-system"],
            [3, "value"],
          ],
          template: function (T, O) {
            1 & T &&
              (e.ɵɵelementStart(0, "mat-form-field", 0),
              e.ɵɵelement(1, "mat-label"),
              e.ɵɵelementStart(2, "mat-select", 1),
              e.ɵɵlistener("ngModelChange", function (b) {
                return (O.widgetsBundle = b);
              })("ngModelChange", function () {
                return O.widgetsBundleChanged();
              }),
              e.ɵɵpipe(3, "translate"),
              e.ɵɵelementStart(4, "mat-select-trigger"),
              e.ɵɵelementStart(5, "div", 2),
              e.ɵɵelementStart(6, "span"),
              e.ɵɵtext(7),
              e.ɵɵelementEnd(),
              e.ɵɵtemplate(8, E, 2, 0, "span", 3),
              e.ɵɵelementEnd(),
              e.ɵɵelementEnd(),
              e.ɵɵtemplate(9, v, 5, 3, "mat-option", 4),
              e.ɵɵpipe(10, "async"),
              e.ɵɵelementEnd(),
              e.ɵɵelementEnd()),
              2 & T &&
                (e.ɵɵadvance(2),
                e.ɵɵpropertyInterpolate(
                  "placeholder",
                  e.ɵɵpipeBind1(3, 7, "widget.select-widgets-bundle")
                ),
                e.ɵɵproperty("required", O.required)("disabled", O.disabled)(
                  "ngModel",
                  O.widgetsBundle
                ),
                e.ɵɵadvance(5),
                e.ɵɵtextInterpolate(
                  null == O.widgetsBundle ? null : O.widgetsBundle.title
                ),
                e.ɵɵadvance(1),
                e.ɵɵproperty("ngIf", O.isSystem(O.widgetsBundle)),
                e.ɵɵadvance(1),
                e.ɵɵproperty(
                  "ngForOf",
                  e.ɵɵpipeBind1(10, 9, O.widgetsBundles$)
                ));
          },
          directives: [
            m.MatFormField,
            m.MatLabel,
            r.MatSelect,
            n.RequiredValidator,
            n.NgControlStatus,
            n.NgModel,
            r.MatSelectTrigger,
            h.NgIf,
            h.NgForOf,
            p.TranslateDirective,
            _.MatOption,
          ],
          pipes: [p.TranslatePipe, h.AsyncPipe],
          styles: [
            '@charset "UTF-8";tb-widgets-bundle-select mat-select{margin:0}tb-widgets-bundle-select .tb-bundle-item{height:26px;line-height:26px}.tb-widgets-bundle-select .tb-bundle-item{height:48px;line-height:48px}tb-widgets-bundle-select .mat-select-value-text,.tb-widgets-bundle-select .mat-select-value-text{display:block;width:100%}tb-widgets-bundle-select .tb-bundle-item,.tb-widgets-bundle-select .tb-bundle-item{display:inline-block;width:100%}tb-widgets-bundle-select .tb-bundle-item span,.tb-widgets-bundle-select .tb-bundle-item span{display:inline-block;vertical-align:middle}tb-widgets-bundle-select .tb-bundle-item .tb-bundle-system,.tb-widgets-bundle-select .tb-bundle-item .tb-bundle-system{float:right;font-size:.8rem;opacity:.8}tb-widgets-bundle-select mat-option,.tb-widgets-bundle-select mat-option{height:auto!important;white-space:normal!important}mat-toolbar tb-widgets-bundle-select .mat-form-field-wrapper{padding-bottom:0!important}mat-toolbar tb-widgets-bundle-select .mat-form-field-wrapper .mat-form-field-infix{background:rgba(255,255,255,.2);padding:5px 20px!important;border:none}mat-toolbar tb-widgets-bundle-select .mat-form-field-wrapper .mat-form-field-infix mat-select .mat-select-value-text{font-size:1.2rem;color:#fff}mat-toolbar tb-widgets-bundle-select .mat-form-field-wrapper .mat-form-field-infix mat-select .mat-select-value-text span:first-child:after{color:#fff}mat-toolbar tb-widgets-bundle-select .mat-form-field-wrapper .mat-form-field-infix mat-select .mat-select-value{vertical-align:middle;min-height:30px;height:30px;padding:2px 2px 1px}mat-toolbar tb-widgets-bundle-select .mat-form-field-wrapper .mat-form-field-infix mat-select .mat-select-value .mat-select-placeholder{color:#fff;opacity:.8;line-height:26px}mat-toolbar tb-widgets-bundle-select .mat-form-field-wrapper .mat-form-field-infix .mat-select.mat-select-invalid .mat-select-arrow{color:#fff!important}@media screen and (max-width: 599px){mat-toolbar tb-widgets-bundle-select .mat-form-field-wrapper .mat-form-field-infix{width:auto}}mat-toolbar tb-widgets-bundle-select .mat-form-field-wrapper .mat-form-field-underline{display:none}\n',
          ],
          encapsulation: 2,
        }));
    },
    72145: (ee, R, t) => {
      "use strict";
      t.d(R, { Ln: () => y, qD: () => m, e6: () => r });
      var e = t(25917),
        n = t(69412),
        a = t(35758),
        C = t(68307),
        s = t(19773),
        d = t(88002);
      let i,
        g,
        o = !1;
      function y() {
        return i
          ? (0, e.of)(i)
          : (0, n.D)(t.e(2644).then(t.t.bind(t, 52644, 23))).pipe(
              (0, s.zg)((h) =>
                (function () {
                  if (o) return (0, e.of)(null);
                  {
                    const h = [];
                    return (
                      h.push((0, n.D)(t.e(9074).then(t.t.bind(t, 9074, 23)))),
                      h.push((0, n.D)(t.e(4277).then(t.t.bind(t, 14277, 23)))),
                      h.push((0, n.D)(t.e(6870).then(t.t.bind(t, 96870, 23)))),
                      h.push((0, n.D)(t.e(6392).then(t.t.bind(t, 86392, 23)))),
                      h.push((0, n.D)(t.e(1870).then(t.t.bind(t, 31870, 23)))),
                      h.push((0, n.D)(t.e(1379).then(t.t.bind(t, 31379, 23)))),
                      h.push((0, n.D)(t.e(9817).then(t.t.bind(t, 19817, 23)))),
                      h.push((0, n.D)(t.e(154).then(t.t.bind(t, 90154, 23)))),
                      h.push((0, n.D)(t.e(3906).then(t.t.bind(t, 13906, 23)))),
                      h.push((0, n.D)(t.e(3506).then(t.t.bind(t, 93506, 23)))),
                      h.push((0, n.D)(t.e(846).then(t.t.bind(t, 10846, 23)))),
                      h.push((0, n.D)(t.e(9659).then(t.t.bind(t, 59659, 23)))),
                      h.push((0, n.D)(t.e(3579).then(t.t.bind(t, 93579, 23)))),
                      h.push((0, n.D)(t.e(9038).then(t.t.bind(t, 29038, 23)))),
                      h.push((0, n.D)(t.e(3105).then(t.t.bind(t, 13105, 23)))),
                      h.push((0, n.D)(t.e(1386).then(t.t.bind(t, 91386, 23)))),
                      h.push((0, n.D)(t.e(219).then(t.t.bind(t, 10219, 23)))),
                      h.push((0, n.D)(t.e(1603).then(t.t.bind(t, 21603, 23)))),
                      h.push((0, n.D)(t.e(8611).then(t.t.bind(t, 18611, 23)))),
                      h.push((0, n.D)(t.e(4499).then(t.t.bind(t, 74499, 23)))),
                      h.push((0, n.D)(t.e(1967).then(t.t.bind(t, 71967, 23)))),
                      h.push((0, n.D)(t.e(4698).then(t.t.bind(t, 34698, 23)))),
                      (0, a.D)(h).pipe(
                        (0, C.b)(() => {
                          o = !0;
                        })
                      )
                    );
                  }
                })().pipe((0, d.U)(() => h))
              ),
              (0, C.b)((h) => {
                i = h;
              })
            );
      }
      function m() {
        return g
          ? (0, e.of)(g)
          : y().pipe(
              (0, s.zg)((h) =>
                (0, n.D)(
                  Promise.all([t.e(9114), t.e(6823)]).then(
                    t.t.bind(t, 6823, 23)
                  )
                )
              ),
              (0, C.b)((h) => {
                g = h;
              })
            );
      }
      class r {
        constructor(p, _, E, c) {
          (this.start = { row: p, column: _ }),
            (this.end = { row: E, column: c });
        }
        static fromPoints(p, _) {
          return new r(p.row, p.column, _.row, _.column);
        }
        clipRows(p, _) {
          let E, c;
          return (
            this.end.row > _
              ? (E = { row: _ + 1, column: 0 })
              : this.end.row < p && (E = { row: p, column: 0 }),
            this.start.row > _
              ? (c = { row: _ + 1, column: 0 })
              : this.start.row < p && (c = { row: p, column: 0 }),
            r.fromPoints(c || this.start, E || this.end)
          );
        }
        clone() {
          return r.fromPoints(this.start, this.end);
        }
        collapseRows() {
          return 0 === this.end.column
            ? new r(
                this.start.row,
                0,
                Math.max(this.start.row, this.end.row - 1),
                0
              )
            : new r(this.start.row, 0, this.end.row, 0);
        }
        compare(p, _) {
          return this.isMultiLine() || p !== this.start.row
            ? p < this.start.row
              ? -1
              : p > this.end.row
              ? 1
              : this.start.row === p
              ? _ >= this.start.column
                ? 0
                : -1
              : this.end.row === p
              ? _ <= this.end.column
                ? 0
                : 1
              : 0
            : _ < this.start.column
            ? -1
            : _ > this.end.column
            ? 1
            : 0;
        }
        compareEnd(p, _) {
          return this.end.row === p && this.end.column === _
            ? 1
            : this.compare(p, _);
        }
        compareInside(p, _) {
          return this.end.row === p && this.end.column === _
            ? 1
            : this.start.row === p && this.start.column === _
            ? -1
            : this.compare(p, _);
        }
        comparePoint(p) {
          return this.compare(p.row, p.column);
        }
        compareRange(p) {
          let _;
          const E = p.end,
            c = p.start;
          return (
            (_ = this.compare(E.row, E.column)),
            1 === _
              ? ((_ = this.compare(c.row, c.column)),
                1 === _ ? 2 : 0 === _ ? 1 : 0)
              : -1 === _
              ? -2
              : ((_ = this.compare(c.row, c.column)),
                -1 === _ ? -1 : 1 === _ ? 42 : 0)
          );
        }
        compareStart(p, _) {
          return this.start.row === p && this.start.column === _
            ? -1
            : this.compare(p, _);
        }
        contains(p, _) {
          return 0 === this.compare(p, _);
        }
        containsRange(p) {
          return (
            0 === this.comparePoint(p.start) && 0 === this.comparePoint(p.end)
          );
        }
        extend(p, _) {
          const E = this.compare(p, _);
          let c, v;
          return 0 === E
            ? this
            : (-1 === E
                ? (v = { row: p, column: _ })
                : (c = { row: p, column: _ }),
              r.fromPoints(v || this.start, c || this.end));
        }
        inside(p, _) {
          return (
            0 === this.compare(p, _) &&
            !(this.isEnd(p, _) || this.isStart(p, _))
          );
        }
        insideEnd(p, _) {
          return 0 === this.compare(p, _) && !this.isStart(p, _);
        }
        insideStart(p, _) {
          return 0 === this.compare(p, _) && !this.isEnd(p, _);
        }
        intersects(p) {
          const _ = this.compareRange(p);
          return -1 === _ || 0 === _ || 1 === _;
        }
        isEmpty() {
          return (
            this.start.row === this.end.row &&
            this.start.column === this.end.column
          );
        }
        isEnd(p, _) {
          return this.end.row === p && this.end.column === _;
        }
        isEqual(p) {
          return (
            this.start.row === p.start.row &&
            this.end.row === p.end.row &&
            this.start.column === p.start.column &&
            this.end.column === p.end.column
          );
        }
        isMultiLine() {
          return this.start.row !== this.end.row;
        }
        isStart(p, _) {
          return this.start.row === p && this.start.column === _;
        }
        moveBy(p, _) {
          (this.start.row += p),
            (this.start.column += _),
            (this.end.row += p),
            (this.end.column += _);
        }
        setEnd(p, _) {
          "object" == typeof p
            ? ((this.end.column = p.column), (this.end.row = p.row))
            : ((this.end.row = p), (this.end.column = _));
        }
        setStart(p, _) {
          "object" == typeof p
            ? ((this.start.column = p.column), (this.start.row = p.row))
            : ((this.start.row = p), (this.start.column = _));
        }
        toScreenRange(p) {
          const _ = p.documentToScreenPosition(this.start),
            E = p.documentToScreenPosition(this.end);
          return new r(_.row, _.column, E.row, E.column);
        }
      }
    },
    29472: (ee, R, t) => {
      "use strict";
      t.d(R, {
        Xm: () => d,
        Kn: () => o,
        rk: () => i,
        vZ: () => g,
        pZ: () => D,
        Vt: () => y,
        yU: () => m,
        lh: () => r,
        rI: () => h,
        d4: () => p,
      });
      var d,
        _,
        o,
        i,
        e = t(91764),
        n = t(36881),
        a = t(86057),
        C = t(52042),
        s = t(34767);
      ((_ = d || (d = {})).CRITICAL = "CRITICAL"),
        (_.MAJOR = "MAJOR"),
        (_.MINOR = "MINOR"),
        (_.WARNING = "WARNING"),
        (_.INDETERMINATE = "INDETERMINATE"),
        (function (_) {
          (_.ACTIVE_UNACK = "ACTIVE_UNACK"),
            (_.ACTIVE_ACK = "ACTIVE_ACK"),
            (_.CLEARED_UNACK = "CLEARED_UNACK"),
            (_.CLEARED_ACK = "CLEARED_ACK");
        })(o || (o = {})),
        (function (_) {
          (_.ANY = "ANY"),
            (_.ACTIVE = "ACTIVE"),
            (_.CLEARED = "CLEARED"),
            (_.ACK = "ACK"),
            (_.UNACK = "UNACK");
        })(i || (i = {}));
      const g = new Map([
          [d.CRITICAL, "alarm.severity-critical"],
          [d.MAJOR, "alarm.severity-major"],
          [d.MINOR, "alarm.severity-minor"],
          [d.WARNING, "alarm.severity-warning"],
          [d.INDETERMINATE, "alarm.severity-indeterminate"],
        ]),
        D = new Map([
          [o.ACTIVE_UNACK, "alarm.display-status.ACTIVE_UNACK"],
          [o.ACTIVE_ACK, "alarm.display-status.ACTIVE_ACK"],
          [o.CLEARED_UNACK, "alarm.display-status.CLEARED_UNACK"],
          [o.CLEARED_ACK, "alarm.display-status.CLEARED_ACK"],
        ]),
        y = new Map([
          [i.ANY, "alarm.search-status.ANY"],
          [i.ACTIVE, "alarm.search-status.ACTIVE"],
          [i.CLEARED, "alarm.search-status.CLEARED"],
          [i.ACK, "alarm.search-status.ACK"],
          [i.UNACK, "alarm.search-status.UNACK"],
        ]),
        m = new Map([
          [d.CRITICAL, "red"],
          [d.MAJOR, "orange"],
          [d.MINOR, "#ffca3d"],
          [d.WARNING, "#abab00"],
          [d.INDETERMINATE, "green"],
        ]),
        r = {
          id: new n.P(a._),
          tenantId: new e.j(a._),
          customerId: new s.u(a._),
          createdTime: new Date().getTime(),
          startTs: new Date().getTime(),
          endTs: 0,
          ackTs: 0,
          clearTs: 0,
          originatorName: "Simulated",
          originator: { entityType: C.py.DEVICE, id: "1" },
          type: "TEMPERATURE",
          severity: d.MAJOR,
          status: o.ACTIVE_UNACK,
          details: { message: "Temperature is high!" },
          propagate: !1,
        },
        h = {
          createdTime: {
            keyName: "createdTime",
            value: "createdTime",
            name: "alarm.created-time",
            time: !0,
          },
          startTime: {
            keyName: "startTime",
            value: "startTs",
            name: "alarm.start-time",
            time: !0,
          },
          endTime: {
            keyName: "endTime",
            value: "endTs",
            name: "alarm.end-time",
            time: !0,
          },
          ackTime: {
            keyName: "ackTime",
            value: "ackTs",
            name: "alarm.ack-time",
            time: !0,
          },
          clearTime: {
            keyName: "clearTime",
            value: "clearTs",
            name: "alarm.clear-time",
            time: !0,
          },
          originator: {
            keyName: "originator",
            value: "originatorName",
            name: "alarm.originator",
          },
          originatorType: {
            keyName: "originatorType",
            value: "originator.entityType",
            name: "alarm.originator-type",
          },
          type: { keyName: "type", value: "type", name: "alarm.type" },
          severity: {
            keyName: "severity",
            value: "severity",
            name: "alarm.severity",
          },
          status: { keyName: "status", value: "status", name: "alarm.status" },
        };
      class p {
        constructor(E, c, v, I, l) {
          (this.affectedEntityId = E),
            (this.pageLink = c),
            (this.searchStatus = v),
            (this.status = I),
            (this.fetchOriginator = l);
        }
        toQuery() {
          let E = `/${this.affectedEntityId.entityType}/${this.affectedEntityId.id}`;
          return (
            (E += this.pageLink.toQuery()),
            this.searchStatus
              ? (E += `&searchStatus=${this.searchStatus}`)
              : this.status && (E += `&status=${this.status}`),
            void 0 !== this.fetchOriginator &&
              null !== this.fetchOriginator &&
              (E += `&fetchOriginator=${this.fetchOriginator}`),
            E
          );
        }
      }
    },
    91320: (ee, R, t) => {
      "use strict";
      var e, C;
      t.d(R, { aA: () => e, Y_: () => n, l3: () => a }),
        ((C = e || (e = {})).singleEntity = "singleEntity"),
        (C.entityList = "entityList"),
        (C.entityName = "entityName"),
        (C.entityType = "entityType"),
        (C.stateEntity = "stateEntity"),
        (C.assetType = "assetType"),
        (C.deviceType = "deviceType"),
        (C.edgeType = "edgeType"),
        (C.entityViewType = "entityViewType"),
        (C.apiUsageState = "apiUsageState"),
        (C.relationsQuery = "relationsQuery"),
        (C.assetSearchQuery = "assetSearchQuery"),
        (C.deviceSearchQuery = "deviceSearchQuery"),
        (C.edgeSearchQuery = "edgeSearchQuery"),
        (C.entityViewSearchQuery = "entityViewSearchQuery");
      const n = new Array(e.edgeType, e.edgeSearchQuery),
        a = new Map([
          [e.singleEntity, "alias.filter-type-single-entity"],
          [e.entityList, "alias.filter-type-entity-list"],
          [e.entityName, "alias.filter-type-entity-name"],
          [e.entityType, "alias.filter-type-entity-type"],
          [e.stateEntity, "alias.filter-type-state-entity"],
          [e.assetType, "alias.filter-type-asset-type"],
          [e.deviceType, "alias.filter-type-device-type"],
          [e.edgeType, "alias.filter-type-edge-type"],
          [e.entityViewType, "alias.filter-type-entity-view-type"],
          [e.apiUsageState, "alias.filter-type-apiUsageState"],
          [e.relationsQuery, "alias.filter-type-relations-query"],
          [e.assetSearchQuery, "alias.filter-type-asset-search-query"],
          [e.deviceSearchQuery, "alias.filter-type-device-search-query"],
          [e.edgeSearchQuery, "alias.filter-type-edge-search-query"],
          [
            e.entityViewSearchQuery,
            "alias.filter-type-entity-view-search-query",
          ],
        ]);
    },
    26311: (ee, R, t) => {
      "use strict";
      var e, n;
      t.d(R, { W: () => e }),
        ((n = e || (e = {})).SYS_ADMIN = "SYS_ADMIN"),
        (n.TENANT_ADMIN = "TENANT_ADMIN"),
        (n.CUSTOMER_USER = "CUSTOMER_USER"),
        (n.REFRESH_TOKEN = "REFRESH_TOKEN"),
        (n.ANONYMOUS = "ANONYMOUS"),
        (n.PRE_VERIFICATION_TOKEN = "PRE_VERIFICATION_TOKEN");
    },
    30013: (ee, R, t) => {
      "use strict";
      t.d(R, { Jx: () => y, RF: () => m, S7: () => r });
      var e = t(25917),
        n = t(69412),
        a = t(68307),
        C = t(88002);
      let s, d, o;
      function y(h, p) {
        return (
          s
            ? (0, e.of)(s)
            : (0, n.D)(t.e(8114).then(t.t.bind(t, 48114, 23))).pipe(
                (0, a.b)((h) => {
                  s = h;
                })
              )
        ).pipe((0, C.U)((_) => _.js_beautify(h, p)));
      }
      function m(h, p) {
        return (
          o
            ? (0, e.of)(o)
            : (0, n.D)(t.e(3643).then(t.t.bind(t, 53643, 23))).pipe(
                (0, a.b)((h) => {
                  o = h;
                })
              )
        ).pipe((0, C.U)((_) => _.css_beautify(h, p)));
      }
      function r(h, p) {
        return (
          d
            ? (0, e.of)(d)
            : (0, n.D)(
                Promise.all([t.e(8114), t.e(3643), t.e(3802)]).then(
                  t.t.bind(t, 23802, 23)
                )
              ).pipe(
                (0, a.b)((h) => {
                  d = h;
                })
              )
        ).pipe((0, C.U)((_) => _.html_beautify(h, p)));
      }
    },
    65320: (ee, R, t) => {
      "use strict";
      var e, a, n;
      t.d(R, { r: () => e, b: () => n }),
        ((a = e || (e = {})).ENRICHMENT = "ENRICHMENT"),
        (a.FILTER = "FILTER"),
        (a.TRANSFORMATION = "TRANSFORMATION"),
        (a.ACTION = "ACTION"),
        (a.EXTERNAL = "EXTERNAL"),
        (a.FLOW = "FLOW"),
        (function (a) {
          (a.SYSTEM = "SYSTEM"), (a.TENANT = "TENANT");
        })(n || (n = {}));
    },
    82068: (ee, R, t) => {
      "use strict";
      t.d(R, {
        gT: () => n,
        AU: () => a,
        tr: () => C,
        mT: () => s,
        e3: () => d,
        Ge: () => o,
        g: () => i,
        oW: () => g,
        h6: () => D,
        zc: () => y,
        ac: () => m,
        SP: () => r,
        _T: () => h,
        hB: () => p,
        Bm: () => _,
      });
      var e = t(37716);
      const n = {
          serverErrorCode: {
            general: 2,
            authentication: 10,
            jwtTokenExpired: 11,
            tenantTrialExpired: 12,
            credentialsExpired: 15,
            permissionDenied: 20,
            invalidArguments: 30,
            badRequestParams: 31,
            itemNotFound: 32,
            tooManyRequests: 33,
            tooManyUpdates: 34,
          },
          entryPoints: {
            login: "/api/auth/login",
            tokenRefresh: "/api/auth/token",
            nonTokenBased: "/api/noauth",
          },
        },
        a = new Map([
          [n.serverErrorCode.general, "server-error.general"],
          [n.serverErrorCode.authentication, "server-error.authentication"],
          [n.serverErrorCode.jwtTokenExpired, "server-error.jwt-token-expired"],
          [
            n.serverErrorCode.tenantTrialExpired,
            "server-error.tenant-trial-expired",
          ],
          [
            n.serverErrorCode.credentialsExpired,
            "server-error.credentials-expired",
          ],
          [
            n.serverErrorCode.permissionDenied,
            "server-error.permission-denied",
          ],
          [
            n.serverErrorCode.invalidArguments,
            "server-error.invalid-arguments",
          ],
          [
            n.serverErrorCode.badRequestParams,
            "server-error.bad-request-params",
          ],
          [n.serverErrorCode.itemNotFound, "server-error.item-not-found"],
          [n.serverErrorCode.tooManyRequests, "server-error.too-many-requests"],
          [n.serverErrorCode.tooManyUpdates, "server-error.too-many-updates"],
        ]),
        C = {
          xs: "screen and (max-width: 599px)",
          sm: "screen and (min-width: 600px) and (max-width: 959px)",
          md: "screen and (min-width: 960px) and (max-width: 1279px)",
          lg: "screen and (min-width: 1280px) and (max-width: 1919px)",
          xl: "screen and (min-width: 1920px) and (max-width: 5000px)",
          "lt-sm": "screen and (max-width: 599px)",
          "lt-md": "screen and (max-width: 959px)",
          "lt-lg": "screen and (max-width: 1279px)",
          "lt-xl": "screen and (max-width: 1919px)",
          "gt-xs": "screen and (min-width: 600px)",
          "gt-sm": "screen and (min-width: 960px)",
          "gt-md": "screen and (min-width: 1280px)",
          "gt-lg": "screen and (min-width: 1920px)",
          "gt-xl": "screen and (min-width: 5001px)",
        },
        s = "http://ninox.ai",
        d = {
          linksMap: {
            outgoingMailSettings: s + "/docs/user-guide/ui/mail-settings",
            smsProviderSettings:
              s + "/docs/user-guide/ui/sms-provider-settings",
            securitySettings: s + "/docs/user-guide/ui/security-settings",
            oauth2Settings: s + "/docs/user-guide/oauth-2-support/",
            twoFactorAuthSettings: s + "/docs/",
            ruleEngine: s + "/docs/user-guide/rule-engine-2-0/overview/",
            ruleNodeCheckRelation:
              s +
              "/docs/user-guide/rule-engine-2-0/filter-nodes/#check-relation-filter-node",
            ruleNodeCheckExistenceFields:
              s +
              "/docs/user-guide/rule-engine-2-0/filter-nodes/#check-existence-fields-node",
            ruleNodeGpsGeofencingFilter:
              s +
              "/docs/user-guide/rule-engine-2-0/filter-nodes/#gps-geofencing-filter-node",
            ruleNodeJsFilter:
              s +
              "/docs/user-guide/rule-engine-2-0/filter-nodes/#script-filter-node",
            ruleNodeJsSwitch:
              s + "/docs/user-guide/rule-engine-2-0/filter-nodes/#switch-node",
            ruleNodeAssetProfileSwitch:
              s +
              "/docs/user-guide/rule-engine-2-0/filter-nodes/#asset-profile-switch",
            ruleNodeDeviceProfileSwitch:
              s +
              "/docs/user-guide/rule-engine-2-0/filter-nodes/#device-profile-switch",
            ruleNodeCheckAlarmStatus:
              s +
              "/docs/user-guide/rule-engine-2-0/filter-nodes/#check-alarm-status",
            ruleNodeMessageTypeFilter:
              s +
              "/docs/user-guide/rule-engine-2-0/filter-nodes/#message-type-filter-node",
            ruleNodeMessageTypeSwitch:
              s +
              "/docs/user-guide/rule-engine-2-0/filter-nodes/#message-type-switch-node",
            ruleNodeOriginatorTypeFilter:
              s +
              "/docs/user-guide/rule-engine-2-0/filter-nodes/#originator-type-filter-node",
            ruleNodeOriginatorTypeSwitch:
              s +
              "/docs/user-guide/rule-engine-2-0/filter-nodes/#originator-type-switch-node",
            ruleNodeOriginatorAttributes:
              s +
              "/docs/user-guide/rule-engine-2-0/enrichment-nodes/#originator-attributes",
            ruleNodeOriginatorFields:
              s +
              "/docs/user-guide/rule-engine-2-0/enrichment-nodes/#originator-fields",
            ruleNodeOriginatorTelemetry:
              s +
              "/docs/user-guide/rule-engine-2-0/enrichment-nodes/#originator-telemetry",
            ruleNodeCustomerAttributes:
              s +
              "/docs/user-guide/rule-engine-2-0/enrichment-nodes/#customer-attributes",
            ruleNodeCustomerDetails:
              s +
              "/docs/user-guide/rule-engine-2-0/enrichment-nodes/#customer-details",
            ruleNodeDeviceAttributes:
              s +
              "/docs/user-guide/rule-engine-2-0/enrichment-nodes/#device-attributes",
            ruleNodeRelatedAttributes:
              s +
              "/docs/user-guide/rule-engine-2-0/enrichment-nodes/#related-attributes",
            ruleNodeTenantAttributes:
              s +
              "/docs/user-guide/rule-engine-2-0/enrichment-nodes/#tenant-attributes",
            ruleNodeTenantDetails:
              s +
              "/docs/user-guide/rule-engine-2-0/enrichment-nodes/#tenant-details",
            ruleNodeChangeOriginator:
              s +
              "/docs/user-guide/rule-engine-2-0/transformation-nodes/#change-originator",
            ruleNodeTransformMsg:
              s +
              "/docs/user-guide/rule-engine-2-0/transformation-nodes/#script-transformation-node",
            ruleNodeMsgToEmail:
              s +
              "/docs/user-guide/rule-engine-2-0/transformation-nodes/#to-email-node",
            ruleNodeAssignToCustomer:
              s +
              "/docs/user-guide/rule-engine-2-0/transformation-nodes/#assign-to-customer-node",
            ruleNodeUnassignFromCustomer:
              s +
              "/docs/user-guide/rule-engine-2-0/transformation-nodes/#unassign-from-customer-node",
            ruleNodeClearAlarm:
              s +
              "/docs/user-guide/rule-engine-2-0/action-nodes/#clear-alarm-node",
            ruleNodeCreateAlarm:
              s +
              "/docs/user-guide/rule-engine-2-0/action-nodes/#create-alarm-node",
            ruleNodeCreateRelation:
              s +
              "/docs/user-guide/rule-engine-2-0/action-nodes/#create-relation-node",
            ruleNodeDeleteRelation:
              s +
              "/docs/user-guide/rule-engine-2-0/action-nodes/#delete-relation-node",
            ruleNodeMsgDelay:
              s + "/docs/user-guide/rule-engine-2-0/action-nodes/#delay-node",
            ruleNodeMsgGenerator:
              s +
              "/docs/user-guide/rule-engine-2-0/action-nodes/#generator-node",
            ruleNodeGpsGeofencingEvents:
              s +
              "/docs/user-guide/rule-engine-2-0/action-nodes/#gps-geofencing-events-node",
            ruleNodeLog:
              s + "/docs/user-guide/rule-engine-2-0/action-nodes/#log-node",
            ruleNodeRpcCallReply:
              s +
              "/docs/user-guide/rule-engine-2-0/action-nodes/#rpc-call-reply-node",
            ruleNodeRpcCallRequest:
              s +
              "/docs/user-guide/rule-engine-2-0/action-nodes/#rpc-call-request-node",
            ruleNodeSaveAttributes:
              s +
              "/docs/user-guide/rule-engine-2-0/action-nodes/#save-attributes-node",
            ruleNodeSaveTimeseries:
              s +
              "/docs/user-guide/rule-engine-2-0/action-nodes/#save-timeseries-node",
            ruleNodeSaveToCustomTable:
              s +
              "/docs/user-guide/rule-engine-2-0/action-nodes/#save-to-custom-table",
            ruleNodeRuleChain:
              s +
              "/docs/user-guide/rule-engine-2-0/flow-nodes/#rule-chain-node",
            ruleNodeOutputNode:
              s + "/docs/user-guide/rule-engine-2-0/flow-nodes/#output-node",
            ruleNodeAwsSns:
              s +
              "/docs/user-guide/rule-engine-2-0/external-nodes/#aws-sns-node",
            ruleNodeAwsSqs:
              s +
              "/docs/user-guide/rule-engine-2-0/external-nodes/#aws-sqs-node",
            ruleNodeKafka:
              s + "/docs/user-guide/rule-engine-2-0/external-nodes/#kafka-node",
            ruleNodeMqtt:
              s + "/docs/user-guide/rule-engine-2-0/external-nodes/#mqtt-node",
            ruleNodeAzureIotHub:
              s +
              "/docs/user-guide/rule-engine-2-0/external-nodes/#azure-iot-hub-node",
            ruleNodeRabbitMq:
              s +
              "/docs/user-guide/rule-engine-2-0/external-nodes/#rabbitmq-node",
            ruleNodeRestApiCall:
              s +
              "/docs/user-guide/rule-engine-2-0/external-nodes/#rest-api-call-node",
            ruleNodeSendEmail:
              s +
              "/docs/user-guide/rule-engine-2-0/external-nodes/#send-email-node",
            ruleNodeSendSms:
              s +
              "/docs/user-guide/rule-engine-2-0/external-nodes/#send-sms-node",
            ruleNodeMath:
              s +
              "/docs/user-guide/rule-engine-2-0/action-nodes/#math-function-node",
            tenants: s + "/docs/user-guide/ui/tenants",
            tenantProfiles: s + "/docs/user-guide/ui/tenant-profiles",
            customers: s + "/docs/user-guide/ui/customers",
            users: s + "/docs/user-guide/ui/users",
            devices: s + "/docs/user-guide/ui/devices",
            deviceProfiles: s + "/docs/user-guide/ui/device-profiles",
            assetProfiles: s + "/docs/user-guide/ui/asset-profiles",
            edges: s + "/docs/user-guide/ui/edges",
            assets: s + "/docs/user-guide/ui/assets",
            entityViews: s + "/docs/user-guide/ui/entity-views",
            entitiesImport: s + "/docs/user-guide/bulk-provisioning",
            rulechains: s + "/docs/user-guide/ui/rule-chains",
            resources: s + "/docs/user-guide/ui/resources",
            dashboards: s + "/docs/user-guide/ui/dashboards",
            otaUpdates: s + "/docs/user-guide/ota-updates",
            widgetsBundles: s + "/docs/user-guide/ui/widget-library#bundles",
            widgetsConfig:
              s + "/docs/user-guide/ui/dashboards#widget-configuration",
            widgetsConfigTimeseries:
              s + "/docs/user-guide/ui/dashboards#timeseries",
            widgetsConfigLatest: s + "/docs/user-guide/ui/dashboards#latest",
            widgetsConfigRpc: s + "/docs/user-guide/ui/dashboards#rpc",
            widgetsConfigAlarm: s + "/docs/user-guide/ui/dashboards#alarm",
            widgetsConfigStatic: s + "/docs/user-guide/ui/dashboards#static",
            ruleNodePushToCloud:
              s +
              "/docs/user-guide/rule-engine-2-0/action-nodes/#push-to-cloud",
            ruleNodePushToEdge:
              s + "/docs/user-guide/rule-engine-2-0/action-nodes/#push-to-edge",
            queue: s + "/docs/user-guide/queue",
            repositorySettings:
              s +
              "/docs/user-guide/version-control/#git-settings-configuration",
            autoCommitSettings:
              s + "/docs/user-guide/version-control/#auto-commit",
            twoFactorAuthentication:
              s + "/docs/user-guide/two-factor-authentication",
          },
        };
      var o, E, i;
      ((E = o || (o = {})).STRING = "STRING"),
        (E.INTEGER = "INTEGER"),
        (E.DOUBLE = "DOUBLE"),
        (E.BOOLEAN = "BOOLEAN"),
        (E.JSON = "JSON"),
        (function (E) {
          (E.STRING = "STRING"),
            (E.LONG = "LONG"),
            (E.BOOLEAN = "BOOLEAN"),
            (E.DOUBLE = "DOUBLE"),
            (E.JSON = "JSON");
        })(i || (i = {}));
      const g = new Map([
          [i.STRING, "value.string"],
          [i.LONG, "value.integer"],
          [i.BOOLEAN, "value.boolean"],
          [i.DOUBLE, "value.double"],
          [i.JSON, "value.json"],
        ]),
        D = new Map([
          [o.STRING, { name: "value.string", icon: "mdi:format-text" }],
          [o.INTEGER, { name: "value.integer", icon: "mdi:numeric" }],
          [o.DOUBLE, { name: "value.double", icon: "mdi:numeric" }],
          [
            o.BOOLEAN,
            { name: "value.boolean", icon: "mdi:checkbox-marked-outline" },
          ],
          [o.JSON, { name: "value.json", icon: "mdi:code-json" }],
        ]);
      var y;
      !(function (E) {
        (E.JSON = "JSON"), (E.TEXT = "TEXT"), (E.BINARY = "BINARY");
      })(y || (y = {}));
      const m = new Map([
          [y.JSON, { name: "content-type.json", code: "json" }],
          [y.TEXT, { name: "content-type.text", code: "text" }],
          [y.BINARY, { name: "content-type.binary", code: "text" }],
        ]),
        r = 550,
        h = "custom.",
        p = "i18n",
        _ = new e.InjectionToken("ModulesMap");
    },
    92400: (ee, R, t) => {
      "use strict";
      t.d(R, {
        z8: () => C,
        dH: () => s,
        a2: () => d,
        XR: () => o,
        MR: () => i,
        hB: () => g,
        Lh: () => D,
        GX: () => y,
        Ci: () => m,
        c2: () => r,
        $3: () => h,
        ji: () => p,
        jG: () => _,
        Qq: () => E,
        zl: () => c,
        Qg: () => v,
        RW: () => I,
        X1: () => l,
        Ab: () => T,
        vj: () => O,
        Jf: () => w,
        uC: () => b,
        Nm: () => S,
        p_: () => u,
        qx: () => f,
        eF: () => M,
        ni: () => L,
        xM: () => k,
        WV: () => B,
        kE: () => j,
        II: () => F,
        qF: () => V,
        Av: () => P,
        FZ: () => A,
        e9: () => U,
        Sw: () => G,
        Be: () => Z,
        Rv: () => le,
        IS: () => X,
        D8: () => se,
        EM: () => ne,
        pq: () => re,
        sh: () => de,
        tK: () => Q,
      });
      var C,
        K,
        s,
        d,
        o,
        i,
        e = t(16738),
        a = t(84314);
      ((K = C || (C = {})).DEFAULT = "DEFAULT"),
        (K.SNMP = "SNMP"),
        (function (K) {
          (K.DEFAULT = "DEFAULT"),
            (K.MQTT = "MQTT"),
            (K.COAP = "COAP"),
            (K.LWM2M = "LWM2M"),
            (K.SNMP = "SNMP");
        })(s || (s = {})),
        (function (K) {
          (K.JSON = "JSON"), (K.PROTOBUF = "PROTOBUF");
        })(d || (d = {})),
        (function (K) {
          (K.DEFAULT = "DEFAULT"), (K.EFENTO = "EFENTO");
        })(o || (o = {})),
        (function (K) {
          (K.DISABLED = "DISABLED"),
            (K.ALLOW_CREATE_NEW_DEVICES = "ALLOW_CREATE_NEW_DEVICES"),
            (K.CHECK_PRE_PROVISIONED_DEVICES = "CHECK_PRE_PROVISIONED_DEVICES");
        })(i || (i = {}));
      const g = new Map([[C.DEFAULT, "device-profile.type-default"]]),
        D = new Map([
          [
            C.DEFAULT,
            { hasProfileConfiguration: !1, hasDeviceConfiguration: !1 },
          ],
          [C.SNMP, { hasProfileConfiguration: !0, hasDeviceConfiguration: !0 }],
        ]),
        y = new Map([
          [s.DEFAULT, "device-profile.transport-type-default"],
          [s.MQTT, "device-profile.transport-type-mqtt"],
          [s.COAP, "device-profile.transport-type-coap"],
          [s.LWM2M, "device-profile.transport-type-lwm2m"],
          [s.SNMP, "device-profile.transport-type-snmp"],
        ]),
        m = new Map([
          [i.DISABLED, "device-profile.provision-strategy-disabled"],
          [
            i.ALLOW_CREATE_NEW_DEVICES,
            "device-profile.provision-strategy-created-new",
          ],
          [
            i.CHECK_PRE_PROVISIONED_DEVICES,
            "device-profile.provision-strategy-check-pre-provisioned",
          ],
        ]),
        r = new Map([
          [s.DEFAULT, "device-profile.transport-type-default-hint"],
          [s.MQTT, "device-profile.transport-type-mqtt-hint"],
          [s.COAP, "device-profile.transport-type-coap-hint"],
          [s.LWM2M, "device-profile.transport-type-lwm2m-hint"],
          [s.SNMP, "device-profile.transport-type-snmp-hint"],
        ]),
        h = new Map([
          [d.JSON, "device-profile.transport-device-payload-type-json"],
          [d.PROTOBUF, "device-profile.transport-device-payload-type-proto"],
        ]),
        p =
          'syntax ="proto3";\npackage telemetry;\n\nmessage SensorDataReading {\n\n  optional double temperature = 1;\n  optional double humidity = 2;\n  InnerObject innerObject = 3;\n\n  message InnerObject {\n    optional string key1 = 1;\n    optional bool key2 = 2;\n    optional double key3 = 3;\n    optional int32 key4 = 4;\n    optional string key5 = 5;\n  }\n}\n',
        _ =
          'syntax ="proto3";\npackage attributes;\n\nmessage SensorConfiguration {\n  optional string firmwareVersion = 1;\n  optional string serialNumber = 2;\n}',
        E =
          'syntax ="proto3";\npackage rpc;\n\nmessage RpcRequestMsg {\n  optional string method = 1;\n  optional int32 requestId = 2;\n  optional string params = 3;\n}',
        c =
          'syntax ="proto3";\npackage rpc;\n\nmessage RpcResponseMsg {\n  optional string payload = 1;\n}',
        v = new Map([
          [o.DEFAULT, "device-profile.coap-device-type-default"],
          [o.EFENTO, "device-profile.coap-device-type-efento"],
        ]),
        I = new Map([
          [
            s.DEFAULT,
            { hasProfileConfiguration: !1, hasDeviceConfiguration: !1 },
          ],
          [s.MQTT, { hasProfileConfiguration: !0, hasDeviceConfiguration: !1 }],
          [
            s.LWM2M,
            { hasProfileConfiguration: !0, hasDeviceConfiguration: !0 },
          ],
          [s.COAP, { hasProfileConfiguration: !0, hasDeviceConfiguration: !0 }],
          [s.SNMP, { hasProfileConfiguration: !0, hasDeviceConfiguration: !0 }],
        ]);
      var l;
      !(function (K) {
        (K.TELEMETRY_QUERYING = "TELEMETRY_QUERYING"),
          (K.CLIENT_ATTRIBUTES_QUERYING = "CLIENT_ATTRIBUTES_QUERYING"),
          (K.SHARED_ATTRIBUTES_SETTING = "SHARED_ATTRIBUTES_SETTING"),
          (K.TO_DEVICE_RPC_REQUEST = "TO_DEVICE_RPC_REQUEST");
      })(l || (l = {}));
      const T = new Map([
        [l.TELEMETRY_QUERYING, " Telemetry"],
        [l.CLIENT_ATTRIBUTES_QUERYING, "Client attributes"],
        [l.SHARED_ATTRIBUTES_SETTING, "Shared attributes"],
        [l.TO_DEVICE_RPC_REQUEST, "RPC request"],
      ]);
      function O(K) {
        let H = null;
        if (K)
          switch (K) {
            case C.DEFAULT:
              H = Object.assign(Object.assign({}, {}), { type: C.DEFAULT });
          }
        return H;
      }
      function w(K) {
        let H = null;
        if (K)
          switch (K) {
            case C.DEFAULT:
              H = Object.assign(Object.assign({}, {}), { type: C.DEFAULT });
          }
        return H;
      }
      function b(K) {
        let H = null;
        if (K)
          switch (K) {
            case s.DEFAULT:
              H = Object.assign(Object.assign({}, {}), { type: s.DEFAULT });
              break;
            case s.MQTT:
              const W = {
                deviceTelemetryTopic: "v1/devices/me/telemetry",
                deviceAttributesTopic: "v1/devices/me/attributes",
                sendAckOnValidationException: !1,
                transportPayloadTypeConfiguration: {
                  transportPayloadType: d.JSON,
                  enableCompatibilityWithJsonPayloadFormat: !1,
                  useJsonPayloadFormatForDefaultDownlinkTopics: !1,
                },
              };
              H = Object.assign(Object.assign({}, W), { type: s.MQTT });
              break;
            case s.COAP:
              const $ = {
                coapDeviceTypeConfiguration: {
                  coapDeviceType: o.DEFAULT,
                  transportPayloadTypeConfiguration: {
                    transportPayloadType: d.JSON,
                  },
                },
                clientSettings: { powerMode: a.hS.DRX },
              };
              H = Object.assign(Object.assign({}, $), { type: s.COAP });
              break;
            case s.LWM2M:
              const J = {
                observeAttr: (0, a.mo)(),
                bootstrap: [],
                clientLwM2mSettings: (0, a.Dy)(),
              };
              H = Object.assign(Object.assign({}, J), { type: s.LWM2M });
              break;
            case s.SNMP:
              H = Object.assign(
                Object.assign(
                  {},
                  { timeoutMs: 500, retries: 0, communicationConfigs: null }
                ),
                { type: s.SNMP }
              );
          }
        return H;
      }
      function S(K) {
        let H = null;
        if (K)
          switch (K) {
            case s.DEFAULT:
              H = Object.assign(Object.assign({}, {}), { type: s.DEFAULT });
              break;
            case s.MQTT:
              H = Object.assign(Object.assign({}, {}), { type: s.MQTT });
              break;
            case s.COAP:
              H = Object.assign(Object.assign({}, { powerMode: null }), {
                type: s.COAP,
              });
              break;
            case s.LWM2M:
              H = Object.assign(Object.assign({}, { powerMode: null }), {
                type: s.LWM2M,
              });
              break;
            case s.SNMP:
              const te = {
                host: "localhost",
                port: 161,
                protocolVersion: j.V2C,
                community: "public",
              };
              H = Object.assign(Object.assign({}, te), { type: s.SNMP });
          }
        return H;
      }
      var u;
      !(function (K) {
        (K.SIMPLE = "SIMPLE"),
          (K.DURATION = "DURATION"),
          (K.REPEATING = "REPEATING");
      })(u || (u = {}));
      const f = new Map([
        [u.SIMPLE, "device-profile.condition-type-simple"],
        [u.DURATION, "device-profile.condition-type-duration"],
        [u.REPEATING, "device-profile.condition-type-repeating"],
      ]);
      var M;
      !(function (K) {
        (K.ANY_TIME = "ANY_TIME"),
          (K.SPECIFIC_TIME = "SPECIFIC_TIME"),
          (K.CUSTOM = "CUSTOM");
      })(M || (M = {}));
      const L = new Map([
        [M.ANY_TIME, "device-profile.schedule-any-time"],
        [M.SPECIFIC_TIME, "device-profile.schedule-specific-time"],
        [M.CUSTOM, "device-profile.schedule-custom"],
      ]);
      function k(K) {
        return N(K.value) ? null : { alarmRule: !0 };
      }
      function N(K) {
        return !!(
          K &&
          K.condition &&
          K.condition.condition &&
          K.condition.condition.length
        );
      }
      function B(K) {
        const H = K.value;
        if (H && H.id && H.alarmType && H.createRules) {
          const x = Object.keys(H.createRules);
          if (x.length) {
            let W = !0;
            for (const $ of x) {
              if (!N(H.createRules[$])) {
                W = !1;
                break;
              }
            }
            if ((W && H.clearRule && !N(H.clearRule) && (W = !1), W))
              return null;
          }
        }
        return { deviceProfileAlarm: !0 };
      }
      var j, F;
      !(function (K) {
        (K.V1 = "V1"), (K.V2C = "V2C"), (K.V3 = "V3");
      })(j || (j = {})),
        (function (K) {
          (K.SHA_1 = "SHA_1"),
            (K.SHA_224 = "SHA_224"),
            (K.SHA_256 = "SHA_256"),
            (K.SHA_384 = "SHA_384"),
            (K.SHA_512 = "SHA_512"),
            (K.MD5 = "MD%");
        })(F || (F = {}));
      const V = new Map([
        [F.SHA_1, "SHA-1"],
        [F.SHA_224, "SHA-224"],
        [F.SHA_256, "SHA-256"],
        [F.SHA_384, "SHA-384"],
        [F.SHA_512, "SHA-512"],
        [F.MD5, "MD5"],
      ]);
      var P;
      !(function (K) {
        (K.DES = "DES"),
          (K.AES_128 = "AES_128"),
          (K.AES_192 = "AES_192"),
          (K.AES_256 = "AES_256");
      })(P || (P = {}));
      const A = new Map([
        [P.DES, "DES"],
        [P.AES_128, "AES-128"],
        [P.AES_192, "AES-192"],
        [P.AES_256, "AES-256"],
      ]);
      var U;
      !(function (K) {
        (K.ACCESS_TOKEN = "ACCESS_TOKEN"),
          (K.X509_CERTIFICATE = "X509_CERTIFICATE"),
          (K.MQTT_BASIC = "MQTT_BASIC"),
          (K.LWM2M_CREDENTIALS = "LWM2M_CREDENTIALS");
      })(U || (U = {}));
      const G = new Map([
          [U.ACCESS_TOKEN, "Access token"],
          [U.X509_CERTIFICATE, "X.509"],
          [U.MQTT_BASIC, "MQTT Basic"],
          [U.LWM2M_CREDENTIALS, "LwM2M Credentials"],
        ]),
        Z = new Map([
          [s.DEFAULT, [U.ACCESS_TOKEN, U.X509_CERTIFICATE, U.MQTT_BASIC]],
          [s.MQTT, [U.ACCESS_TOKEN, U.X509_CERTIFICATE, U.MQTT_BASIC]],
          [s.COAP, [U.ACCESS_TOKEN, U.X509_CERTIFICATE]],
          [s.LWM2M, [U.LWM2M_CREDENTIALS]],
          [s.SNMP, [U.ACCESS_TOKEN]],
        ]);
      function le() {
        return { clientId: "", userName: "", password: "" };
      }
      var X;
      !(function (K) {
        (K.SUCCESS = "SUCCESS"),
          (K.FAILURE = "FAILURE"),
          (K.CLAIMED = "CLAIMED");
      })(X || (X = {}));
      const se = new Array(
        "device-profile.schedule-day.monday",
        "device-profile.schedule-day.tuesday",
        "device-profile.schedule-day.wednesday",
        "device-profile.schedule-day.thursday",
        "device-profile.schedule-day.friday",
        "device-profile.schedule-day.saturday",
        "device-profile.schedule-day.sunday"
      );
      function ne(K) {
        switch (K) {
          case 0:
            return "device-profile.schedule-day.monday";
          case 1:
            return this.translate.instant(
              "device-profile.schedule-day.tuesday"
            );
          case 2:
            return this.translate.instant(
              "device-profile.schedule-day.wednesday"
            );
          case 3:
            return this.translate.instant(
              "device-profile.schedule-day.thursday"
            );
          case 4:
            return this.translate.instant("device-profile.schedule-day.friday");
          case 5:
            return this.translate.instant(
              "device-profile.schedule-day.saturday"
            );
          case 6:
            return this.translate.instant("device-profile.schedule-day.sunday");
        }
      }
      function re(K) {
        return "number" == typeof K || null === K
          ? 0
          : e
              .utc([
                1970,
                0,
                1,
                K.getHours(),
                K.getMinutes(),
                K.getSeconds(),
                0,
              ])
              .valueOf();
      }
      function de(K = 0) {
        return new Date(K + 60 * new Date(K).getTimezoneOffset() * 1e3);
      }
      function pe(K) {
        return e(
          "number" == typeof K || null === K
            ? [1970, 0, 1, 0, 0, 0, 0]
            : [1970, 0, 1, K.getHours(), K.getMinutes(), 0, 0]
        );
      }
      function Q(K, H) {
        const x = pe(K),
          W = pe(H);
        return x < W
          ? `<span><span class="nowrap">${x.format(
              "hh:mm A"
            )}</span> \u2013 <span class="nowrap">${W.format(
              "hh:mm A"
            )}</span></span>`
          : (0 === x.valueOf() && 0 === W.valueOf()) ||
            (x.isSame(e([1970, 0])) && W.isSame(e([1970, 0])))
          ? '<span><span class="nowrap">12:00 AM</span> \u2013 <span class="nowrap">12:00 PM</span></span>'
          : `<span><span class="nowrap">12:00 AM</span> \u2013 <span class="nowrap">${W.format(
              "hh:mm A"
            )}</span> and <span class="nowrap">${x.format(
              "hh:mm A"
            )}</span> \u2013 <span class="nowrap">12:00 PM</span></span>`;
      }
    },
    83215: (ee, R, t) => {
      "use strict";
      var e, i, n, a;
      t.d(R, {
        Lj: () => e,
        Hl: () => n,
        z0: () => a,
        r6: () => C,
        s_: () => s,
        s3: () => d,
        qX: () => o,
      }),
        ((i = e || (e = {})).DASHBOARD = "DASHBOARD"),
        (i.ASSET = "ASSET"),
        (i.DEVICE = "DEVICE"),
        (i.DEVICE_PROFILE = "DEVICE_PROFILE"),
        (i.ASSET_PROFILE = "ASSET_PROFILE"),
        (i.ENTITY_VIEW = "ENTITY_VIEW"),
        (i.ALARM = "ALARM"),
        (i.RULE_CHAIN = "RULE_CHAIN"),
        (i.RULE_CHAIN_METADATA = "RULE_CHAIN_METADATA"),
        (i.EDGE = "EDGE"),
        (i.USER = "USER"),
        (i.CUSTOMER = "CUSTOMER"),
        (i.RELATION = "RELATION"),
        (i.TENANT = "TENANT"),
        (i.WIDGETS_BUNDLE = "WIDGETS_BUNDLE"),
        (i.WIDGET_TYPE = "WIDGET_TYPE"),
        (i.ADMIN_SETTINGS = "ADMIN_SETTINGS"),
        (function (i) {
          (i.ADDED = "ADDED"),
            (i.DELETED = "DELETED"),
            (i.UPDATED = "UPDATED"),
            (i.POST_ATTRIBUTES = "POST_ATTRIBUTES"),
            (i.ATTRIBUTES_UPDATED = "ATTRIBUTES_UPDATED"),
            (i.ATTRIBUTES_DELETED = "ATTRIBUTES_DELETED"),
            (i.TIMESERIES_UPDATED = "TIMESERIES_UPDATED"),
            (i.CREDENTIALS_UPDATED = "CREDENTIALS_UPDATED"),
            (i.ASSIGNED_TO_CUSTOMER = "ASSIGNED_TO_CUSTOMER"),
            (i.UNASSIGNED_FROM_CUSTOMER = "UNASSIGNED_FROM_CUSTOMER"),
            (i.RELATION_ADD_OR_UPDATE = "RELATION_ADD_OR_UPDATE"),
            (i.RELATION_DELETED = "RELATION_DELETED"),
            (i.RPC_CALL = "RPC_CALL"),
            (i.ALARM_ACK = "ALARM_ACK"),
            (i.ALARM_CLEAR = "ALARM_CLEAR"),
            (i.ASSIGNED_TO_EDGE = "ASSIGNED_TO_EDGE"),
            (i.UNASSIGNED_FROM_EDGE = "UNASSIGNED_FROM_EDGE"),
            (i.CREDENTIALS_REQUEST = "CREDENTIALS_REQUEST"),
            (i.ENTITY_MERGE_REQUEST = "ENTITY_MERGE_REQUEST");
        })(n || (n = {})),
        (function (i) {
          (i.DEPLOYED = "DEPLOYED"), (i.PENDING = "PENDING");
        })(a || (a = {}));
      const C = new Map([
          [e.DASHBOARD, "edge-event.type-dashboard"],
          [e.ASSET, "edge-event.type-asset"],
          [e.DEVICE, "edge-event.type-device"],
          [e.DEVICE_PROFILE, "edge-event.type-device-profile"],
          [e.ASSET_PROFILE, "edge-event.type-asset-profile"],
          [e.ENTITY_VIEW, "edge-event.type-entity-view"],
          [e.ALARM, "edge-event.type-alarm"],
          [e.RULE_CHAIN, "edge-event.type-rule-chain"],
          [e.RULE_CHAIN_METADATA, "edge-event.type-rule-chain-metadata"],
          [e.EDGE, "edge-event.type-edge"],
          [e.USER, "edge-event.type-user"],
          [e.CUSTOMER, "edge-event.type-customer"],
          [e.RELATION, "edge-event.type-relation"],
          [e.TENANT, "edge-event.type-tenant"],
          [e.WIDGETS_BUNDLE, "edge-event.type-widgets-bundle"],
          [e.WIDGET_TYPE, "edge-event.type-widgets-type"],
          [e.ADMIN_SETTINGS, "edge-event.type-admin-settings"],
        ]),
        s = new Map([
          [n.ADDED, "edge-event.action-type-added"],
          [n.DELETED, "edge-event.action-type-deleted"],
          [n.UPDATED, "edge-event.action-type-updated"],
          [n.POST_ATTRIBUTES, "edge-event.action-type-post-attributes"],
          [n.ATTRIBUTES_UPDATED, "edge-event.action-type-attributes-updated"],
          [n.ATTRIBUTES_DELETED, "edge-event.action-type-attributes-deleted"],
          [n.TIMESERIES_UPDATED, "edge-event.action-type-timeseries-updated"],
          [n.CREDENTIALS_UPDATED, "edge-event.action-type-credentials-updated"],
          [
            n.ASSIGNED_TO_CUSTOMER,
            "edge-event.action-type-assigned-to-customer",
          ],
          [
            n.UNASSIGNED_FROM_CUSTOMER,
            "edge-event.action-type-unassigned-from-customer",
          ],
          [
            n.RELATION_ADD_OR_UPDATE,
            "edge-event.action-type-relation-add-or-update",
          ],
          [n.RELATION_DELETED, "edge-event.action-type-relation-deleted"],
          [n.RPC_CALL, "edge-event.action-type-rpc-call"],
          [n.ALARM_ACK, "edge-event.action-type-alarm-ack"],
          [n.ALARM_CLEAR, "edge-event.action-type-alarm-clear"],
          [n.ASSIGNED_TO_EDGE, "edge-event.action-type-assigned-to-edge"],
          [
            n.UNASSIGNED_FROM_EDGE,
            "edge-event.action-type-unassigned-from-edge",
          ],
          [n.CREDENTIALS_REQUEST, "edge-event.action-type-credentials-request"],
          [
            n.ENTITY_MERGE_REQUEST,
            "edge-event.action-type-entity-merge-request",
          ],
        ]),
        d = [
          n.POST_ATTRIBUTES,
          n.ATTRIBUTES_UPDATED,
          n.ATTRIBUTES_DELETED,
          n.TIMESERIES_UPDATED,
          n.RPC_CALL,
        ],
        o = new Map([
          [a.DEPLOYED, "#000000"],
          [a.PENDING, "#9e9e9e"],
        ]);
    },
    52042: (ee, R, t) => {
      "use strict";
      var e, d, n;
      t.d(R, {
        py: () => e,
        Ul: () => n,
        Jr: () => a,
        CZ: () => C,
        MM: () => s,
      }),
        ((d = e || (e = {})).TENANT = "TENANT"),
        (d.TENANT_PROFILE = "TENANT_PROFILE"),
        (d.CUSTOMER = "CUSTOMER"),
        (d.USER = "USER"),
        (d.DASHBOARD = "DASHBOARD"),
        (d.ASSET = "ASSET"),
        (d.DEVICE = "DEVICE"),
        (d.DEVICE_PROFILE = "DEVICE_PROFILE"),
        (d.ASSET_PROFILE = "ASSET_PROFILE"),
        (d.ALARM = "ALARM"),
        (d.RULE_CHAIN = "RULE_CHAIN"),
        (d.RULE_NODE = "RULE_NODE"),
        (d.EDGE = "EDGE"),
        (d.ENTITY_VIEW = "ENTITY_VIEW"),
        (d.WIDGETS_BUNDLE = "WIDGETS_BUNDLE"),
        (d.WIDGET_TYPE = "WIDGET_TYPE"),
        (d.API_USAGE_STATE = "API_USAGE_STATE"),
        (d.TB_RESOURCE = "TB_RESOURCE"),
        (d.OTA_PACKAGE = "OTA_PACKAGE"),
        (d.RPC = "RPC"),
        (d.QUEUE = "QUEUE"),
        (function (d) {
          (d.CURRENT_CUSTOMER = "CURRENT_CUSTOMER"),
            (d.CURRENT_TENANT = "CURRENT_TENANT"),
            (d.CURRENT_USER = "CURRENT_USER"),
            (d.CURRENT_USER_OWNER = "CURRENT_USER_OWNER");
        })(n || (n = {}));
      const a = new Map([
          [
            e.TENANT,
            {
              type: "entity.type-tenant",
              typePlural: "entity.type-tenants",
              list: "entity.list-of-tenants",
              nameStartsWith: "entity.tenant-name-starts-with",
              details: "tenant.tenant-details",
              add: "tenant.add",
              noEntities: "tenant.no-tenants-text",
              search: "tenant.search",
              selectedEntities: "tenant.selected-tenants",
            },
          ],
          [
            e.TENANT_PROFILE,
            {
              type: "entity.type-tenant-profile",
              typePlural: "entity.type-tenant-profiles",
              list: "entity.list-of-tenant-profiles",
              nameStartsWith: "entity.tenant-profile-name-starts-with",
              details: "tenant-profile.tenant-profile-details",
              add: "tenant-profile.add",
              noEntities: "tenant-profile.no-tenant-profiles-text",
              search: "tenant-profile.search",
              selectedEntities: "tenant-profile.selected-tenant-profiles",
            },
          ],
          [
            e.CUSTOMER,
            {
              type: "entity.type-customer",
              typePlural: "entity.type-customers",
              list: "entity.list-of-customers",
              nameStartsWith: "entity.customer-name-starts-with",
              details: "customer.customer-details",
              add: "customer.add",
              noEntities: "customer.no-customers-text",
              search: "customer.search",
              selectedEntities: "customer.selected-customers",
            },
          ],
          [
            e.USER,
            {
              type: "entity.type-user",
              typePlural: "entity.type-users",
              list: "entity.list-of-users",
              nameStartsWith: "entity.user-name-starts-with",
              details: "user.user-details",
              add: "user.add",
              noEntities: "user.no-users-text",
              search: "user.search",
              selectedEntities: "user.selected-users",
            },
          ],
          [
            e.DEVICE,
            {
              type: "entity.type-device",
              typePlural: "entity.type-devices",
              list: "entity.list-of-devices",
              nameStartsWith: "entity.device-name-starts-with",
              details: "device.device-details",
              add: "device.add",
              noEntities: "device.no-devices-text",
              search: "device.search",
              selectedEntities: "device.selected-devices",
            },
          ],
          [
            e.DEVICE_PROFILE,
            {
              type: "entity.type-device-profile",
              typePlural: "entity.type-device-profiles",
              list: "entity.list-of-device-profiles",
              nameStartsWith: "entity.device-profile-name-starts-with",
              details: "device-profile.device-profile-details",
              add: "device-profile.add",
              noEntities: "device-profile.no-device-profiles-text",
              search: "device-profile.search",
              selectedEntities: "device-profile.selected-device-profiles",
            },
          ],
          [
            e.ASSET_PROFILE,
            {
              type: "entity.type-asset-profile",
              typePlural: "entity.type-asset-profiles",
              list: "entity.list-of-asset-profiles",
              nameStartsWith: "entity.asset-profile-name-starts-with",
              details: "asset-profile.asset-profile-details",
              add: "asset-profile.add",
              noEntities: "asset-profile.no-asset-profiles-text",
              search: "asset-profile.search",
              selectedEntities: "asset-profile.selected-asset-profiles",
            },
          ],
          [
            e.ASSET,
            {
              type: "entity.type-asset",
              typePlural: "entity.type-assets",
              list: "entity.list-of-assets",
              nameStartsWith: "entity.asset-name-starts-with",
              details: "asset.asset-details",
              add: "asset.add",
              noEntities: "asset.no-assets-text",
              search: "asset.search",
              selectedEntities: "asset.selected-assets",
            },
          ],
          [
            e.EDGE,
            {
              type: "entity.type-edge",
              typePlural: "entity.type-edges",
              list: "entity.list-of-edges",
              nameStartsWith: "entity.edge-name-starts-with",
              details: "edge.edge-details",
              add: "edge.add",
              noEntities: "edge.no-edges-text",
              search: "edge.search",
              selectedEntities: "edge.selected-edges",
            },
          ],
          [
            e.ENTITY_VIEW,
            {
              type: "entity.type-entity-view",
              typePlural: "entity.type-entity-views",
              list: "entity.list-of-entity-views",
              nameStartsWith: "entity.entity-view-name-starts-with",
              details: "entity-view.entity-view-details",
              add: "entity-view.add",
              noEntities: "entity-view.no-entity-views-text",
              search: "entity-view.search",
              selectedEntities: "entity-view.selected-entity-views",
            },
          ],
          [
            e.RULE_CHAIN,
            {
              type: "entity.type-rulechain",
              typePlural: "entity.type-rulechains",
              list: "entity.list-of-rulechains",
              nameStartsWith: "entity.rulechain-name-starts-with",
              details: "rulechain.rulechain-details",
              add: "rulechain.add",
              noEntities: "rulechain.no-rulechains-text",
              search: "rulechain.search",
              selectedEntities: "rulechain.selected-rulechains",
            },
          ],
          [
            e.RULE_NODE,
            {
              type: "entity.type-rulenode",
              typePlural: "entity.type-rulenodes",
              list: "entity.list-of-rulenodes",
              nameStartsWith: "entity.rulenode-name-starts-with",
            },
          ],
          [
            e.DASHBOARD,
            {
              type: "entity.type-dashboard",
              typePlural: "entity.type-dashboards",
              list: "entity.list-of-dashboards",
              nameStartsWith: "entity.dashboard-name-starts-with",
              details: "dashboard.dashboard-details",
              add: "dashboard.add",
              noEntities: "dashboard.no-dashboards-text",
              search: "dashboard.search",
              selectedEntities: "dashboard.selected-dashboards",
            },
          ],
          [
            e.ALARM,
            {
              type: "entity.type-alarm",
              typePlural: "entity.type-alarms",
              list: "entity.list-of-alarms",
              nameStartsWith: "entity.alarm-name-starts-with",
              details: "dashboard.dashboard-details",
              noEntities: "alarm.no-alarms-prompt",
              search: "alarm.search",
              selectedEntities: "alarm.selected-alarms",
            },
          ],
          [e.API_USAGE_STATE, { type: "entity.type-api-usage-state" }],
          [
            e.WIDGETS_BUNDLE,
            {
              type: "entity.type-widgets-bundle",
              typePlural: "entity.type-widgets-bundles",
              list: "entity.list-of-widgets-bundles",
              details: "widgets-bundle.widgets-bundle-details",
              add: "widgets-bundle.add",
              noEntities: "widgets-bundle.no-widgets-bundles-text",
              search: "widgets-bundle.search",
              selectedEntities: "widgets-bundle.selected-widgets-bundles",
            },
          ],
          [
            n.CURRENT_CUSTOMER,
            {
              type: "entity.type-current-customer",
              list: "entity.type-current-customer",
            },
          ],
          [
            n.CURRENT_TENANT,
            {
              type: "entity.type-current-tenant",
              list: "entity.type-current-tenant",
            },
          ],
          [
            n.CURRENT_USER,
            {
              type: "entity.type-current-user",
              list: "entity.type-current-user",
            },
          ],
          [
            n.CURRENT_USER_OWNER,
            {
              type: "entity.type-current-user-owner",
              list: "entity.type-current-user-owner",
            },
          ],
          [
            e.TB_RESOURCE,
            {
              type: "entity.type-tb-resource",
              details: "resource.resource-library-details",
              add: "resource.add",
              noEntities: "resource.no-resource-text",
              search: "resource.search",
              selectedEntities: "resource.selected-resources",
            },
          ],
          [
            e.OTA_PACKAGE,
            {
              type: "entity.type-ota-package",
              details: "ota-update.ota-update-details",
              add: "ota-update.add",
              noEntities: "ota-update.no-packages-text",
              search: "ota-update.search",
              selectedEntities: "ota-update.selected-package",
            },
          ],
          [
            e.QUEUE,
            {
              add: "queue.add",
              search: "queue.search",
              details: "queue.details",
              selectedEntities: "queue.selected-queues",
            },
          ],
        ]),
        C = new Map([
          [e.TENANT, { helpLinkId: "tenants" }],
          [e.TENANT_PROFILE, { helpLinkId: "tenantProfiles" }],
          [e.CUSTOMER, { helpLinkId: "customers" }],
          [e.USER, { helpLinkId: "users" }],
          [e.DEVICE, { helpLinkId: "devices" }],
          [e.DEVICE_PROFILE, { helpLinkId: "deviceProfiles" }],
          [e.ASSET_PROFILE, { helpLinkId: "assetProfiles" }],
          [e.ASSET, { helpLinkId: "assets" }],
          [e.EDGE, { helpLinkId: "edges" }],
          [e.ENTITY_VIEW, { helpLinkId: "entityViews" }],
          [e.RULE_CHAIN, { helpLinkId: "rulechains" }],
          [e.DASHBOARD, { helpLinkId: "dashboards" }],
          [e.WIDGETS_BUNDLE, { helpLinkId: "widgetsBundles" }],
          [e.TB_RESOURCE, { helpLinkId: "resources" }],
          [e.OTA_PACKAGE, { helpLinkId: "otaUpdates" }],
          [e.QUEUE, { helpLinkId: "queue" }],
        ]),
        s = new Map([
          [e.TENANT, "/tenants"],
          [e.TENANT_PROFILE, "/tenantProfiles"],
          [e.CUSTOMER, "/customers"],
          [e.USER, "/users"],
          [e.DASHBOARD, "/dashboards"],
          [e.ASSET, "/assets"],
          [e.DEVICE, "/devices"],
          [e.DEVICE_PROFILE, "/profiles/deviceProfiles"],
          [e.ASSET_PROFILE, "/profiles/assetProfiles"],
          [e.RULE_CHAIN, "/ruleChains"],
          [e.EDGE, "/edgeInstances"],
          [e.ENTITY_VIEW, "/entityViews"],
          [e.TB_RESOURCE, "/settings/resources-library"],
          [e.OTA_PACKAGE, "/otaUpdates"],
          [e.QUEUE, "/settings/queues"],
        ]);
    },
    76637: (ee, R, t) => {
      "use strict";
      t.d(R, { i: () => e });
      const e = {
        createdTime: {
          keyName: "createdTime",
          name: "entity-field.created-time",
          value: "createdTime",
          time: !0,
        },
        name: { keyName: "name", name: "entity-field.name", value: "name" },
        type: { keyName: "type", name: "entity-field.type", value: "type" },
        firstName: {
          keyName: "firstName",
          name: "entity-field.first-name",
          value: "firstName",
        },
        lastName: {
          keyName: "lastName",
          name: "entity-field.last-name",
          value: "lastName",
        },
        email: { keyName: "email", name: "entity-field.email", value: "email" },
        title: { keyName: "title", name: "entity-field.title", value: "title" },
        country: {
          keyName: "country",
          name: "entity-field.country",
          value: "country",
        },
        state: { keyName: "state", name: "entity-field.state", value: "state" },
        city: { keyName: "city", name: "entity-field.city", value: "city" },
        address: {
          keyName: "address",
          name: "entity-field.address",
          value: "address",
        },
        address2: {
          keyName: "address2",
          name: "entity-field.address2",
          value: "address2",
        },
        zip: { keyName: "zip", name: "entity-field.zip", value: "zip" },
        phone: { keyName: "phone", name: "entity-field.phone", value: "phone" },
        label: { keyName: "label", name: "entity-field.label", value: "label" },
      };
    },
    36881: (ee, R, t) => {
      "use strict";
      t.d(R, { P: () => n });
      var e = t(52042);
      class n {
        constructor(C) {
          (this.entityType = e.py.ALARM), (this.id = C);
        }
      }
    },
    34767: (ee, R, t) => {
      "use strict";
      t.d(R, { u: () => n });
      var e = t(52042);
      class n {
        constructor(C) {
          (this.entityType = e.py.CUSTOMER), (this.id = C);
        }
      }
    },
    86057: (ee, R, t) => {
      "use strict";
      t.d(R, { _: () => e });
      const e = "13814000-1dd2-11b2-8080-808080808080";
    },
    91764: (ee, R, t) => {
      "use strict";
      t.d(R, { j: () => n });
      var e = t(52042);
      class n {
        constructor(C) {
          (this.entityType = e.py.TENANT), (this.id = C);
        }
      }
    },
    6456: (ee, R, t) => {
      "use strict";
      var e, g;
      t.d(R, {
        kE: () => e,
        GK: () => n,
        kP: () => a,
        Yy: () => C,
        _U: () => s,
        qJ: () => o,
        qU: () => i,
      }),
        ((g = e || (e = {})).PSK = "PSK"),
        (g.RPK = "RPK"),
        (g.X509 = "X509"),
        (g.NO_SEC = "NO_SEC");
      const n = new Map([
          [e.PSK, "Pre-Shared Key"],
          [e.RPK, "Raw Public Key"],
          [e.X509, "X.509 Certificate"],
          [e.NO_SEC, "No Security"],
        ]),
        a = new Map([
          [
            e.PSK,
            "device.lwm2m-security-config.client-publicKey-or-id-tooltip-psk",
          ],
          [
            e.RPK,
            "device.lwm2m-security-config.client-publicKey-or-id-tooltip-rpk",
          ],
          [
            e.X509,
            "device.lwm2m-security-config.client-publicKey-or-id-tooltip-x509",
          ],
        ]),
        C = new Map([
          [e.PSK, "device.lwm2m-security-config.client-secret-key-tooltip-psk"],
          [e.RPK, "device.lwm2m-security-config.client-secret-key-tooltip-prk"],
          [
            e.X509,
            "device.lwm2m-security-config.client-secret-key-tooltip-x509",
          ],
        ]),
        s = new Map([
          [e.PSK, "device.lwm2m-security-config.client-secret-key-tooltip-psk"],
          [e.RPK, "device.lwm2m-security-config.client-secret-key-tooltip-prk"],
        ]);
      function o(g, D = "") {
        let y = {
          securityConfigClientMode: g,
          endpoint: D,
          identity: "",
          key: "",
        };
        switch (g) {
          case e.X509:
            y = Object.assign(Object.assign({}, y), { cert: "" });
            break;
          case e.PSK:
            y = Object.assign(Object.assign({}, y), { identity: D, key: "" });
            break;
          case e.RPK:
            y = Object.assign(Object.assign({}, y), { key: "" });
        }
        return y;
      }
      function i() {
        return { securityMode: e.NO_SEC };
      }
    },
    16421: (ee, R, t) => {
      "use strict";
      t.d(R, { $: () => C, W: () => s });
      var e = t(4902);
      const a = e,
        C = {
          red: {
            50: "#ffebee",
            100: "#ffcdd2",
            200: "#ef9a9a",
            300: "#e57373",
            400: "#ef5350",
            500: "#f44336",
            600: "#e53935",
            700: "#d32f2f",
            800: "#c62828",
            900: "#b71c1c",
            A100: "#ff8a80",
            A200: "#ff5252",
            A400: "#ff1744",
            A700: "#d50000",
          },
          pink: {
            50: "#fce4ec",
            100: "#f8bbd0",
            200: "#f48fb1",
            300: "#f06292",
            400: "#ec407a",
            500: "#e91e63",
            600: "#d81b60",
            700: "#c2185b",
            800: "#ad1457",
            900: "#880e4f",
            A100: "#ff80ab",
            A200: "#ff4081",
            A400: "#f50057",
            A700: "#c51162",
          },
          purple: {
            50: "#f3e5f5",
            100: "#e1bee7",
            200: "#ce93d8",
            300: "#ba68c8",
            400: "#ab47bc",
            500: "#9c27b0",
            600: "#8e24aa",
            700: "#7b1fa2",
            800: "#6a1b9a",
            900: "#4a148c",
            A100: "#ea80fc",
            A200: "#e040fb",
            A400: "#d500f9",
            A700: "#aa00ff",
          },
          "deep-purple": {
            50: "#ede7f6",
            100: "#d1c4e9",
            200: "#b39ddb",
            300: "#9575cd",
            400: "#7e57c2",
            500: "#673ab7",
            600: "#5e35b1",
            700: "#512da8",
            800: "#4527a0",
            900: "#311b92",
            A100: "#b388ff",
            A200: "#7c4dff",
            A400: "#651fff",
            A700: "#6200ea",
          },
          indigo: {
            50: "#e8eaf6",
            100: "#c5cae9",
            200: "#9fa8da",
            300: "#7986cb",
            400: "#5c6bc0",
            500: "#3f51b5",
            600: "#3949ab",
            700: "#303f9f",
            800: "#283593",
            900: "#1a237e",
            A100: "#8c9eff",
            A200: "#536dfe",
            A400: "#3d5afe",
            A700: "#304ffe",
          },
          blue: {
            50: "#e3f2fd",
            100: "#bbdefb",
            200: "#90caf9",
            300: "#64b5f6",
            400: "#42a5f5",
            500: "#2196f3",
            600: "#1e88e5",
            700: "#1976d2",
            800: "#1565c0",
            900: "#0d47a1",
            A100: "#82b1ff",
            A200: "#448aff",
            A400: "#2979ff",
            A700: "#2962ff",
          },
          "light-blue": {
            50: "#e1f5fe",
            100: "#b3e5fc",
            200: "#81d4fa",
            300: "#4fc3f7",
            400: "#29b6f6",
            500: "#03a9f4",
            600: "#039be5",
            700: "#0288d1",
            800: "#0277bd",
            900: "#01579b",
            A100: "#80d8ff",
            A200: "#40c4ff",
            A400: "#00b0ff",
            A700: "#0091ea",
          },
          cyan: {
            50: "#e0f7fa",
            100: "#b2ebf2",
            200: "#80deea",
            300: "#4dd0e1",
            400: "#26c6da",
            500: "#00bcd4",
            600: "#00acc1",
            700: "#0097a7",
            800: "#00838f",
            900: "#006064",
            A100: "#84ffff",
            A200: "#18ffff",
            A400: "#00e5ff",
            A700: "#00b8d4",
          },
          teal: {
            50: "#e0f2f1",
            100: "#b2dfdb",
            200: "#80cbc4",
            300: "#4db6ac",
            400: "#26a69a",
            500: "#009688",
            600: "#00897b",
            700: "#00796b",
            800: "#00695c",
            900: "#004d40",
            A100: "#a7ffeb",
            A200: "#64ffda",
            A400: "#1de9b6",
            A700: "#00bfa5",
          },
          green: {
            50: "#e8f5e9",
            100: "#c8e6c9",
            200: "#a5d6a7",
            300: "#81c784",
            400: "#66bb6a",
            500: "#4caf50",
            600: "#43a047",
            700: "#388e3c",
            800: "#2e7d32",
            900: "#1b5e20",
            A100: "#b9f6ca",
            A200: "#69f0ae",
            A400: "#00e676",
            A700: "#00c853",
          },
          "light-green": {
            50: "#f1f8e9",
            100: "#dcedc8",
            200: "#c5e1a5",
            300: "#aed581",
            400: "#9ccc65",
            500: "#8bc34a",
            600: "#7cb342",
            700: "#689f38",
            800: "#558b2f",
            900: "#33691e",
            A100: "#ccff90",
            A200: "#b2ff59",
            A400: "#76ff03",
            A700: "#64dd17",
          },
          lime: {
            50: "#f9fbe7",
            100: "#f0f4c3",
            200: "#e6ee9c",
            300: "#dce775",
            400: "#d4e157",
            500: "#cddc39",
            600: "#c0ca33",
            700: "#afb42b",
            800: "#9e9d24",
            900: "#827717",
            A100: "#f4ff81",
            A200: "#eeff41",
            A400: "#c6ff00",
            A700: "#aeea00",
          },
          yellow: {
            50: "#fffde7",
            100: "#fff9c4",
            200: "#fff59d",
            300: "#fff176",
            400: "#ffee58",
            500: "#ffeb3b",
            600: "#fdd835",
            700: "#fbc02d",
            800: "#f9a825",
            900: "#f57f17",
            A100: "#ffff8d",
            A200: "#ffff00",
            A400: "#ffea00",
            A700: "#ffd600",
          },
          amber: {
            50: "#fff8e1",
            100: "#ffecb3",
            200: "#ffe082",
            300: "#ffd54f",
            400: "#ffca28",
            500: "#ffc107",
            600: "#ffb300",
            700: "#ffa000",
            800: "#ff8f00",
            900: "#ff6f00",
            A100: "#ffe57f",
            A200: "#ffd740",
            A400: "#ffc400",
            A700: "#ffab00",
          },
          orange: {
            50: "#fff3e0",
            100: "#ffe0b2",
            200: "#ffcc80",
            300: "#ffb74d",
            400: "#ffa726",
            500: "#ff9800",
            600: "#fb8c00",
            700: "#f57c00",
            800: "#ef6c00",
            900: "#e65100",
            A100: "#ffd180",
            A200: "#ffab40",
            A400: "#ff9100",
            A700: "#ff6d00",
          },
          "deep-orange": {
            50: "#fbe9e7",
            100: "#ffccbc",
            200: "#ffab91",
            300: "#ff8a65",
            400: "#ff7043",
            500: "#ff5722",
            600: "#f4511e",
            700: "#e64a19",
            800: "#d84315",
            900: "#bf360c",
            A100: "#ff9e80",
            A200: "#ff6e40",
            A400: "#ff3d00",
            A700: "#dd2c00",
          },
          brown: {
            50: "#efebe9",
            100: "#d7ccc8",
            200: "#bcaaa4",
            300: "#a1887f",
            400: "#8d6e63",
            500: "#795548",
            600: "#6d4c41",
            700: "#5d4037",
            800: "#4e342e",
            900: "#3e2723",
            A100: "#d7ccc8",
            A200: "#bcaaa4",
            A400: "#8d6e63",
            A700: "#5d4037",
          },
          grey: {
            50: "#fafafa",
            100: "#f5f5f5",
            200: "#eeeeee",
            300: "#e0e0e0",
            400: "#bdbdbd",
            500: "#9e9e9e",
            600: "#757575",
            700: "#616161",
            800: "#424242",
            900: "#212121",
            A100: "#ffffff",
            A200: "#000000",
            A400: "#303030",
            A700: "#616161",
          },
          "blue-grey": {
            50: "#eceff1",
            100: "#cfd8dc",
            200: "#b0bec5",
            300: "#90a4ae",
            400: "#78909c",
            500: "#607d8b",
            600: "#546e7a",
            700: "#455a64",
            800: "#37474f",
            900: "#263238",
            A100: "#cfd8dc",
            A200: "#b0bec5",
            A400: "#78909c",
            A700: "#455a64",
          },
        },
        s = new Array(),
        d = [
          "blue",
          "green",
          "red",
          "amber",
          "blue-grey",
          "purple",
          "light-green",
          "indigo",
          "pink",
          "yellow",
          "light-blue",
          "orange",
          "deep-purple",
          "lime",
          "teal",
          "brown",
          "cyan",
          "deep-orange",
          "grey",
        ],
        o = [
          "500",
          "A700",
          "600",
          "700",
          "800",
          "900",
          "300",
          "400",
          "A200",
          "A400",
        ];
      for (const i of Object.keys(C)) {
        const g = C[i];
        for (const D of Object.keys(g))
          if (o.indexOf(D) > -1) {
            const m = a(g[D]),
              r = m.isDark(),
              h = { value: m.toHexString(), group: i, label: D, isDark: r };
            s.push(h);
          }
      }
      s.sort((i, g) => {
        let m = o.indexOf(i.label) - o.indexOf(g.label);
        if (0 === m) {
          m = d.indexOf(i.group) - d.indexOf(g.group);
        }
        return m;
      });
    },
    47445: (ee, R, t) => {
      "use strict";
      var e, i;
      t.d(R, {
        t$: () => e,
        $Z: () => n,
        P: () => a,
        eK: () => C,
        zh: () => s,
        X2: () => d,
        sq: () => o,
      }),
        ((i = e || (e = {})).HTTP = "HTTP"),
        (i.HTTPS = "HTTPS"),
        (i.MIXED = "MIXED");
      const n = new Map([
        [e.HTTP, "admin.oauth2.domain-schema-http"],
        [e.HTTPS, "admin.oauth2.domain-schema-https"],
        [e.MIXED, "admin.oauth2.domain-schema-mixed"],
      ]);
      var a, C, s;
      !(function (i) {
        (i.BASIC = "BASIC"),
          (i.CUSTOM = "CUSTOM"),
          (i.GITHUB = "GITHUB"),
          (i.APPLE = "APPLE");
      })(a || (a = {})),
        (function (i) {
          (i.DOMAIN = "DOMAIN"), (i.EMAIL = "EMAIL"), (i.CUSTOM = "CUSTOM");
        })(C || (C = {})),
        (function (i) {
          (i.WEB = "WEB"), (i.ANDROID = "ANDROID"), (i.IOS = "IOS");
        })(s || (s = {}));
      const d = new Map([
        [s.WEB, "admin.oauth2.platform-web"],
        [s.ANDROID, "admin.oauth2.platform-android"],
        [s.IOS, "admin.oauth2.platform-ios"],
      ]);
      var o;
      !(function (i) {
        (i.BASIC = "BASIC"), (i.POST = "POST");
      })(o || (o = {}));
    },
    57331: (ee, R, t) => {
      "use strict";
      var e, d;
      t.d(R, {
        Es: () => e,
        j4: () => n,
        Jj: () => a,
        ot: () => C,
        LY: () => s,
      }),
        ((d = e || (e = {})).MD5 = "MD5"),
        (d.SHA256 = "SHA256"),
        (d.SHA384 = "SHA384"),
        (d.SHA512 = "SHA512"),
        (d.CRC32 = "CRC32"),
        (d.MURMUR3_32 = "MURMUR3_32"),
        (d.MURMUR3_128 = "MURMUR3_128");
      const n = new Map([
        [e.MD5, "MD5"],
        [e.SHA256, "SHA-256"],
        [e.SHA384, "SHA-384"],
        [e.SHA512, "SHA-512"],
        [e.CRC32, "CRC-32"],
        [e.MURMUR3_32, "MURMUR3-32"],
        [e.MURMUR3_128, "MURMUR3-128"],
      ]);
      var a;
      !(function (d) {
        (d.FIRMWARE = "FIRMWARE"), (d.SOFTWARE = "SOFTWARE");
      })(a || (a = {}));
      const C = new Map([
          [a.FIRMWARE, "ota-update.types.firmware"],
          [a.SOFTWARE, "ota-update.types.software"],
        ]),
        s = new Map([
          [
            a.FIRMWARE,
            {
              label: "ota-update.assign-firmware",
              required: "ota-update.assign-firmware-required",
              noFound: "ota-update.no-firmware-text",
              noMatching: "ota-update.no-firmware-matching",
              hint: "ota-update.chose-firmware-distributed-device",
            },
          ],
          [
            a.SOFTWARE,
            {
              label: "ota-update.assign-software",
              required: "ota-update.assign-software-required",
              noFound: "ota-update.no-software-text",
              noMatching: "ota-update.no-software-matching",
              hint: "ota-update.chose-software-distributed-device",
            },
          ],
        ]);
    },
    58187: (ee, R, t) => {
      "use strict";
      function e() {
        return { data: [], totalPages: 0, totalElements: 0, hasNext: !1 };
      }
      t.d(R, { n: () => e });
    },
    39774: (ee, R, t) => {
      "use strict";
      t.d(R, {
        BU: () => C,
        aw: () => s,
        xl: () => o,
        H_: () => i,
        tk: () => g,
      });
      var e = t(23360),
        n = t(58187),
        a = t(41960);
      const C = 2147483647;
      function s(D) {
        return (y, m) => d(y, m, D);
      }
      const d = (D, y, m) => {
        if (null === y || !y.length) return !0;
        const r = ("" + y).toLowerCase();
        if (m && m.length) {
          if (Object.prototype.hasOwnProperty.call(D, m)) {
            const h = D[m];
            if (
              null !== h &&
              h !== Object(h) &&
              -1 !== ("" + h).toLowerCase().indexOf(r)
            )
              return !0;
          }
        } else
          for (const h of Object.keys(D)) {
            const p = D[h];
            if (null !== p)
              if (p !== Object(p)) {
                if (-1 !== ("" + p).toLowerCase().indexOf(r)) return !0;
              } else if ((0, a.Kn)(p) && d(p, y)) return !0;
          }
        return !1;
      };
      function o(D, y, m, r) {
        const h = (0, a.Wt)(D, m),
          p = (0, a.Wt)(y, m);
        let _ = 0;
        if (h !== p) {
          const E = typeof h,
            c = typeof p;
          "number" === E && "number" === c
            ? (_ = h - p)
            : "string" === E && "string" === c
            ? (_ = h.localeCompare(p))
            : (("boolean" === E && "boolean" === c) || E !== c) &&
              (h && !p ? (_ = 1) : !h && p && (_ = -1));
        }
        return r ? _ : -1 * _;
      }
      class i {
        constructor(y, m = 0, r = null, h = null) {
          (this.textSearch = r),
            (this.pageSize = y),
            (this.page = m),
            (this.sortOrder = h);
        }
        nextPageLink() {
          return new i(
            this.pageSize,
            this.page + 1,
            this.textSearch,
            this.sortOrder
          );
        }
        toQuery() {
          let y = `?pageSize=${this.pageSize}&page=${this.page}`;
          return (
            this.textSearch &&
              this.textSearch.length &&
              (y += `&textSearch=${encodeURIComponent(this.textSearch)}`),
            this.sortOrder &&
              (y += `&sortProperty=${this.sortOrder.property}&sortOrder=${this.sortOrder.direction}`),
            y
          );
        }
        sort(y, m) {
          if (this.sortOrder) {
            return o(
              y,
              m,
              this.sortOrder.property,
              this.sortOrder.direction === e.N.ASC
            );
          }
          return 0;
        }
        filterData(y, m = s()) {
          const r = (0, n.n)();
          if (
            ((r.data = [...y]),
            this.textSearch &&
              this.textSearch.length &&
              (r.data = r.data.filter((h) => m(h, this.textSearch))),
            (r.totalElements = r.data.length),
            (r.totalPages =
              this.pageSize === Number.POSITIVE_INFINITY
                ? 1
                : Math.ceil(r.totalElements / this.pageSize)),
            this.sortOrder)
          ) {
            const h = this.sortOrder.property,
              p = this.sortOrder.direction === e.N.ASC;
            r.data = r.data.sort((_, E) => o(_, E, h, p));
          }
          if (this.pageSize !== Number.POSITIVE_INFINITY) {
            const h = this.pageSize * this.page;
            (r.data = r.data.slice(h, h + this.pageSize)),
              (r.hasNext = r.totalElements > h + r.data.length);
          }
          return r;
        }
        sortDirection() {
          return this.sortOrder
            ? (this.sortOrder.direction + "").toLowerCase()
            : "";
        }
      }
      class g extends i {
        constructor(y, m = 0, r = null, h = null, p = null, _ = null) {
          super(y, m, r, h), (this.startTime = p), (this.endTime = _);
        }
        nextPageLink() {
          return new g(
            this.pageSize,
            this.page + 1,
            this.textSearch,
            this.sortOrder,
            this.startTime,
            this.endTime
          );
        }
        toQuery() {
          let y = super.toQuery();
          return (
            this.startTime && (y += `&startTime=${this.startTime}`),
            this.endTime && (y += `&endTime=${this.endTime}`),
            y
          );
        }
      }
    },
    23360: (ee, R, t) => {
      "use strict";
      var e, a;
      function n(a) {
        let C,
          s = e.ASC;
        return (
          a.startsWith("-")
            ? ((s = e.DESC), (C = a.substring(1)))
            : (C = a.startsWith("+") ? a.substring(1) : a),
          { property: C, direction: s }
        );
      }
      t.d(R, { N: () => e, Z: () => n }),
        ((a = e || (e = {})).ASC = "ASC"),
        (a.DESC = "DESC");
    },
    36066: (ee, R, t) => {
      "use strict";
      t.d(R, {
        Y1: () => s,
        c$: () => d,
        IM: () => o,
        YD: () => i,
        QS: () => g,
        KP: () => D,
        C1: () => y,
        yN: () => r,
        Tn: () => h,
        sW: () => _,
        PQ: () => E,
        X6: () => c,
        Jy: () => v,
        OO: () => I,
        XD: () => l,
        v6: () => T,
        Cz: () => O,
        zc: () => w,
        re: () => b,
        P4: () => u,
        m2: () => f,
        HR: () => M,
        vL: () => B,
        Jt: () => j,
        Vl: () => F,
        ds: () => A,
        fY: () => Z,
        bV: () => se,
        Nm: () => ne,
        C2: () => re,
        Kv: () => de,
        ts: () => pe,
        LE: () => Q,
        ft: () => K,
        MX: () => H,
        f4: () => x,
      });
      var s,
        W,
        e = t(91320),
        n = t(69331),
        a = t(62909),
        C = t(41960);
      ((W = s || (s = {})).ATTRIBUTE = "ATTRIBUTE"),
        (W.CLIENT_ATTRIBUTE = "CLIENT_ATTRIBUTE"),
        (W.SHARED_ATTRIBUTE = "SHARED_ATTRIBUTE"),
        (W.SERVER_ATTRIBUTE = "SERVER_ATTRIBUTE"),
        (W.TIME_SERIES = "TIME_SERIES"),
        (W.ENTITY_FIELD = "ENTITY_FIELD"),
        (W.ALARM_FIELD = "ALARM_FIELD"),
        (W.CONSTANT = "CONSTANT"),
        (W.COUNT = "COUNT");
      const d = new Map([
        [s.ATTRIBUTE, "filter.key-type.attribute"],
        [s.TIME_SERIES, "filter.key-type.timeseries"],
        [s.ENTITY_FIELD, "filter.key-type.entity-field"],
        [s.CONSTANT, "filter.key-type.constant"],
      ]);
      function o(W) {
        switch (W) {
          case s.ATTRIBUTE:
          case s.CLIENT_ATTRIBUTE:
          case s.SHARED_ATTRIBUTE:
          case s.SERVER_ATTRIBUTE:
            return n.dG.attribute;
          case s.TIME_SERIES:
            return n.dG.timeseries;
          case s.ENTITY_FIELD:
            return n.dG.entityField;
          case s.ALARM_FIELD:
            return n.dG.alarm;
          case s.COUNT:
            return n.dG.count;
        }
      }
      function i(W) {
        switch (W) {
          case n.dG.timeseries:
            return s.TIME_SERIES;
          case n.dG.attribute:
            return s.ATTRIBUTE;
          case n.dG.function:
            return s.ENTITY_FIELD;
          case n.dG.alarm:
            return s.ALARM_FIELD;
          case n.dG.entityField:
            return s.ENTITY_FIELD;
          case n.dG.count:
            return s.COUNT;
        }
      }
      function g(W) {
        return { key: W.name, type: i(W.type) };
      }
      var D;
      !(function (W) {
        (W.STRING = "STRING"),
          (W.NUMERIC = "NUMERIC"),
          (W.BOOLEAN = "BOOLEAN"),
          (W.DATE_TIME = "DATE_TIME");
      })(D || (D = {}));
      const y = new Map([
        [
          D.STRING,
          { name: "filter.value-type.string", icon: "mdi:format-text" },
        ],
        [D.NUMERIC, { name: "filter.value-type.numeric", icon: "mdi:numeric" }],
        [
          D.BOOLEAN,
          {
            name: "filter.value-type.boolean",
            icon: "mdi:checkbox-marked-outline",
          },
        ],
        [
          D.DATE_TIME,
          { name: "filter.value-type.date-time", icon: "mdi:calendar-clock" },
        ],
      ]);
      function m(W) {
        switch (W) {
          case D.STRING:
            return E.STRING;
          case D.NUMERIC:
          case D.DATE_TIME:
            return E.NUMERIC;
          case D.BOOLEAN:
            return E.BOOLEAN;
        }
      }
      function r(W, $) {
        return {
          keyFilterPredicate: p(W, $),
          userInfo: {
            editable: !0,
            label: "",
            autogeneratedLabel: !0,
            order: 0,
          },
        };
      }
      function h() {
        return { editable: !0, label: "", autogeneratedLabel: !0, order: 0 };
      }
      function p(W, $) {
        const J = { type: $ ? E.COMPLEX : m(W) };
        switch (J.type) {
          case E.STRING:
            (J.operation = c.STARTS_WITH),
              (J.value = { defaultValue: "" }),
              (J.ignoreCase = !1);
            break;
          case E.NUMERIC:
            (J.operation = I.EQUAL),
              (J.value = { defaultValue: W === D.DATE_TIME ? Date.now() : 0 });
            break;
          case E.BOOLEAN:
            (J.operation = T.EQUAL), (J.value = { defaultValue: !1 });
            break;
          case E.COMPLEX:
            (J.operation = w.AND), (J.predicates = []);
        }
        return J;
      }
      function _(W) {
        const $ = [S.CURRENT_TENANT, S.CURRENT_CUSTOMER];
        return W ? $.push(S.CURRENT_USER) : $.push(S.CURRENT_DEVICE), $;
      }
      var E, c;
      !(function (W) {
        (W.STRING = "STRING"),
          (W.NUMERIC = "NUMERIC"),
          (W.BOOLEAN = "BOOLEAN"),
          (W.COMPLEX = "COMPLEX");
      })(E || (E = {})),
        (function (W) {
          (W.EQUAL = "EQUAL"),
            (W.NOT_EQUAL = "NOT_EQUAL"),
            (W.STARTS_WITH = "STARTS_WITH"),
            (W.ENDS_WITH = "ENDS_WITH"),
            (W.CONTAINS = "CONTAINS"),
            (W.NOT_CONTAINS = "NOT_CONTAINS"),
            (W.IN = "IN"),
            (W.NOT_IN = "NOT_IN");
        })(c || (c = {}));
      const v = new Map([
        [c.EQUAL, "filter.operation.equal"],
        [c.NOT_EQUAL, "filter.operation.not-equal"],
        [c.STARTS_WITH, "filter.operation.starts-with"],
        [c.ENDS_WITH, "filter.operation.ends-with"],
        [c.CONTAINS, "filter.operation.contains"],
        [c.NOT_CONTAINS, "filter.operation.not-contains"],
        [c.IN, "filter.operation.in"],
        [c.NOT_IN, "filter.operation.not-in"],
      ]);
      var I;
      !(function (W) {
        (W.EQUAL = "EQUAL"),
          (W.NOT_EQUAL = "NOT_EQUAL"),
          (W.GREATER = "GREATER"),
          (W.LESS = "LESS"),
          (W.GREATER_OR_EQUAL = "GREATER_OR_EQUAL"),
          (W.LESS_OR_EQUAL = "LESS_OR_EQUAL");
      })(I || (I = {}));
      const l = new Map([
        [I.EQUAL, "filter.operation.equal"],
        [I.NOT_EQUAL, "filter.operation.not-equal"],
        [I.GREATER, "filter.operation.greater"],
        [I.LESS, "filter.operation.less"],
        [I.GREATER_OR_EQUAL, "filter.operation.greater-or-equal"],
        [I.LESS_OR_EQUAL, "filter.operation.less-or-equal"],
      ]);
      var T;
      !(function (W) {
        (W.EQUAL = "EQUAL"), (W.NOT_EQUAL = "NOT_EQUAL");
      })(T || (T = {}));
      const O = new Map([
        [T.EQUAL, "filter.operation.equal"],
        [T.NOT_EQUAL, "filter.operation.not-equal"],
      ]);
      var w;
      !(function (W) {
        (W.AND = "AND"), (W.OR = "OR");
      })(w || (w = {}));
      const b = new Map([
        [w.AND, "filter.operation.and"],
        [w.OR, "filter.operation.or"],
      ]);
      var S;
      !(function (W) {
        (W.CURRENT_TENANT = "CURRENT_TENANT"),
          (W.CURRENT_CUSTOMER = "CURRENT_CUSTOMER"),
          (W.CURRENT_USER = "CURRENT_USER"),
          (W.CURRENT_DEVICE = "CURRENT_DEVICE");
      })(S || (S = {}));
      const u = new Map([
          [S.CURRENT_TENANT, "filter.current-tenant"],
          [S.CURRENT_CUSTOMER, "filter.current-customer"],
          [S.CURRENT_USER, "filter.current-user"],
          [S.CURRENT_DEVICE, "filter.current-device"],
        ]),
        f = [S.CURRENT_CUSTOMER, S.CURRENT_DEVICE];
      function M(W, $, J) {
        const te = J.map((me) =>
          (function (W, $, J, te) {
            const _e = J.predicate;
            return k(W, $, J, _e, te);
          })(W, $, me, J.length > 1 ? w.AND : void 0)
        );
        let _e;
        if (te.length > 1) {
          const me = W.instant("filter.operation.and");
          _e = te.join(
            ' <span class="tb-filter-complex-operation">' + me + "</span> "
          );
        } else _e = te[0];
        return _e;
      }
      function k(W, $, J, te, _e) {
        if (te.type === E.COMPLEX) {
          const me = te,
            fe = me.operation,
            Ce = me.predicates.map((Te) => k(W, $, J, Te, fe));
          if (Ce.length > 1) {
            const Te = W.instant(b.get(fe));
            let be = Ce.join(
              ' <span class="tb-filter-complex-operation">' + Te + "</span> "
            );
            return (
              fe === w.OR &&
                _e &&
                w.OR !== _e &&
                (be = `<span class="tb-filter-bracket"><span class="tb-left-bracket">(</span>${be}<span class="tb-right-bracket">)</span></span>`),
              be
            );
          }
          return Ce[0];
        }
        return (function (W, $, J, te) {
          const _e = J.key.key;
          let me, fe;
          const Ce = te.value,
            Te = !!Ce.dynamicValue && !!Ce.dynamicValue.sourceType;
          switch (
            (Te &&
              ((fe =
                '<span class="tb-filter-dynamic-value"><span class="tb-filter-dynamic-source">' +
                W.instant(u.get(Ce.dynamicValue.sourceType)) +
                "</span>"),
              (fe +=
                '.<span class="tb-filter-value">' +
                Ce.dynamicValue.sourceAttribute +
                "</span></span>")),
            te.type)
          ) {
            case E.STRING:
              (me = W.instant(v.get(te.operation))),
                te.ignoreCase && (me += " " + W.instant("filter.ignore-case")),
                Te || (fe = `'${te.value.defaultValue}'`);
              break;
            case E.NUMERIC:
              (me = W.instant(l.get(te.operation))),
                Te ||
                  (fe =
                    J.valueType === D.DATE_TIME
                      ? $.transform(te.value.defaultValue, "yyyy-MM-dd HH:mm")
                      : te.value.defaultValue + "");
              break;
            case E.BOOLEAN:
              (me = W.instant(O.get(te.operation))),
                Te ||
                  (fe = W.instant(
                    te.value.defaultValue ? "value.true" : "value.false"
                  ));
          }
          return (
            Te || (fe = `<span class="tb-filter-value">${fe}</span>`),
            `<span class="tb-filter-predicate"><span class="tb-filter-entity-key">${_e}</span> <span class="tb-filter-simple-operation">${me}</span> ${fe}</span>`
          );
        })(W, $, J, te);
      }
      function B(W) {
        if (!W) return [];
        const $ = [];
        for (const J of W) {
          const te = J.key;
          for (const _e of J.predicates) {
            const me = {
              key: te,
              valueType: J.valueType,
              value: J.value,
              predicate: V(_e),
            };
            $.push(me);
          }
        }
        return $;
      }
      function j(W) {
        const $ = [],
          J = {};
        if (W)
          for (const te of W) {
            const _e = te.key,
              me = _e.key + _e.type + te.valueType;
            let fe = J[me];
            fe ||
              ((fe = {
                key: _e,
                valueType: te.valueType,
                value: te.value,
                predicates: [],
              }),
              (J[me] = fe),
              $.push(fe)),
              te.predicate && fe.predicates.push(P(te.predicate));
          }
        return $;
      }
      function F(W) {
        const $ = W.keyFilters,
          J = [];
        for (const te of $) {
          const _e = te.key;
          for (const me of te.predicates) {
            const fe = {
              key: _e,
              valueType: te.valueType,
              value: te.value,
              predicate: V(me),
            };
            J.push(fe);
          }
        }
        return J;
      }
      function V(W) {
        let $ = W.keyFilterPredicate;
        if ($.type === E.COMPLEX) {
          const J = $,
            te = J.predicates.map((_e) => V(_e));
          $ = { type: E.COMPLEX, operation: J.operation, predicates: te };
        }
        return $;
      }
      function P(W) {
        const $ = { keyFilterPredicate: null, userInfo: null };
        if (W.type === E.COMPLEX) {
          const J = W,
            te = J.predicates.map((_e) => P(_e));
          $.keyFilterPredicate = {
            predicates: te,
            operation: J.operation,
            type: E.COMPLEX,
          };
        } else $.keyFilterPredicate = W;
        return $;
      }
      function A(W) {
        return (
          !!W.editable &&
          W.keyFilters.some(($) =>
            (function (W) {
              return W.predicates.some(($) => G($));
            })($)
          )
        );
      }
      function G(W) {
        return W.keyFilterPredicate.type === E.COMPLEX
          ? W.keyFilterPredicate.predicates.some((J) => G(J))
          : W.userInfo.editable;
      }
      function Z(W, $) {
        const J = W.keyFilters.map((_e) =>
          (function (W, $) {
            const J = W.predicates.map((te) => X(W.key, W.valueType, te, $));
            return [].concat.apply([], J);
          })(_e, $)
        );
        let te = [].concat.apply([], J);
        return (
          (te = te.sort(
            (_e, me) =>
              ((0, C.$K)(_e.info.userInfo.order) ? _e.info.userInfo.order : 0) -
              ((0, C.$K)(me.info.userInfo.order) ? me.info.userInfo.order : 0)
          )),
          te
        );
      }
      function X(W, $, J, te) {
        if (J.keyFilterPredicate.type === E.COMPLEX) {
          const me = J.keyFilterPredicate.predicates.map((fe) =>
            X(W, $, fe, te)
          );
          return [].concat.apply([], me);
        }
        if (J.userInfo.editable) {
          const _e = { info: J, label: J.userInfo.label, valueType: $ };
          return (
            J.userInfo.autogeneratedLabel &&
              (_e.label = se(W.key, $, J.keyFilterPredicate.operation, te)),
            [_e]
          );
        }
        return [];
      }
      function se(W, $, J, te) {
        let me,
          _e = W;
        switch ($) {
          case D.STRING:
            me = v.get(J);
            break;
          case D.NUMERIC:
          case D.DATE_TIME:
            me = l.get(J);
            break;
          case D.BOOLEAN:
            me = O.get(J);
        }
        return (_e += " " + te.instant(me)), _e;
      }
      var ne;
      function re(W) {
        return W.sortOrder ? (W.sortOrder.direction + "").toLowerCase() : "";
      }
      function de(W) {
        return {
          pageSize: W,
          page: 0,
          sortOrder: {
            key: { type: s.ENTITY_FIELD, key: "createdTime" },
            direction: ne.DESC,
          },
        };
      }
      !(function (W) {
        (W.ASC = "ASC"), (W.DESC = "DESC");
      })(ne || (ne = {}));
      const pe = de(1);
      function Q(W, $) {
        const J = W.data.map((_e) => _e.entityId.id),
          te = $.data.map((_e) => _e.entityId.id);
        return !(0, C.Xy)(J, te);
      }
      const K = [
        { type: s.ENTITY_FIELD, key: "name" },
        { type: s.ENTITY_FIELD, key: "label" },
        { type: s.ENTITY_FIELD, key: "additionalInfo" },
      ];
      function H(W) {
        const $ = { id: W.entityId.id, entityType: W.entityId.entityType };
        if (W.latest && W.latest[s.ENTITY_FIELD]) {
          const J = W.latest[s.ENTITY_FIELD];
          if (
            (J.name ? ($.name = J.name.value) : ($.name = ""),
            J.label ? ($.label = J.label.value) : ($.label = ""),
            ($.entityDescription = ""),
            J.additionalInfo)
          ) {
            const te = J.additionalInfo.value;
            if (te && te.length)
              try {
                const _e = JSON.parse(te);
                _e && _e.description && ($.entityDescription = _e.description);
              } catch (_e) {}
          }
        }
        return $;
      }
      function x(W, $, J = !1) {
        (W.entity = { id: { entityType: $.entityType, id: $.id } }),
          (W.entityId = $.id),
          (W.entityType = $.entityType),
          (W.type === a.i9.entity || W.type === a.i9.entityCount) &&
            (W.type === a.i9.entity &&
              ((W.entityName = $.name),
              (W.entityLabel = $.label),
              (W.name = $.name),
              (W.entityDescription = $.entityDescription),
              (W.entity.label = $.label),
              (W.entity.name = $.name)),
            J &&
              (W.entityFilter = {
                type: e.aA.singleEntity,
                singleEntity: { id: $.id, entityType: $.entityType },
              }));
      }
    },
    73401: (ee, R, t) => {
      "use strict";
      var e, d, n;
      t.d(R, {
        UW: () => e,
        Qo: () => n,
        At: () => a,
        ke: () => C,
        oG: () => s,
      }),
        ((d = e || (e = {})).TB_CORE = "TB_CORE"),
        (d.TB_RULE_ENGINE = "TB_RULE_ENGINE"),
        (d.TB_TRANSPORT = "TB_TRANSPORT"),
        (d.JS_EXECUTOR = "JS_EXECUTOR"),
        (function (d) {
          (d.SEQUENTIAL_BY_ORIGINATOR = "SEQUENTIAL_BY_ORIGINATOR"),
            (d.SEQUENTIAL_BY_TENANT = "SEQUENTIAL_BY_TENANT"),
            (d.SEQUENTIAL = "SEQUENTIAL"),
            (d.BURST = "BURST"),
            (d.BATCH = "BATCH");
        })(n || (n = {}));
      const a = new Map([
        [
          n.SEQUENTIAL_BY_ORIGINATOR,
          {
            label: "queue.strategies.sequential-by-originator-label",
            hint: "queue.strategies.sequential-by-originator-hint",
          },
        ],
        [
          n.SEQUENTIAL_BY_TENANT,
          {
            label: "queue.strategies.sequential-by-tenant-label",
            hint: "queue.strategies.sequential-by-tenant-hint",
          },
        ],
        [
          n.SEQUENTIAL,
          {
            label: "queue.strategies.sequential-label",
            hint: "queue.strategies.sequential-hint",
          },
        ],
        [
          n.BURST,
          {
            label: "queue.strategies.burst-label",
            hint: "queue.strategies.burst-hint",
          },
        ],
        [
          n.BATCH,
          {
            label: "queue.strategies.batch-label",
            hint: "queue.strategies.batch-hint",
          },
        ],
      ]);
      var C;
      !(function (d) {
        (d.RETRY_FAILED_AND_TIMED_OUT = "RETRY_FAILED_AND_TIMED_OUT"),
          (d.SKIP_ALL_FAILURES = "SKIP_ALL_FAILURES"),
          (d.SKIP_ALL_FAILURES_AND_TIMED_OUT =
            "SKIP_ALL_FAILURES_AND_TIMED_OUT"),
          (d.RETRY_ALL = "RETRY_ALL"),
          (d.RETRY_FAILED = "RETRY_FAILED"),
          (d.RETRY_TIMED_OUT = "RETRY_TIMED_OUT");
      })(C || (C = {}));
      const s = new Map([
        [
          C.RETRY_FAILED_AND_TIMED_OUT,
          {
            label: "queue.strategies.retry-failed-and-timeout-label",
            hint: "queue.strategies.retry-failed-and-timeout-hint",
          },
        ],
        [
          C.SKIP_ALL_FAILURES,
          {
            label: "queue.strategies.skip-all-failures-label",
            hint: "queue.strategies.skip-all-failures-hint",
          },
        ],
        [
          C.SKIP_ALL_FAILURES_AND_TIMED_OUT,
          {
            label: "queue.strategies.skip-all-failures-and-timeouts-label",
            hint: "queue.strategies.skip-all-failures-and-timeouts-hint",
          },
        ],
        [
          C.RETRY_ALL,
          {
            label: "queue.strategies.retry-all-label",
            hint: "queue.strategies.retry-all-hint",
          },
        ],
        [
          C.RETRY_FAILED,
          {
            label: "queue.strategies.retry-failed-label",
            hint: "queue.strategies.retry-failed-hint",
          },
        ],
        [
          C.RETRY_TIMED_OUT,
          {
            label: "queue.strategies.retry-timeout-label",
            hint: "queue.strategies.retry-timeout-hint",
          },
        ],
      ]);
    },
    36641: (ee, R, t) => {
      "use strict";
      t.d(R, {
        aI: () => e,
        $j: () => n,
        KE: () => a,
        HI: () => C,
        JV: () => s,
        oW: () => d,
        ki: () => o,
      });
      const e = "Contains",
        n = "Manages",
        a = [e, n];
      var C, i, s;
      ((i = C || (C = {})).COMMON = "COMMON"),
        (i.ALARM = "ALARM"),
        (i.DASHBOARD = "DASHBOARD"),
        (i.RULE_CHAIN = "RULE_CHAIN"),
        (i.RULE_NODE = "RULE_NODE"),
        (function (i) {
          (i.FROM = "FROM"), (i.TO = "TO");
        })(s || (s = {}));
      const d = new Map([
          [s.FROM, "relation.search-direction.FROM"],
          [s.TO, "relation.search-direction.TO"],
        ]),
        o = new Map([
          [s.FROM, "relation.direction-type.FROM"],
          [s.TO, "relation.direction-type.TO"],
        ]);
    },
    97371: (ee, R, t) => {
      "use strict";
      t.d(R, { il: () => a, Bj: () => C, _l: () => s, CI: () => d });
      var e = t(41429),
        n = t(65320);
      const a = [
          n.r.FILTER,
          n.r.ENRICHMENT,
          n.r.TRANSFORMATION,
          n.r.ACTION,
          n.r.EXTERNAL,
          n.r.FLOW,
        ],
        C = {
          type: e.ij.UNKNOWN,
          name: "unknown",
          clazz: "tb.internal.Unknown",
          configurationDescriptor: {
            nodeDefinition: {
              description: "",
              details: "",
              inEnabled: !0,
              outEnabled: !0,
              relationTypes: [],
              customRelations: !1,
              defaultConfiguration: {},
            },
          },
        },
        s = { type: e.ij.INPUT, name: "Input", clazz: "tb.internal.Input" };
      var d, o;
      ((o = d || (d = {})).CORE = "CORE"), (o.EDGE = "EDGE");
    },
    41429: (ee, R, t) => {
      "use strict";
      t.d(R, {
        Wl: () => C,
        ij: () => s,
        D5: () => d,
        Rb: () => o,
        tS: () => i,
        Cs: () => g,
        gf: () => D,
        yy: () => y,
        QA: () => m,
        OP: () => h,
      });
      var s,
        p,
        e = t(75362),
        n = t(37716),
        a = t(86710);
      class C extends e.I {
        constructor(_) {
          super(_),
            (this.store = _),
            (this.configurationSet = !1),
            (this.configurationChangedEmiter = new n.EventEmitter()),
            (this.configurationChanged =
              this.configurationChangedEmiter.asObservable());
        }
        set configuration(_) {
          (this.configurationValue = _),
            this.configurationSet
              ? this.updateConfiguration(_)
              : ((this.configurationSet = !0), this.setupConfiguration(_));
        }
        get configuration() {
          return this.configurationValue;
        }
        ngOnInit() {}
        ngAfterViewInit() {
          setTimeout(() => {
            this.validateConfig() || this.configurationChangedEmiter.emit(null);
          }, 0);
        }
        validate() {
          this.onValidate();
        }
        setupConfiguration(_) {
          this.onConfigurationSet(this.prepareInputConfig(_)),
            this.updateValidators(!1);
          for (const E of this.validatorTriggers()) {
            const c = E.split(".");
            let v = this.configForm();
            for (const I of c) v = v.get(I);
            v.valueChanges.subscribe(() => {
              this.updateValidators(!0, E);
            });
          }
          this.configForm().valueChanges.subscribe((E) => {
            this.onConfigurationChanged(E);
          });
        }
        updateConfiguration(_) {
          this.configForm().reset(this.prepareInputConfig(_), {
            emitEvent: !1,
          }),
            this.updateValidators(!1);
        }
        updateValidators(_, E) {}
        validatorTriggers() {
          return [];
        }
        onConfigurationChanged(_) {
          (this.configurationValue = _),
            this.validateConfig()
              ? this.configurationChangedEmiter.emit(
                  this.prepareOutputConfig(_)
                )
              : this.configurationChangedEmiter.emit(null);
        }
        prepareInputConfig(_) {
          return _;
        }
        prepareOutputConfig(_) {
          return _;
        }
        validateConfig() {
          return this.configForm().valid;
        }
        onValidate() {}
      }
      (C.ɵfac = function (_) {
        return new (_ || C)(n.ɵɵdirectiveInject(a.Store));
      }),
        (C.ɵdir = n.ɵɵdefineDirective({
          type: C,
          features: [n.ɵɵInheritDefinitionFeature],
        })),
        ((p = s || (s = {})).FILTER = "FILTER"),
        (p.ENRICHMENT = "ENRICHMENT"),
        (p.TRANSFORMATION = "TRANSFORMATION"),
        (p.ACTION = "ACTION"),
        (p.EXTERNAL = "EXTERNAL"),
        (p.FLOW = "FLOW"),
        (p.UNKNOWN = "UNKNOWN"),
        (p.INPUT = "INPUT");
      const d = [
          s.FILTER,
          s.ENRICHMENT,
          s.TRANSFORMATION,
          s.ACTION,
          s.EXTERNAL,
          s.FLOW,
        ],
        o = new Map([
          [
            s.FILTER,
            {
              value: s.FILTER,
              name: "rulenode.type-filter",
              details: "rulenode.type-filter-details",
              nodeClass: "tb-filter-type",
              icon: "filter_list",
            },
          ],
          [
            s.ENRICHMENT,
            {
              value: s.ENRICHMENT,
              name: "rulenode.type-enrichment",
              details: "rulenode.type-enrichment-details",
              nodeClass: "tb-enrichment-type",
              icon: "playlist_add",
            },
          ],
          [
            s.TRANSFORMATION,
            {
              value: s.TRANSFORMATION,
              name: "rulenode.type-transformation",
              details: "rulenode.type-transformation-details",
              nodeClass: "tb-transformation-type",
              icon: "transform",
            },
          ],
          [
            s.ACTION,
            {
              value: s.ACTION,
              name: "rulenode.type-action",
              details: "rulenode.type-action-details",
              nodeClass: "tb-action-type",
              icon: "flash_on",
            },
          ],
          [
            s.EXTERNAL,
            {
              value: s.EXTERNAL,
              name: "rulenode.type-external",
              details: "rulenode.type-external-details",
              nodeClass: "tb-external-type",
              icon: "cloud_upload",
            },
          ],
          [
            s.FLOW,
            {
              value: s.FLOW,
              name: "rulenode.type-flow",
              details: "rulenode.type-flow-details",
              nodeClass: "tb-flow-type",
              icon: "settings_ethernet",
            },
          ],
          [
            s.INPUT,
            {
              value: s.INPUT,
              name: "rulenode.type-input",
              details: "rulenode.type-input-details",
              nodeClass: "tb-input-type",
              icon: "input",
              special: !0,
            },
          ],
          [
            s.UNKNOWN,
            {
              value: s.UNKNOWN,
              name: "rulenode.type-unknown",
              details: "rulenode.type-unknown-details",
              nodeClass: "tb-unknown-type",
              icon: "help_outline",
            },
          ],
        ]);
      var i, g;
      !(function (p) {
        (p.JS = "JS"), (p.TBEL = "TBEL");
      })(i || (i = {})),
        (function (p) {
          (p.POST_ATTRIBUTES_REQUEST = "POST_ATTRIBUTES_REQUEST"),
            (p.POST_TELEMETRY_REQUEST = "POST_TELEMETRY_REQUEST"),
            (p.TO_SERVER_RPC_REQUEST = "TO_SERVER_RPC_REQUEST"),
            (p.RPC_CALL_FROM_SERVER_TO_DEVICE =
              "RPC_CALL_FROM_SERVER_TO_DEVICE"),
            (p.RPC_QUEUED = "RPC_QUEUED"),
            (p.RPC_SENT = "RPC_SENT"),
            (p.RPC_DELIVERED = "RPC_DELIVERED"),
            (p.RPC_SUCCESSFUL = "RPC_SUCCESSFUL"),
            (p.RPC_TIMEOUT = "RPC_TIMEOUT"),
            (p.RPC_EXPIRED = "RPC_EXPIRED"),
            (p.RPC_FAILED = "RPC_FAILED"),
            (p.RPC_DELETED = "RPC_DELETED"),
            (p.ACTIVITY_EVENT = "ACTIVITY_EVENT"),
            (p.INACTIVITY_EVENT = "INACTIVITY_EVENT"),
            (p.CONNECT_EVENT = "CONNECT_EVENT"),
            (p.DISCONNECT_EVENT = "DISCONNECT_EVENT"),
            (p.ENTITY_CREATED = "ENTITY_CREATED"),
            (p.ENTITY_UPDATED = "ENTITY_UPDATED"),
            (p.ENTITY_DELETED = "ENTITY_DELETED"),
            (p.ENTITY_ASSIGNED = "ENTITY_ASSIGNED"),
            (p.ENTITY_UNASSIGNED = "ENTITY_UNASSIGNED"),
            (p.ATTRIBUTES_UPDATED = "ATTRIBUTES_UPDATED"),
            (p.ATTRIBUTES_DELETED = "ATTRIBUTES_DELETED"),
            (p.ALARM_ACKNOWLEDGED = "ALARM_ACKNOWLEDGED"),
            (p.ALARM_CLEARED = "ALARM_CLEARED"),
            (p.ENTITY_ASSIGNED_FROM_TENANT = "ENTITY_ASSIGNED_FROM_TENANT"),
            (p.ENTITY_ASSIGNED_TO_TENANT = "ENTITY_ASSIGNED_TO_TENANT"),
            (p.TIMESERIES_UPDATED = "TIMESERIES_UPDATED"),
            (p.TIMESERIES_DELETED = "TIMESERIES_DELETED");
        })(g || (g = {}));
      const D = new Map([
          [g.POST_ATTRIBUTES_REQUEST, "Post attributes"],
          [g.POST_TELEMETRY_REQUEST, "Post telemetry"],
          [g.TO_SERVER_RPC_REQUEST, "RPC Request from Device"],
          [g.RPC_CALL_FROM_SERVER_TO_DEVICE, "RPC Request to Device"],
          [g.RPC_QUEUED, "RPC Queued"],
          [g.RPC_SENT, "RPC Sent"],
          [g.RPC_DELIVERED, "RPC Delivered"],
          [g.RPC_SUCCESSFUL, "RPC Successful"],
          [g.RPC_TIMEOUT, "RPC Timeout"],
          [g.RPC_EXPIRED, "RPC Expired"],
          [g.RPC_FAILED, "RPC Failed"],
          [g.RPC_DELETED, "RPC Deleted"],
          [g.ACTIVITY_EVENT, "Activity Event"],
          [g.INACTIVITY_EVENT, "Inactivity Event"],
          [g.CONNECT_EVENT, "Connect Event"],
          [g.DISCONNECT_EVENT, "Disconnect Event"],
          [g.ENTITY_CREATED, "Entity Created"],
          [g.ENTITY_UPDATED, "Entity Updated"],
          [g.ENTITY_DELETED, "Entity Deleted"],
          [g.ENTITY_ASSIGNED, "Entity Assigned"],
          [g.ENTITY_UNASSIGNED, "Entity Unassigned"],
          [g.ATTRIBUTES_UPDATED, "Attributes Updated"],
          [g.ATTRIBUTES_DELETED, "Attributes Deleted"],
          [g.ALARM_ACKNOWLEDGED, "Alarm Acknowledged"],
          [g.ALARM_CLEARED, "Alarm Cleared"],
          [g.ENTITY_ASSIGNED_FROM_TENANT, "Entity Assigned From Tenant"],
          [g.ENTITY_ASSIGNED_TO_TENANT, "Entity Assigned To Tenant"],
          [g.TIMESERIES_UPDATED, "Timeseries Updated"],
          [g.TIMESERIES_DELETED, "Timeseries Deleted"],
        ]),
        y = "org.thingsboard.rule.engine.flow.TbRuleChainInputNode",
        m = "org.thingsboard.rule.engine.flow.TbRuleChainOutputNode",
        r = {
          "org.thingsboard.rule.engine.filter.TbCheckRelationNode":
            "ruleNodeCheckRelation",
          "org.thingsboard.rule.engine.filter.TbCheckMessageNode":
            "ruleNodeCheckExistenceFields",
          "org.thingsboard.rule.engine.geo.TbGpsGeofencingFilterNode":
            "ruleNodeGpsGeofencingFilter",
          "org.thingsboard.rule.engine.filter.TbJsFilterNode":
            "ruleNodeJsFilter",
          "org.thingsboard.rule.engine.filter.TbJsSwitchNode":
            "ruleNodeJsSwitch",
          "org.thingsboard.rule.engine.filter.TbAssetTypeSwitchNode":
            "ruleNodeAssetProfileSwitch",
          "org.thingsboard.rule.engine.filter.TbDeviceTypeSwitchNode":
            "ruleNodeDeviceProfileSwitch",
          "org.thingsboard.rule.engine.filter.TbCheckAlarmStatusNode":
            "ruleNodeCheckAlarmStatus",
          "org.thingsboard.rule.engine.filter.TbMsgTypeFilterNode":
            "ruleNodeMessageTypeFilter",
          "org.thingsboard.rule.engine.filter.TbMsgTypeSwitchNode":
            "ruleNodeMessageTypeSwitch",
          "org.thingsboard.rule.engine.filter.TbOriginatorTypeFilterNode":
            "ruleNodeOriginatorTypeFilter",
          "org.thingsboard.rule.engine.filter.TbOriginatorTypeSwitchNode":
            "ruleNodeOriginatorTypeSwitch",
          "org.thingsboard.rule.engine.metadata.TbGetAttributesNode":
            "ruleNodeOriginatorAttributes",
          "org.thingsboard.rule.engine.metadata.TbGetOriginatorFieldsNode":
            "ruleNodeOriginatorFields",
          "org.thingsboard.rule.engine.metadata.TbGetTelemetryNode":
            "ruleNodeOriginatorTelemetry",
          "org.thingsboard.rule.engine.metadata.TbGetCustomerAttributeNode":
            "ruleNodeCustomerAttributes",
          "org.thingsboard.rule.engine.metadata.TbGetCustomerDetailsNode":
            "ruleNodeCustomerDetails",
          "org.thingsboard.rule.engine.metadata.TbGetDeviceAttrNode":
            "ruleNodeDeviceAttributes",
          "org.thingsboard.rule.engine.metadata.TbGetRelatedAttributeNode":
            "ruleNodeRelatedAttributes",
          "org.thingsboard.rule.engine.metadata.TbGetTenantAttributeNode":
            "ruleNodeTenantAttributes",
          "org.thingsboard.rule.engine.metadata.TbGetTenantDetailsNode":
            "ruleNodeTenantDetails",
          "org.thingsboard.rule.engine.transform.TbChangeOriginatorNode":
            "ruleNodeChangeOriginator",
          "org.thingsboard.rule.engine.transform.TbTransformMsgNode":
            "ruleNodeTransformMsg",
          "org.thingsboard.rule.engine.mail.TbMsgToEmailNode":
            "ruleNodeMsgToEmail",
          "org.thingsboard.rule.engine.action.TbAssignToCustomerNode":
            "ruleNodeAssignToCustomer",
          "org.thingsboard.rule.engine.action.TbUnassignFromCustomerNode":
            "ruleNodeUnassignFromCustomer",
          "org.thingsboard.rule.engine.action.TbClearAlarmNode":
            "ruleNodeClearAlarm",
          "org.thingsboard.rule.engine.action.TbCreateAlarmNode":
            "ruleNodeCreateAlarm",
          "org.thingsboard.rule.engine.action.TbCreateRelationNode":
            "ruleNodeCreateRelation",
          "org.thingsboard.rule.engine.action.TbDeleteRelationNode":
            "ruleNodeDeleteRelation",
          "org.thingsboard.rule.engine.delay.TbMsgDelayNode":
            "ruleNodeMsgDelay",
          "org.thingsboard.rule.engine.debug.TbMsgGeneratorNode":
            "ruleNodeMsgGenerator",
          "org.thingsboard.rule.engine.geo.TbGpsGeofencingActionNode":
            "ruleNodeGpsGeofencingEvents",
          "org.thingsboard.rule.engine.action.TbLogNode": "ruleNodeLog",
          "org.thingsboard.rule.engine.rpc.TbSendRPCReplyNode":
            "ruleNodeRpcCallReply",
          "org.thingsboard.rule.engine.rpc.TbSendRPCRequestNode":
            "ruleNodeRpcCallRequest",
          "org.thingsboard.rule.engine.telemetry.TbMsgAttributesNode":
            "ruleNodeSaveAttributes",
          "org.thingsboard.rule.engine.telemetry.TbMsgTimeseriesNode":
            "ruleNodeSaveTimeseries",
          "org.thingsboard.rule.engine.action.TbSaveToCustomCassandraTableNode":
            "ruleNodeSaveToCustomTable",
          "org.thingsboard.rule.engine.aws.sns.TbSnsNode": "ruleNodeAwsSns",
          "org.thingsboard.rule.engine.aws.sqs.TbSqsNode": "ruleNodeAwsSqs",
          "org.thingsboard.rule.engine.kafka.TbKafkaNode": "ruleNodeKafka",
          "org.thingsboard.rule.engine.mqtt.TbMqttNode": "ruleNodeMqtt",
          "org.thingsboard.rule.engine.mqtt.azure.TbAzureIotHubNode":
            "ruleNodeAzureIotHub",
          "org.thingsboard.rule.engine.rabbitmq.TbRabbitMqNode":
            "ruleNodeRabbitMq",
          "org.thingsboard.rule.engine.rest.TbRestApiCallNode":
            "ruleNodeRestApiCall",
          "org.thingsboard.rule.engine.mail.TbSendEmailNode":
            "ruleNodeSendEmail",
          "org.thingsboard.rule.engine.sms.TbSendSmsNode": "ruleNodeSendSms",
          "org.thingsboard.rule.engine.edge.TbMsgPushToCloudNode":
            "ruleNodePushToCloud",
          "org.thingsboard.rule.engine.edge.TbMsgPushToEdgeNode":
            "ruleNodePushToEdge",
          "org.thingsboard.rule.engine.flow.TbRuleChainInputNode":
            "ruleNodeRuleChain",
          "org.thingsboard.rule.engine.flow.TbRuleChainOutputNode":
            "ruleNodeOutputNode",
          "org.thingsboard.rule.engine.math.TbMathNode": "ruleNodeMath",
        };
      function h(p) {
        if (p) {
          if (
            p.configurationDescriptor &&
            p.configurationDescriptor.nodeDefinition &&
            p.configurationDescriptor.nodeDefinition.docUrl
          )
            return p.configurationDescriptor.nodeDefinition.docUrl;
          if (p.clazz && r[p.clazz]) return r[p.clazz];
        }
        return "ruleEngine";
      }
    },
    69331: (ee, R, t) => {
      "use strict";
      t.d(R, {
        dG: () => o,
        B5: () => i,
        My: () => g,
        jA: () => D,
        Hs: () => y,
        QP: () => m,
        T9: () => r,
        WC: () => h,
        KA: () => p,
        Md: () => _,
        u0: () => E,
        qb: () => c,
        TG: () => v,
        xX: () => I,
        HV: () => l,
        bO: () => T,
        bj: () => O,
        _: () => w,
        rV: () => b,
        q6: () => S,
        X0: () => u,
        Vc: () => f,
        gH: () => M,
        XD: () => L,
        IN: () => k,
        UI: () => N,
        Ot: () => B,
        ss: () => j,
        Kz: () => F,
        xb: () => V,
      });
      var o,
        P,
        i,
        g,
        D,
        e = t(88229),
        n = t(79765),
        a = t(88002),
        C = t(29472),
        s = t(76637),
        d = t(41960);
      function y(P) {
        return i[P] ? i[P] : g[P];
      }
      ((P = o || (o = {})).timeseries = "timeseries"),
        (P.attribute = "attribute"),
        (P.function = "function"),
        (P.alarm = "alarm"),
        (P.entityField = "entityField"),
        (P.count = "count"),
        (function (P) {
          P.LATEST_TELEMETRY = "LATEST_TELEMETRY";
        })(i || (i = {})),
        (function (P) {
          (P.CLIENT_SCOPE = "CLIENT_SCOPE"),
            (P.SERVER_SCOPE = "SERVER_SCOPE"),
            (P.SHARED_SCOPE = "SHARED_SCOPE");
        })(g || (g = {})),
        (function (P) {
          (P.ATTRIBUTES = "ATTRIBUTES"), (P.TIMESERIES = "TIMESERIES");
        })(D || (D = {}));
      const m = new Map([
          [i.LATEST_TELEMETRY, "attribute.scope-latest-telemetry"],
          [g.CLIENT_SCOPE, "attribute.scope-client"],
          [g.SERVER_SCOPE, "attribute.scope-server"],
          [g.SHARED_SCOPE, "attribute.scope-shared"],
        ]),
        r = new Map([
          [i.LATEST_TELEMETRY, !0],
          [g.CLIENT_SCOPE, !0],
          [g.SERVER_SCOPE, !1],
          [g.SHARED_SCOPE, !1],
        ]);
      var h, S;
      !(function (P) {
        (P.ASC = "ASC"), (P.DESC = "DESC");
      })(h || (h = {}));
      class p {}
      class _ extends p {
        getType() {
          return D.ATTRIBUTES;
        }
      }
      class E extends p {
        getType() {
          return D.TIMESERIES;
        }
      }
      class c {}
      class v {
        isEmpty() {
          return !(
            this.query ||
            this.historyCmd ||
            this.latestCmd ||
            this.tsCmd ||
            this.aggTsCmd ||
            this.aggHistoryCmd
          );
        }
      }
      class I {}
      class l {
        isEmpty() {
          return !this.query;
        }
      }
      class T {}
      class O {}
      class w {}
      class b {
        constructor() {
          (this.attrSubCmds = []),
            (this.tsSubCmds = []),
            (this.historyCmds = []),
            (this.entityDataCmds = []),
            (this.entityDataUnsubscribeCmds = []),
            (this.alarmDataCmds = []),
            (this.alarmDataUnsubscribeCmds = []),
            (this.entityCountCmds = []),
            (this.entityCountUnsubscribeCmds = []);
        }
        static popCmds(A, U) {
          const G = Math.min(A.length, U);
          return G > 0 ? A.splice(0, G) : [];
        }
        hasCommands() {
          return (
            this.tsSubCmds.length > 0 ||
            this.historyCmds.length > 0 ||
            this.attrSubCmds.length > 0 ||
            this.entityDataCmds.length > 0 ||
            this.entityDataUnsubscribeCmds.length > 0 ||
            this.alarmDataCmds.length > 0 ||
            this.alarmDataUnsubscribeCmds.length > 0 ||
            this.entityCountCmds.length > 0 ||
            this.entityCountUnsubscribeCmds.length > 0
          );
        }
        clear() {
          (this.attrSubCmds.length = 0),
            (this.tsSubCmds.length = 0),
            (this.historyCmds.length = 0),
            (this.entityDataCmds.length = 0),
            (this.entityDataUnsubscribeCmds.length = 0),
            (this.alarmDataCmds.length = 0),
            (this.alarmDataUnsubscribeCmds.length = 0),
            (this.entityCountCmds.length = 0),
            (this.entityCountUnsubscribeCmds.length = 0);
        }
        preparePublishCommands(A) {
          const U = new b();
          let G = A;
          return (
            (U.tsSubCmds = b.popCmds(this.tsSubCmds, G)),
            (G -= U.tsSubCmds.length),
            (U.historyCmds = b.popCmds(this.historyCmds, G)),
            (G -= U.historyCmds.length),
            (U.attrSubCmds = b.popCmds(this.attrSubCmds, G)),
            (G -= U.attrSubCmds.length),
            (U.entityDataCmds = b.popCmds(this.entityDataCmds, G)),
            (G -= U.entityDataCmds.length),
            (U.entityDataUnsubscribeCmds = b.popCmds(
              this.entityDataUnsubscribeCmds,
              G
            )),
            (G -= U.entityDataUnsubscribeCmds.length),
            (U.alarmDataCmds = b.popCmds(this.alarmDataCmds, G)),
            (G -= U.alarmDataCmds.length),
            (U.alarmDataUnsubscribeCmds = b.popCmds(
              this.alarmDataUnsubscribeCmds,
              G
            )),
            (G -= U.alarmDataUnsubscribeCmds.length),
            (U.entityCountCmds = b.popCmds(this.entityCountCmds, G)),
            (G -= U.entityCountCmds.length),
            (U.entityCountUnsubscribeCmds = b.popCmds(
              this.entityCountUnsubscribeCmds,
              G
            )),
            U
          );
        }
      }
      function u(P) {
        const A = P;
        return void 0 !== A.cmdId && A.cmdUpdateType === S.ENTITY_DATA;
      }
      function f(P) {
        const A = P;
        return void 0 !== A.cmdId && A.cmdUpdateType === S.ALARM_DATA;
      }
      function M(P) {
        const A = P;
        return void 0 !== A.cmdId && A.cmdUpdateType === S.COUNT_DATA;
      }
      !(function (P) {
        (P.ENTITY_DATA = "ENTITY_DATA"),
          (P.ALARM_DATA = "ALARM_DATA"),
          (P.COUNT_DATA = "COUNT_DATA");
      })(S || (S = {}));
      class L {
        constructor(A) {
          (this.subscriptionId = A.subscriptionId),
            (this.errorCode = A.errorCode),
            (this.errorMsg = A.errorMsg),
            (this.data = A.data);
        }
        prepareData(A) {
          this.data || (this.data = {}),
            A &&
              A.forEach((U) => {
                this.data[U] || (this.data[U] = []);
              });
        }
        updateAttributeData(A) {
          for (const U of Object.keys(this.data)) {
            const G = this.data[U];
            if (G.length) {
              const Z = A.find((le) => le.key === U);
              Z
                ? ((Z.lastUpdateTs = G[0][0]), (Z.value = G[0][1]))
                : A.push({ key: U, lastUpdateTs: G[0][0], value: G[0][1] });
            }
          }
          return A;
        }
      }
      class k {
        constructor(A) {
          (this.cmdId = A.cmdId),
            (this.errorCode = A.errorCode),
            (this.errorMsg = A.errorMsg),
            (this.cmdUpdateType = A.cmdUpdateType);
        }
      }
      class N extends k {
        constructor(A) {
          super(A), (this.data = A.data), (this.update = A.update);
        }
      }
      class B extends N {
        constructor(A) {
          super(A);
        }
        static processEntityData(A, U) {
          for (const G of A) {
            if (G.timeseries)
              for (const Z of Object.keys(G.timeseries)) {
                const le = G.timeseries[Z];
                for (const X of le) X.ts && (X.ts += U);
              }
            if (G.latest)
              for (const Z of Object.keys(G.latest)) {
                const le = G.latest[Z];
                for (const X of Object.keys(le)) {
                  const se = le[X];
                  se.ts && (se.ts += U),
                    X === s.i.createdTime.keyName &&
                      se.value &&
                      (se.value = Number(se.value) + U + "");
                }
              }
          }
        }
        prepareData(A) {
          this.data && B.processEntityData(this.data.data, A),
            this.update && B.processEntityData(this.update, A);
        }
      }
      class j extends N {
        constructor(A) {
          super(A),
            (this.allowedEntities = A.allowedEntities),
            (this.totalEntities = A.totalEntities);
        }
        static processAlarmData(A, U) {
          for (const G of A)
            if (
              ((G.createdTime += U),
              G.ackTs && (G.ackTs += U),
              G.clearTs && (G.clearTs += U),
              G.endTs && (G.endTs += U),
              G.latest)
            )
              for (const Z of Object.keys(G.latest)) {
                const le = G.latest[Z];
                for (const X of Object.keys(le)) {
                  const se = le[X];
                  se.ts && (se.ts += U),
                    X in
                      [
                        s.i.createdTime.keyName,
                        C.rI.startTime.keyName,
                        C.rI.endTime.keyName,
                        C.rI.ackTime.keyName,
                        C.rI.clearTime.keyName,
                      ] &&
                      se.value &&
                      (se.value = Number(se.value) + U + "");
                }
              }
        }
        prepareData(A) {
          this.data && j.processAlarmData(this.data.data, A),
            this.update && j.processAlarmData(this.update, A);
        }
      }
      class F extends k {
        constructor(A) {
          super(A), (this.count = A.count);
        }
      }
      class V {
        constructor(A, U) {
          (this.telemetryService = A),
            (this.zone = U),
            (this.dataSubject = new e.t(1)),
            (this.entityDataSubject = new e.t(1)),
            (this.alarmDataSubject = new e.t(1)),
            (this.entityCountSubject = new e.t(1)),
            (this.reconnectSubject = new n.xQ()),
            (this.tsOffset = void 0),
            (this.data$ = this.dataSubject.asObservable()),
            (this.entityData$ = this.entityDataSubject.asObservable()),
            (this.alarmData$ = this.alarmDataSubject.asObservable()),
            (this.entityCount$ = this.entityCountSubject.asObservable()),
            (this.reconnect$ = this.reconnectSubject.asObservable()),
            (this.subscriptionCommands = []);
        }
        static createEntityAttributesSubscription(A, U, G, Z, le = null) {
          let X;
          (X = G === i.LATEST_TELEMETRY ? new E() : new _()),
            (X.entityType = U.entityType),
            (X.entityId = U.id),
            (X.scope = G),
            le && (X.keys = le.join(","));
          const se = new V(A, Z);
          return se.subscriptionCommands.push(X), se;
        }
        subscribe() {
          this.telemetryService.subscribe(this);
        }
        update() {
          this.telemetryService.update(this);
        }
        unsubscribe() {
          this.telemetryService.unsubscribe(this), this.complete();
        }
        complete() {
          this.dataSubject.complete(),
            this.entityDataSubject.complete(),
            this.alarmDataSubject.complete(),
            this.entityCountSubject.complete(),
            this.reconnectSubject.complete();
        }
        setTsOffset(A) {
          if (this.tsOffset !== A) {
            const U = !(0, d.o8)(this.tsOffset);
            return (this.tsOffset = A), U;
          }
          return !1;
        }
        onData(A) {
          const U = A.subscriptionId;
          let G;
          const Z = this.subscriptionCommands.find((le) => le.cmdId === U);
          if (Z) {
            const le = Z;
            le.keys && le.keys.length && (G = le.keys.split(","));
          }
          A.prepareData(G),
            this.zone
              ? this.zone.run(() => {
                  this.dataSubject.next(A);
                })
              : this.dataSubject.next(A);
        }
        onEntityData(A) {
          this.tsOffset && A.prepareData(this.tsOffset),
            this.zone
              ? this.zone.run(() => {
                  this.entityDataSubject.next(A);
                })
              : this.entityDataSubject.next(A);
        }
        onAlarmData(A) {
          this.tsOffset && A.prepareData(this.tsOffset),
            this.zone
              ? this.zone.run(() => {
                  this.alarmDataSubject.next(A);
                })
              : this.alarmDataSubject.next(A);
        }
        onEntityCount(A) {
          this.zone
            ? this.zone.run(() => {
                this.entityCountSubject.next(A);
              })
            : this.entityCountSubject.next(A);
        }
        onReconnected() {
          this.reconnectSubject.next();
        }
        attributeData$() {
          const A = new Array();
          return this.data$.pipe((0, a.U)((U) => U.updateAttributeData(A)));
        }
      }
    },
    95341: (ee, R, t) => {
      "use strict";
      t.d(R, {
        sh: () => o,
        EB: () => i,
        kr: () => g,
        x4: () => D,
        ps: () => y,
        oP: () => m,
        _7: () => r,
        Xf: () => h,
        dT: () => p,
        Eu: () => _,
        _s: () => E,
        WC: () => c,
        $Y: () => v,
        Gl: () => I,
        B3: () => l,
        cs: () => O,
        eW: () => w,
        lB: () => b,
        IL: () => S,
        kW: () => u,
        O_: () => f,
        TH: () => L,
        nH: () => k,
        jH: () => N,
        Nb: () => B,
        iE: () => j,
        Ys: () => F,
        nD: () => V,
        MI: () => P,
        Mk: () => A,
        j1: () => U,
        mS: () => G,
        mt: () => Z,
        MW: () => se,
        kD: () => ne,
        Xc: () => re,
        PU: () => de,
        Xn: () => pe,
        hK: () => Q,
        EP: () => K,
        $R: () => H,
      });
      var e = t(41960),
        n = t(16738),
        C = t(71412);
      const d = n,
        o = 1e3,
        i = 60 * o,
        g = 60 * i,
        D = 24 * g,
        y = 7 * D,
        m = 365 * D;
      var r, x, h, p, _;
      ((x = r || (r = {}))[(x.REALTIME = 0)] = "REALTIME"),
        (x[(x.HISTORY = 1)] = "HISTORY"),
        (function (x) {
          (x[(x.LAST_INTERVAL = 0)] = "LAST_INTERVAL"),
            (x[(x.INTERVAL = 1)] = "INTERVAL");
        })(h || (h = {})),
        (function (x) {
          (x[(x.LAST_INTERVAL = 0)] = "LAST_INTERVAL"),
            (x[(x.FIXED = 1)] = "FIXED"),
            (x[(x.INTERVAL = 2)] = "INTERVAL");
        })(p || (p = {})),
        (function (x) {
          (x.MIN = "MIN"),
            (x.MAX = "MAX"),
            (x.AVG = "AVG"),
            (x.SUM = "SUM"),
            (x.COUNT = "COUNT"),
            (x.NONE = "NONE");
        })(_ || (_ = {}));
      const E = new Map([
        [_.MIN, "aggregation.min"],
        [_.MAX, "aggregation.max"],
        [_.AVG, "aggregation.avg"],
        [_.SUM, "aggregation.sum"],
        [_.COUNT, "aggregation.count"],
        [_.NONE, "aggregation.none"],
      ]);
      var c;
      !(function (x) {
        (x.YESTERDAY = "YESTERDAY"),
          (x.DAY_BEFORE_YESTERDAY = "DAY_BEFORE_YESTERDAY"),
          (x.THIS_DAY_LAST_WEEK = "THIS_DAY_LAST_WEEK"),
          (x.PREVIOUS_WEEK = "PREVIOUS_WEEK"),
          (x.PREVIOUS_WEEK_ISO = "PREVIOUS_WEEK_ISO"),
          (x.PREVIOUS_MONTH = "PREVIOUS_MONTH"),
          (x.PREVIOUS_YEAR = "PREVIOUS_YEAR"),
          (x.CURRENT_HOUR = "CURRENT_HOUR"),
          (x.CURRENT_DAY = "CURRENT_DAY"),
          (x.CURRENT_DAY_SO_FAR = "CURRENT_DAY_SO_FAR"),
          (x.CURRENT_WEEK = "CURRENT_WEEK"),
          (x.CURRENT_WEEK_ISO = "CURRENT_WEEK_ISO"),
          (x.CURRENT_WEEK_SO_FAR = "CURRENT_WEEK_SO_FAR"),
          (x.CURRENT_WEEK_ISO_SO_FAR = "CURRENT_WEEK_ISO_SO_FAR"),
          (x.CURRENT_MONTH = "CURRENT_MONTH"),
          (x.CURRENT_MONTH_SO_FAR = "CURRENT_MONTH_SO_FAR"),
          (x.CURRENT_YEAR = "CURRENT_YEAR"),
          (x.CURRENT_YEAR_SO_FAR = "CURRENT_YEAR_SO_FAR");
      })(c || (c = {}));
      const v = new Map([
        [c.YESTERDAY, "timeinterval.predefined.yesterday"],
        [
          c.DAY_BEFORE_YESTERDAY,
          "timeinterval.predefined.day-before-yesterday",
        ],
        [c.THIS_DAY_LAST_WEEK, "timeinterval.predefined.this-day-last-week"],
        [c.PREVIOUS_WEEK, "timeinterval.predefined.previous-week"],
        [c.PREVIOUS_WEEK_ISO, "timeinterval.predefined.previous-week-iso"],
        [c.PREVIOUS_MONTH, "timeinterval.predefined.previous-month"],
        [c.PREVIOUS_YEAR, "timeinterval.predefined.previous-year"],
        [c.CURRENT_HOUR, "timeinterval.predefined.current-hour"],
        [c.CURRENT_DAY, "timeinterval.predefined.current-day"],
        [c.CURRENT_DAY_SO_FAR, "timeinterval.predefined.current-day-so-far"],
        [c.CURRENT_WEEK, "timeinterval.predefined.current-week"],
        [c.CURRENT_WEEK_ISO, "timeinterval.predefined.current-week-iso"],
        [c.CURRENT_WEEK_SO_FAR, "timeinterval.predefined.current-week-so-far"],
        [
          c.CURRENT_WEEK_ISO_SO_FAR,
          "timeinterval.predefined.current-week-iso-so-far",
        ],
        [c.CURRENT_MONTH, "timeinterval.predefined.current-month"],
        [
          c.CURRENT_MONTH_SO_FAR,
          "timeinterval.predefined.current-month-so-far",
        ],
        [c.CURRENT_YEAR, "timeinterval.predefined.current-year"],
        [c.CURRENT_YEAR_SO_FAR, "timeinterval.predefined.current-year-so-far"],
      ]);
      function I(x) {
        return {
          selectedTab: r.HISTORY,
          history: { historyType: p.LAST_INTERVAL, timewindowMs: x },
        };
      }
      function l(x) {
        const W = d().valueOf();
        return {
          displayValue: "",
          hideInterval: !1,
          hideLastInterval: !1,
          hideQuickInterval: !1,
          hideAggregation: !1,
          hideAggInterval: !1,
          hideTimezone: !1,
          selectedTab: r.REALTIME,
          realtime: {
            realtimeType: h.LAST_INTERVAL,
            interval: o,
            timewindowMs: i,
            quickInterval: c.CURRENT_DAY,
          },
          history: {
            historyType: p.LAST_INTERVAL,
            interval: o,
            timewindowMs: i,
            fixedTimewindow: { startTimeMs: W - D, endTimeMs: W },
            quickInterval: c.CURRENT_DAY,
          },
          aggregation: {
            type: _.AVG,
            limit: Math.floor(x.getMaxDatapointsLimit() / 2),
          },
        };
      }
      function T(x) {
        return (0, e.o8)(x.selectedTab)
          ? (0, e.$K)(x.realtime)
            ? r.REALTIME
            : r.HISTORY
          : x.selectedTab;
      }
      function O(x, W, $) {
        const J = l($);
        return (
          x &&
            ((J.hideInterval = x.hideInterval),
            (J.hideLastInterval = x.hideLastInterval),
            (J.hideQuickInterval = x.hideQuickInterval),
            (J.hideAggregation = x.hideAggregation),
            (J.hideAggInterval = x.hideAggInterval),
            (J.hideTimezone = x.hideTimezone),
            (J.selectedTab = T(x)),
            J.selectedTab === r.REALTIME
              ? ((0, e.$K)(x.realtime.interval) &&
                  (J.realtime.interval = x.realtime.interval),
                (0, e.o8)(x.realtime.realtimeType)
                  ? (0, e.$K)(x.realtime.quickInterval)
                    ? (J.realtime.realtimeType = h.INTERVAL)
                    : (J.realtime.realtimeType = h.LAST_INTERVAL)
                  : (J.realtime.realtimeType = x.realtime.realtimeType),
                J.realtime.realtimeType === h.INTERVAL
                  ? (J.realtime.quickInterval = x.realtime.quickInterval)
                  : (J.realtime.timewindowMs = x.realtime.timewindowMs))
              : ((0, e.$K)(x.history.interval) &&
                  (J.history.interval = x.history.interval),
                (0, e.o8)(x.history.historyType)
                  ? (0, e.$K)(x.history.timewindowMs)
                    ? (J.history.historyType = p.LAST_INTERVAL)
                    : (0, e.$K)(x.history.quickInterval)
                    ? (J.history.historyType = p.INTERVAL)
                    : (J.history.historyType = p.FIXED)
                  : (J.history.historyType = x.history.historyType),
                J.history.historyType === p.LAST_INTERVAL
                  ? (J.history.timewindowMs = x.history.timewindowMs)
                  : J.history.historyType === p.INTERVAL
                  ? (J.history.quickInterval = x.history.quickInterval)
                  : ((J.history.fixedTimewindow.startTimeMs =
                      x.history.fixedTimewindow.startTimeMs),
                    (J.history.fixedTimewindow.endTimeMs =
                      x.history.fixedTimewindow.endTimeMs))),
            x.aggregation &&
              (x.aggregation.type && (J.aggregation.type = x.aggregation.type),
              (J.aggregation.limit =
                x.aggregation.limit ||
                Math.floor($.getMaxDatapointsLimit() / 2))),
            (J.timezone = x.timezone)),
          W && (J.realtime.realtimeType = h.INTERVAL),
          J
        );
      }
      function w(x, W, $, J, te) {
        let _e, me;
        return (
          (J = x.history
            ? (0, e.$K)(J)
              ? J
              : x.history.interval
            : x.realtime
            ? x.realtime.interval
            : 0),
          x.aggregation
            ? ((_e = x.aggregation.type || _.AVG),
              (me = x.aggregation.limit || te.getMaxDatapointsLimit()))
            : ((_e = _.AVG), (me = te.getMaxDatapointsLimit())),
          {
            hideInterval: x.hideInterval || !1,
            hideLastInterval: x.hideLastInterval || !1,
            hideQuickInterval: x.hideQuickInterval || !1,
            hideAggregation: x.hideAggregation || !1,
            hideAggInterval: x.hideAggInterval || !1,
            hideTimezone: x.hideTimezone || !1,
            selectedTab: r.HISTORY,
            history: {
              historyType: p.FIXED,
              fixedTimewindow: { startTimeMs: W, endTimeMs: $ },
              interval: te.boundIntervalToTimewindow($ - W, J, _.AVG),
            },
            aggregation: { type: _e, limit: me },
            timezone: x.timezone,
          }
        );
      }
      function b(x, W) {
        if (!x || !W) return !1;
        return T(x) !== T(W);
      }
      function S(x) {
        if (x) {
          const W = K(x),
            $ = d().utcOffset();
          return 60 * (W.utcOffset() - $) * 1e3;
        }
        return 0;
      }
      function u(x) {
        return T(x) === r.HISTORY;
      }
      function f(x, W, $, J) {
        const te = {
          fixedWindow: null,
          realtimeWindowMs: null,
          aggregation: {
            interval: o,
            limit: J.getMaxDatapointsLimit(),
            type: _.AVG,
          },
          timezone: x.timezone,
          tsOffset: S(x.timezone),
        };
        let _e;
        if (
          ($ &&
            ((te.aggregation.type = _.NONE), (te.aggregation.stateData = !0)),
          (0, e.$K)(x.aggregation) &&
            !$ &&
            (te.aggregation = {
              type: x.aggregation.type || _.AVG,
              limit: x.aggregation.limit || J.getMaxDatapointsLimit(),
            }),
          T(x) === r.REALTIME)
        ) {
          let Ce = x.realtime.realtimeType;
          if (
            ((0, e.o8)(Ce) &&
              (Ce = (0, e.$K)(x.realtime.quickInterval)
                ? h.INTERVAL
                : h.LAST_INTERVAL),
            Ce === h.INTERVAL)
          ) {
            (te.realtimeWindowMs = (function (x, W) {
              let $;
              switch (x) {
                case c.CURRENT_HOUR:
                  return g;
                case c.CURRENT_DAY:
                case c.CURRENT_DAY_SO_FAR:
                  return D;
                case c.CURRENT_WEEK:
                case c.CURRENT_WEEK_ISO:
                case c.CURRENT_WEEK_SO_FAR:
                case c.CURRENT_WEEK_ISO_SO_FAR:
                  return y;
                case c.CURRENT_MONTH:
                case c.CURRENT_MONTH_SO_FAR:
                  return (
                    ($ = pe(W)),
                    $.endOf("month").diff($.clone().startOf("month"))
                  );
                case c.CURRENT_YEAR:
                case c.CURRENT_YEAR_SO_FAR:
                  return (
                    ($ = pe(W)), $.endOf("year").diff($.clone().startOf("year"))
                  );
              }
            })(x.realtime.quickInterval, x.timezone)),
              (te.quickInterval = x.realtime.quickInterval);
            const Te = pe(x.timezone);
            te.startTs = k(x.realtime.quickInterval, Te).valueOf();
          } else {
            te.realtimeWindowMs = x.realtime.timewindowMs;
            const Te = pe(x.timezone);
            te.startTs = Te.valueOf() + W - te.realtimeWindowMs;
          }
          if (
            ((te.aggregation.interval = J.boundIntervalToTimewindow(
              te.realtimeWindowMs,
              x.realtime.interval,
              te.aggregation.type
            )),
            (_e = te.realtimeWindowMs),
            Ce !== h.INTERVAL)
          ) {
            const Te = te.startTs % te.aggregation.interval;
            Te && ((te.startTs -= Te), (_e += te.aggregation.interval));
          }
        } else {
          let Ce = x.history.historyType;
          if (
            ((0, e.o8)(Ce) &&
              (Ce = (0, e.$K)(x.history.timewindowMs)
                ? p.LAST_INTERVAL
                : (0, e.$K)(x.history.quickInterval)
                ? p.INTERVAL
                : p.FIXED),
            Ce === p.LAST_INTERVAL)
          ) {
            const be = pe(x.timezone).valueOf();
            (te.fixedWindow = {
              startTimeMs: be - x.history.timewindowMs,
              endTimeMs: be,
            }),
              (_e = x.history.timewindowMs);
          } else if (Ce === p.INTERVAL) {
            const Te = L(x.history.quickInterval, x.timezone);
            (te.fixedWindow = { startTimeMs: Te[0], endTimeMs: Te[1] }),
              (_e = te.fixedWindow.endTimeMs - te.fixedWindow.startTimeMs),
              (te.quickInterval = x.history.quickInterval);
          } else
            (te.fixedWindow = {
              startTimeMs: x.history.fixedTimewindow.startTimeMs - te.tsOffset,
              endTimeMs: x.history.fixedTimewindow.endTimeMs - te.tsOffset,
            }),
              (_e = te.fixedWindow.endTimeMs - te.fixedWindow.startTimeMs);
          (te.startTs = te.fixedWindow.startTimeMs),
            (te.aggregation.interval = J.boundIntervalToTimewindow(
              _e,
              x.history.interval,
              te.aggregation.type
            ));
        }
        const fe = te.aggregation;
        return (
          (fe.timeWindow = _e),
          fe.type !== _.NONE &&
            (fe.limit = Math.ceil(_e / te.aggregation.interval)),
          te
        );
      }
      function L(x, W) {
        const $ = [0, 0],
          te = k(x, pe(W));
        $[0] = te.valueOf();
        const _e = N(x, te, W);
        return ($[1] = _e.valueOf()), $;
      }
      function k(x, W) {
        switch (x) {
          case c.YESTERDAY:
            return W.subtract(1, "days"), W.startOf("day");
          case c.DAY_BEFORE_YESTERDAY:
            return W.subtract(2, "days"), W.startOf("day");
          case c.THIS_DAY_LAST_WEEK:
            return W.subtract(1, "weeks"), W.startOf("day");
          case c.PREVIOUS_WEEK:
            return W.subtract(1, "weeks"), W.startOf("week");
          case c.PREVIOUS_WEEK_ISO:
            return W.subtract(1, "weeks"), W.startOf("isoWeek");
          case c.PREVIOUS_MONTH:
            return W.subtract(1, "months"), W.startOf("month");
          case c.PREVIOUS_YEAR:
            return W.subtract(1, "years"), W.startOf("year");
          case c.CURRENT_HOUR:
            return W.startOf("hour");
          case c.CURRENT_DAY:
          case c.CURRENT_DAY_SO_FAR:
            return W.startOf("day");
          case c.CURRENT_WEEK:
          case c.CURRENT_WEEK_SO_FAR:
            return W.startOf("week");
          case c.CURRENT_WEEK_ISO:
          case c.CURRENT_WEEK_ISO_SO_FAR:
            return W.startOf("isoWeek");
          case c.CURRENT_MONTH:
          case c.CURRENT_MONTH_SO_FAR:
            return W.startOf("month");
          case c.CURRENT_YEAR:
          case c.CURRENT_YEAR_SO_FAR:
            return W.startOf("year");
        }
      }
      function N(x, W, $) {
        switch (x) {
          case c.YESTERDAY:
          case c.DAY_BEFORE_YESTERDAY:
          case c.THIS_DAY_LAST_WEEK:
          case c.CURRENT_DAY:
            return W.add(1, "day").valueOf();
          case c.PREVIOUS_WEEK:
          case c.PREVIOUS_WEEK_ISO:
          case c.CURRENT_WEEK:
          case c.CURRENT_WEEK_ISO:
            return W.add(1, "week").valueOf();
          case c.PREVIOUS_MONTH:
          case c.CURRENT_MONTH:
            return W.add(1, "month").valueOf();
          case c.PREVIOUS_YEAR:
          case c.CURRENT_YEAR:
            return W.add(1, "year").valueOf();
          case c.CURRENT_HOUR:
            return W.add(1, "hour").valueOf();
          case c.CURRENT_DAY_SO_FAR:
          case c.CURRENT_WEEK_SO_FAR:
          case c.CURRENT_WEEK_ISO_SO_FAR:
          case c.CURRENT_MONTH_SO_FAR:
          case c.CURRENT_YEAR_SO_FAR:
            return pe($).valueOf();
        }
      }
      function B(x) {
        switch (x) {
          case c.CURRENT_HOUR:
            return g;
          case c.YESTERDAY:
          case c.DAY_BEFORE_YESTERDAY:
          case c.THIS_DAY_LAST_WEEK:
          case c.CURRENT_DAY:
          case c.CURRENT_DAY_SO_FAR:
            return D;
          case c.PREVIOUS_WEEK:
          case c.PREVIOUS_WEEK_ISO:
          case c.CURRENT_WEEK:
          case c.CURRENT_WEEK_ISO:
          case c.CURRENT_WEEK_SO_FAR:
          case c.CURRENT_WEEK_ISO_SO_FAR:
            return y;
          case c.PREVIOUS_MONTH:
          case c.CURRENT_MONTH:
          case c.CURRENT_MONTH_SO_FAR:
            return 30 * D;
          case c.PREVIOUS_YEAR:
          case c.CURRENT_YEAR:
          case c.CURRENT_YEAR_SO_FAR:
            return m;
        }
      }
      function j(x, W) {
        switch (x) {
          case c.YESTERDAY:
          case c.DAY_BEFORE_YESTERDAY:
          case c.CURRENT_DAY:
          case c.CURRENT_DAY_SO_FAR:
            return W.subtract(1, "days"), W.startOf("day");
          case c.THIS_DAY_LAST_WEEK:
            return W.subtract(1, "weeks"), W.startOf("day");
          case c.PREVIOUS_WEEK:
          case c.CURRENT_WEEK:
          case c.CURRENT_WEEK_SO_FAR:
            return W.subtract(1, "weeks"), W.startOf("week");
          case c.PREVIOUS_WEEK_ISO:
          case c.CURRENT_WEEK_ISO:
          case c.CURRENT_WEEK_ISO_SO_FAR:
            return W.subtract(1, "weeks"), W.startOf("isoWeek");
          case c.PREVIOUS_MONTH:
          case c.CURRENT_MONTH:
          case c.CURRENT_MONTH_SO_FAR:
            return W.subtract(1, "months"), W.startOf("month");
          case c.PREVIOUS_YEAR:
          case c.CURRENT_YEAR:
          case c.CURRENT_YEAR_SO_FAR:
            return W.subtract(1, "years"), W.startOf("year");
          case c.CURRENT_HOUR:
            return W.subtract(1, "hour"), W.startOf("hour");
        }
      }
      function F(x, W, $) {
        switch (x) {
          case c.CURRENT_DAY_SO_FAR:
            return $.subtract(1, "days").valueOf();
          case c.CURRENT_WEEK_SO_FAR:
          case c.CURRENT_WEEK_ISO_SO_FAR:
            return $.subtract(1, "week").valueOf();
          case c.CURRENT_MONTH_SO_FAR:
            return $.subtract(1, "month").valueOf();
          case c.CURRENT_YEAR_SO_FAR:
            return $.subtract(1, "year").valueOf();
          default:
            return N(x, W);
        }
      }
      function V(x, W, $) {
        const J = {
          fixedWindow: null,
          realtimeWindowMs: null,
          aggregation: x.aggregation,
          tsOffset: x.tsOffset,
        };
        if (x.fixedWindow) {
          let te, _e;
          if ("previousInterval" === W)
            if (x.quickInterval) {
              const me = d(x.fixedWindow.startTimeMs),
                fe = d(x.fixedWindow.endTimeMs);
              x.timezone && (me.tz(x.timezone), fe.tz(x.timezone));
              const Ce = j(x.quickInterval, me);
              (te = Ce.valueOf()), (_e = F(x.quickInterval, Ce, fe));
            } else {
              const me = x.fixedWindow.endTimeMs - x.fixedWindow.startTimeMs;
              (_e = x.fixedWindow.startTimeMs), (te = _e - me);
            }
          else if ("customInterval" === W)
            if ((0, e.kE)($) && isFinite($) && $ > 0) {
              const me = x.fixedWindow.endTimeMs - x.fixedWindow.startTimeMs;
              (_e = x.fixedWindow.endTimeMs - Math.round($)), (te = _e - me);
            } else
              (_e = x.fixedWindow.endTimeMs), (te = x.fixedWindow.startTimeMs);
          else {
            const me = x.fixedWindow.endTimeMs - x.fixedWindow.startTimeMs;
            (_e = d(x.fixedWindow.endTimeMs).subtract(1, W).valueOf()),
              (te = _e - me);
          }
          (J.startTs = te),
            (J.fixedWindow = { startTimeMs: J.startTs, endTimeMs: _e });
        }
        return J;
      }
      function P(x) {
        const W = {};
        return (
          (W.hideInterval = x.hideInterval || !1),
          (W.hideLastInterval = x.hideLastInterval || !1),
          (W.hideQuickInterval = x.hideQuickInterval || !1),
          (W.hideAggregation = x.hideAggregation || !1),
          (W.hideAggInterval = x.hideAggInterval || !1),
          (W.hideTimezone = x.hideTimezone || !1),
          (0, e.$K)(x.selectedTab) &&
            ((W.selectedTab = x.selectedTab),
            x.selectedTab === r.REALTIME
              ? (W.realtime = (0, e.I8)(x.realtime))
              : x.selectedTab === r.HISTORY &&
                (W.history = (0, e.I8)(x.history))),
          (W.aggregation = (0, e.I8)(x.aggregation)),
          (W.timezone = x.timezone),
          W
        );
      }
      const A = new Array(
        {
          name: "timeinterval.seconds-interval",
          translateParams: { seconds: 1 },
          value: o,
        },
        {
          name: "timeinterval.seconds-interval",
          translateParams: { seconds: 5 },
          value: 5 * o,
        },
        {
          name: "timeinterval.seconds-interval",
          translateParams: { seconds: 10 },
          value: 10 * o,
        },
        {
          name: "timeinterval.seconds-interval",
          translateParams: { seconds: 15 },
          value: 15 * o,
        },
        {
          name: "timeinterval.seconds-interval",
          translateParams: { seconds: 30 },
          value: 30 * o,
        },
        {
          name: "timeinterval.minutes-interval",
          translateParams: { minutes: 1 },
          value: i,
        },
        {
          name: "timeinterval.minutes-interval",
          translateParams: { minutes: 2 },
          value: 2 * i,
        },
        {
          name: "timeinterval.minutes-interval",
          translateParams: { minutes: 5 },
          value: 5 * i,
        },
        {
          name: "timeinterval.minutes-interval",
          translateParams: { minutes: 10 },
          value: 10 * i,
        },
        {
          name: "timeinterval.minutes-interval",
          translateParams: { minutes: 15 },
          value: 15 * i,
        },
        {
          name: "timeinterval.minutes-interval",
          translateParams: { minutes: 30 },
          value: 30 * i,
        },
        {
          name: "timeinterval.hours-interval",
          translateParams: { hours: 1 },
          value: g,
        },
        {
          name: "timeinterval.hours-interval",
          translateParams: { hours: 2 },
          value: 2 * g,
        },
        {
          name: "timeinterval.hours-interval",
          translateParams: { hours: 5 },
          value: 5 * g,
        },
        {
          name: "timeinterval.hours-interval",
          translateParams: { hours: 10 },
          value: 10 * g,
        },
        {
          name: "timeinterval.hours-interval",
          translateParams: { hours: 12 },
          value: 12 * g,
        },
        {
          name: "timeinterval.days-interval",
          translateParams: { days: 1 },
          value: D,
        },
        {
          name: "timeinterval.days-interval",
          translateParams: { days: 7 },
          value: 7 * D,
        },
        {
          name: "timeinterval.days-interval",
          translateParams: { days: 30 },
          value: 30 * D,
        }
      );
      var U, G;
      !(function (x) {
        (x.SECONDS = "SECONDS"),
          (x.MINUTES = "MINUTES"),
          (x.HOURS = "HOURS"),
          (x.DAYS = "DAYS");
      })(U || (U = {})),
        (function (x) {
          x.MILLISECONDS = "MILLISECONDS";
        })(G || (G = {}));
      const Z = new Map([
        [G.MILLISECONDS, "timeunit.milliseconds"],
        [U.SECONDS, "timeunit.seconds"],
        [U.MINUTES, "timeunit.minutes"],
        [U.HOURS, "timeunit.hours"],
        [U.DAYS, "timeunit.days"],
      ]);
      let le = null,
        X = null;
      function se() {
        return (
          le ||
            (le = C.tz.names().map((x) => {
              const W = C.tz(x);
              return {
                id: x,
                name: x.replace(/_/g, " "),
                offset: `UTC${W.format("Z")}`,
                nOffset: W.utcOffset(),
                abbr: W.zoneAbbr(),
              };
            })),
          le
        );
      }
      function ne(x, W, $) {
        const J = se();
        let te = x ? J.find((_e) => _e.id === x) : null;
        if (!te)
          if ($) {
            const _e = de();
            te = J.find((me) => me.id === _e);
          } else W && (te = J.find((_e) => _e.id === W));
        return te;
      }
      function re() {
        return ne(de());
      }
      function de() {
        return X || (X = C.tz.guess()), X;
      }
      function pe(x) {
        return x ? d().tz(x) : d();
      }
      function Q(x, W) {
        return W ? d(x).tz(W) : d(x);
      }
      function K(x) {
        return d.tz(x);
      }
      function H(x, W) {
        return pe(W).subtract(1, x);
      }
    },
    38845: (ee, R, t) => {
      "use strict";
      var e, C;
      t.d(R, { hs: () => e, Zc: () => n, EC: () => a }),
        ((C = e || (e = {})).TOTP = "TOTP"),
        (C.SMS = "SMS"),
        (C.EMAIL = "EMAIL"),
        (C.BACKUP_CODE = "BACKUP_CODE");
      const n = new Map([
          [
            e.TOTP,
            {
              name: "security.2fa.provider.totp",
              description: "security.2fa.provider.totp-description",
              activatedHint: "security.2fa.provider.totp-hint",
            },
          ],
          [
            e.SMS,
            {
              name: "security.2fa.provider.sms",
              description: "security.2fa.provider.sms-description",
              activatedHint: "security.2fa.provider.sms-hint",
            },
          ],
          [
            e.EMAIL,
            {
              name: "security.2fa.provider.email",
              description: "security.2fa.provider.email-description",
              activatedHint: "security.2fa.provider.email-hint",
            },
          ],
          [
            e.BACKUP_CODE,
            {
              name: "security.2fa.provider.backup_code",
              description: "security.2fa.provider.backup-code-description",
              activatedHint: "security.2fa.provider.backup-code-hint",
            },
          ],
        ]),
        a = new Map([
          [
            e.TOTP,
            {
              name: "security.2fa.provider.totp",
              description: "login.totp-auth-description",
              placeholder: "login.totp-auth-placeholder",
              icon: "mdi:cellphone-key",
            },
          ],
          [
            e.SMS,
            {
              name: "security.2fa.provider.sms",
              description: "login.sms-auth-description",
              placeholder: "login.sms-auth-placeholder",
              icon: "mdi:message-reply-text-outline",
            },
          ],
          [
            e.EMAIL,
            {
              name: "security.2fa.provider.email",
              description: "login.email-auth-description",
              placeholder: "login.email-auth-placeholder",
              icon: "mdi:email-outline",
            },
          ],
          [
            e.BACKUP_CODE,
            {
              name: "security.2fa.provider.backup_code",
              description: "login.backup-code-auth-description",
              placeholder: "login.backup-code-auth-placeholder",
              icon: "mdi:lock-outline",
            },
          ],
        ]);
    },
    74768: (ee, R, t) => {
      "use strict";
      t.d(R, {
        h7: () => n,
        PG: () => a,
        xv: () => C,
        UE: () => s,
        af: () => d,
        Xo: () => o,
        Lq: () => i,
        m0: () => g,
        Ku: () => D,
        oK: () => y,
        rt: () => m,
      });
      var e = t(52042);
      const n = [
        e.py.ASSET,
        e.py.DEVICE,
        e.py.ENTITY_VIEW,
        e.py.DASHBOARD,
        e.py.CUSTOMER,
        e.py.DEVICE_PROFILE,
        e.py.ASSET_PROFILE,
        e.py.RULE_CHAIN,
        e.py.WIDGETS_BUNDLE,
      ];
      var a, r, C;
      ((r = a || (a = {})).SINGLE_ENTITY = "SINGLE_ENTITY"),
        (r.COMPLEX = "COMPLEX"),
        (function (r) {
          (r.MERGE = "MERGE"), (r.OVERWRITE = "OVERWRITE");
        })(C || (C = {}));
      const s = new Map([
          [C.MERGE, "version-control.sync-strategy-merge"],
          [C.OVERWRITE, "version-control.sync-strategy-overwrite"],
        ]),
        d = new Map([
          [C.MERGE, "version-control.sync-strategy-merge-hint"],
          [C.OVERWRITE, "version-control.sync-strategy-overwrite-hint"],
        ]);
      function o() {
        const r = {};
        for (const h of n)
          r[h] = {
            syncStrategy: null,
            saveAttributes: !0,
            saveRelations: !0,
            saveCredentials: !0,
            allEntities: !0,
            entityIds: [],
          };
        return r;
      }
      var i, D;
      function g() {
        const r = {};
        for (const h of n)
          r[h] = {
            loadAttributes: !0,
            loadRelations: !0,
            loadCredentials: !0,
            removeOtherEntities: !1,
            findExistingEntityByName: !0,
          };
        return r;
      }
      !(function (r) {
        (r.SINGLE_ENTITY = "SINGLE_ENTITY"), (r.ENTITY_TYPE = "ENTITY_TYPE");
      })(i || (i = {})),
        (function (r) {
          (r.DEVICE_CREDENTIALS_CONFLICT = "DEVICE_CREDENTIALS_CONFLICT"),
            (r.MISSING_REFERENCED_ENTITY = "MISSING_REFERENCED_ENTITY"),
            (r.RUNTIME = "RUNTIME");
        })(D || (D = {}));
      const y = new Map([
        [
          D.DEVICE_CREDENTIALS_CONFLICT,
          "version-control.device-credentials-conflict",
        ],
        [
          D.MISSING_REFERENCED_ENTITY,
          "version-control.missing-referenced-entity",
        ],
        [D.RUNTIME, "version-control.runtime-failed"],
      ]);
      function m(r) {
        return JSON.stringify(r, null, 4);
      }
    },
    62909: (ee, R, t) => {
      "use strict";
      t.d(R, {
        oS: () => o,
        eO: () => i,
        $h: () => g,
        Cs: () => D,
        qo: () => y,
        tV: () => m,
        Ke: () => r,
        LQ: () => h,
        jT: () => p,
        dH: () => _,
        qq: () => E,
        i9: () => c,
        Xt: () => v,
        _V: () => I,
        Fm: () => l,
        B9: () => T,
        Gm: () => O,
        Nv: () => w,
        EN: () => b,
        nZ: () => u,
      });
      var o,
        f,
        e = t(95341),
        n = t(69331),
        a = t(75362),
        C = t(37716),
        s = t(86710),
        d = t(41960);
      ((f = o || (o = {})).timeseries = "timeseries"),
        (f.latest = "latest"),
        (f.rpc = "rpc"),
        (f.alarm = "alarm"),
        (f.static = "static");
      const i = new Map([
          [
            o.timeseries,
            {
              name: "widget.timeseries",
              icon: "timeline",
              configHelpLinkId: "widgetsConfigTimeseries",
              template: { bundleAlias: "charts", alias: "basic_timeseries" },
            },
          ],
          [
            o.latest,
            {
              name: "widget.latest",
              icon: "track_changes",
              configHelpLinkId: "widgetsConfigLatest",
              template: { bundleAlias: "cards", alias: "attributes_card" },
            },
          ],
          [
            o.rpc,
            {
              name: "widget.rpc",
              icon: "mdi:developer-board",
              configHelpLinkId: "widgetsConfigRpc",
              isMdiIcon: !0,
              template: {
                bundleAlias: "gpio_widgets",
                alias: "basic_gpio_control",
              },
            },
          ],
          [
            o.alarm,
            {
              name: "widget.alarm",
              icon: "error",
              configHelpLinkId: "widgetsConfigAlarm",
              template: { bundleAlias: "alarm_widgets", alias: "alarms_table" },
            },
          ],
          [
            o.static,
            {
              name: "widget.static",
              icon: "font_download",
              configHelpLinkId: "widgetsConfigStatic",
              template: { bundleAlias: "cards", alias: "html_card" },
            },
          ],
        ]),
        g = {
          headerButton: {
            name: "widget-action.header-button",
            value: "headerButton",
            multiple: !0,
            hasShowCondition: !0,
          },
        };
      var D;
      !(function (f) {
        (f.column = "column"), (f.row = "row");
      })(D || (D = {}));
      const y = new Map([
        [D.column, "direction.column"],
        [D.row, "direction.row"],
      ]);
      var m;
      !(function (f) {
        (f.top = "top"),
          (f.bottom = "bottom"),
          (f.left = "left"),
          (f.right = "right");
      })(m || (m = {}));
      const r = new Map([
        [m.top, "position.top"],
        [m.bottom, "position.bottom"],
        [m.left, "position.left"],
        [m.right, "position.right"],
      ]);
      function h(f) {
        return {
          direction: D.column,
          position: m.bottom,
          sortDataKeys: !1,
          showMin: !1,
          showMax: !1,
          showAvg: f === o.timeseries,
          showTotal: !1,
          showLatest: !1,
        };
      }
      var p;
      !(function (f) {
        (f.PREVIOUS_VALUE = "PREVIOUS_VALUE"),
          (f.DELTA_ABSOLUTE = "DELTA_ABSOLUTE"),
          (f.DELTA_PERCENT = "DELTA_PERCENT");
      })(p || (p = {}));
      const _ = new Map([
          [p.PREVIOUS_VALUE, "datakey.delta-calculation-result-previous-value"],
          [p.DELTA_ABSOLUTE, "datakey.delta-calculation-result-delta-absolute"],
          [p.DELTA_PERCENT, "datakey.delta-calculation-result-delta-percent"],
        ]),
        E = new Map([
          [e.Eu.MIN, "datakey.aggregation-type-min-hint"],
          [e.Eu.MAX, "datakey.aggregation-type-max-hint"],
          [e.Eu.AVG, "datakey.aggregation-type-avg-hint"],
          [e.Eu.SUM, "datakey.aggregation-type-sum-hint"],
          [e.Eu.COUNT, "datakey.aggregation-type-count-hint"],
          [e.Eu.NONE, "datakey.aggregation-type-none-hint"],
        ]);
      var c;
      !(function (f) {
        (f.function = "function"),
          (f.entity = "entity"),
          (f.entityCount = "entityCount");
      })(c || (c = {}));
      const v = new Map([
        [c.function, "function.function"],
        [c.entity, "entity.entity"],
        [c.entityCount, "entity.entities-count"],
      ]);
      function I(f) {
        return !(
          !f ||
          !f.find(
            (L) =>
              !(
                !L.dataKeys ||
                !L.dataKeys.find(
                  (N) =>
                    N.type === n.dG.timeseries &&
                    N.aggregationType &&
                    N.aggregationType !== e.Eu.NONE
                )
              )
          )
        );
      }
      function l(f) {
        return !(
          !I(f) ||
          (f &&
            f.find(
              (L) =>
                !(
                  !L.dataKeys ||
                  !L.dataKeys.find(
                    (N) =>
                      N.type === n.dG.timeseries &&
                      N.aggregationType &&
                      N.aggregationType !== e.Eu.NONE &&
                      !N.comparisonEnabled
                  )
                )
            ))
        );
      }
      var T, O;
      !(function (f) {
        (f.openDashboardState = "openDashboardState"),
          (f.updateDashboardState = "updateDashboardState"),
          (f.openDashboard = "openDashboard"),
          (f.custom = "custom"),
          (f.customPretty = "customPretty"),
          (f.mobileAction = "mobileAction");
      })(T || (T = {})),
        (function (f) {
          (f.takePictureFromGallery = "takePictureFromGallery"),
            (f.takePhoto = "takePhoto"),
            (f.mapDirection = "mapDirection"),
            (f.mapLocation = "mapLocation"),
            (f.scanQrCode = "scanQrCode"),
            (f.makePhoneCall = "makePhoneCall"),
            (f.getLocation = "getLocation"),
            (f.takeScreenshot = "takeScreenshot");
        })(O || (O = {}));
      const w = new Map([
          [T.openDashboardState, "widget-action.open-dashboard-state"],
          [T.updateDashboardState, "widget-action.update-dashboard-state"],
          [T.openDashboard, "widget-action.open-dashboard"],
          [T.custom, "widget-action.custom"],
          [T.customPretty, "widget-action.custom-pretty"],
          [T.mobileAction, "widget-action.mobile-action"],
        ]),
        b = new Map([
          [
            O.takePictureFromGallery,
            "widget-action.mobile.take-picture-from-gallery",
          ],
          [O.takePhoto, "widget-action.mobile.take-photo"],
          [O.mapDirection, "widget-action.mobile.map-direction"],
          [O.mapLocation, "widget-action.mobile.map-location"],
          [O.scanQrCode, "widget-action.mobile.scan-qr-code"],
          [O.makePhoneCall, "widget-action.mobile.make-phone-call"],
          [O.getLocation, "widget-action.mobile.get-location"],
          [O.takeScreenshot, "widget-action.mobile.take-screenshot"],
        ]);
      class u extends a.I {
        constructor(M) {
          super(M),
            (this.store = M),
            (this.settingsSet = !1),
            (this.settingsChangedEmitter = new C.EventEmitter()),
            (this.settingsChanged = this.settingsChangedEmitter.asObservable());
        }
        set settings(M) {
          (this.settingsValue = M
            ? Object.assign(Object.assign({}, this.defaultSettings()), M)
            : this.defaultSettings()),
            this.settingsSet
              ? this.updateSettings(this.settingsValue)
              : ((this.settingsSet = !0),
                this.setupSettings(this.settingsValue));
        }
        get settings() {
          return this.settingsValue;
        }
        ngOnInit() {}
        ngAfterViewInit() {
          setTimeout(() => {
            this.validateSettings() || this.settingsChangedEmitter.emit(null);
          }, 0);
        }
        validate() {
          this.onValidate();
        }
        setupSettings(M) {
          this.onSettingsSet(this.prepareInputSettings(M)),
            this.updateValidators(!1);
          for (const L of this.validatorTriggers()) {
            const k = L.split(".");
            let N = this.settingsForm();
            for (const B of k) N = N.get(B);
            N.valueChanges.subscribe(() => {
              this.updateValidators(!0, L);
            });
          }
          this.settingsForm().valueChanges.subscribe((L) => {
            this.onSettingsChanged(this.prepareOutputSettings(L));
          });
        }
        updateSettings(M) {
          (M = this.prepareInputSettings(M)),
            this.settingsForm().reset(M, { emitEvent: !1 }),
            this.doUpdateSettings(this.settingsForm(), M),
            this.updateValidators(!1);
        }
        updateValidators(M, L) {}
        validatorTriggers() {
          return [];
        }
        onSettingsChanged(M) {
          (this.settingsValue = (function (f) {
            if (f) {
              const M = Object.keys(f);
              for (const L of M) {
                const k = f[L];
                (null === k || (0, d.jH)(k)) && delete f[L];
              }
            }
            return f;
          })(M)),
            this.validateSettings()
              ? this.settingsChangedEmitter.emit(this.settingsValue)
              : this.settingsChangedEmitter.emit(null);
        }
        doUpdateSettings(M, L) {}
        prepareInputSettings(M) {
          return M;
        }
        prepareOutputSettings(M) {
          return M;
        }
        validateSettings() {
          return this.settingsForm().valid;
        }
        onValidate() {}
        defaultSettings() {
          return {};
        }
      }
      (u.ɵfac = function (M) {
        return new (M || u)(C.ɵɵdirectiveInject(s.Store));
      }),
        (u.ɵdir = C.ɵɵdefineDirective({
          type: u,
          features: [C.ɵɵInheritDefinitionFeature],
        }));
    },
    58548: (ee, R, t) => {
      "use strict";
      t.r(R), t.d(R, { EnumToArrayPipe: () => n });
      var e = t(37716);
      class n {
        transform(C) {
          const s = Object.keys(C);
          return s.slice(s.length / 2);
        }
      }
      (n.ɵfac = function (C) {
        return new (C || n)();
      }),
        (n.ɵpipe = e.ɵɵdefinePipe({ name: "enumToArray", type: n, pure: !0 }));
    },
    35223: (ee, R, t) => {
      "use strict";
      t.r(R), t.d(R, { FileSizePipe: () => a });
      var e = t(37716);
      const n = { bytes: 0, KB: 1, MB: 1, GB: 1, TB: 2, PB: 2 };
      class a {
        constructor() {
          this.units = ["bytes", "KB", "MB", "GB", "TB", "PB"];
        }
        transform(s = 0, d = n) {
          if (isNaN(parseFloat(String(s))) || !isFinite(s)) return "?";
          let o = 0;
          for (; s >= 1024; ) (s /= 1024), o++;
          const i = this.units[o];
          return "number" == typeof d
            ? `${s.toFixed(+d)} ${i}`
            : `${s.toFixed(d[i])} ${i}`;
        }
      }
      (a.ɵfac = function (s) {
        return new (s || a)();
      }),
        (a.ɵpipe = e.ɵɵdefinePipe({ name: "fileSize", type: a, pure: !0 }));
    },
    53883: (ee, R, t) => {
      "use strict";
      t.r(R), t.d(R, { HighlightPipe: () => n });
      var e = t(37716);
      class n {
        transform(C, s) {
          const d = s.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, "\\$&"),
            o = new RegExp("^" + d, "i");
          return s ? C.replace(o, (i) => `<b>${i}</b>`) : C;
        }
      }
      (n.ɵfac = function (C) {
        return new (C || n)();
      }),
        (n.ɵpipe = e.ɵɵdefinePipe({ name: "highlight", type: n, pure: !0 }));
    },
    87997: (ee, R, t) => {
      "use strict";
      t.r(R), t.d(R, { KeyboardShortcutPipe: () => a });
      var e = t(37716),
        n = t(11877);
      class a {
        constructor(s) {
          this.window = s;
        }
        transform(s) {
          if (!s) return;
          const d = s.split("-"),
            o = /Mac OS X/.test(this.window.navigator.userAgent),
            i = !o || d.length > 2 ? "+" : "",
            g = {
              M: o ? "\u2318" : "Ctrl",
              A: o ? "Option" : "Alt",
              S: "Shift",
            };
          return d.map((D, y) => (y === d.length - 1 ? D : g[D])).join(i);
        }
      }
      (a.ɵfac = function (s) {
        return new (s || a)(e.ɵɵdirectiveInject(n.m9, 16));
      }),
        (a.ɵpipe = e.ɵɵdefinePipe({
          name: "keyboardShortcut",
          type: a,
          pure: !0,
        }));
    },
    57533: (ee, R, t) => {
      "use strict";
      t.r(R), t.d(R, { MillisecondsToTimeStringPipe: () => a });
      var e = t(37716),
        n = t(29790);
      class a {
        constructor(s) {
          this.translate = s;
        }
        transform(s, d = !1) {
          let o = Math.floor(s / 1e3);
          const i = Math.floor(o / 86400);
          let g = Math.floor((o % 86400) / 3600),
            D = Math.floor(((o % 86400) % 3600) / 60);
          o %= 60;
          let y = "";
          return (
            d
              ? (i > 0 &&
                  (y += this.translate.instant("timewindow.short.days", {
                    days: i,
                  })),
                g > 0 &&
                  (y += this.translate.instant("timewindow.short.hours", {
                    hours: g,
                  })),
                D > 0 &&
                  (y += this.translate.instant("timewindow.short.minutes", {
                    minutes: D,
                  })),
                o > 0 &&
                  (y += this.translate.instant("timewindow.short.seconds", {
                    seconds: o,
                  })),
                y.length ||
                  (y += this.translate.instant("timewindow.short.seconds", {
                    seconds: 0,
                  })))
              : (i > 0 &&
                  (y += this.translate.instant("timewindow.days", { days: i })),
                g > 0 &&
                  (0 === y.length && 1 === g && (g = 0),
                  (y += this.translate.instant("timewindow.hours", {
                    hours: g,
                  }))),
                D > 0 &&
                  (0 === y.length && 1 === D && (D = 0),
                  (y += this.translate.instant("timewindow.minutes", {
                    minutes: D,
                  }))),
                o > 0 &&
                  (0 === y.length && 1 === o && (o = 0),
                  (y += this.translate.instant("timewindow.seconds", {
                    seconds: o,
                  })))),
            y
          );
        }
      }
      (a.ɵfac = function (s) {
        return new (s || a)(e.ɵɵdirectiveInject(n.TranslateService, 16));
      }),
        (a.ɵpipe = e.ɵɵdefinePipe({
          name: "milliSecondsToTimeString",
          type: a,
          pure: !0,
        }));
    },
    86842: (ee, R, t) => {
      "use strict";
      t.r(R), t.d(R, { NospacePipe: () => n });
      var e = t(37716);
      class n {
        transform(C, s) {
          return C ? C.replace(/ /g, "") : "";
        }
      }
      (n.ɵfac = function (C) {
        return new (C || n)();
      }),
        (n.ɵpipe = e.ɵɵdefinePipe({ name: "nospace", type: n, pure: !0 }));
    },
    992: (ee, R, t) => {
      "use strict";
      t.d(R, { y: () => a });
      var e = t(37716),
        n = t(39075);
      class a {
        constructor(s) {
          this.sanitizer = s;
        }
        transform(s, d) {
          switch (d) {
            case "html":
              return this.sanitizer.bypassSecurityTrustHtml(s);
            case "style":
              return this.sanitizer.bypassSecurityTrustStyle(s);
            case "script":
              return this.sanitizer.bypassSecurityTrustScript(s);
            case "url":
              return this.sanitizer.bypassSecurityTrustUrl(s);
            case "resourceUrl":
              return this.sanitizer.bypassSecurityTrustResourceUrl(s);
            default:
              throw new Error(`Invalid safe type specified: ${d}`);
          }
        }
      }
      (a.ɵfac = function (s) {
        return new (s || a)(e.ɵɵdirectiveInject(n.DomSanitizer, 16));
      }),
        (a.ɵpipe = e.ɵɵdefinePipe({ name: "safe", type: a, pure: !0 }));
    },
    79095: (ee, R, t) => {
      "use strict";
      t.r(R), t.d(R, { SelectableColumnsPipe: () => n });
      var e = t(37716);
      class n {
        transform(C) {
          return C.filter((s) => s.selectable);
        }
      }
      (n.ɵfac = function (C) {
        return new (C || n)();
      }),
        (n.ɵpipe = e.ɵɵdefinePipe({
          name: "selectableColumns",
          type: n,
          pure: !0,
        }));
    },
    32947: (ee, R, t) => {
      "use strict";
      t.r(R), t.d(R, { TbJsonPipe: () => a });
      var e = t(37716),
        n = t(41960);
      class a {
        transform(s) {
          return (0, n.Kn)(s)
            ? JSON.stringify(s)
            : (0, n.hj)(s)
            ? s.toString()
            : s;
        }
      }
      (a.ɵfac = function (s) {
        return new (s || a)();
      }),
        (a.ɵpipe = e.ɵɵdefinePipe({ name: "tbJson", type: a, pure: !0 }));
    },
    32813: (ee, R, t) => {
      "use strict";
      t.r(R), t.d(R, { TruncatePipe: () => a });
      var e = t(37716),
        n = t(41960);
      class a {
        transform(s, d, o, i) {
          if (!s) return "";
          if (((0, n.HD)(o) && (o = parseInt(o, 10)), !o || s.length <= o))
            return s;
          if (((s = s.substr(0, o)), d)) {
            let g = s.lastIndexOf(" ");
            -1 !== g &&
              (("." === s.charAt(g - 1) || "," === s.charAt(g - 1)) && (g -= 1),
              (s = s.substr(0, g)));
          }
          return s + (i || " \u2026");
        }
      }
      (a.ɵfac = function (s) {
        return new (s || a)();
      }),
        (a.ɵpipe = e.ɵɵdefinePipe({ name: "truncate", type: a, pure: !0 }));
    },
    68786: (ee, R, t) => {
      "use strict";
      t.d(R, { L: () => fn, m: () => ut });
      var e = t(37716),
        n = t(38583),
        a = t(15076),
        C = t(43058),
        s = t(99271),
        d = t(1844),
        o = t(17414),
        i = t(52741),
        g = t(33681),
        D = t.n(g),
        y = t(21554),
        m = t(51095),
        r = t(42542),
        h = t(93738),
        p = t(7539),
        _ = t(58341),
        E = t(43220),
        c = t(22238),
        v = t(1769),
        I = t(90171),
        l = t(4929),
        T = t(76627),
        O = t(83166),
        w = t(33935),
        b = t(99692),
        S = t(12178),
        u = t(4885),
        f = t(82613),
        M = t(67441),
        L = t(94935),
        k = t(45396),
        N = t(54436),
        B = t(77001),
        j = t(11494),
        F = t(97832),
        V = t(32789),
        P = t(65939),
        A = t(12522),
        U = t(11436),
        G = t(77746),
        Z = t(55959),
        le = t(15048),
        X = t(69901),
        se = t(25830),
        ne = t(3679),
        re = t(39895),
        de = t(61449),
        pe = t(74426),
        Q = t(61922),
        K = t(1955),
        H = t(84529),
        x = t(86842),
        W = t(29790),
        $ = t(47215),
        J = t(70543),
        te = t(98847),
        _e = t(57533),
        me = t(3698),
        fe = t(58203),
        Ce = t(72495),
        Te = t(43358),
        be = t(7466),
        tt = t(58548),
        Se = t(28882),
        nt = t(77645),
        Le = t(76715),
        Ye = t(50367),
        Ke = t(46743),
        dt = t(53883),
        Ct = t(24997),
        mt = t(66470),
        vt = t(32053),
        ht = t(41387),
        gt = t(97889),
        ct = t(58512),
        ft = t(44150),
        ke = t(73619),
        z = t(99608),
        oe = t(80184),
        ie = t(46564),
        ce = t(76630),
        ue = t(91852),
        Ee = t(26167),
        ye = t(45165),
        Oe = t(34651),
        Pe = t(11585),
        Ne = t(11007),
        Et = t(26145),
        _t = t(86768),
        Mt = t(87997),
        Kt = t(18500),
        Nt = t(18233),
        Ft = t(4155),
        Tt = t(32813),
        It = t(32947),
        Je = t(50035),
        Vt = t(46382),
        jt = t(26580),
        Dt = t(487),
        kt = t(42998),
        Gt = t(57921),
        Ht = t(87602),
        zt = t(72062),
        ot = t(2496),
        $t = t(87061),
        Qt = t(23153),
        Yt = t(11099),
        Xe = t(45426),
        At = t(73642),
        Ot = t(26424),
        Rt = t(82443),
        Jt = t(74391),
        Xt = t(93717),
        Zt = t(54587),
        Pt = t(41767),
        at = t(39746),
        St = t(50540),
        Ge = t(91370),
        Fe = t(2900),
        Lt = t(17897),
        He = t(17119),
        qt = t(96155),
        Ut = t(74049),
        xt = t(35223),
        en = t(28607),
        tn = t(79095),
        Ze = t(66398),
        nn = t(11419),
        We = t(72458),
        on = t(84059),
        ze = t(86459),
        Ve = t(89584),
        ae = t(95473),
        q = t(69629),
        Y = t(73100),
        he = t(3314),
        ve = t(20488),
        Ie = t(11877),
        Ue = t(14785),
        it = t(5609);
      const je = "{:copy-code}",
        pt = '^{:code-style="(.*)"}\n',
        qe = "{:auto}",
        Bt = "{:target=&quot;_blank&quot;}";
      class rt extends Le.TX {
        constructor(ge, De, Be, et) {
          super(),
            (this.translate = ge),
            (this.clipboardService = De),
            (this.window = Be),
            (this.document = et),
            (this.renderer = new ve.Th()),
            (this.headerIds = !0),
            (this.gfm = !0),
            (this.breaks = !1),
            (this.pedantic = !1),
            (this.smartLists = !0),
            (this.smartypants = !1),
            (this.mangle = !1),
            (this.renderer2 = new ve.Th()),
            (this.id = 1);
          const sn = {
            autolink(Ae, $e) {
              if (!Ae.endsWith(je)) return !1;
            },
            url(Ae, $e) {
              if (!Ae.endsWith(je)) return !1;
            },
          };
          ve.TU.use({ tokenizer: sn }),
            (this.renderer.code = (Ae, $e, Re) => {
              const Qe = st(Ae);
              if (Qe.copyCode) {
                const yn = wt(this.renderer2.code(Qe.code, $e, Re), Qe);
                return this.id++, this.wrapCopyCode(this.id, yn, Qe);
              }
              return this.wrapDiv(wt(this.renderer2.code(Qe.code, $e, Re), Qe));
            }),
            (this.renderer.table = (Ae, $e) => {
              let Re = !1;
              Ae.includes(qe) && ((Re = !0), (Ae = Ae.replace(qe, "")));
              let Qe = this.renderer2.table(Ae, $e);
              return (
                Re && (Qe = Qe.replace("<table", '<table class="auto"')), Qe
              );
            }),
            (this.renderer.tablecell = (Ae, $e) => {
              const Re = st(Ae);
              return (
                (Re.multiline = !1),
                Re.copyCode &&
                  (this.id++, (Ae = this.wrapCopyCode(this.id, Re.code, Re))),
                this.renderer2.tablecell(Ae, $e)
              );
            }),
            (this.renderer.link = (Ae, $e, Re) =>
              Re.endsWith(Bt)
                ? ((Re = Re.substring(0, Re.length - Bt.length)),
                  this.renderer2
                    .link(Ae, $e, Re)
                    .replace("<a href=", '<a target="_blank" href='))
                : this.renderer2.link(Ae, $e, Re)),
            this.document.addEventListener(
              "selectionchange",
              this.onSelectionChange.bind(this)
            ),
            (this.window.markdownCopyCode = this.markdownCopyCode.bind(this));
        }
        wrapDiv(ge) {
          return `<div>${ge}</div>`;
        }
        wrapCopyCode(ge, De, Be) {
          let et = "clipboard-btn";
          return (
            Be.multiline && (et += " multiline"),
            `<div class="code-wrapper noChars" id="codeWrapper${ge}" onClick="markdownCopyCode(${ge})">${De}<span id="copyCodeId${ge}" style="display: none;">${encodeURIComponent(
              Be.code
            )}</span><button class="${et}">\n    <p>${this.translate.instant(
              "markdown.copy-code"
            )}</p>\n    <div>\n       <img src="/assets/copy-code-icon.svg" alt="${this.translate.instant(
              "markdown.copy-code"
            )}">\n    </div>\n</button></div>`
          );
        }
        onSelectionChange() {
          const ge = it(".code-wrapper");
          ge.removeClass("noChars"),
            this.getSelectedText() || ge.addClass("noChars");
        }
        getSelectedText() {
          let ge;
          return (
            this.window.getSelection
              ? (ge = this.window.getSelection().toString())
              : this.document.getSelection
              ? (ge = this.document.getSelection())
              : this.document.selection &&
                (ge = this.document.selection.createRange().text),
            ge
          );
        }
        markdownCopyCode(ge) {
          const De = it("#codeWrapper" + ge);
          if (De.hasClass("noChars")) {
            const Be = decodeURIComponent(it("#copyCodeId" + ge).text());
            this.clipboardService.copy(Be) &&
              t
                .e(3403)
                .then(t.t.bind(t, 33403, 23))
                .then(() => {
                  De.hasClass("tooltipstered") ||
                    De.tooltipster({
                      content: this.translate.instant("markdown.copied"),
                      delay: 0,
                      trigger: "custom",
                      triggerClose: {
                        click: !0,
                        tap: !0,
                        scroll: !0,
                        mouseleave: !0,
                      },
                      side: "top",
                      distance: 12,
                      trackOrigin: !0,
                    }),
                    De.tooltipster("instance").open();
                });
          }
        }
      }
      function st(xe) {
        const ge = { copyCode: !1, multiline: !1, code: xe };
        ge.code.endsWith(je) &&
          ((ge.code = ge.code.substring(0, ge.code.length - je.length)),
          (ge.copyCode = !0));
        const De = ge.code.match(new RegExp(pt));
        De &&
          ((ge.codeStyle = De[1]),
          (ge.code = ge.code.replace(new RegExp(pt), "")));
        const Be = ge.code.trim().split("\n").length;
        return (ge.multiline = Be > 1), ge;
      }
      function wt(xe, ge) {
        let De = "<pre ngNonBindable";
        return (
          ge.multiline || (De += ' class="no-line-numbers"'),
          ge.codeStyle && (De += ` style="${ge.codeStyle}"`),
          (De += ">"),
          xe.replace("<pre>", De)
        );
      }
      (rt.ɵfac = function (ge) {
        return new (ge || rt)(
          e.ɵɵinject(W.TranslateService),
          e.ɵɵinject(Ue.TU),
          e.ɵɵinject(Ie.m9),
          e.ɵɵinject(n.DOCUMENT)
        );
      }),
        (rt.ɵprov = e.ɵɵdefineInjectable({
          token: rt,
          factory: rt.ɵfac,
          providedIn: "root",
        }));
      var Wt = t(45113),
        cn = t(95129),
        an = t(69741),
        ln = t(79229),
        _n = t(71529),
        pn = t(52792),
        dn = t(992),
        rn = t(77310),
        un = t(7662),
        mn = t(15134),
        hn = t(68251);
      class yt extends Z.NativeDatetimeAdapter {
        parse(ge) {
          if ("number" == typeof ge) return new Date(ge);
          let De = ge;
          const Be = Intl.DateTimeFormat(this.locale).formatToParts();
          if ("day" === Be[0].type.toLowerCase()) {
            const et = Be[1].value;
            De = De.replace(new RegExp(`(\\d+[${et}])(\\d+[${et}])`), "$2$1");
          }
          return De ? new Date(Date.parse(De)) : null;
        }
      }
      (yt.ɵfac = (function () {
        let xe;
        return function (De) {
          return (xe || (xe = e.ɵɵgetInheritedFactory(yt)))(De || yt);
        };
      })()),
        (yt.ɵprov = e.ɵɵdefineInjectable({ token: yt, factory: yt.ɵfac }));
      var En = t(79765);
      class bt {
        constructor(ge) {
          (this.translate = ge),
            (this.changes = new En.xQ()),
            (this.firstPageLabel = this.translate.instant(
              "paginator.first-page-label"
            )),
            (this.itemsPerPageLabel = this.translate.instant(
              "paginator.items-per-page"
            )),
            (this.lastPageLabel = this.translate.instant(
              "paginator.last-page-label"
            )),
            (this.nextPageLabel = this.translate.instant(
              "paginator.next-page-label"
            )),
            (this.previousPageLabel = this.translate.instant(
              "paginator.previous-page-label"
            )),
            (this.separator = this.translate.instant(
              "paginator.items-per-page-separator"
            ));
        }
        getRangeLabel(ge, De, Be) {
          const sn = De * (ge + 1);
          return `${ge * De + 1} \u2013 ${sn > Be ? Be : sn}  ${
            this.separator
          } ${Be}`;
        }
      }
      (bt.ɵfac = function (ge) {
        return new (ge || bt)(e.ɵɵinject(W.TranslateService));
      }),
        (bt.ɵprov = e.ɵɵdefineInjectable({ token: bt, factory: bt.ɵfac }));
      var gn = t(88814),
        Me = t(35618),
        we = t(88030),
        lt = t(98295);
      function fn(xe) {
        return xe;
      }
      class ut {}
      (ut.ɵfac = function (ge) {
        return new (ge || ut)();
      }),
        (ut.ɵmod = e.ɵɵdefineNgModule({ type: ut })),
        (ut.ɵinj = e.ɵɵdefineInjector({
          providers: [
            n.DatePipe,
            _e.MillisecondsToTimeStringPipe,
            tt.EnumToArrayPipe,
            dt.HighlightPipe,
            Tt.TruncatePipe,
            It.TbJsonPipe,
            xt.FileSizePipe,
            dn.y,
            { provide: o.uz, useValue: D() },
            { provide: We.MAT_DATE_LOCALE, useValue: "en-GB" },
            { provide: Z.DatetimeAdapter, useClass: yt },
            { provide: cn.e, useValue: he.HelpMarkdownComponent },
            { provide: cn.w, useValue: ut },
            { provide: b.MatPaginatorIntl, useClass: bt },
            Wt.t,
          ],
          imports: [
            [
              n.CommonModule,
              re.RouterModule,
              W.TranslateModule,
              m.MatButtonModule,
              r.MatButtonToggleModule,
              p.MatCheckboxModule,
              T.MatIconModule,
              h.MatCardModule,
              S.MatProgressBarModule,
              O.MatInputModule,
              B.MatSnackBarModule,
              L.MatSidenavModule,
              A.MatToolbarModule,
              w.MatMenuModule,
              l.MatGridListModule,
              c.MatDialogModule,
              M.MatSelectModule,
              U.MatTooltipModule,
              V.MatTableModule,
              b.MatPaginatorModule,
              j.MatSortModule,
              u.MatProgressSpinnerModule,
              v.MatDividerModule,
              P.MatTabsModule,
              f.MatRadioModule,
              k.MatSlideToggleModule,
              E.MatDatepickerModule,
              Z.MatNativeDatetimeModule,
              Z.MatDatetimepickerModule,
              le.n1.forRoot(),
              N.MatSliderModule,
              I.MatExpansionModule,
              F.MatStepperModule,
              y.MatAutocompleteModule,
              _.MatChipsModule,
              G.MatListModule,
              rn.DragDropModule,
              X.IX,
              Se.Iq,
              se.FlexLayoutModule.withConfig({ addFlexToParent: !1 }),
              ne.FormsModule,
              ne.ReactiveFormsModule,
              fe.OverlayModule,
              de.Gn,
              pe.mb,
              Q.e4,
              K.Tv,
              Lt.c8,
              o.DG,
              i.jA,
              Le.JP.forRoot({
                sanitize: e.SecurityContext.NONE,
                markedOptions: { provide: Le.TX, useFactory: fn, deps: [rt] },
              }),
            ],
            m.MatButtonModule,
            r.MatButtonToggleModule,
            p.MatCheckboxModule,
            T.MatIconModule,
            h.MatCardModule,
            S.MatProgressBarModule,
            O.MatInputModule,
            B.MatSnackBarModule,
            L.MatSidenavModule,
            A.MatToolbarModule,
            w.MatMenuModule,
            l.MatGridListModule,
            c.MatDialogModule,
            M.MatSelectModule,
            U.MatTooltipModule,
            V.MatTableModule,
            b.MatPaginatorModule,
            j.MatSortModule,
            u.MatProgressSpinnerModule,
            v.MatDividerModule,
            P.MatTabsModule,
            f.MatRadioModule,
            k.MatSlideToggleModule,
            E.MatDatepickerModule,
            Z.MatNativeDatetimeModule,
            Z.MatDatetimepickerModule,
            le.n1,
            N.MatSliderModule,
            I.MatExpansionModule,
            F.MatStepperModule,
            y.MatAutocompleteModule,
            _.MatChipsModule,
            G.MatListModule,
            rn.DragDropModule,
            X.IX,
            Se.Iq,
            se.FlexLayoutModule,
            ne.FormsModule,
            ne.ReactiveFormsModule,
            fe.OverlayModule,
            de.Gn,
            pe.mb,
            Q.e4,
            K.Tv,
            Lt.c8,
            i.jA,
            Le.JP,
            re.RouterModule,
            W.TranslateModule,
          ],
        })),
        ("undefined" == typeof ngJitMode || ngJitMode) &&
          e.ɵɵsetNgModuleScope(ut, {
            declarations: [
              a.FooterComponent,
              C.LogoComponent,
              ye.FooterFabButtonsComponent,
              s.ToastDirective,
              Ke.FullscreenDirective,
              Oe.CircularProgressDirective,
              Vt.MatChipDraggableDirective,
              Xt.TbHotkeysDirective,
              te.TbAnchorComponent,
              ae.TbPopoverComponent,
              q.TbStringTemplateOutletDirective,
              Y.TbComponentOutletDirective,
              ae.TbPopoverDirective,
              an.TbMarkdownComponent,
              J.HelpComponent,
              he.HelpMarkdownComponent,
              Ve.HelpPopupComponent,
              $.TbCheckboxComponent,
              s.TbSnackBarComponent,
              Kt.TbErrorComponent,
              Jt.TbCheatSheetComponent,
              d.BreadcrumbComponent,
              H.UserMenuComponent,
              me.TimewindowComponent,
              Ce.TimewindowPanelComponent,
              Te.TimeintervalComponent,
              Ze.QuickTimeIntervalComponent,
              Et.DashboardSelectComponent,
              Ne.DashboardSelectPanelComponent,
              be.DatetimePeriodComponent,
              ke.DatetimeComponent,
              Ut.TimezoneSelectComponent,
              nt.ValueInputComponent,
              Ct.DashboardAutocompleteComponent,
              mt.EntitySubTypeAutocompleteComponent,
              vt.EntitySubTypeSelectComponent,
              Ft.EntitySubTypeListComponent,
              ht.EntityAutocompleteComponent,
              gt.EntityListComponent,
              ct.EntityTypeSelectComponent,
              ft.EntitySelectComponent,
              z.EntityKeysListComponent,
              ce.EntityListSelectComponent,
              Nt.EntityTypeListComponent,
              He.QueueAutocompleteComponent,
              ie.RelationTypeAutocompleteComponent,
              oe.SocialSharePanelComponent,
              ue.JsonObjectEditComponent,
              Ee.JsonObjectViewComponent,
              Ot.JsonContentComponent,
              Dt.JsFuncComponent,
              _n.j,
              pn.X,
              Pe.FabTriggerDirective,
              Pe.FabActionsDirective,
              Pe.FabToolbarComponent,
              _t.WidgetsBundleSelectComponent,
              Gt.ConfirmDialogComponent,
              Ht.AlertDialogComponent,
              zt.TodoDialogComponent,
              Je.ColorPickerDialogComponent,
              ot.MaterialIconsDialogComponent,
              jt.ColorInputComponent,
              $t.MaterialIconSelectComponent,
              Xe.NodeScriptTestDialogComponent,
              kt.JsonFormComponent,
              Qt.ImageInputComponent,
              un.MultipleImageInputComponent,
              Yt.FileInputComponent,
              At.MessageTypeAutocompleteComponent,
              Rt.KeyValMapComponent,
              Zt.NavTreeComponent,
              Pt.LedLightComponent,
              Ye.k,
              x.NospacePipe,
              _e.MillisecondsToTimeStringPipe,
              tt.EnumToArrayPipe,
              dt.HighlightPipe,
              Tt.TruncatePipe,
              It.TbJsonPipe,
              xt.FileSizePipe,
              dn.y,
              tn.SelectableColumnsPipe,
              Mt.KeyboardShortcutPipe,
              at.TbJsonToStringDirective,
              St.JsonObjectEditDialogComponent,
              Ge.HistorySelectorComponent,
              Fe.EntityGatewaySelectComponent,
              qt.ContactComponent,
              nn.OtaPackageAutocompleteComponent,
              en.WidgetsBundleSearchComponent,
              on.CopyButtonComponent,
              ze.TogglePasswordComponent,
              ln.ProtobufContentComponent,
              mn.A,
              hn.T,
              gn.TbScriptLangComponent,
            ],
            imports: [
              n.CommonModule,
              re.RouterModule,
              W.TranslateModule,
              m.MatButtonModule,
              r.MatButtonToggleModule,
              p.MatCheckboxModule,
              T.MatIconModule,
              h.MatCardModule,
              S.MatProgressBarModule,
              O.MatInputModule,
              B.MatSnackBarModule,
              L.MatSidenavModule,
              A.MatToolbarModule,
              w.MatMenuModule,
              l.MatGridListModule,
              c.MatDialogModule,
              M.MatSelectModule,
              U.MatTooltipModule,
              V.MatTableModule,
              b.MatPaginatorModule,
              j.MatSortModule,
              u.MatProgressSpinnerModule,
              v.MatDividerModule,
              P.MatTabsModule,
              f.MatRadioModule,
              k.MatSlideToggleModule,
              E.MatDatepickerModule,
              Z.MatNativeDatetimeModule,
              Z.MatDatetimepickerModule,
              le.n1,
              N.MatSliderModule,
              I.MatExpansionModule,
              F.MatStepperModule,
              y.MatAutocompleteModule,
              _.MatChipsModule,
              G.MatListModule,
              rn.DragDropModule,
              X.IX,
              Se.Iq,
              se.FlexLayoutModule,
              ne.FormsModule,
              ne.ReactiveFormsModule,
              fe.OverlayModule,
              de.Gn,
              pe.mb,
              Q.e4,
              K.Tv,
              Lt.c8,
              o.DG,
              i.jA,
              Le.JP,
            ],
            exports: [
              a.FooterComponent,
              C.LogoComponent,
              ye.FooterFabButtonsComponent,
              s.ToastDirective,
              Ke.FullscreenDirective,
              Oe.CircularProgressDirective,
              Vt.MatChipDraggableDirective,
              Xt.TbHotkeysDirective,
              te.TbAnchorComponent,
              q.TbStringTemplateOutletDirective,
              Y.TbComponentOutletDirective,
              ae.TbPopoverDirective,
              an.TbMarkdownComponent,
              J.HelpComponent,
              he.HelpMarkdownComponent,
              Ve.HelpPopupComponent,
              $.TbCheckboxComponent,
              Kt.TbErrorComponent,
              Jt.TbCheatSheetComponent,
              d.BreadcrumbComponent,
              H.UserMenuComponent,
              me.TimewindowComponent,
              Ce.TimewindowPanelComponent,
              Te.TimeintervalComponent,
              Ze.QuickTimeIntervalComponent,
              Et.DashboardSelectComponent,
              be.DatetimePeriodComponent,
              ke.DatetimeComponent,
              Ut.TimezoneSelectComponent,
              Ct.DashboardAutocompleteComponent,
              mt.EntitySubTypeAutocompleteComponent,
              vt.EntitySubTypeSelectComponent,
              Ft.EntitySubTypeListComponent,
              ht.EntityAutocompleteComponent,
              gt.EntityListComponent,
              ct.EntityTypeSelectComponent,
              ft.EntitySelectComponent,
              z.EntityKeysListComponent,
              ce.EntityListSelectComponent,
              Nt.EntityTypeListComponent,
              He.QueueAutocompleteComponent,
              ie.RelationTypeAutocompleteComponent,
              oe.SocialSharePanelComponent,
              ue.JsonObjectEditComponent,
              Ee.JsonObjectViewComponent,
              Ot.JsonContentComponent,
              Dt.JsFuncComponent,
              _n.j,
              pn.X,
              Pe.FabTriggerDirective,
              Pe.FabActionsDirective,
              Pe.FabToolbarComponent,
              _t.WidgetsBundleSelectComponent,
              nt.ValueInputComponent,
              m.MatButtonModule,
              r.MatButtonToggleModule,
              p.MatCheckboxModule,
              T.MatIconModule,
              h.MatCardModule,
              S.MatProgressBarModule,
              O.MatInputModule,
              B.MatSnackBarModule,
              L.MatSidenavModule,
              A.MatToolbarModule,
              w.MatMenuModule,
              l.MatGridListModule,
              c.MatDialogModule,
              M.MatSelectModule,
              U.MatTooltipModule,
              V.MatTableModule,
              b.MatPaginatorModule,
              j.MatSortModule,
              u.MatProgressSpinnerModule,
              v.MatDividerModule,
              P.MatTabsModule,
              f.MatRadioModule,
              k.MatSlideToggleModule,
              E.MatDatepickerModule,
              Z.MatNativeDatetimeModule,
              Z.MatDatetimepickerModule,
              le.n1,
              N.MatSliderModule,
              I.MatExpansionModule,
              F.MatStepperModule,
              y.MatAutocompleteModule,
              _.MatChipsModule,
              G.MatListModule,
              rn.DragDropModule,
              X.IX,
              Se.Iq,
              se.FlexLayoutModule,
              ne.FormsModule,
              ne.ReactiveFormsModule,
              fe.OverlayModule,
              de.Gn,
              pe.mb,
              Q.e4,
              K.Tv,
              Lt.c8,
              i.jA,
              Le.JP,
              Gt.ConfirmDialogComponent,
              Ht.AlertDialogComponent,
              zt.TodoDialogComponent,
              Je.ColorPickerDialogComponent,
              ot.MaterialIconsDialogComponent,
              jt.ColorInputComponent,
              $t.MaterialIconSelectComponent,
              Xe.NodeScriptTestDialogComponent,
              kt.JsonFormComponent,
              Qt.ImageInputComponent,
              un.MultipleImageInputComponent,
              Yt.FileInputComponent,
              At.MessageTypeAutocompleteComponent,
              Rt.KeyValMapComponent,
              Zt.NavTreeComponent,
              Pt.LedLightComponent,
              Ye.k,
              x.NospacePipe,
              _e.MillisecondsToTimeStringPipe,
              tt.EnumToArrayPipe,
              dt.HighlightPipe,
              Tt.TruncatePipe,
              It.TbJsonPipe,
              Mt.KeyboardShortcutPipe,
              xt.FileSizePipe,
              dn.y,
              tn.SelectableColumnsPipe,
              re.RouterModule,
              W.TranslateModule,
              St.JsonObjectEditDialogComponent,
              Ge.HistorySelectorComponent,
              Fe.EntityGatewaySelectComponent,
              qt.ContactComponent,
              nn.OtaPackageAutocompleteComponent,
              en.WidgetsBundleSearchComponent,
              on.CopyButtonComponent,
              ze.TogglePasswordComponent,
              ln.ProtobufContentComponent,
              mn.A,
              hn.T,
              gn.TbScriptLangComponent,
            ],
          }),
        e.ɵɵsetComponentScope(
          he.HelpMarkdownComponent,
          [an.TbMarkdownComponent],
          [n.AsyncPipe]
        ),
        e.ɵɵsetComponentScope(
          Ce.TimewindowPanelComponent,
          [
            ne.ɵNgNoValidate,
            ne.NgControlStatusGroup,
            ne.FormGroupDirective,
            Me.DefaultLayoutDirective,
            P.MatTabGroup,
            n.NgClass,
            we.DefaultClassDirective,
            P.MatTab,
            n.NgIf,
            W.TranslateDirective,
            p.MatCheckbox,
            ne.NgControlStatus,
            ne.NgModel,
            Me.DefaultFlexDirective,
            we.DefaultShowHideDirective,
            ne.FormGroupName,
            f.MatRadioGroup,
            ne.FormControlName,
            f.MatRadioButton,
            Te.TimeintervalComponent,
            ne.RequiredValidator,
            Ze.QuickTimeIntervalComponent,
            be.DatetimePeriodComponent,
            lt.MatFormField,
            lt.MatLabel,
            M.MatSelect,
            n.NgForOf,
            We.MatOption,
            Me.DefaultLayoutAlignDirective,
            N.MatSlider,
            O.MatInput,
            ne.DefaultValueAccessor,
            ne.NumberValueAccessor,
            ne.MinValidator,
            ne.MaxValidator,
            Ut.TimezoneSelectComponent,
            m.MatButton,
          ],
          [n.AsyncPipe, W.TranslatePipe]
        ),
        e.ɵɵsetComponentScope(
          nt.ValueInputComponent,
          [
            ne.ɵNgNoValidate,
            ne.NgControlStatusGroup,
            ne.NgForm,
            Me.DefaultLayoutDirective,
            Me.DefaultLayoutGapDirective,
            lt.MatFormField,
            Me.DefaultFlexDirective,
            lt.MatLabel,
            W.TranslateDirective,
            M.MatSelect,
            ne.NgControlStatus,
            ne.NgModel,
            M.MatSelectTrigger,
            T.MatIcon,
            n.NgForOf,
            We.MatOption,
            n.NgIf,
            O.MatInput,
            ne.DefaultValueAccessor,
            ne.RequiredValidator,
            lt.MatError,
            ne.NumberValueAccessor,
            ne.PatternValidator,
            Me.DefaultLayoutAlignDirective,
            p.MatCheckbox,
            at.TbJsonToStringDirective,
            m.MatButton,
            lt.MatSuffix,
          ],
          [W.TranslatePipe]
        ),
        e.ɵɵsetComponentScope(
          ft.EntitySelectComponent,
          [
            Me.DefaultLayoutDirective,
            ne.NgControlStatusGroup,
            ne.FormGroupDirective,
            n.NgIf,
            ct.EntityTypeSelectComponent,
            ne.NgControlStatus,
            ne.FormControlName,
            ne.RequiredValidator,
            ht.EntityAutocompleteComponent,
            Me.DefaultFlexDirective,
          ],
          []
        ),
        e.ɵɵsetComponentScope(
          ce.EntityListSelectComponent,
          [
            Me.DefaultLayoutDirective,
            ne.NgControlStatusGroup,
            ne.FormGroupDirective,
            n.NgIf,
            ct.EntityTypeSelectComponent,
            ne.NgControlStatus,
            ne.FormControlName,
            ne.RequiredValidator,
            gt.EntityListComponent,
            Me.DefaultFlexDirective,
            n.NgClass,
            we.DefaultClassDirective,
          ],
          []
        ),
        e.ɵɵsetComponentScope(
          ue.JsonObjectEditComponent,
          [
            Ke.FullscreenDirective,
            Me.DefaultLayoutDirective,
            n.NgClass,
            we.DefaultClassDirective,
            Me.DefaultLayoutAlignDirective,
            Me.DefaultFlexDirective,
            n.NgIf,
            m.MatButton,
            U.MatTooltip,
            T.MatIcon,
            s.ToastDirective,
            n.NgStyle,
            we.DefaultStyleDirective,
          ],
          [W.TranslatePipe]
        ),
        e.ɵɵsetComponentScope(
          Ot.JsonContentComponent,
          [
            Ke.FullscreenDirective,
            Me.DefaultLayoutDirective,
            n.NgClass,
            we.DefaultClassDirective,
            Me.DefaultLayoutAlignDirective,
            Me.DefaultFlexDirective,
            n.NgIf,
            m.MatButton,
            U.MatTooltip,
            T.MatIcon,
            s.ToastDirective,
            n.NgStyle,
            we.DefaultStyleDirective,
          ],
          [W.TranslatePipe]
        ),
        e.ɵɵsetComponentScope(
          Dt.JsFuncComponent,
          [
            Ke.FullscreenDirective,
            Me.DefaultLayoutDirective,
            n.NgClass,
            we.DefaultClassDirective,
            Me.DefaultLayoutAlignDirective,
            n.NgIf,
            Me.DefaultFlexDirective,
            m.MatButton,
            Ve.HelpPopupComponent,
            U.MatTooltip,
            T.MatIcon,
            s.ToastDirective,
            n.NgStyle,
            we.DefaultStyleDirective,
          ],
          [W.TranslatePipe]
        ),
        e.ɵɵsetComponentScope(
          Xe.NodeScriptTestDialogComponent,
          [
            ne.ɵNgNoValidate,
            ne.NgControlStatusGroup,
            ne.FormGroupDirective,
            A.MatToolbar,
            Me.DefaultLayoutDirective,
            Me.DefaultFlexDirective,
            m.MatButton,
            T.MatIcon,
            c.MatDialogContent,
            W.TranslateDirective,
            ne.FormGroupName,
            At.MessageTypeAutocompleteComponent,
            ne.NgControlStatus,
            ne.FormControlName,
            ne.RequiredValidator,
            Ot.JsonContentComponent,
            s.ToastDirective,
            Rt.KeyValMapComponent,
            n.NgClass,
            we.DefaultClassDirective,
            Dt.JsFuncComponent,
            c.MatDialogActions,
          ],
          [W.TranslatePipe, n.AsyncPipe]
        ),
        e.ɵɵsetComponentScope(
          Ye.k,
          [
            Ke.FullscreenDirective,
            n.NgClass,
            we.DefaultClassDirective,
            Me.DefaultLayoutDirective,
            Me.DefaultLayoutAlignDirective,
            Me.DefaultFlexDirective,
            m.MatButton,
            we.DefaultShowHideDirective,
            n.NgIf,
            Ve.HelpPopupComponent,
            U.MatTooltip,
            T.MatIcon,
            an.TbMarkdownComponent,
          ],
          [W.TranslatePipe]
        ),
        e.ɵɵsetComponentScope(
          St.JsonObjectEditDialogComponent,
          [
            ne.ɵNgNoValidate,
            ne.NgControlStatusGroup,
            ne.FormGroupDirective,
            A.MatToolbar,
            Me.DefaultLayoutDirective,
            Me.DefaultFlexDirective,
            m.MatButton,
            T.MatIcon,
            n.NgIf,
            S.MatProgressBar,
            c.MatDialogContent,
            ue.JsonObjectEditComponent,
            ne.NgControlStatus,
            ne.FormControlName,
            ne.RequiredValidator,
            c.MatDialogActions,
            Me.DefaultLayoutAlignDirective,
          ],
          [n.AsyncPipe, W.TranslatePipe]
        ),
        e.ɵɵsetComponentScope(
          Fe.EntityGatewaySelectComponent,
          [
            lt.MatFormField,
            ne.NgControlStatusGroup,
            ne.FormGroupDirective,
            O.MatInput,
            ne.DefaultValueAccessor,
            y.MatAutocompleteTrigger,
            ne.NgControlStatus,
            ne.FormControlName,
            ne.RequiredValidator,
            n.NgIf,
            m.MatButton,
            lt.MatSuffix,
            T.MatIcon,
            y.MatAutocomplete,
            n.NgForOf,
            We.MatOption,
            W.TranslateDirective,
            lt.MatError,
          ],
          [W.TranslatePipe, n.AsyncPipe, dt.HighlightPipe, Tt.TruncatePipe]
        ),
        e.ɵɵsetComponentScope(
          ln.ProtobufContentComponent,
          [
            Ke.FullscreenDirective,
            Me.DefaultLayoutDirective,
            n.NgClass,
            we.DefaultClassDirective,
            Me.DefaultLayoutAlignDirective,
            Me.DefaultFlexDirective,
            n.NgIf,
            m.MatButton,
            U.MatTooltip,
            T.MatIcon,
            s.ToastDirective,
            n.NgStyle,
            we.DefaultStyleDirective,
          ],
          [W.TranslatePipe]
        );
    },
    92340: (ee, R, t) => {
      "use strict";
      t.d(R, { N: () => e });
      const e = {
        appTitle: "NinoX",
        production: !0,
        tbVersion: "3.4.4",
        supportedLangs: [
          "ca_ES",
          "cs_CZ",
          "da_DK",
          "de_DE",
          "el_GR",
          "en_US",
          "es_ES",
          "fa_IR",
          "fr_FR",
          "it_IT",
          "ja_JP",
          "ka_GE",
          "ko_KR",
          "lv_LV",
          "pt_BR",
          "ro_RO",
          "ru_RU",
          "sl_SI",
          "tr_TR",
          "uk_UA",
          "zh_CN",
          "zh_TW",
        ],
        defaultLang: "en_US",
      };
    },
    67251: (ee, R, t) => {
      "use strict";
      var e = t(39075),
        n = t(37716),
        a = t(46237),
        C = t(39895);
      class d {}
      (d.ɵfac = function (q) {
        return new (q || d)();
      }),
        (d.ɵmod = n.ɵɵdefineNgModule({ type: d })),
        (d.ɵinj = n.ɵɵdefineInjector({
          imports: [
            [
              C.RouterModule.forRoot([
                {
                  path: "",
                  redirectTo: "home",
                  pathMatch: "full",
                  data: { breadcrumb: { skip: !0 } },
                },
              ]),
            ],
            C.RouterModule,
          ],
        })),
        ("undefined" == typeof ngJitMode || ngJitMode) &&
          n.ɵɵsetNgModuleScope(d, {
            imports: [C.RouterModule],
            exports: [C.RouterModule],
          });
      var o = t(24246),
        i = t(38583),
        g = t(88951),
        D = t(75362),
        y = t(82068),
        m = t(86710),
        r = t(3679),
        h = t(35618),
        p = t(93738),
        _ = t(43058),
        E = t(99271),
        c = t(98295),
        v = t(29790),
        I = t(83166),
        l = t(76627),
        T = t(86459),
        O = t(51095),
        w = t(12178),
        b = t(1769);
      function S(ae, q) {
        1 & ae && n.ɵɵelement(0, "mat-progress-bar", 21);
      }
      function u(ae, q) {
        1 & ae && n.ɵɵelement(0, "span", 22);
      }
      const f = function (ae) {
        return { name: ae };
      };
      function M(ae, q) {
        if (
          (1 & ae &&
            (n.ɵɵelementContainerStart(0),
            n.ɵɵelementStart(1, "a", 28),
            n.ɵɵelement(2, "mat-icon", 29),
            n.ɵɵtext(3),
            n.ɵɵpipe(4, "translate"),
            n.ɵɵelementEnd(),
            n.ɵɵelementContainerEnd()),
          2 & ae)
        ) {
          const Y = q.$implicit,
            he = n.ɵɵnextContext(2);
          n.ɵɵadvance(1),
            n.ɵɵpropertyInterpolate(
              "href",
              he.getOAuth2Uri(Y),
              n.ɵɵsanitizeUrl
            ),
            n.ɵɵadvance(1),
            n.ɵɵpropertyInterpolate("svgIcon", Y.icon),
            n.ɵɵadvance(1),
            n.ɵɵtextInterpolate1(
              " ",
              n.ɵɵpipeBind2(
                4,
                3,
                "login.login-with",
                n.ɵɵpureFunction1(6, f, Y.name)
              ),
              " "
            );
        }
      }
      function L(ae, q) {
        if (
          (1 & ae &&
            (n.ɵɵelementStart(0, "div", 23),
            n.ɵɵtemplate(1, M, 5, 8, "ng-container", 24),
            n.ɵɵelementStart(2, "div", 25),
            n.ɵɵelementStart(3, "div", 26),
            n.ɵɵelement(4, "mat-divider"),
            n.ɵɵelementEnd(),
            n.ɵɵelementStart(5, "div", 27),
            n.ɵɵtext(6),
            n.ɵɵpipe(7, "uppercase"),
            n.ɵɵpipe(8, "translate"),
            n.ɵɵelementEnd(),
            n.ɵɵelementStart(9, "div", 26),
            n.ɵɵelement(10, "mat-divider"),
            n.ɵɵelementEnd(),
            n.ɵɵelementEnd(),
            n.ɵɵelementEnd()),
          2 & ae)
        ) {
          const Y = n.ɵɵnextContext();
          n.ɵɵadvance(1),
            n.ɵɵproperty("ngForOf", Y.oauth2Clients),
            n.ɵɵadvance(5),
            n.ɵɵtextInterpolate(
              n.ɵɵpipeBind1(7, 2, n.ɵɵpipeBind1(8, 4, "login.or"))
            );
        }
      }
      function k(ae, q) {
        1 & ae &&
          (n.ɵɵelementStart(0, "mat-error"),
          n.ɵɵtext(1),
          n.ɵɵpipe(2, "translate"),
          n.ɵɵelementEnd()),
          2 & ae &&
            (n.ɵɵadvance(1),
            n.ɵɵtextInterpolate1(
              " ",
              n.ɵɵpipeBind1(2, 1, "user.invalid-email-format"),
              " "
            ));
      }
      class N extends D.I {
        constructor(q, Y, he, ve) {
          super(q),
            (this.store = q),
            (this.authService = Y),
            (this.fb = he),
            (this.router = ve),
            (this.loginFormGroup = this.fb.group({
              username: "",
              password: "",
            })),
            (this.oauth2Clients = null);
        }
        ngOnInit() {
          this.oauth2Clients = this.authService.oauth2Clients;
        }
        login() {
          this.loginFormGroup.valid
            ? this.authService.login(this.loginFormGroup.value).subscribe(
                () => {},
                (q) => {
                  q &&
                    q.error &&
                    q.error.errorCode &&
                    q.error.errorCode ===
                      y.gT.serverErrorCode.credentialsExpired &&
                    this.router.navigateByUrl(
                      `login/resetExpiredPassword?resetToken=${q.error.resetToken}`
                    );
                }
              )
            : Object.keys(this.loginFormGroup.controls).forEach((q) => {
                this.loginFormGroup.get(q).markAsTouched({ onlySelf: !0 });
              });
        }
        getOAuth2Uri(q) {
          let Y = "";
          return (
            this.authService.redirectUrl &&
              (Y += "?prevUri=" + this.authService.redirectUrl),
            q.url + Y
          );
        }
      }
      (N.ɵfac = function (q) {
        return new (q || N)(
          n.ɵɵdirectiveInject(m.Store),
          n.ɵɵdirectiveInject(g.e),
          n.ɵɵdirectiveInject(r.FormBuilder),
          n.ɵɵdirectiveInject(C.Router)
        );
      }),
        (N.ɵcmp = n.ɵɵdefineComponent({
          type: N,
          selectors: [["tb-login"]],
          features: [n.ɵɵInheritDefinitionFeature],
          decls: 38,
          vars: 21,
          consts: [
            [
              "fxFlex",
              "",
              "fxLayoutAlign",
              "center center",
              1,
              "tb-login-content",
              "mat-app-background",
              "tb-dark",
            ],
            [2, "max-height", "80vh", "overflow-y", "auto"],
            [1, "tb-login-form", 3, "formGroup", "ngSubmit"],
            ["fxLayout", "column", 3, "disabled"],
            [
              "fxLayout",
              "column",
              "fxLayoutAlign",
              "start center",
              2,
              "padding",
              "15px 0",
            ],
            [1, "login-logo"],
            ["color", "warn", "mode", "indeterminate", 4, "ngIf"],
            ["style", "height: 4px;", 4, "ngIf"],
            ["tb-toast", "", "fxLayout", "column", 1, "layout-padding"],
            [2, "height", "50px"],
            [
              "class",
              "oauth-container tb-default",
              "fxLayout",
              "column",
              "fxLayoutGap",
              "16px",
              4,
              "ngIf",
            ],
            ["translate", ""],
            [
              "id",
              "username-input",
              "matInput",
              "",
              "type",
              "email",
              "autofocus",
              "",
              "formControlName",
              "username",
              "email",
              "",
              "required",
              "",
            ],
            ["matPrefix", ""],
            [4, "ngIf"],
            [
              "id",
              "password-input",
              "matInput",
              "",
              "type",
              "password",
              "formControlName",
              "password",
            ],
            ["matSuffix", ""],
            ["fxLayoutAlign", "end center", 1, "forgot-password"],
            [
              "mat-button",
              "",
              "type",
              "button",
              "routerLink",
              "/login/resetPasswordRequest",
              1,
              "tb-reset-password",
            ],
            ["fxLayout", "column", 1, "tb-action-button"],
            [
              "mat-raised-button",
              "",
              "color",
              "accent",
              "type",
              "submit",
              3,
              "disabled",
            ],
            ["color", "warn", "mode", "indeterminate"],
            [2, "height", "4px"],
            [
              "fxLayout",
              "column",
              "fxLayoutGap",
              "16px",
              1,
              "oauth-container",
              "tb-default",
            ],
            [4, "ngFor", "ngForOf"],
            [1, "container-divider"],
            [1, "line"],
            [1, "text", "mat-typography"],
            ["mat-raised-button", "", 1, "login-with-button", 3, "href"],
            [1, "icon", 3, "svgIcon"],
          ],
          template: function (q, Y) {
            1 & q &&
              (n.ɵɵelementStart(0, "div", 0),
              n.ɵɵelementStart(1, "mat-card", 1),
              n.ɵɵelementStart(2, "mat-card-content"),
              n.ɵɵelementStart(3, "form", 2),
              n.ɵɵlistener("ngSubmit", function () {
                return Y.login();
              }),
              n.ɵɵelementStart(4, "fieldset", 3),
              n.ɵɵpipe(5, "async"),
              n.ɵɵelementStart(6, "div", 4),
              n.ɵɵelement(7, "tb-logo", 5),
              n.ɵɵelementEnd(),
              n.ɵɵtemplate(8, S, 1, 0, "mat-progress-bar", 6),
              n.ɵɵpipe(9, "async"),
              n.ɵɵtemplate(10, u, 1, 0, "span", 7),
              n.ɵɵpipe(11, "async"),
              n.ɵɵelementStart(12, "div", 8),
              n.ɵɵelement(13, "span", 9),
              n.ɵɵtemplate(14, L, 11, 6, "div", 10),
              n.ɵɵelementStart(15, "mat-form-field"),
              n.ɵɵelementStart(16, "mat-label", 11),
              n.ɵɵtext(17, "login.username"),
              n.ɵɵelementEnd(),
              n.ɵɵelement(18, "input", 12),
              n.ɵɵelementStart(19, "mat-icon", 13),
              n.ɵɵtext(20, "email"),
              n.ɵɵelementEnd(),
              n.ɵɵtemplate(21, k, 3, 3, "mat-error", 14),
              n.ɵɵelementEnd(),
              n.ɵɵelementStart(22, "mat-form-field"),
              n.ɵɵelementStart(23, "mat-label", 11),
              n.ɵɵtext(24, "common.password"),
              n.ɵɵelementEnd(),
              n.ɵɵelement(25, "input", 15),
              n.ɵɵelement(26, "tb-toggle-password", 16),
              n.ɵɵelementStart(27, "mat-icon", 13),
              n.ɵɵtext(28, "lock"),
              n.ɵɵelementEnd(),
              n.ɵɵelementEnd(),
              n.ɵɵelementStart(29, "div", 17),
              n.ɵɵelementStart(30, "button", 18),
              n.ɵɵtext(31),
              n.ɵɵpipe(32, "translate"),
              n.ɵɵelementEnd(),
              n.ɵɵelementEnd(),
              n.ɵɵelementStart(33, "div", 19),
              n.ɵɵelementStart(34, "button", 20),
              n.ɵɵpipe(35, "async"),
              n.ɵɵtext(36),
              n.ɵɵpipe(37, "translate"),
              n.ɵɵelementEnd(),
              n.ɵɵelementEnd(),
              n.ɵɵelementEnd(),
              n.ɵɵelementEnd(),
              n.ɵɵelementEnd(),
              n.ɵɵelementEnd(),
              n.ɵɵelementEnd(),
              n.ɵɵelementEnd()),
              2 & q &&
                (n.ɵɵadvance(3),
                n.ɵɵproperty("formGroup", Y.loginFormGroup),
                n.ɵɵadvance(1),
                n.ɵɵproperty("disabled", n.ɵɵpipeBind1(5, 9, Y.isLoading$)),
                n.ɵɵadvance(4),
                n.ɵɵproperty("ngIf", n.ɵɵpipeBind1(9, 11, Y.isLoading$)),
                n.ɵɵadvance(2),
                n.ɵɵproperty("ngIf", !n.ɵɵpipeBind1(11, 13, Y.isLoading$)),
                n.ɵɵadvance(4),
                n.ɵɵproperty(
                  "ngIf",
                  null == Y.oauth2Clients ? null : Y.oauth2Clients.length
                ),
                n.ɵɵadvance(7),
                n.ɵɵproperty("ngIf", Y.loginFormGroup.get("username").invalid),
                n.ɵɵadvance(10),
                n.ɵɵtextInterpolate1(
                  "",
                  n.ɵɵpipeBind1(32, 15, "login.forgot-password"),
                  " "
                ),
                n.ɵɵadvance(3),
                n.ɵɵproperty("disabled", n.ɵɵpipeBind1(35, 17, Y.isLoading$)),
                n.ɵɵadvance(2),
                n.ɵɵtextInterpolate(n.ɵɵpipeBind1(37, 19, "login.login")));
          },
          directives: [
            h.DefaultFlexDirective,
            h.DefaultLayoutAlignDirective,
            p.MatCard,
            p.MatCardContent,
            r.ɵNgNoValidate,
            r.NgControlStatusGroup,
            r.FormGroupDirective,
            h.DefaultLayoutDirective,
            _.LogoComponent,
            i.NgIf,
            E.ToastDirective,
            c.MatFormField,
            c.MatLabel,
            v.TranslateDirective,
            I.MatInput,
            r.DefaultValueAccessor,
            r.NgControlStatus,
            r.FormControlName,
            r.EmailValidator,
            r.RequiredValidator,
            l.MatIcon,
            c.MatPrefix,
            T.TogglePasswordComponent,
            c.MatSuffix,
            O.MatButton,
            C.RouterLink,
            w.MatProgressBar,
            h.DefaultLayoutGapDirective,
            i.NgForOf,
            b.MatDivider,
            O.MatAnchor,
            c.MatError,
          ],
          pipes: [i.AsyncPipe, v.TranslatePipe, i.UpperCasePipe],
          styles: [
            '@charset "UTF-8";[_nghost-%COMP%]{display:flex;flex:1 1 0}[_nghost-%COMP%]   .tb-login-content[_ngcontent-%COMP%]{margin-top:36px;margin-bottom:76px;background-color:#eee}@media screen and (min-width: 600px){[_nghost-%COMP%]   .tb-login-content[_ngcontent-%COMP%]   .tb-login-form[_ngcontent-%COMP%]{width:550px!important}}[_nghost-%COMP%]   .tb-login-content[_ngcontent-%COMP%]   .tb-login-form[_ngcontent-%COMP%]   .forgot-password[_ngcontent-%COMP%]{padding:0 .5em 1em}[_nghost-%COMP%]   .tb-login-content[_ngcontent-%COMP%]   .tb-login-form[_ngcontent-%COMP%]   .forgot-password[_ngcontent-%COMP%]   .tb-reset-password[_ngcontent-%COMP%]{padding:0 6px}[_nghost-%COMP%]   .tb-login-content[_ngcontent-%COMP%]   .tb-login-form[_ngcontent-%COMP%]   .tb-action-button[_ngcontent-%COMP%]{padding:20px 0 16px}[_nghost-%COMP%]   .tb-login-content[_ngcontent-%COMP%]   .oauth-container[_ngcontent-%COMP%]{padding:0}[_nghost-%COMP%]   .tb-login-content[_ngcontent-%COMP%]   .oauth-container[_ngcontent-%COMP%]   .container-divider[_ngcontent-%COMP%]{display:flex;flex-direction:row;align-items:center;justify-content:center;width:100%}[_nghost-%COMP%]   .tb-login-content[_ngcontent-%COMP%]   .oauth-container[_ngcontent-%COMP%]   .container-divider[_ngcontent-%COMP%]   .line[_ngcontent-%COMP%]{flex:1}[_nghost-%COMP%]   .tb-login-content[_ngcontent-%COMP%]   .oauth-container[_ngcontent-%COMP%]   .container-divider[_ngcontent-%COMP%]   .mat-divider-horizontal[_ngcontent-%COMP%]{position:relative}[_nghost-%COMP%]   .tb-login-content[_ngcontent-%COMP%]   .oauth-container[_ngcontent-%COMP%]   .container-divider[_ngcontent-%COMP%]   .text[_ngcontent-%COMP%]{padding-right:10px;padding-left:10px}[_nghost-%COMP%]   .tb-login-content[_ngcontent-%COMP%]   .oauth-container[_ngcontent-%COMP%]   .material-icons[_ngcontent-%COMP%]{width:20px;min-width:20px}[_nghost-%COMP%]   .tb-login-content[_ngcontent-%COMP%]   .oauth-container[_ngcontent-%COMP%]   a.login-with-button[_ngcontent-%COMP%]{color:#000000de}[_nghost-%COMP%]   .tb-login-content[_ngcontent-%COMP%]   .oauth-container[_ngcontent-%COMP%]   a.login-with-button[_ngcontent-%COMP%]:hover{border-bottom:0}[_nghost-%COMP%]   .tb-login-content[_ngcontent-%COMP%]   .oauth-container[_ngcontent-%COMP%]   a.login-with-button[_ngcontent-%COMP%]   .icon[_ngcontent-%COMP%]{height:20px;width:20px;vertical-align:sub}[_nghost-%COMP%]   .tb-login-content[_ngcontent-%COMP%]   .oauth-container[_ngcontent-%COMP%]   .centered[_ngcontent-%COMP%]     .mat-button-wrapper{display:flex;justify-content:center;align-items:center}',
          ],
        }));
      var B = t(54787),
        j = t(66888),
        F = t(15257),
        V = t(19773),
        P = t(88002),
        A = t(5304),
        U = t(25917),
        G = t(35758),
        Z = t(77393);
      class X {
        constructor(q) {
          this.zone = q;
        }
        call(q, Y) {
          return Y._subscribe(new se(q, this.zone));
        }
      }
      class se extends Z.L {
        constructor(q, Y) {
          super(q), (this.zone = Y);
        }
        _next(q) {
          this.zone.run(() => this.destination.next(q));
        }
      }
      var ne = t(26311),
        re = t(16797),
        de = t(1361),
        pe = t(41960),
        Q = t(53682);
      class K {
        constructor(q, Y, he, ve, Ie, Ue, it, je) {
          (this.store = q),
            (this.router = Y),
            (this.authService = he),
            (this.dialogService = ve),
            (this.utils = Ie),
            (this.translate = Ue),
            (this.mobileService = it),
            (this.zone = je);
        }
        getAuthState() {
          return this.store.pipe(
            (0, m.select)(B.Hz),
            (0, j.n)((q) => !q || !q.isUserLoaded),
            (0, F.q)(1),
            ((ae = this.zone), (q) => q.lift(new X(ae)))
          );
          var ae;
        }
        canActivate(q, Y) {
          return this.getAuthState().pipe(
            (0, V.zg)((he) => {
              var ve;
              const Ie = Y.url;
              let Ue = Y.root;
              const it = [];
              for (
                Ue.url && it.push(...Ue.url.map((st) => st.path));
                Ue.children.length;

              )
                (Ue = Ue.children[0]),
                  Ue.url && it.push(...Ue.url.map((st) => st.path));
              const je = it.join("."),
                pt = this.utils.getQueryParam("publicId"),
                qe = Ue.data || {},
                Bt = Ue.params || {},
                rt = "public" === qe.module;
              if (!he.isAuthenticated || rt)
                return pt && pt.length > 0
                  ? (this.authService.setUserFromJwtToken(null, null, !1),
                    this.authService.reloadUser(),
                    (0, U.of)(!1))
                  : rt
                  ? "login" === je
                    ? (0, G.D)([this.authService.loadOAuth2Clients()]).pipe(
                        (0, P.U)(() => !0)
                      )
                    : "login.mfa" === je
                    ? (null === (ve = he.authUser) || void 0 === ve
                        ? void 0
                        : ve.authority) === ne.W.PRE_VERIFICATION_TOKEN
                      ? this.authService
                          .getAvailableTwoFaLoginProviders()
                          .pipe((0, P.U)(() => !0))
                      : (this.authService.logout(),
                        (0, U.of)(this.authService.defaultUrl(!1)))
                    : (0, U.of)(!0)
                  : ((this.authService.redirectUrl = Ie),
                    (0, U.of)(this.authService.defaultUrl(!1)));
              {
                if (
                  he.authUser.isPublic &&
                  this.authService.parsePublicId() !== pt
                )
                  return (
                    pt && pt.length > 0
                      ? (this.authService.setUserFromJwtToken(null, null, !1),
                        this.authService.reloadUser())
                      : this.authService.logout(),
                    (0, U.of)(!1)
                  );
                if (
                  this.mobileService.isMobileApp() &&
                  !je.startsWith("dashboard.")
                )
                  return (
                    this.mobileService.handleMobileNavigation(je, Bt),
                    (0, U.of)(!1)
                  );
                if (he.authUser.authority === ne.W.PRE_VERIFICATION_TOKEN)
                  return this.authService.logout(), (0, U.of)(!1);
                const st = this.authService.defaultUrl(!0, he, je, Bt);
                if (st) return (0, U.of)(st);
                {
                  const wt = ne.W[he.authUser.authority];
                  if (qe.auth && -1 === qe.auth.indexOf(wt))
                    return this.dialogService.forbidden(), (0, U.of)(!1);
                  if (qe.redirectTo) {
                    let Wt;
                    return (
                      (Wt = (0, pe.Kn)(qe.redirectTo)
                        ? qe.redirectTo[wt]
                        : qe.redirectTo),
                      (0, U.of)(this.router.parseUrl(Wt))
                    );
                  }
                  return (0, U.of)(!0);
                }
              }
            }),
            (0, A.K)((he) => (console.error(he), (0, U.of)(!1)))
          );
        }
        canActivateChild(q, Y) {
          return this.canActivate(q, Y);
        }
      }
      (K.ɵfac = function (q) {
        return new (q || K)(
          n.ɵɵinject(m.Store),
          n.ɵɵinject(C.Router),
          n.ɵɵinject(g.e),
          n.ɵɵinject(re.x),
          n.ɵɵinject(de.F),
          n.ɵɵinject(v.TranslateService),
          n.ɵɵinject(Q.W),
          n.ɵɵinject(n.NgZone)
        );
      }),
        (K.ɵprov = n.ɵɵdefineInjectable({
          token: K,
          factory: K.ɵfac,
          providedIn: "root",
        }));
      var H = t(65264);
      function x(ae, q) {
        1 & ae && n.ɵɵelement(0, "mat-progress-bar", 18);
      }
      function W(ae, q) {
        1 & ae && n.ɵɵelement(0, "span", 19);
      }
      function $(ae, q) {
        1 & ae &&
          (n.ɵɵelementStart(0, "mat-error"),
          n.ɵɵtext(1),
          n.ɵɵpipe(2, "translate"),
          n.ɵɵelementEnd()),
          2 & ae &&
            (n.ɵɵadvance(1),
            n.ɵɵtextInterpolate1(
              " ",
              n.ɵɵpipeBind1(2, 1, "user.invalid-email-format"),
              " "
            ));
      }
      class J extends D.I {
        constructor(q, Y, he, ve) {
          super(q),
            (this.store = q),
            (this.authService = Y),
            (this.translate = he),
            (this.fb = ve),
            (this.clicked = !1),
            (this.requestPasswordRequest = this.fb.group(
              { email: ["", [r.Validators.email, r.Validators.required]] },
              { updateOn: "submit" }
            ));
        }
        ngOnInit() {}
        disableInputs() {
          this.requestPasswordRequest.disable(), (this.clicked = !0);
        }
        sendResetPasswordLink() {
          this.requestPasswordRequest.valid &&
            (this.disableInputs(),
            this.authService
              .sendResetPasswordLink(
                this.requestPasswordRequest.get("email").value
              )
              .subscribe(() => {
                this.store.dispatch(
                  new H.zi({
                    message: this.translate.instant(
                      "login.password-link-sent-message"
                    ),
                    type: "success",
                  })
                );
              }));
        }
      }
      function te(ae, q) {
        1 & ae &&
          (n.ɵɵelementStart(0, "mat-card-subtitle", 2),
          n.ɵɵelementStart(1, "div", 20),
          n.ɵɵtext(2, "login.expired-password-reset-message"),
          n.ɵɵelementEnd(),
          n.ɵɵelementEnd());
      }
      function _e(ae, q) {
        1 & ae && n.ɵɵelement(0, "mat-progress-bar", 21);
      }
      function me(ae, q) {
        1 & ae && n.ɵɵelement(0, "span", 22);
      }
      (J.ɵfac = function (q) {
        return new (q || J)(
          n.ɵɵdirectiveInject(m.Store),
          n.ɵɵdirectiveInject(g.e),
          n.ɵɵdirectiveInject(v.TranslateService),
          n.ɵɵdirectiveInject(r.FormBuilder)
        );
      }),
        (J.ɵcmp = n.ɵɵdefineComponent({
          type: J,
          selectors: [["tb-reset-password-request"]],
          features: [n.ɵɵInheritDefinitionFeature],
          decls: 31,
          vars: 23,
          consts: [
            [
              "fxLayout",
              "row",
              "fxLayoutAlign",
              "center center",
              1,
              "tb-request-password-reset-content",
              "mat-app-background",
              "tb-dark",
              2,
              "width",
              "100%",
            ],
            ["fxFlex", "initial", 1, "tb-request-password-reset-card"],
            [1, "layout-padding"],
            ["translate", "", 1, "mat-headline"],
            ["color", "warn", "mode", "indeterminate", 4, "ngIf"],
            ["style", "height: 4px;", 4, "ngIf"],
            [3, "formGroup", "ngSubmit"],
            [3, "disabled"],
            ["tb-toast", "", "fxLayout", "column", 1, "layout-padding"],
            [2, "height", "50px"],
            ["hideRequiredMarker", "", 1, "mat-block"],
            ["translate", ""],
            [
              "matInput",
              "",
              "type",
              "email",
              "autofocus",
              "",
              "formControlName",
              "email",
              "email",
              "",
              "required",
              "",
            ],
            ["matPrefix", "", 1, "material-icons"],
            [4, "ngIf"],
            [
              "fxLayout",
              "column",
              "fxLayout.gt-xs",
              "row",
              "fxLayoutGap",
              "16px",
              "fxLayoutAlign",
              "start center",
              "fxLayoutAlign.gt-xs",
              "center start",
            ],
            [
              "mat-raised-button",
              "",
              "color",
              "accent",
              "type",
              "submit",
              3,
              "disabled",
            ],
            [
              "mat-raised-button",
              "",
              "color",
              "primary",
              "type",
              "button",
              "routerLink",
              "/login",
              3,
              "disabled",
            ],
            ["color", "warn", "mode", "indeterminate"],
            [2, "height", "4px"],
          ],
          template: function (q, Y) {
            1 & q &&
              (n.ɵɵelementStart(0, "div", 0),
              n.ɵɵelementStart(1, "mat-card", 1),
              n.ɵɵelementStart(2, "mat-card-title", 2),
              n.ɵɵelementStart(3, "span", 3),
              n.ɵɵtext(4, "login.request-password-reset"),
              n.ɵɵelementEnd(),
              n.ɵɵelementEnd(),
              n.ɵɵtemplate(5, x, 1, 0, "mat-progress-bar", 4),
              n.ɵɵpipe(6, "async"),
              n.ɵɵtemplate(7, W, 1, 0, "span", 5),
              n.ɵɵpipe(8, "async"),
              n.ɵɵelementStart(9, "mat-card-content"),
              n.ɵɵelementStart(10, "form", 6),
              n.ɵɵlistener("ngSubmit", function () {
                return Y.sendResetPasswordLink();
              }),
              n.ɵɵelementStart(11, "fieldset", 7),
              n.ɵɵpipe(12, "async"),
              n.ɵɵelementStart(13, "div", 8),
              n.ɵɵelement(14, "span", 9),
              n.ɵɵelementStart(15, "mat-form-field", 10),
              n.ɵɵelementStart(16, "mat-label", 11),
              n.ɵɵtext(17, "login.email"),
              n.ɵɵelementEnd(),
              n.ɵɵelement(18, "input", 12),
              n.ɵɵelementStart(19, "mat-icon", 13),
              n.ɵɵtext(20, "email"),
              n.ɵɵelementEnd(),
              n.ɵɵtemplate(21, $, 3, 3, "mat-error", 14),
              n.ɵɵelementEnd(),
              n.ɵɵelementStart(22, "div", 15),
              n.ɵɵelementStart(23, "button", 16),
              n.ɵɵpipe(24, "async"),
              n.ɵɵtext(25),
              n.ɵɵpipe(26, "translate"),
              n.ɵɵelementEnd(),
              n.ɵɵelementStart(27, "button", 17),
              n.ɵɵpipe(28, "async"),
              n.ɵɵtext(29),
              n.ɵɵpipe(30, "translate"),
              n.ɵɵelementEnd(),
              n.ɵɵelementEnd(),
              n.ɵɵelementEnd(),
              n.ɵɵelementEnd(),
              n.ɵɵelementEnd(),
              n.ɵɵelementEnd(),
              n.ɵɵelementEnd(),
              n.ɵɵelementEnd()),
              2 & q &&
                (n.ɵɵadvance(5),
                n.ɵɵproperty("ngIf", n.ɵɵpipeBind1(6, 9, Y.isLoading$)),
                n.ɵɵadvance(2),
                n.ɵɵproperty("ngIf", !n.ɵɵpipeBind1(8, 11, Y.isLoading$)),
                n.ɵɵadvance(3),
                n.ɵɵproperty("formGroup", Y.requestPasswordRequest),
                n.ɵɵadvance(1),
                n.ɵɵproperty("disabled", n.ɵɵpipeBind1(12, 13, Y.isLoading$)),
                n.ɵɵadvance(10),
                n.ɵɵproperty(
                  "ngIf",
                  Y.requestPasswordRequest.get("email").invalid
                ),
                n.ɵɵadvance(2),
                n.ɵɵproperty(
                  "disabled",
                  n.ɵɵpipeBind1(24, 15, Y.isLoading$) || Y.clicked
                ),
                n.ɵɵadvance(2),
                n.ɵɵtextInterpolate1(
                  " ",
                  n.ɵɵpipeBind1(26, 17, "login.request-password-reset"),
                  " "
                ),
                n.ɵɵadvance(2),
                n.ɵɵproperty("disabled", n.ɵɵpipeBind1(28, 19, Y.isLoading$)),
                n.ɵɵadvance(2),
                n.ɵɵtextInterpolate1(
                  " ",
                  n.ɵɵpipeBind1(30, 21, "action.cancel"),
                  " "
                ));
          },
          directives: [
            h.DefaultLayoutDirective,
            h.DefaultLayoutAlignDirective,
            p.MatCard,
            h.DefaultFlexDirective,
            p.MatCardTitle,
            v.TranslateDirective,
            i.NgIf,
            p.MatCardContent,
            r.ɵNgNoValidate,
            r.NgControlStatusGroup,
            r.FormGroupDirective,
            E.ToastDirective,
            c.MatFormField,
            c.MatLabel,
            I.MatInput,
            r.DefaultValueAccessor,
            r.NgControlStatus,
            r.FormControlName,
            r.EmailValidator,
            r.RequiredValidator,
            l.MatIcon,
            c.MatPrefix,
            h.DefaultLayoutGapDirective,
            O.MatButton,
            C.RouterLink,
            w.MatProgressBar,
            c.MatError,
          ],
          pipes: [i.AsyncPipe, v.TranslatePipe],
          styles: [
            '@charset "UTF-8";[_nghost-%COMP%]{display:flex;flex:1 1 0}[_nghost-%COMP%]   .tb-request-password-reset-content[_ngcontent-%COMP%]{background-color:#eee}@media screen and (min-width: 600px){[_nghost-%COMP%]   .tb-request-password-reset-content[_ngcontent-%COMP%]   .tb-request-password-reset-card[_ngcontent-%COMP%]{width:450px!important}}',
          ],
        }));
      class fe extends D.I {
        constructor(q, Y, he, ve, Ie) {
          super(q),
            (this.store = q),
            (this.route = Y),
            (this.authService = he),
            (this.translate = ve),
            (this.fb = Ie),
            (this.resetToken = ""),
            (this.resetPassword = this.fb.group({
              newPassword: [""],
              newPassword2: [""],
            }));
        }
        ngOnInit() {
          (this.isExpiredPassword = this.route.snapshot.data.expiredPassword),
            (this.sub = this.route.queryParams.subscribe((q) => {
              this.resetToken = q.resetToken || "";
            }));
        }
        ngOnDestroy() {
          super.ngOnDestroy(), this.sub.unsubscribe();
        }
        onResetPassword() {
          this.resetPassword.get("newPassword").value !==
          this.resetPassword.get("newPassword2").value
            ? this.store.dispatch(
                new H.zi({
                  message: this.translate.instant(
                    "login.passwords-mismatch-error"
                  ),
                  type: "error",
                })
              )
            : this.authService
                .resetPassword(
                  this.resetToken,
                  this.resetPassword.get("newPassword").value
                )
                .subscribe();
        }
      }
      function Ce(ae, q) {
        1 & ae && n.ɵɵelement(0, "mat-progress-bar", 19);
      }
      function Te(ae, q) {
        1 & ae && n.ɵɵelement(0, "span", 20);
      }
      (fe.ɵfac = function (q) {
        return new (q || fe)(
          n.ɵɵdirectiveInject(m.Store),
          n.ɵɵdirectiveInject(C.ActivatedRoute),
          n.ɵɵdirectiveInject(g.e),
          n.ɵɵdirectiveInject(v.TranslateService),
          n.ɵɵdirectiveInject(r.FormBuilder)
        );
      }),
        (fe.ɵcmp = n.ɵɵdefineComponent({
          type: fe,
          selectors: [["tb-reset-password"]],
          features: [n.ɵɵInheritDefinitionFeature],
          decls: 39,
          vars: 23,
          consts: [
            [
              "fxLayout",
              "row",
              "fxLayoutAlign",
              "center center",
              1,
              "tb-reset-password-content",
              "mat-app-background",
              "tb-dark",
              2,
              "width",
              "100%",
            ],
            ["fxFlex", "initial", 1, "tb-reset-password-card"],
            [1, "layout-padding", "tb-card-title"],
            ["translate", "", 1, "mat-headline", "tb-card-title"],
            ["class", "layout-padding tb-card-title", 4, "ngIf"],
            ["color", "warn", "mode", "indeterminate", 4, "ngIf"],
            ["style", "height: 4px;", 4, "ngIf"],
            [3, "formGroup", "ngSubmit"],
            [3, "disabled"],
            ["tb-toast", "", "fxLayout", "column", 1, "layout-padding"],
            [2, "height", "50px"],
            [1, "mat-block"],
            ["translate", ""],
            [
              "matInput",
              "",
              "type",
              "password",
              "autofocus",
              "",
              "formControlName",
              "newPassword",
            ],
            ["matPrefix", "", 1, "material-icons"],
            ["matSuffix", ""],
            [
              "matInput",
              "",
              "type",
              "password",
              "formControlName",
              "newPassword2",
            ],
            [
              "fxLayout",
              "column",
              "fxLayout.gt-sm",
              "row",
              "fxLayoutGap",
              "16px",
              "fxLayoutAlign",
              "start center",
              "fxLayoutAlign.gt-sm",
              "center start",
            ],
            [
              "mat-raised-button",
              "",
              "color",
              "accent",
              "type",
              "submit",
              3,
              "disabled",
            ],
            [
              "mat-raised-button",
              "",
              "color",
              "primary",
              "type",
              "button",
              "routerLink",
              "/login",
              3,
              "disabled",
            ],
            ["translate", "", 1, "tb-card-title"],
            ["color", "warn", "mode", "indeterminate"],
            [2, "height", "4px"],
          ],
          template: function (q, Y) {
            1 & q &&
              (n.ɵɵelementStart(0, "div", 0),
              n.ɵɵelementStart(1, "mat-card", 1),
              n.ɵɵelementStart(2, "mat-card-title", 2),
              n.ɵɵelementStart(3, "span", 3),
              n.ɵɵtext(4, "login.password-reset"),
              n.ɵɵelementEnd(),
              n.ɵɵelementEnd(),
              n.ɵɵtemplate(5, te, 3, 0, "mat-card-subtitle", 4),
              n.ɵɵtemplate(6, _e, 1, 0, "mat-progress-bar", 5),
              n.ɵɵpipe(7, "async"),
              n.ɵɵtemplate(8, me, 1, 0, "span", 6),
              n.ɵɵpipe(9, "async"),
              n.ɵɵelementStart(10, "mat-card-content"),
              n.ɵɵelementStart(11, "form", 7),
              n.ɵɵlistener("ngSubmit", function () {
                return Y.onResetPassword();
              }),
              n.ɵɵelementStart(12, "fieldset", 8),
              n.ɵɵpipe(13, "async"),
              n.ɵɵelementStart(14, "div", 9),
              n.ɵɵelement(15, "span", 10),
              n.ɵɵelementStart(16, "mat-form-field", 11),
              n.ɵɵelementStart(17, "mat-label", 12),
              n.ɵɵtext(18, "login.new-password"),
              n.ɵɵelementEnd(),
              n.ɵɵelement(19, "input", 13),
              n.ɵɵelementStart(20, "mat-icon", 14),
              n.ɵɵtext(21, "lock"),
              n.ɵɵelementEnd(),
              n.ɵɵelement(22, "tb-toggle-password", 15),
              n.ɵɵelementEnd(),
              n.ɵɵelementStart(23, "mat-form-field", 11),
              n.ɵɵelementStart(24, "mat-label", 12),
              n.ɵɵtext(25, "login.new-password-again"),
              n.ɵɵelementEnd(),
              n.ɵɵelement(26, "input", 16),
              n.ɵɵelementStart(27, "mat-icon", 14),
              n.ɵɵtext(28, "lock"),
              n.ɵɵelementEnd(),
              n.ɵɵelement(29, "tb-toggle-password", 15),
              n.ɵɵelementEnd(),
              n.ɵɵelementStart(30, "div", 17),
              n.ɵɵelementStart(31, "button", 18),
              n.ɵɵpipe(32, "async"),
              n.ɵɵtext(33),
              n.ɵɵpipe(34, "translate"),
              n.ɵɵelementEnd(),
              n.ɵɵelementStart(35, "button", 19),
              n.ɵɵpipe(36, "async"),
              n.ɵɵtext(37),
              n.ɵɵpipe(38, "translate"),
              n.ɵɵelementEnd(),
              n.ɵɵelementEnd(),
              n.ɵɵelementEnd(),
              n.ɵɵelementEnd(),
              n.ɵɵelementEnd(),
              n.ɵɵelementEnd(),
              n.ɵɵelementEnd(),
              n.ɵɵelementEnd()),
              2 & q &&
                (n.ɵɵadvance(5),
                n.ɵɵproperty("ngIf", Y.isExpiredPassword),
                n.ɵɵadvance(1),
                n.ɵɵproperty("ngIf", n.ɵɵpipeBind1(7, 9, Y.isLoading$)),
                n.ɵɵadvance(2),
                n.ɵɵproperty("ngIf", !n.ɵɵpipeBind1(9, 11, Y.isLoading$)),
                n.ɵɵadvance(3),
                n.ɵɵproperty("formGroup", Y.resetPassword),
                n.ɵɵadvance(1),
                n.ɵɵproperty("disabled", n.ɵɵpipeBind1(13, 13, Y.isLoading$)),
                n.ɵɵadvance(19),
                n.ɵɵproperty("disabled", n.ɵɵpipeBind1(32, 15, Y.isLoading$)),
                n.ɵɵadvance(2),
                n.ɵɵtextInterpolate1(
                  " ",
                  n.ɵɵpipeBind1(34, 17, "login.reset-password"),
                  " "
                ),
                n.ɵɵadvance(2),
                n.ɵɵproperty("disabled", n.ɵɵpipeBind1(36, 19, Y.isLoading$)),
                n.ɵɵadvance(2),
                n.ɵɵtextInterpolate1(
                  " ",
                  n.ɵɵpipeBind1(38, 21, "action.cancel"),
                  " "
                ));
          },
          directives: [
            h.DefaultLayoutDirective,
            h.DefaultLayoutAlignDirective,
            p.MatCard,
            h.DefaultFlexDirective,
            p.MatCardTitle,
            v.TranslateDirective,
            i.NgIf,
            p.MatCardContent,
            r.ɵNgNoValidate,
            r.NgControlStatusGroup,
            r.FormGroupDirective,
            E.ToastDirective,
            c.MatFormField,
            c.MatLabel,
            I.MatInput,
            r.DefaultValueAccessor,
            r.NgControlStatus,
            r.FormControlName,
            l.MatIcon,
            c.MatPrefix,
            T.TogglePasswordComponent,
            c.MatSuffix,
            h.DefaultLayoutGapDirective,
            O.MatButton,
            C.RouterLink,
            p.MatCardSubtitle,
            w.MatProgressBar,
          ],
          pipes: [i.AsyncPipe, v.TranslatePipe],
          styles: [
            '@charset "UTF-8";[_nghost-%COMP%]{display:flex;flex:1 1 0}[_nghost-%COMP%]   .tb-reset-password-content[_ngcontent-%COMP%]{background-color:#eee}@media screen and (min-width: 960px){[_nghost-%COMP%]   .tb-reset-password-content[_ngcontent-%COMP%]   .tb-reset-password-card[_ngcontent-%COMP%]{width:450px!important}}[_nghost-%COMP%]   .tb-reset-password-content[_ngcontent-%COMP%]   .tb-card-title[_ngcontent-%COMP%]{padding-top:0;padding-bottom:0}',
          ],
        }));
      class be extends D.I {
        constructor(q, Y, he, ve, Ie) {
          super(q),
            (this.store = q),
            (this.route = Y),
            (this.authService = he),
            (this.translate = ve),
            (this.fb = Ie),
            (this.activateToken = ""),
            (this.createPassword = this.fb.group({
              password: [""],
              password2: [""],
            }));
        }
        ngOnInit() {
          this.sub = this.route.queryParams.subscribe((q) => {
            this.activateToken = q.activateToken || "";
          });
        }
        ngOnDestroy() {
          super.ngOnDestroy(), this.sub.unsubscribe();
        }
        onCreatePassword() {
          this.createPassword.get("password").value !==
          this.createPassword.get("password2").value
            ? this.store.dispatch(
                new H.zi({
                  message: this.translate.instant(
                    "login.passwords-mismatch-error"
                  ),
                  type: "error",
                })
              )
            : this.authService
                .activate(
                  this.activateToken,
                  this.createPassword.get("password").value,
                  !0
                )
                .subscribe();
        }
      }
      (be.ɵfac = function (q) {
        return new (q || be)(
          n.ɵɵdirectiveInject(m.Store),
          n.ɵɵdirectiveInject(C.ActivatedRoute),
          n.ɵɵdirectiveInject(g.e),
          n.ɵɵdirectiveInject(v.TranslateService),
          n.ɵɵdirectiveInject(r.FormBuilder)
        );
      }),
        (be.ɵcmp = n.ɵɵdefineComponent({
          type: be,
          selectors: [["tb-create-password"]],
          features: [n.ɵɵInheritDefinitionFeature],
          decls: 38,
          vars: 22,
          consts: [
            [
              "fxLayout",
              "row",
              "fxLayoutAlign",
              "center center",
              1,
              "tb-create-password-content",
              "mat-app-background",
              "tb-dark",
              2,
              "width",
              "100%",
            ],
            ["fxFlex", "initial", 1, "tb-create-password-card"],
            [1, "layout-padding"],
            ["translate", "", 1, "mat-headline"],
            ["color", "warn", "mode", "indeterminate", 4, "ngIf"],
            ["style", "height: 4px;", 4, "ngIf"],
            [3, "formGroup", "ngSubmit"],
            [3, "disabled"],
            ["tb-toast", "", "fxLayout", "column", 1, "layout-padding"],
            [2, "height", "50px"],
            [1, "mat-block"],
            ["translate", ""],
            [
              "matInput",
              "",
              "type",
              "password",
              "autofocus",
              "",
              "formControlName",
              "password",
            ],
            ["matPrefix", "", 1, "material-icons"],
            ["matSuffix", ""],
            [
              "matInput",
              "",
              "type",
              "password",
              "formControlName",
              "password2",
            ],
            [
              "fxLayout",
              "column",
              "fxLayout.gt-xs",
              "row",
              "fxLayoutGap",
              "16px",
              "fxLayoutAlign",
              "start center",
              "fxLayoutAlign.gt-xs",
              "center start",
            ],
            [
              "mat-raised-button",
              "",
              "color",
              "accent",
              "type",
              "submit",
              3,
              "disabled",
            ],
            [
              "mat-raised-button",
              "",
              "color",
              "primary",
              "type",
              "button",
              "routerLink",
              "/login",
              3,
              "disabled",
            ],
            ["color", "warn", "mode", "indeterminate"],
            [2, "height", "4px"],
          ],
          template: function (q, Y) {
            1 & q &&
              (n.ɵɵelementStart(0, "div", 0),
              n.ɵɵelementStart(1, "mat-card", 1),
              n.ɵɵelementStart(2, "mat-card-title", 2),
              n.ɵɵelementStart(3, "span", 3),
              n.ɵɵtext(4, "login.create-password"),
              n.ɵɵelementEnd(),
              n.ɵɵelementEnd(),
              n.ɵɵtemplate(5, Ce, 1, 0, "mat-progress-bar", 4),
              n.ɵɵpipe(6, "async"),
              n.ɵɵtemplate(7, Te, 1, 0, "span", 5),
              n.ɵɵpipe(8, "async"),
              n.ɵɵelementStart(9, "mat-card-content"),
              n.ɵɵelementStart(10, "form", 6),
              n.ɵɵlistener("ngSubmit", function () {
                return Y.onCreatePassword();
              }),
              n.ɵɵelementStart(11, "fieldset", 7),
              n.ɵɵpipe(12, "async"),
              n.ɵɵelementStart(13, "div", 8),
              n.ɵɵelement(14, "span", 9),
              n.ɵɵelementStart(15, "mat-form-field", 10),
              n.ɵɵelementStart(16, "mat-label", 11),
              n.ɵɵtext(17, "common.password"),
              n.ɵɵelementEnd(),
              n.ɵɵelement(18, "input", 12),
              n.ɵɵelementStart(19, "mat-icon", 13),
              n.ɵɵtext(20, "lock"),
              n.ɵɵelementEnd(),
              n.ɵɵelement(21, "tb-toggle-password", 14),
              n.ɵɵelementEnd(),
              n.ɵɵelementStart(22, "mat-form-field", 10),
              n.ɵɵelementStart(23, "mat-label", 11),
              n.ɵɵtext(24, "login.password-again"),
              n.ɵɵelementEnd(),
              n.ɵɵelement(25, "input", 15),
              n.ɵɵelementStart(26, "mat-icon", 13),
              n.ɵɵtext(27, "lock"),
              n.ɵɵelementEnd(),
              n.ɵɵelement(28, "tb-toggle-password", 14),
              n.ɵɵelementEnd(),
              n.ɵɵelementStart(29, "div", 16),
              n.ɵɵelementStart(30, "button", 17),
              n.ɵɵpipe(31, "async"),
              n.ɵɵtext(32),
              n.ɵɵpipe(33, "translate"),
              n.ɵɵelementEnd(),
              n.ɵɵelementStart(34, "button", 18),
              n.ɵɵpipe(35, "async"),
              n.ɵɵtext(36),
              n.ɵɵpipe(37, "translate"),
              n.ɵɵelementEnd(),
              n.ɵɵelementEnd(),
              n.ɵɵelementEnd(),
              n.ɵɵelementEnd(),
              n.ɵɵelementEnd(),
              n.ɵɵelementEnd(),
              n.ɵɵelementEnd(),
              n.ɵɵelementEnd()),
              2 & q &&
                (n.ɵɵadvance(5),
                n.ɵɵproperty("ngIf", n.ɵɵpipeBind1(6, 8, Y.isLoading$)),
                n.ɵɵadvance(2),
                n.ɵɵproperty("ngIf", !n.ɵɵpipeBind1(8, 10, Y.isLoading$)),
                n.ɵɵadvance(3),
                n.ɵɵproperty("formGroup", Y.createPassword),
                n.ɵɵadvance(1),
                n.ɵɵproperty("disabled", n.ɵɵpipeBind1(12, 12, Y.isLoading$)),
                n.ɵɵadvance(19),
                n.ɵɵproperty("disabled", n.ɵɵpipeBind1(31, 14, Y.isLoading$)),
                n.ɵɵadvance(2),
                n.ɵɵtextInterpolate1(
                  " ",
                  n.ɵɵpipeBind1(33, 16, "login.create-password"),
                  " "
                ),
                n.ɵɵadvance(2),
                n.ɵɵproperty("disabled", n.ɵɵpipeBind1(35, 18, Y.isLoading$)),
                n.ɵɵadvance(2),
                n.ɵɵtextInterpolate1(
                  " ",
                  n.ɵɵpipeBind1(37, 20, "action.cancel"),
                  " "
                ));
          },
          directives: [
            h.DefaultLayoutDirective,
            h.DefaultLayoutAlignDirective,
            p.MatCard,
            h.DefaultFlexDirective,
            p.MatCardTitle,
            v.TranslateDirective,
            i.NgIf,
            p.MatCardContent,
            r.ɵNgNoValidate,
            r.NgControlStatusGroup,
            r.FormGroupDirective,
            E.ToastDirective,
            c.MatFormField,
            c.MatLabel,
            I.MatInput,
            r.DefaultValueAccessor,
            r.NgControlStatus,
            r.FormControlName,
            l.MatIcon,
            c.MatPrefix,
            T.TogglePasswordComponent,
            c.MatSuffix,
            h.DefaultLayoutGapDirective,
            O.MatButton,
            C.RouterLink,
            w.MatProgressBar,
          ],
          pipes: [i.AsyncPipe, v.TranslatePipe],
          styles: [
            '@charset "UTF-8";[_nghost-%COMP%]{display:flex;flex:1 1 0}[_nghost-%COMP%]   .tb-create-password-content[_ngcontent-%COMP%]{background-color:#eee}@media screen and (min-width: 600px){[_nghost-%COMP%]   .tb-create-password-content[_ngcontent-%COMP%]   .tb-create-password-card[_ngcontent-%COMP%]{width:450px!important}}',
          ],
        }));
      var tt = t(89181),
        Se = t(38845),
        nt = t(20945),
        Le = t(88030);
      function Ye(ae, q) {
        if (1 & ae) {
          const Y = n.ɵɵgetCurrentView();
          n.ɵɵelementContainerStart(0),
            n.ɵɵelementStart(1, "button", 9),
            n.ɵɵlistener("click", function () {
              const Ie = n.ɵɵrestoreView(Y).$implicit;
              return n.ɵɵnextContext(2).selectProvider(Ie);
            }),
            n.ɵɵelement(2, "mat-icon", 10),
            n.ɵɵtext(3),
            n.ɵɵpipe(4, "translate"),
            n.ɵɵelementEnd(),
            n.ɵɵelementContainerEnd();
        }
        if (2 & ae) {
          const Y = q.$implicit,
            he = n.ɵɵnextContext(2);
          n.ɵɵadvance(2),
            n.ɵɵpropertyInterpolate("svgIcon", he.providersData.get(Y).icon),
            n.ɵɵadvance(1),
            n.ɵɵtextInterpolate1(
              " ",
              n.ɵɵpipeBind1(4, 2, he.providersData.get(Y).name),
              " "
            );
        }
      }
      function Ke(ae, q) {
        if (
          (1 & ae &&
            (n.ɵɵelementStart(0, "div", 6),
            n.ɵɵelementStart(1, "p", 7),
            n.ɵɵtext(2, "login.select-way-to-verify"),
            n.ɵɵelementEnd(),
            n.ɵɵtemplate(3, Ye, 5, 4, "ng-container", 8),
            n.ɵɵelementEnd()),
          2 & ae)
        ) {
          const Y = n.ɵɵnextContext();
          n.ɵɵadvance(3), n.ɵɵproperty("ngForOf", Y.allowProviders);
        }
      }
      function dt(ae, q) {
        1 & ae &&
          (n.ɵɵelementStart(0, "mat-error"),
          n.ɵɵtext(1),
          n.ɵɵpipe(2, "translate"),
          n.ɵɵelementEnd()),
          2 & ae &&
            (n.ɵɵadvance(1),
            n.ɵɵtextInterpolate1(
              " ",
              n.ɵɵpipeBind1(
                2,
                1,
                "security.2fa.dialog.verification-code-invalid"
              ),
              " "
            ));
      }
      function Ct(ae, q) {
        1 & ae &&
          (n.ɵɵelementStart(0, "mat-error"),
          n.ɵɵtext(1),
          n.ɵɵpipe(2, "translate"),
          n.ɵɵelementEnd()),
          2 & ae &&
            (n.ɵɵadvance(1),
            n.ɵɵtextInterpolate1(
              " ",
              n.ɵɵpipeBind1(
                2,
                1,
                "security.2fa.dialog.verification-code-incorrect"
              ),
              " "
            ));
      }
      function mt(ae, q) {
        1 & ae &&
          (n.ɵɵelementStart(0, "mat-error"),
          n.ɵɵtext(1),
          n.ɵɵpipe(2, "translate"),
          n.ɵɵelementEnd()),
          2 & ae &&
            (n.ɵɵadvance(1),
            n.ɵɵtextInterpolate1(
              " ",
              n.ɵɵpipeBind1(
                2,
                1,
                "security.2fa.dialog.verification-code-many-request"
              ),
              " "
            ));
      }
      const vt = function (ae) {
        return { time: ae };
      };
      function ht(ae, q) {
        if (
          (1 & ae &&
            (n.ɵɵelementStart(0, "div", 28),
            n.ɵɵtext(1),
            n.ɵɵpipe(2, "translate"),
            n.ɵɵelementEnd()),
          2 & ae)
        ) {
          const Y = n.ɵɵnextContext(3);
          n.ɵɵadvance(1),
            n.ɵɵtextInterpolate1(
              " ",
              n.ɵɵpipeBind2(
                2,
                1,
                "login.resend-code-wait",
                n.ɵɵpureFunction1(4, vt, Y.countDownTime)
              ),
              " "
            );
        }
      }
      function gt(ae, q) {
        if (1 & ae) {
          const Y = n.ɵɵgetCurrentView();
          n.ɵɵelementStart(0, "div", 25),
            n.ɵɵtemplate(1, ht, 3, 6, "div", 26),
            n.ɵɵelementStart(2, "button", 27),
            n.ɵɵlistener("click", function (ve) {
              return n.ɵɵrestoreView(Y), n.ɵɵnextContext(2).sendCode(ve);
            }),
            n.ɵɵtext(3),
            n.ɵɵpipe(4, "translate"),
            n.ɵɵelementEnd(),
            n.ɵɵelementEnd();
        }
        if (2 & ae) {
          const Y = n.ɵɵnextContext(2);
          n.ɵɵadvance(1),
            n.ɵɵproperty("ngIf", Y.countDownTime),
            n.ɵɵadvance(1),
            n.ɵɵproperty("fxShow", !Y.hideResendButton),
            n.ɵɵadvance(1),
            n.ɵɵtextInterpolate1(
              " ",
              n.ɵɵpipeBind1(4, 3, "login.resend-code"),
              " "
            );
        }
      }
      function ct(ae, q) {
        if (1 & ae) {
          const Y = n.ɵɵgetCurrentView();
          n.ɵɵelementStart(0, "button", 29),
            n.ɵɵlistener("click", function () {
              return (
                n.ɵɵrestoreView(Y), n.ɵɵnextContext(2).selectProvider(null)
              );
            }),
            n.ɵɵtext(1),
            n.ɵɵpipe(2, "translate"),
            n.ɵɵelementEnd();
        }
        2 & ae &&
          (n.ɵɵadvance(1),
          n.ɵɵtextInterpolate1(
            " ",
            n.ɵɵpipeBind1(2, 1, "login.try-another-way"),
            " "
          ));
      }
      function ft(ae, q) {
        if (1 & ae) {
          const Y = n.ɵɵgetCurrentView();
          n.ɵɵelementStart(0, "form", 11),
            n.ɵɵlistener("ngSubmit", function () {
              return (
                n.ɵɵrestoreView(Y), n.ɵɵnextContext().sendVerificationCode()
              );
            }),
            n.ɵɵelementStart(1, "fieldset", 12),
            n.ɵɵpipe(2, "async"),
            n.ɵɵelementStart(3, "div", 13),
            n.ɵɵelementStart(4, "p", 14),
            n.ɵɵtext(5),
            n.ɵɵelementEnd(),
            n.ɵɵelementStart(6, "div", 15),
            n.ɵɵelementStart(7, "mat-form-field", 16),
            n.ɵɵelement(8, "mat-label"),
            n.ɵɵelement(9, "input", 17),
            n.ɵɵpipe(10, "translate"),
            n.ɵɵtemplate(11, dt, 3, 3, "mat-error", 18),
            n.ɵɵtemplate(12, Ct, 3, 3, "mat-error", 18),
            n.ɵɵtemplate(13, mt, 3, 3, "mat-error", 18),
            n.ɵɵelementEnd(),
            n.ɵɵelementEnd(),
            n.ɵɵelement(14, "span", 19),
            n.ɵɵelementStart(15, "button", 20),
            n.ɵɵpipe(16, "async"),
            n.ɵɵtext(17),
            n.ɵɵpipe(18, "translate"),
            n.ɵɵelementEnd(),
            n.ɵɵelement(19, "span", 21),
            n.ɵɵelementStart(20, "div", 22),
            n.ɵɵtemplate(21, gt, 5, 5, "div", 23),
            n.ɵɵtemplate(22, ct, 3, 3, "button", 24),
            n.ɵɵelementEnd(),
            n.ɵɵelementEnd(),
            n.ɵɵelementEnd(),
            n.ɵɵelementEnd();
        }
        if (2 & ae) {
          const Y = n.ɵɵnextContext();
          n.ɵɵproperty("formGroup", Y.verificationForm),
            n.ɵɵadvance(1),
            n.ɵɵproperty("disabled", n.ɵɵpipeBind1(2, 14, Y.isLoading$)),
            n.ɵɵadvance(4),
            n.ɵɵtextInterpolate(Y.providerDescription),
            n.ɵɵadvance(4),
            n.ɵɵpropertyInterpolate(
              "placeholder",
              n.ɵɵpipeBind1(
                10,
                16,
                Y.providersData.get(Y.selectedProvider).placeholder
              )
            ),
            n.ɵɵproperty("maxlength", Y.maxLengthInput)("pattern", Y.pattern),
            n.ɵɵattribute("inputmode", Y.inputMode),
            n.ɵɵadvance(2),
            n.ɵɵproperty(
              "ngIf",
              Y.verificationForm.get("verificationCode").getError("required") ||
                Y.verificationForm
                  .get("verificationCode")
                  .getError("minlength") ||
                Y.verificationForm
                  .get("verificationCode")
                  .getError("maxlength") ||
                Y.verificationForm.get("verificationCode").getError("pattern")
            ),
            n.ɵɵadvance(1),
            n.ɵɵproperty(
              "ngIf",
              Y.verificationForm
                .get("verificationCode")
                .getError("incorrectCode")
            ),
            n.ɵɵadvance(1),
            n.ɵɵproperty(
              "ngIf",
              Y.verificationForm
                .get("verificationCode")
                .getError("tooManyRequest")
            ),
            n.ɵɵadvance(2),
            n.ɵɵproperty(
              "disabled",
              n.ɵɵpipeBind1(16, 18, Y.isLoading$) || Y.verificationForm.invalid
            ),
            n.ɵɵadvance(2),
            n.ɵɵtextInterpolate1(
              " ",
              n.ɵɵpipeBind1(18, 20, "action.continue"),
              " "
            ),
            n.ɵɵadvance(4),
            n.ɵɵproperty("ngIf", Y.showResendAction),
            n.ɵɵadvance(1),
            n.ɵɵproperty("ngIf", Y.allowProviders.length > 1);
        }
      }
      class ke extends D.I {
        constructor(q, Y, he, ve, Ie) {
          super(q),
            (this.store = q),
            (this.twoFactorAuthService = Y),
            (this.authService = he),
            (this.translate = ve),
            (this.fb = Ie),
            (this.minVerificationPeriod = 0),
            (this.showResendAction = !1),
            (this.allowProviders = []),
            (this.providersData = Se.EC),
            (this.providerDescription = ""),
            (this.hideResendButton = !0),
            (this.countDownTime = 0),
            (this.maxLengthInput = 6),
            (this.inputMode = "numeric"),
            (this.pattern = "[0-9]*"),
            (this.verificationForm = this.fb.group({
              verificationCode: [
                "",
                [
                  r.Validators.required,
                  r.Validators.minLength(6),
                  r.Validators.maxLength(6),
                  r.Validators.pattern(/^\d*$/),
                ],
              ],
            }));
        }
        ngOnInit() {
          (this.providersInfo = this.authService.twoFactorAuthProviders),
            Object.values(Se.hs).forEach((q) => {
              const Y = this.providersInfo.find((he) => he.type === q);
              Y &&
                (Y.default &&
                  ((this.selectedProvider = Y.type),
                  (this.providerDescription = this.translate.instant(
                    this.providersData.get(Y.type).description,
                    { contact: Y.contact }
                  )),
                  (this.minVerificationPeriod =
                    (null == Y ? void 0 : Y.minVerificationCodeSendPeriod) ||
                    30)),
                this.allowProviders.push(Y.type));
            }),
            this.selectedProvider !== Se.hs.TOTP &&
              (this.sendCode(), (this.showResendAction = !0)),
            (this.timer = (0, nt.F)(1e3).subscribe(() => this.updatedTime()));
        }
        ngOnDestroy() {
          super.ngOnDestroy(),
            this.timer.unsubscribe(),
            clearTimeout(this.timerID);
        }
        sendVerificationCode() {
          this.verificationForm.valid &&
            this.selectedProvider &&
            this.authService
              .checkTwoFaVerificationCode(
                this.selectedProvider,
                this.verificationForm.get("verificationCode").value
              )
              .subscribe(
                () => {},
                (q) => {
                  400 === q.status
                    ? this.verificationForm
                        .get("verificationCode")
                        .setErrors({ incorrectCode: !0 })
                    : 429 === q.status
                    ? (this.verificationForm
                        .get("verificationCode")
                        .setErrors({ tooManyRequest: !0 }),
                      (this.timerID = setTimeout(() => {
                        let Y =
                          this.verificationForm.get("verificationCode").errors;
                        delete Y.tooManyRequest,
                          (0, pe.Xy)(Y, {}) && (Y = null),
                          this.verificationForm
                            .get("verificationCode")
                            .setErrors(Y);
                      }, 5e3)))
                    : this.store.dispatch(
                        new H.zi({
                          message: q.error.message,
                          type: "error",
                          verticalPosition: "top",
                          horizontalPosition: "left",
                        })
                      );
                }
              );
        }
        selectProvider(q) {
          if (
            ((this.prevProvider = null === q ? this.selectedProvider : null),
            (this.selectedProvider = q),
            (this.showResendAction = !1),
            null !== q)
          ) {
            this.verificationForm.get("verificationCode").reset();
            const Y = this.providersInfo.find((he) => he.type === q);
            (this.providerDescription = this.translate.instant(
              this.providersData.get(Y.type).description,
              { contact: Y.contact }
            )),
              q !== Se.hs.TOTP &&
                q !== Se.hs.BACKUP_CODE &&
                (this.sendCode(),
                (this.showResendAction = !0),
                (this.minVerificationPeriod =
                  (null == Y ? void 0 : Y.minVerificationCodeSendPeriod) ||
                  30)),
              q === Se.hs.BACKUP_CODE
                ? (this.verificationForm
                    .get("verificationCode")
                    .setValidators([
                      r.Validators.required,
                      r.Validators.minLength(8),
                      r.Validators.maxLength(8),
                      r.Validators.pattern(/^[\dabcdef]*$/),
                    ]),
                  (this.maxLengthInput = 8),
                  (this.inputMode = "text"),
                  (this.pattern = "[0-9abcdef]*"))
                : (this.verificationForm
                    .get("verificationCode")
                    .setValidators([
                      r.Validators.required,
                      r.Validators.minLength(6),
                      r.Validators.maxLength(6),
                      r.Validators.pattern(/^\d*$/),
                    ]),
                  (this.maxLengthInput = 6),
                  (this.inputMode = "numeric"),
                  (this.pattern = "[0-9]*")),
              this.verificationForm
                .get("verificationCode")
                .updateValueAndValidity({ emitEvent: !1 });
          }
        }
        sendCode(q) {
          q && q.stopPropagation(),
            (this.hideResendButton = !0),
            (this.countDownTime = 0),
            this.twoFactorAuthService
              .requestTwoFaVerificationCodeSend(this.selectedProvider)
              .subscribe(
                () => {
                  this.countDownTime = this.minVerificationPeriod;
                },
                () => {
                  this.countDownTime = this.minVerificationPeriod;
                }
              );
        }
        cancelLogin() {
          this.prevProvider
            ? this.selectProvider(this.prevProvider)
            : this.authService.logout();
        }
        updatedTime() {
          this.countDownTime > 0 &&
            (this.countDownTime--,
            0 === this.countDownTime && (this.hideResendButton = !1));
        }
      }
      (ke.ɵfac = function (q) {
        return new (q || ke)(
          n.ɵɵdirectiveInject(m.Store),
          n.ɵɵdirectiveInject(tt.b),
          n.ɵɵdirectiveInject(g.e),
          n.ɵɵdirectiveInject(v.TranslateService),
          n.ɵɵdirectiveInject(r.FormBuilder)
        );
      }),
        (ke.ɵcmp = n.ɵɵdefineComponent({
          type: ke,
          selectors: [["tb-two-factor-auth-login"]],
          features: [n.ɵɵInheritDefinitionFeature],
          decls: 11,
          vars: 5,
          consts: [
            [
              "fxLayout",
              "row",
              "fxLayoutAlign",
              "center center",
              1,
              "tb-two-factor-auth-login-content",
              "mat-app-background",
              "tb-dark",
              2,
              "width",
              "100%",
            ],
            ["fxFlex", "initial", 1, "tb-two-factor-auth-login-card"],
            [
              "fxLayout",
              "row",
              "fxLayoutAlign",
              "start center",
              1,
              "mat-headline",
            ],
            ["mat-icon-button", "", "type", "button", 3, "click"],
            [
              "class",
              "providers-container tb-default",
              "fxLayout",
              "column",
              "fxLayoutGap",
              "8px",
              4,
              "ngIf",
            ],
            [3, "formGroup", "ngSubmit", 4, "ngIf"],
            [
              "fxLayout",
              "column",
              "fxLayoutGap",
              "8px",
              1,
              "providers-container",
              "tb-default",
            ],
            ["translate", "", 1, "mat-body"],
            [4, "ngFor", "ngForOf"],
            [
              "type",
              "button",
              "mat-stroked-button",
              "",
              1,
              "provider",
              3,
              "click",
            ],
            [1, "icon", 3, "svgIcon"],
            [3, "formGroup", "ngSubmit"],
            [3, "disabled"],
            ["tb-toast", "", "fxLayout", "column"],
            [1, "mat-body"],
            ["fxLayout", "row", "fxLayoutGap", "8px", 1, "code-block"],
            [
              "fxFlex",
              "",
              "floatLabel",
              "always",
              "hideRequiredMarker",
              "",
              1,
              "mat-block",
            ],
            [
              "matInput",
              "",
              "formControlName",
              "verificationCode",
              "required",
              "",
              "type",
              "text",
              "autocomplete",
              "off",
              3,
              "maxlength",
              "pattern",
              "placeholder",
            ],
            [4, "ngIf"],
            [2, "height", "50px"],
            [
              "mat-raised-button",
              "",
              "color",
              "accent",
              "type",
              "submit",
              3,
              "disabled",
            ],
            [2, "height", "16px"],
            [
              "fxLayout",
              "row",
              "fxLayoutAlign",
              "space-between center",
              "fxLayoutGap",
              "8px",
              1,
              "action-row",
            ],
            [
              "fxFlex",
              "",
              "fxLayoutAlign",
              "center center",
              "class",
              "action-resend",
              4,
              "ngIf",
            ],
            [
              "mat-button",
              "",
              "fxFlex",
              "",
              "type",
              "button",
              3,
              "click",
              4,
              "ngIf",
            ],
            [
              "fxFlex",
              "",
              "fxLayoutAlign",
              "center center",
              1,
              "action-resend",
            ],
            ["class", "timer", 4, "ngIf"],
            [
              "mat-button",
              "",
              "fxFlex",
              "",
              "type",
              "button",
              3,
              "fxShow",
              "click",
            ],
            [1, "timer"],
            ["mat-button", "", "fxFlex", "", "type", "button", 3, "click"],
          ],
          template: function (q, Y) {
            1 & q &&
              (n.ɵɵelementStart(0, "div", 0),
              n.ɵɵelementStart(1, "mat-card", 1),
              n.ɵɵelementStart(2, "mat-card-title", 2),
              n.ɵɵelementStart(3, "button", 3),
              n.ɵɵlistener("click", function () {
                return Y.cancelLogin();
              }),
              n.ɵɵelementStart(4, "mat-icon"),
              n.ɵɵtext(5, "chevron_left"),
              n.ɵɵelementEnd(),
              n.ɵɵelementEnd(),
              n.ɵɵtext(6),
              n.ɵɵpipe(7, "translate"),
              n.ɵɵelementEnd(),
              n.ɵɵelementStart(8, "mat-card-content"),
              n.ɵɵtemplate(9, Ke, 4, 1, "div", 4),
              n.ɵɵtemplate(10, ft, 23, 22, "form", 5),
              n.ɵɵelementEnd(),
              n.ɵɵelementEnd(),
              n.ɵɵelementEnd()),
              2 & q &&
                (n.ɵɵadvance(6),
                n.ɵɵtextInterpolate1(
                  " ",
                  n.ɵɵpipeBind1(7, 3, "login.verify-your-identity"),
                  " "
                ),
                n.ɵɵadvance(3),
                n.ɵɵproperty("ngIf", !Y.selectedProvider),
                n.ɵɵadvance(1),
                n.ɵɵproperty("ngIf", Y.selectedProvider));
          },
          directives: [
            h.DefaultLayoutDirective,
            h.DefaultLayoutAlignDirective,
            p.MatCard,
            h.DefaultFlexDirective,
            p.MatCardTitle,
            O.MatButton,
            l.MatIcon,
            p.MatCardContent,
            i.NgIf,
            h.DefaultLayoutGapDirective,
            v.TranslateDirective,
            i.NgForOf,
            r.ɵNgNoValidate,
            r.NgControlStatusGroup,
            r.FormGroupDirective,
            E.ToastDirective,
            c.MatFormField,
            c.MatLabel,
            I.MatInput,
            r.DefaultValueAccessor,
            r.NgControlStatus,
            r.FormControlName,
            r.RequiredValidator,
            r.MaxLengthValidator,
            r.PatternValidator,
            c.MatError,
            Le.DefaultShowHideDirective,
          ],
          pipes: [v.TranslatePipe, i.AsyncPipe],
          styles: [
            '@charset "UTF-8";[_nghost-%COMP%]{display:flex;flex:1 1 0}[_nghost-%COMP%]   .tb-two-factor-auth-login-content[_ngcontent-%COMP%]{background-color:#eee}[_nghost-%COMP%]   .tb-two-factor-auth-login-content[_ngcontent-%COMP%]   .tb-two-factor-auth-login-card[_ngcontent-%COMP%]{padding:48px 48px 48px 16px}@media screen and (min-width: 600px){[_nghost-%COMP%]   .tb-two-factor-auth-login-content[_ngcontent-%COMP%]   .tb-two-factor-auth-login-card[_ngcontent-%COMP%]{width:450px!important}}[_nghost-%COMP%]   .tb-two-factor-auth-login-content[_ngcontent-%COMP%]   .tb-two-factor-auth-login-card[_ngcontent-%COMP%]   .mat-card-title[_ngcontent-%COMP%]{font:400 28px/36px Roboto,"Helvetica Neue",sans-serif}[_nghost-%COMP%]   .tb-two-factor-auth-login-content[_ngcontent-%COMP%]   .tb-two-factor-auth-login-card[_ngcontent-%COMP%]   .mat-card-content[_ngcontent-%COMP%]{margin-top:44px;margin-left:40px}[_nghost-%COMP%]   .tb-two-factor-auth-login-content[_ngcontent-%COMP%]   .tb-two-factor-auth-login-card[_ngcontent-%COMP%]   .mat-body[_ngcontent-%COMP%]{letter-spacing:.25px;line-height:16px;margin:0}[_nghost-%COMP%]   .tb-two-factor-auth-login-content[_ngcontent-%COMP%]   .tb-two-factor-auth-login-card[_ngcontent-%COMP%]   .code-block[_ngcontent-%COMP%]{margin-top:16px}[_nghost-%COMP%]   .tb-two-factor-auth-login-content[_ngcontent-%COMP%]   .tb-two-factor-auth-login-card[_ngcontent-%COMP%]   .providers-container[_ngcontent-%COMP%]{padding:0}[_nghost-%COMP%]   .tb-two-factor-auth-login-content[_ngcontent-%COMP%]   .tb-two-factor-auth-login-card[_ngcontent-%COMP%]   .providers-container[_ngcontent-%COMP%]   .mat-body[_ngcontent-%COMP%]{padding-bottom:8px}[_nghost-%COMP%]   .tb-two-factor-auth-login-content[_ngcontent-%COMP%]   .tb-two-factor-auth-login-card[_ngcontent-%COMP%]   .timer[_ngcontent-%COMP%]{font:500 12px/14px Roboto,"Helvetica Neue",sans-serif;color:#fffc}[_nghost-%COMP%]   .tb-two-factor-auth-login-content[_ngcontent-%COMP%]   .tb-two-factor-auth-login-card[_ngcontent-%COMP%]   .action-row[_ngcontent-%COMP%]:nth-child(n){min-height:36px}[_nghost-%COMP%]   .tb-two-factor-auth-login-content[_ngcontent-%COMP%]   .tb-two-factor-auth-login-card[_ngcontent-%COMP%]   .action-row[_ngcontent-%COMP%]:nth-child(n)   .action-resend[_ngcontent-%COMP%]{min-width:50%}[_nghost-%COMP%]     button.provider{text-align:start;font-weight:400}[_nghost-%COMP%]     button.provider:not(.mat-button-disabled){border-color:#fffc}[_nghost-%COMP%]     button.provider .icon{height:18px;width:18px;vertical-align:sub}[_nghost-%COMP%]     .mat-form-field-invalid .mat-hint{margin-top:20px}',
          ],
        }));
      const z = [
        {
          path: "login",
          component: N,
          data: { title: "login.login", module: "public" },
          canActivate: [K],
        },
        {
          path: "login/resetPasswordRequest",
          component: J,
          data: { title: "login.request-password-reset", module: "public" },
          canActivate: [K],
        },
        {
          path: "login/resetPassword",
          component: fe,
          data: { title: "login.reset-password", module: "public" },
          canActivate: [K],
        },
        {
          path: "login/resetExpiredPassword",
          component: fe,
          data: {
            title: "login.reset-password",
            module: "public",
            expiredPassword: !0,
          },
          canActivate: [K],
        },
        {
          path: "login/createPassword",
          component: be,
          data: { title: "login.create-password", module: "public" },
          canActivate: [K],
        },
        {
          path: "login/mfa",
          component: ke,
          data: {
            title: "login.two-factor-authentication",
            auth: [ne.W.PRE_VERIFICATION_TOKEN],
            module: "public",
          },
          canActivate: [K],
        },
      ];
      class oe {}
      (oe.ɵfac = function (q) {
        return new (q || oe)();
      }),
        (oe.ɵmod = n.ɵɵdefineNgModule({ type: oe })),
        (oe.ɵinj = n.ɵɵdefineInjector({
          imports: [[C.RouterModule.forChild(z)], C.RouterModule],
        })),
        ("undefined" == typeof ngJitMode || ngJitMode) &&
          n.ɵɵsetNgModuleScope(oe, {
            imports: [C.RouterModule],
            exports: [C.RouterModule],
          });
      var ie = t(68786);
      class ce {}
      (ce.ɵfac = function (q) {
        return new (q || ce)();
      }),
        (ce.ɵmod = n.ɵɵdefineNgModule({ type: ce })),
        (ce.ɵinj = n.ɵɵdefineInjector({
          imports: [[i.CommonModule, ie.m, oe]],
        })),
        ("undefined" == typeof ngJitMode || ngJitMode) &&
          n.ɵɵsetNgModuleScope(ce, {
            declarations: [N, J, fe, be, ke],
            imports: [i.CommonModule, ie.m, oe],
          });
      var ue = t(22759),
        Ee = t(54395),
        ye = t(87519),
        Oe = t(68307),
        Pe = t(45106),
        Ne = t(11877);
      var _t = t(65072),
        Mt = t(94935),
        Kt = t(12522),
        Nt = t(48145);
      function Ft(ae, q) {
        if (
          (1 & ae &&
            (n.ɵɵelementStart(0, "mat-icon", 3), n.ɵɵtext(1), n.ɵɵelementEnd()),
          2 & ae)
        ) {
          const Y = n.ɵɵnextContext();
          n.ɵɵadvance(1), n.ɵɵtextInterpolate(Y.section.icon);
        }
      }
      function Tt(ae, q) {
        if ((1 & ae && n.ɵɵelement(0, "mat-icon", 4), 2 & ae)) {
          const Y = n.ɵɵnextContext();
          n.ɵɵproperty("svgIcon", Y.section.icon);
        }
      }
      const It = function () {
        return {
          paths: "exact",
          queryParams: "ignored",
          matrixParams: "ignored",
          fragment: "ignored",
        };
      };
      class Je {
        constructor() {}
        ngOnInit() {}
      }
      (Je.ɵfac = function (q) {
        return new (q || Je)();
      }),
        (Je.ɵcmp = n.ɵɵdefineComponent({
          type: Je,
          selectors: [["tb-menu-link"]],
          inputs: { section: "section" },
          decls: 6,
          vars: 8,
          consts: [
            [
              "mat-button",
              "",
              "routerLinkActive",
              "tb-active",
              3,
              "routerLinkActiveOptions",
              "routerLink",
            ],
            ["class", "material-icons", 4, "ngIf"],
            [3, "svgIcon", 4, "ngIf"],
            [1, "material-icons"],
            [3, "svgIcon"],
          ],
          template: function (q, Y) {
            1 & q &&
              (n.ɵɵelementStart(0, "a", 0),
              n.ɵɵtemplate(1, Ft, 2, 1, "mat-icon", 1),
              n.ɵɵtemplate(2, Tt, 1, 1, "mat-icon", 2),
              n.ɵɵelementStart(3, "span"),
              n.ɵɵtext(4),
              n.ɵɵpipe(5, "translate"),
              n.ɵɵelementEnd(),
              n.ɵɵelementEnd()),
              2 & q &&
                (n.ɵɵpropertyInterpolate("routerLink", Y.section.path),
                n.ɵɵproperty(
                  "routerLinkActiveOptions",
                  n.ɵɵpureFunction0(7, It)
                ),
                n.ɵɵadvance(1),
                n.ɵɵproperty(
                  "ngIf",
                  !Y.section.isMdiIcon && null != Y.section.icon
                ),
                n.ɵɵadvance(1),
                n.ɵɵproperty(
                  "ngIf",
                  Y.section.isMdiIcon && null != Y.section.icon
                ),
                n.ɵɵadvance(2),
                n.ɵɵtextInterpolate(n.ɵɵpipeBind1(5, 5, Y.section.name)));
          },
          directives: [
            O.MatAnchor,
            C.RouterLinkWithHref,
            C.RouterLinkActive,
            i.NgIf,
            l.MatIcon,
          ],
          pipes: [v.TranslatePipe],
          styles: ['@charset "UTF-8";'],
          changeDetection: 0,
        }));
      var Vt = t(86842);
      function jt(ae, q) {
        if (
          (1 & ae &&
            (n.ɵɵelementStart(0, "mat-icon", 6), n.ɵɵtext(1), n.ɵɵelementEnd()),
          2 & ae)
        ) {
          const Y = n.ɵɵnextContext();
          n.ɵɵadvance(1), n.ɵɵtextInterpolate(Y.section.icon);
        }
      }
      function Dt(ae, q) {
        if ((1 & ae && n.ɵɵelement(0, "mat-icon", 7), 2 & ae)) {
          const Y = n.ɵɵnextContext();
          n.ɵɵproperty("svgIcon", Y.section.icon);
        }
      }
      function kt(ae, q) {
        if (
          (1 & ae &&
            (n.ɵɵelementStart(0, "li"),
            n.ɵɵelement(1, "tb-menu-link", 8),
            n.ɵɵelementEnd()),
          2 & ae)
        ) {
          const Y = q.$implicit;
          n.ɵɵadvance(1), n.ɵɵproperty("section", Y);
        }
      }
      const Gt = function () {
          return {
            paths: "exact",
            queryParams: "ignored",
            matrixParams: "ignored",
            fragment: "ignored",
          };
        },
        Ht = function (ae) {
          return { "tb-toggled": ae };
        },
        zt = function (ae) {
          return { height: ae };
        };
      class ot {
        constructor(q) {
          this.router = q;
        }
        ngOnInit() {}
        sectionActive() {
          return this.router.isActive(this.section.path, !1);
        }
        sectionHeight() {
          return this.router.isActive(this.section.path, !1)
            ? this.section.height
            : "0px";
        }
        trackBySectionPages(q, Y) {
          return Y.id;
        }
      }
      function $t(ae, q) {
        if ((1 & ae && n.ɵɵelement(0, "tb-menu-link", 4), 2 & ae)) {
          const Y = n.ɵɵnextContext().$implicit;
          n.ɵɵproperty("section", Y);
        }
      }
      function Qt(ae, q) {
        if ((1 & ae && n.ɵɵelement(0, "tb-menu-toggle", 4), 2 & ae)) {
          const Y = n.ɵɵnextContext().$implicit;
          n.ɵɵproperty("section", Y);
        }
      }
      function Yt(ae, q) {
        if (
          (1 & ae &&
            (n.ɵɵelementStart(0, "li", 2),
            n.ɵɵtemplate(1, $t, 1, 1, "tb-menu-link", 3),
            n.ɵɵtemplate(2, Qt, 1, 1, "tb-menu-toggle", 3),
            n.ɵɵelementEnd()),
          2 & ae)
        ) {
          const Y = q.$implicit;
          n.ɵɵproperty("ngSwitch", "link" === Y.type),
            n.ɵɵadvance(1),
            n.ɵɵproperty("ngSwitchCase", !0),
            n.ɵɵadvance(1),
            n.ɵɵproperty("ngSwitchCase", !1);
        }
      }
      (ot.ɵfac = function (q) {
        return new (q || ot)(n.ɵɵdirectiveInject(C.Router));
      }),
        (ot.ɵcmp = n.ɵɵdefineComponent({
          type: ot,
          selectors: [["tb-menu-toggle"]],
          inputs: { section: "section" },
          decls: 10,
          vars: 19,
          consts: [
            [
              "mat-button",
              "",
              "routerLinkActive",
              "tb-active",
              1,
              "tb-button-toggle",
              3,
              "routerLinkActiveOptions",
              "routerLink",
            ],
            ["class", "material-icons", 4, "ngIf"],
            [3, "svgIcon", 4, "ngIf"],
            [
              1,
              "pull-right",
              "fa",
              "fa-chevron-down",
              "tb-toggle-icon",
              3,
              "ngClass",
            ],
            [1, "tb-menu-toggle-list", 3, "id", "ngStyle"],
            [4, "ngFor", "ngForOf", "ngForTrackBy"],
            [1, "material-icons"],
            [3, "svgIcon"],
            [3, "section"],
          ],
          template: function (q, Y) {
            1 & q &&
              (n.ɵɵelementStart(0, "a", 0),
              n.ɵɵtemplate(1, jt, 2, 1, "mat-icon", 1),
              n.ɵɵtemplate(2, Dt, 1, 1, "mat-icon", 2),
              n.ɵɵelementStart(3, "span"),
              n.ɵɵtext(4),
              n.ɵɵpipe(5, "translate"),
              n.ɵɵelementEnd(),
              n.ɵɵelement(6, "span", 3),
              n.ɵɵelementEnd(),
              n.ɵɵelementStart(7, "ul", 4),
              n.ɵɵpipe(8, "nospace"),
              n.ɵɵtemplate(9, kt, 2, 1, "li", 5),
              n.ɵɵelementEnd()),
              2 & q &&
                (n.ɵɵpropertyInterpolate("routerLink", Y.section.path),
                n.ɵɵproperty(
                  "routerLinkActiveOptions",
                  n.ɵɵpureFunction0(14, Gt)
                ),
                n.ɵɵadvance(1),
                n.ɵɵproperty(
                  "ngIf",
                  !Y.section.isMdiIcon && null != Y.section.icon
                ),
                n.ɵɵadvance(1),
                n.ɵɵproperty(
                  "ngIf",
                  Y.section.isMdiIcon && null != Y.section.icon
                ),
                n.ɵɵadvance(2),
                n.ɵɵtextInterpolate(n.ɵɵpipeBind1(5, 10, Y.section.name)),
                n.ɵɵadvance(2),
                n.ɵɵproperty(
                  "ngClass",
                  n.ɵɵpureFunction1(15, Ht, Y.sectionActive())
                ),
                n.ɵɵadvance(1),
                n.ɵɵpropertyInterpolate1(
                  "id",
                  "docs-menu-",
                  n.ɵɵpipeBind1(8, 12, Y.section.name),
                  ""
                ),
                n.ɵɵproperty(
                  "ngStyle",
                  n.ɵɵpureFunction1(17, zt, Y.sectionHeight())
                ),
                n.ɵɵadvance(2),
                n.ɵɵproperty("ngForOf", Y.section.pages)(
                  "ngForTrackBy",
                  Y.trackBySectionPages
                ));
          },
          directives: [
            O.MatAnchor,
            C.RouterLinkWithHref,
            C.RouterLinkActive,
            i.NgIf,
            i.NgClass,
            Le.DefaultClassDirective,
            i.NgStyle,
            Le.DefaultStyleDirective,
            i.NgForOf,
            l.MatIcon,
            Je,
          ],
          pipes: [v.TranslatePipe, Vt.NospacePipe],
          styles: [
            '@charset "UTF-8";[_nghost-%COMP%]     .tb-button-toggle .tb-toggle-icon{display:inline-block;width:15px;margin:auto 0 auto auto;background-size:100% auto;transition:transform .3s ease-in-out}[_nghost-%COMP%]     .tb-button-toggle .tb-toggle-icon.tb-toggled{transform:rotate(180deg)}[_nghost-%COMP%]     .tb-menu-toggle-list{position:relative;z-index:1;overflow:hidden;transition:.75s cubic-bezier(.35,0,.25,1);transition-property:height}[_nghost-%COMP%]     .tb-menu-toggle-list a.mat-button{padding:0 16px 0 32px;font-weight:500;text-transform:none!important;text-rendering:optimizeLegibility}',
          ],
          changeDetection: 0,
        }));
      class Xe {
        constructor(q) {
          (this.menuService = q),
            (this.menuSections$ = this.menuService.menuSections());
        }
        trackByMenuSection(q, Y) {
          return Y.id;
        }
        ngOnInit() {}
      }
      (Xe.ɵfac = function (q) {
        return new (q || Xe)(n.ɵɵdirectiveInject(Nt.h));
      }),
        (Xe.ɵcmp = n.ɵɵdefineComponent({
          type: Xe,
          selectors: [["tb-side-menu"]],
          decls: 3,
          vars: 4,
          consts: [
            [
              "fxFlex",
              "",
              "fxLayout",
              "column",
              "fxLayoutAlign",
              "start stretch",
              1,
              "tb-side-menu",
            ],
            [3, "ngSwitch", 4, "ngFor", "ngForOf", "ngForTrackBy"],
            [3, "ngSwitch"],
            [3, "section", 4, "ngSwitchCase"],
            [3, "section"],
          ],
          template: function (q, Y) {
            1 & q &&
              (n.ɵɵelementStart(0, "ul", 0),
              n.ɵɵtemplate(1, Yt, 3, 3, "li", 1),
              n.ɵɵpipe(2, "async"),
              n.ɵɵelementEnd()),
              2 & q &&
                (n.ɵɵadvance(1),
                n.ɵɵproperty("ngForOf", n.ɵɵpipeBind1(2, 2, Y.menuSections$))(
                  "ngForTrackBy",
                  Y.trackByMenuSection
                ));
          },
          directives: [
            h.DefaultFlexDirective,
            h.DefaultLayoutDirective,
            h.DefaultLayoutAlignDirective,
            i.NgForOf,
            i.NgSwitch,
            i.NgSwitchCase,
            Je,
            ot,
          ],
          pipes: [i.AsyncPipe],
          styles: [
            '@charset "UTF-8";[_nghost-%COMP%]{width:100%}[_nghost-%COMP%]     .tb-side-menu, [_nghost-%COMP%]     .tb-side-menu ul{padding:0;margin-top:0;list-style:none}[_nghost-%COMP%]     .tb-side-menu>li{border-bottom:1px solid rgba(0,0,0,.12)}[_nghost-%COMP%]     a.mat-button{display:flex;overflow:hidden;line-height:40px;border-radius:0}[_nghost-%COMP%]     a.mat-button:hover{border-bottom:none;background-color:#ffffff14}[_nghost-%COMP%]     a.mat-button:focus{border-bottom:none}[_nghost-%COMP%]     a.mat-button.tb-active{font-weight:500;background-color:#ffffff26}[_nghost-%COMP%]     a.mat-button .mat-button-wrapper{width:100%;display:inline-flex;align-items:center}[_nghost-%COMP%]     a.mat-button .mat-button-wrapper mat-icon{margin-right:8px;margin-left:0}[_nghost-%COMP%]     a.mat-button .mat-button-wrapper span{overflow:hidden;text-overflow:ellipsis;white-space:nowrap}[_nghost-%COMP%]     a.mat-button .mat-button-wrapper span.tb-toggle-icon{padding-top:12px;padding-bottom:12px}',
          ],
          changeDetection: 0,
        }));
      var At = t(1844),
        Ot = t(84529);
      const Rt = ["sidenav"],
        Jt = ["searchInput"];
      function Xt(ae, q) {
        if (1 & ae) {
          const Y = n.ɵɵgetCurrentView();
          n.ɵɵelementStart(0, "button", 24),
            n.ɵɵlistener("click", function () {
              return n.ɵɵrestoreView(Y), n.ɵɵnextContext().toggleFullscreen();
            }),
            n.ɵɵelementStart(1, "mat-icon", 10),
            n.ɵɵtext(2),
            n.ɵɵelementEnd(),
            n.ɵɵelementEnd();
        }
        if (2 & ae) {
          const Y = n.ɵɵnextContext();
          n.ɵɵproperty("fxShow", !Y.displaySearchMode()),
            n.ɵɵadvance(2),
            n.ɵɵtextInterpolate(
              Y.isFullscreen() ? "fullscreen_exit" : "fullscreen"
            );
        }
      }
      function Zt(ae, q) {
        1 & ae && n.ɵɵelement(0, "mat-progress-bar", 25);
      }
      const Pt = function (ae) {
        return { "tb-invisible": ae };
      };
      class at extends D.I {
        constructor(q, Y, he) {
          super(q),
            (this.store = q),
            (this.window = Y),
            (this.breakpointObserver = he),
            (this.authState = (0, B.dE)(this.store)),
            (this.forceFullscreen = this.authState.forceFullscreen),
            (this.sidenavMode = "side"),
            (this.sidenavOpened = !0),
            (this.logo = "assets/logo_title_white.svg"),
            (this.fullscreenEnabled = Pe.Z.isEnabled),
            (this.searchEnabled = !1),
            (this.showSearch = !1),
            (this.searchText = "");
        }
        ngOnInit() {
          (this.authUser$ = this.store.pipe((0, m.select)(B.rk))),
            (this.userDetails$ = this.store.pipe((0, m.select)(B.uy))),
            (this.userDetailsString = this.userDetails$.pipe(
              (0, P.U)((Y) => JSON.stringify(Y))
            ));
          const q = this.breakpointObserver.isMatched(y.tr["gt-sm"]);
          (this.sidenavMode = q ? "side" : "over"),
            (this.sidenavOpened = q),
            this.breakpointObserver.observe(y.tr["gt-sm"]).subscribe((Y) => {
              Y.matches
                ? ((this.sidenavMode = "side"), (this.sidenavOpened = !0))
                : ((this.sidenavMode = "over"), (this.sidenavOpened = !1));
            });
        }
        ngAfterViewInit() {
          (0, ue.R)(this.searchInputField.nativeElement, "keyup")
            .pipe(
              (0, Ee.b)(150),
              (0, ye.x)(),
              (0, Oe.b)(() => {
                this.searchTextUpdated();
              })
            )
            .subscribe();
        }
        sidenavClicked() {
          "over" === this.sidenavMode && this.sidenav.toggle();
        }
        toggleFullscreen() {
          Pe.Z.isEnabled && Pe.Z.toggle();
        }
        isFullscreen() {
          return Pe.Z.isFullscreen;
        }
        goBack() {
          this.window.history.back();
        }
        activeComponentChanged(q) {
          (this.showSearch = !1),
            (this.searchText = ""),
            (this.activeComponent = q),
            this.activeComponent &&
            "onSearchTextUpdated" in this.activeComponent
              ? ((this.searchEnabled = !0),
                (this.searchableComponent = this.activeComponent))
              : ((this.searchEnabled = !1), (this.searchableComponent = null));
        }
        displaySearchMode() {
          return this.searchEnabled && this.showSearch;
        }
        openSearch() {
          this.searchEnabled &&
            ((this.showSearch = !0),
            setTimeout(() => {
              this.searchInputField.nativeElement.focus(),
                this.searchInputField.nativeElement.setSelectionRange(0, 0);
            }, 10));
        }
        closeSearch() {
          this.searchEnabled &&
            ((this.showSearch = !1),
            this.searchText.length &&
              ((this.searchText = ""), this.searchTextUpdated()));
        }
        searchTextUpdated() {
          this.searchableComponent &&
            this.searchableComponent.onSearchTextUpdated(this.searchText);
        }
      }
      (at.ɵfac = function (q) {
        return new (q || at)(
          n.ɵɵdirectiveInject(m.Store),
          n.ɵɵdirectiveInject(Ne.m9),
          n.ɵɵdirectiveInject(_t.BreakpointObserver)
        );
      }),
        (at.ɵcmp = n.ɵɵdefineComponent({
          type: at,
          selectors: [["tb-home"]],
          viewQuery: function (q, Y) {
            if (
              (1 & q && (n.ɵɵviewQuery(Rt, 5), n.ɵɵviewQuery(Jt, 5)), 2 & q)
            ) {
              let he;
              n.ɵɵqueryRefresh((he = n.ɵɵloadQuery())) &&
                (Y.sidenav = he.first),
                n.ɵɵqueryRefresh((he = n.ɵɵloadQuery())) &&
                  (Y.searchInputField = he.first);
            }
          },
          features: [n.ɵɵInheritDefinitionFeature],
          decls: 37,
          vars: 28,
          consts: [
            [
              1,
              "tb-site-sidenav",
              "mat-elevation-z2",
              3,
              "disableClose",
              "mode",
              "opened",
              "click",
            ],
            ["sidenav", ""],
            [1, "tb-nav-header"],
            ["color", "primary", 1, "tb-nav-header-toolbar"],
            ["fxFlex", "auto", "fxLayout", "row"],
            ["aria-label", "logo", 1, "tb-logo-title", 3, "src"],
            [
              "color",
              "primary",
              "fxFlex",
              "0%",
              "fxLayout",
              "column",
              "role",
              "navigation",
              1,
              "tb-side-menu-toolbar",
            ],
            ["fxLayout", "column", "role", "main", 2, "height", "100%"],
            [
              "fxLayout",
              "row",
              "color",
              "primary",
              1,
              "mat-elevation-z1",
              "tb-primary-toolbar",
            ],
            [
              "mat-icon-button",
              "",
              "id",
              "main",
              "fxHide.gt-sm",
              "",
              3,
              "fxShow",
              "ngClass",
              "click",
            ],
            [1, "material-icons"],
            ["mat-icon-button", "", 3, "fxShow", "ngClass", "click"],
            ["mat-icon-button", "", 3, "ngClass", "click"],
            [
              "fxFlex",
              "",
              1,
              "mat-toolbar-tools",
              3,
              "fxShow",
              "activeComponent",
            ],
            ["fxFlex", "", "fxLayout", "row", 1, "tb-dark", 3, "fxShow"],
            ["fxFlex", "", "floatLabel", "always"],
            ["matInput", "", 3, "ngModel", "placeholder", "ngModelChange"],
            ["searchInput", ""],
            ["mat-icon-button", "", 3, "fxShow", "click"],
            [
              "mat-icon-button",
              "",
              "fxHide.lt-md",
              "",
              3,
              "fxShow",
              "click",
              4,
              "ngIf",
            ],
            [3, "displayUserInfo"],
            [
              "color",
              "warn",
              "style",
              "z-index: 10; margin-bottom: -4px; width: 100%;",
              "mode",
              "indeterminate",
              4,
              "ngIf",
            ],
            [
              "fxFlex",
              "",
              "fxLayout",
              "column",
              "tb-toast",
              "",
              1,
              "tb-main-content",
            ],
            [3, "activate"],
            ["mat-icon-button", "", "fxHide.lt-md", "", 3, "fxShow", "click"],
            [
              "color",
              "warn",
              "mode",
              "indeterminate",
              2,
              "z-index",
              "10",
              "margin-bottom",
              "-4px",
              "width",
              "100%",
            ],
          ],
          template: function (q, Y) {
            if (1 & q) {
              const he = n.ɵɵgetCurrentView();
              n.ɵɵelementStart(0, "mat-sidenav-container"),
                n.ɵɵelementStart(1, "mat-sidenav", 0, 1),
                n.ɵɵlistener("click", function () {
                  return Y.sidenavClicked();
                }),
                n.ɵɵelementStart(3, "header", 2),
                n.ɵɵelementStart(4, "mat-toolbar", 3),
                n.ɵɵelementStart(5, "div", 4),
                n.ɵɵelement(6, "img", 5),
                n.ɵɵelementEnd(),
                n.ɵɵelementEnd(),
                n.ɵɵelementEnd(),
                n.ɵɵelementStart(7, "mat-toolbar", 6),
                n.ɵɵelement(8, "tb-side-menu"),
                n.ɵɵelementEnd(),
                n.ɵɵelementEnd(),
                n.ɵɵelementStart(9, "mat-sidenav-content"),
                n.ɵɵelementStart(10, "div", 7),
                n.ɵɵelementStart(11, "mat-toolbar", 8),
                n.ɵɵelementStart(12, "button", 9),
                n.ɵɵlistener("click", function () {
                  return n.ɵɵrestoreView(he), n.ɵɵreference(2).toggle();
                }),
                n.ɵɵelementStart(13, "mat-icon", 10),
                n.ɵɵtext(14, "menu"),
                n.ɵɵelementEnd(),
                n.ɵɵelementEnd(),
                n.ɵɵelementStart(15, "button", 11),
                n.ɵɵlistener("click", function () {
                  return Y.goBack();
                }),
                n.ɵɵelementStart(16, "mat-icon", 10),
                n.ɵɵtext(17, "arrow_back"),
                n.ɵɵelementEnd(),
                n.ɵɵelementEnd(),
                n.ɵɵelementStart(18, "button", 12),
                n.ɵɵlistener("click", function () {
                  return Y.closeSearch();
                }),
                n.ɵɵelementStart(19, "mat-icon", 10),
                n.ɵɵtext(20, "arrow_back"),
                n.ɵɵelementEnd(),
                n.ɵɵelementEnd(),
                n.ɵɵelement(21, "tb-breadcrumb", 13),
                n.ɵɵelementStart(22, "div", 14),
                n.ɵɵelementStart(23, "mat-form-field", 15),
                n.ɵɵelement(24, "mat-label"),
                n.ɵɵelementStart(25, "input", 16, 17),
                n.ɵɵlistener("ngModelChange", function (Ie) {
                  return (Y.searchText = Ie);
                }),
                n.ɵɵpipe(27, "translate"),
                n.ɵɵelementEnd(),
                n.ɵɵelementEnd(),
                n.ɵɵelementEnd(),
                n.ɵɵelementStart(28, "button", 18),
                n.ɵɵlistener("click", function () {
                  return Y.openSearch();
                }),
                n.ɵɵelementStart(29, "mat-icon", 10),
                n.ɵɵtext(30, "search"),
                n.ɵɵelementEnd(),
                n.ɵɵelementEnd(),
                n.ɵɵtemplate(31, Xt, 3, 2, "button", 19),
                n.ɵɵelement(32, "tb-user-menu", 20),
                n.ɵɵelementEnd(),
                n.ɵɵtemplate(33, Zt, 1, 0, "mat-progress-bar", 21),
                n.ɵɵpipe(34, "async"),
                n.ɵɵelementStart(35, "div", 22),
                n.ɵɵelementStart(36, "router-outlet", 23),
                n.ɵɵlistener("activate", function (Ie) {
                  return Y.activeComponentChanged(Ie);
                }),
                n.ɵɵelementEnd(),
                n.ɵɵelementEnd(),
                n.ɵɵelementEnd(),
                n.ɵɵelementEnd(),
                n.ɵɵelementEnd();
            }
            2 & q &&
              (n.ɵɵadvance(1),
              n.ɵɵproperty("disableClose", Y.sidenavOpened)(
                "mode",
                Y.sidenavMode
              )("opened", Y.sidenavOpened && !Y.forceFullscreen),
              n.ɵɵadvance(5),
              n.ɵɵproperty("src", Y.logo, n.ɵɵsanitizeUrl),
              n.ɵɵadvance(6),
              n.ɵɵproperty("fxShow", !Y.forceFullscreen)(
                "ngClass",
                n.ɵɵpureFunction1(22, Pt, Y.displaySearchMode())
              ),
              n.ɵɵadvance(3),
              n.ɵɵproperty("fxShow", Y.forceFullscreen)(
                "ngClass",
                n.ɵɵpureFunction1(24, Pt, Y.displaySearchMode())
              ),
              n.ɵɵadvance(3),
              n.ɵɵproperty(
                "ngClass",
                n.ɵɵpureFunction1(26, Pt, !Y.displaySearchMode())
              ),
              n.ɵɵadvance(3),
              n.ɵɵproperty("fxShow", !Y.displaySearchMode())(
                "activeComponent",
                Y.activeComponent
              ),
              n.ɵɵadvance(1),
              n.ɵɵproperty("fxShow", Y.displaySearchMode()),
              n.ɵɵadvance(3),
              n.ɵɵpropertyInterpolate(
                "placeholder",
                n.ɵɵpipeBind1(27, 18, "common.enter-search")
              ),
              n.ɵɵproperty("ngModel", Y.searchText),
              n.ɵɵadvance(3),
              n.ɵɵproperty("fxShow", Y.searchEnabled),
              n.ɵɵadvance(3),
              n.ɵɵproperty("ngIf", Y.fullscreenEnabled),
              n.ɵɵadvance(1),
              n.ɵɵproperty("displayUserInfo", !Y.displaySearchMode()),
              n.ɵɵadvance(1),
              n.ɵɵproperty("ngIf", n.ɵɵpipeBind1(34, 20, Y.isLoading$)));
          },
          directives: [
            Mt.MatSidenavContainer,
            Mt.MatSidenav,
            Kt.MatToolbar,
            h.DefaultFlexDirective,
            h.DefaultLayoutDirective,
            Xe,
            Mt.MatSidenavContent,
            O.MatButton,
            Le.DefaultShowHideDirective,
            i.NgClass,
            Le.DefaultClassDirective,
            l.MatIcon,
            At.BreadcrumbComponent,
            c.MatFormField,
            c.MatLabel,
            I.MatInput,
            r.DefaultValueAccessor,
            r.NgControlStatus,
            r.NgModel,
            i.NgIf,
            Ot.UserMenuComponent,
            E.ToastDirective,
            C.RouterOutlet,
            w.MatProgressBar,
          ],
          pipes: [v.TranslatePipe, i.AsyncPipe],
          styles: [
            '@charset "UTF-8";[_nghost-%COMP%]{display:flex;width:100%;height:100%}[_nghost-%COMP%]   .tb-invisible[_ngcontent-%COMP%]{display:none!important}[_nghost-%COMP%]   mat-sidenav-container[_ngcontent-%COMP%]{flex:1}[_nghost-%COMP%]   mat-sidenav.tb-site-sidenav[_ngcontent-%COMP%]{width:250px}@media (max-width: 456px){[_nghost-%COMP%]   mat-sidenav.tb-site-sidenav[_ngcontent-%COMP%]{width:calc(100% - 56px)}}[_nghost-%COMP%]   mat-sidenav.tb-site-sidenav[_ngcontent-%COMP%]   .tb-nav-header[_ngcontent-%COMP%]{z-index:2;flex-shrink:0;white-space:nowrap}[_nghost-%COMP%]   mat-sidenav.tb-site-sidenav[_ngcontent-%COMP%]   .tb-nav-header[_ngcontent-%COMP%]   .tb-nav-header-toolbar[_ngcontent-%COMP%]{min-height:64px;height:inherit;padding:0;z-index:2;flex-shrink:0;white-space:nowrap;border-bottom:1px solid rgba(0,0,0,.12)}[_nghost-%COMP%]   mat-sidenav.tb-site-sidenav[_ngcontent-%COMP%]   .tb-nav-header[_ngcontent-%COMP%]   .tb-nav-header-toolbar[_ngcontent-%COMP%] > div[_ngcontent-%COMP%]{height:64px}[_nghost-%COMP%]   mat-sidenav.tb-site-sidenav[_ngcontent-%COMP%]   .tb-nav-header[_ngcontent-%COMP%]   .tb-nav-header-toolbar[_ngcontent-%COMP%] > div[_ngcontent-%COMP%]   .tb-logo-title[_ngcontent-%COMP%]{width:auto;max-width:100%;height:36px;max-height:100%;margin:auto}[_nghost-%COMP%]   mat-sidenav.tb-site-sidenav[_ngcontent-%COMP%]   .tb-side-menu-toolbar[_ngcontent-%COMP%]{overflow-y:auto;height:inherit;padding:0}[_nghost-%COMP%]   .tb-primary-toolbar[_ngcontent-%COMP%]{z-index:2}[_nghost-%COMP%]   .tb-primary-toolbar[_ngcontent-%COMP%]   h1[_ngcontent-%COMP%]{font-size:24px!important;font-weight:400!important}[_nghost-%COMP%]   .tb-main-content[_ngcontent-%COMP%]{overflow:auto;position:relative}',
          ],
        }));
      const St = [
        {
          path: "",
          component: at,
          data: { title: "home.home", breadcrumb: { skip: !0 } },
          canActivate: [K],
          canActivateChild: [K],
          loadChildren: () =>
            Promise.all([t.e(6610), t.e(2202)])
              .then(t.bind(t, 12202))
              .then((ae) => ae.HomePagesModule),
        },
      ];
      class Ge {}
      (Ge.ɵfac = function (q) {
        return new (q || Ge)();
      }),
        (Ge.ɵmod = n.ɵɵdefineNgModule({ type: Ge })),
        (Ge.ɵinj = n.ɵɵdefineInjector({
          imports: [
            [m.StoreModule, C.RouterModule.forChild(St)],
            C.RouterModule,
          ],
        })),
        ("undefined" == typeof ngJitMode || ngJitMode) &&
          n.ɵɵsetNgModuleScope(Ge, {
            imports: [m.StoreModule, C.RouterModule],
            exports: [C.RouterModule],
          });
      class Fe {}
      (Fe.ɵfac = function (q) {
        return new (q || Fe)();
      }),
        (Fe.ɵmod = n.ɵɵdefineNgModule({ type: Fe })),
        (Fe.ɵinj = n.ɵɵdefineInjector({
          imports: [[i.CommonModule, ie.m, Ge]],
        })),
        ("undefined" == typeof ngJitMode || ngJitMode) &&
          n.ɵɵsetNgModuleScope(Fe, {
            declarations: [at, Je, ot, Xe],
            imports: [i.CommonModule, ie.m, Ge],
          });
      t(11524);
      var He = t(92340),
        qt = t(97316),
        Ut = t(9112),
        xt = t(45435),
        en = t(13653),
        tn = t(5609);
      class Ze {
        constructor(q, Y, he, ve, Ie, Ue) {
          (this.store = q),
            (this.storageService = Y),
            (this.translate = he),
            (this.matIconRegistry = ve),
            (this.domSanitizer = Ie),
            (this.authService = Ue),
            console.log(`ThingsBoard Version: ${He.N.tbVersion}`),
            this.matIconRegistry.addSvgIconSetInNamespace(
              "mdi",
              this.domSanitizer.bypassSecurityTrustResourceUrl(
                "./assets/mdi.svg"
              )
            ),
            this.matIconRegistry.addSvgIconLiteral(
              "google-logo",
              this.domSanitizer.bypassSecurityTrustHtml(
                '<svg viewBox="0 0 48 48"><path fill="#EA4335" d="M24 9.5c3.54 0 6.71 1.22 9.21 3.6l6.85-6.85C35.9 2.38 30.47 0 24 0 14.62 0 6.51 5.38 2.56 13.22l7.98 6.19C12.43 13.72 17.74 9.5 24 9.5z"/><path fill="#4285F4" d="M46.98 24.55c0-1.57-.15-3.09-.38-4.55H24v9.02h12.94c-.58 2.96-2.26 5.48-4.78 7.18l7.73 6c4.51-4.18 7.09-10.36 7.09-17.65z"/><path fill="#FBBC05" d="M10.53 28.59c-.48-1.45-.76-2.99-.76-4.59s.27-3.14.76-4.59l-7.98-6.19C.92 16.46 0 20.12 0 24c0 3.88.92 7.54 2.56 10.78l7.97-6.19z"/><path fill="#34A853" d="M24 48c6.48 0 11.93-2.13 15.89-5.81l-7.73-6c-2.15 1.45-4.92 2.3-8.16 2.3-6.26 0-11.57-4.22-13.47-9.91l-7.98 6.19C6.51 42.62 14.62 48 24 48z"/><path fill="none" d="M0 0h48v48H0z"/></svg>'
              )
            ),
            this.matIconRegistry.addSvgIconLiteral(
              "github-logo",
              this.domSanitizer.bypassSecurityTrustHtml(
                '<svg viewBox="0 0 32.7 32.7"><path d="M16.3 0C7.3 0 0 7.3 0 16.3c0 7.2 4.7 13.3 11.1 15.5.8.1 1.1-.4 1.1-.8v-2.8c-4.5 1-5.5-2.2-5.5-2.2-.7-1.9-1.8-2.4-1.8-2.4-1.5-1 .1-1 .1-1 1.6.1 2.5 1.7 2.5 1.7 1.5 2.5 3.8 1.8 4.7 1.4.1-1.1.6-1.8 1-2.2-3.6-.4-7.4-1.8-7.4-8.1 0-1.8.6-3.2 1.7-4.4-.2-.4-.7-2.1.2-4.3 0 0 1.4-.4 4.5 1.7 1.3-.4 2.7-.5 4.1-.5s2.8.2 4.1.5c3.1-2.1 4.5-1.7 4.5-1.7.9 2.2.3 3.9.2 4.3 1 1.1 1.7 2.6 1.7 4.4 0 6.3-3.8 7.6-7.4 8 .6.5 1.1 1.5 1.1 3v4.5c0 .4.3.9 1.1.8 6.5-2.2 11.1-8.3 11.1-15.5C32.6 7.3 25.3 0 16.3 0z" fill="#211c19"/></svg>'
              )
            ),
            this.matIconRegistry.addSvgIconLiteral(
              "facebook-logo",
              this.domSanitizer.bypassSecurityTrustHtml(
                '<svg viewBox="0 0 263 263"><path d="M263 131.5C263 58.9 204.1 0 131.5 0S0 58.9 0 131.5c0 65.6 48.1 120 110.9 129.9v-91.9H77.5v-38h33.4v-29c0-33 19.6-51.2 49.7-51.2 14.4 0 29.4 2.6 29.4 2.6v32.4h-16.5c-16.3 0-21.4 10.1-21.4 20.5v24.7h36.4l-5.8 38h-30.6v91.9c62.8-9.9 110.9-64.3 110.9-129.9z" fill="#1877f2"/><path d="M182.7 169.5l5.8-38H152v-24.7c0-10.4 5.1-20.5 21.4-20.5H190V53.9s-15-2.6-29.4-2.6c-30 0-49.7 18.2-49.7 51.2v29H77.5v38h33.4v91.9c6.7 1.1 13.6 1.6 20.5 1.6s13.9-.5 20.5-1.6v-91.9h30.8z" fill="#fff"/></svg>'
              )
            ),
            this.matIconRegistry.addSvgIconLiteral(
              "apple-logo",
              this.domSanitizer.bypassSecurityTrustHtml(
                '<svg viewBox="0 0 256 315"><path d="M213.803394,167.030943 C214.2452,214.609646 255.542482,230.442639 256,230.644727 C255.650812,231.761357 249.401383,253.208293 234.24263,275.361446 C221.138555,294.513969 207.538253,313.596333 186.113759,313.991545 C165.062051,314.379442 158.292752,301.507828 134.22469,301.507828 C110.163898,301.507828 102.642899,313.596301 82.7151126,314.379442 C62.0350407,315.16201 46.2873831,293.668525 33.0744079,274.586162 C6.07529317,235.552544 -14.5576169,164.286328 13.147166,116.18047 C26.9103111,92.2909053 51.5060917,77.1630356 78.2026125,76.7751096 C98.5099145,76.3877456 117.677594,90.4371851 130.091705,90.4371851 C142.497945,90.4371851 165.790755,73.5415029 190.277627,76.0228474 C200.528668,76.4495055 229.303509,80.1636878 247.780625,107.209389 C246.291825,108.132333 213.44635,127.253405 213.803394,167.030988 M174.239142,50.1987033 C185.218331,36.9088319 192.607958,18.4081019 190.591988,0 C174.766312,0.636050225 155.629514,10.5457909 144.278109,23.8283506 C134.10507,35.5906758 125.195775,54.4170275 127.599657,72.4607932 C145.239231,73.8255433 163.259413,63.4970262 174.239142,50.1987249" fill="#000000"></path></svg>'
              )
            ),
            this.matIconRegistry.addSvgIconLiteral(
              "queues-list",
              this.domSanitizer.bypassSecurityTrustHtml(
                '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path fill="#fff" d="M9 4V2H4a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h5v-2H4V4h5z"/><path fill="#fff" d="M7 18V6h2v12H7zM11 6v12h2V6h-2zM15 20v2h5a2 2 0 0 0 2-2V4a2 2 0 0 0-2-2h-5v2h5v16h-5z"/><path fill="#fff" d="M15 18V6h2v12h-2z"/></svg>'
              )
            ),
            this.storageService.testLocalStorage(),
            this.setupTranslate(),
            this.setupAuth();
        }
        setupTranslate() {
          He.N.production ||
            console.log(`Supported Langs: ${He.N.supportedLangs}`),
            this.translate.addLangs(He.N.supportedLangs),
            He.N.production || console.log(`Default Lang: ${He.N.defaultLang}`),
            this.translate.setDefaultLang(He.N.defaultLang);
        }
        setupAuth() {
          (0, Ut.aj)([
            this.store.pipe((0, m.select)(B.vN)),
            this.store.pipe((0, m.select)(B.To)),
          ])
            .pipe(
              (0, P.U)((q) => ({ isAuthenticated: q[0], isUserLoaded: q[1] })),
              (0, ye.x)(),
              (0, xt.h)((q) => q.isUserLoaded),
              (0, en.T)(1)
            )
            .subscribe((q) => {
              this.authService.gotoDefaultPlace(q.isAuthenticated);
            }),
            this.authService.reloadUser();
        }
        ngOnInit() {}
        onActivateComponent(q) {
          const Y = tn("div#tb-loading-spinner");
          Y.length && Y.remove();
        }
      }
      (Ze.ɵfac = function (q) {
        return new (q || Ze)(
          n.ɵɵdirectiveInject(m.Store),
          n.ɵɵdirectiveInject(qt.n),
          n.ɵɵdirectiveInject(v.TranslateService),
          n.ɵɵdirectiveInject(l.MatIconRegistry),
          n.ɵɵdirectiveInject(e.DomSanitizer),
          n.ɵɵdirectiveInject(g.e)
        );
      }),
        (Ze.ɵcmp = n.ɵɵdefineComponent({
          type: Ze,
          selectors: [["tb-root"]],
          decls: 1,
          vars: 0,
          consts: [[3, "activate"]],
          template: function (q, Y) {
            1 & q &&
              (n.ɵɵelementStart(0, "router-outlet", 0),
              n.ɵɵlistener("activate", function (ve) {
                return Y.onActivateComponent(ve);
              }),
              n.ɵɵelementEnd());
          },
          directives: [C.RouterOutlet],
          styles: ['@charset "UTF-8";'],
        }));
      const nn = [
        {
          path: "",
          data: { title: "dashboard.dashboard", breadcrumb: { skip: !0 } },
          canActivate: [K],
          canActivateChild: [K],
          loadChildren: () =>
            Promise.all([t.e(6610), t.e(5413)])
              .then(t.bind(t, 45413))
              .then((ae) => ae.DashboardPagesModule),
        },
      ];
      class We {}
      (We.ɵfac = function (q) {
        return new (q || We)();
      }),
        (We.ɵmod = n.ɵɵdefineNgModule({ type: We })),
        (We.ɵinj = n.ɵɵdefineInjector({
          imports: [
            [m.StoreModule, C.RouterModule.forChild(nn)],
            C.RouterModule,
          ],
        })),
        ("undefined" == typeof ngJitMode || ngJitMode) &&
          n.ɵɵsetNgModuleScope(We, {
            imports: [m.StoreModule, C.RouterModule],
            exports: [C.RouterModule],
          });
      class ze {}
      (ze.ɵfac = function (q) {
        return new (q || ze)();
      }),
        (ze.ɵmod = n.ɵɵdefineNgModule({ type: ze })),
        (ze.ɵinj = n.ɵɵdefineInjector({
          imports: [
            [C.RouterModule.forChild([{ path: "**", redirectTo: "home" }])],
            C.RouterModule,
          ],
        })),
        ("undefined" == typeof ngJitMode || ngJitMode) &&
          n.ɵɵsetNgModuleScope(ze, {
            imports: [C.RouterModule],
            exports: [C.RouterModule],
          });
      class Ve {}
      (Ve.ɵfac = function (q) {
        return new (q || Ve)();
      }),
        (Ve.ɵmod = n.ɵɵdefineNgModule({ type: Ve, bootstrap: [Ze] })),
        (Ve.ɵinj = n.ɵɵdefineInjector({
          providers: [],
          imports: [
            [
              e.BrowserModule,
              a.BrowserAnimationsModule,
              d,
              o.I,
              ce,
              Fe,
              We,
              ze,
            ],
          ],
        })),
        ("undefined" == typeof ngJitMode || ngJitMode) &&
          n.ɵɵsetNgModuleScope(Ve, {
            declarations: [Ze],
            imports: [
              e.BrowserModule,
              a.BrowserAnimationsModule,
              d,
              o.I,
              ce,
              Fe,
              We,
              ze,
            ],
          }),
        He.N.production && (0, n.enableProdMode)(),
        e
          .platformBrowser()
          .bootstrapModule(Ve)
          .catch((ae) => console.error(ae));
    },
  },
  (ee) => {
    ee.O(0, [4736], () => {
      return (e = 67251), ee((ee.s = e));
      var e;
    });
    ee.O();
  },
]);
